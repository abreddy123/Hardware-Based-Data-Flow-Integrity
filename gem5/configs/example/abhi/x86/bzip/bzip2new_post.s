	.text
	.file	"llvm-link"
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function ran
.LCPI0_0:
	.long	805306368               # float 4.65661287E-10
	.text
	.globl	ran
	.p2align	4, 0x90
	.type	ran,@function
ran:                                    # @ran
	.cfi_startproc
# %bb.0:                                # %entry
	movss	.LCPI0_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movl	$127773, %eax           # imm = 0x1F31D
	movl	%eax, %ecx
	movl	$9999, -4(%rsp)         # imm = 0x270F
	movq	seedi, %rdx
	movl	$262, -4(%rsp)          # imm = 0x106
	movq	%rdx, %rax
	movq	%rdx, -16(%rsp)         # 8-byte Spill
	cqto
	idivq	%rcx
	movq	-16(%rsp), %rsi         # 8-byte Reload
	movq	%rax, -24(%rsp)         # 8-byte Spill
	movq	%rsi, %rax
	cqto
	idivq	%rcx
	imulq	$16807, %rdx, %rcx      # imm = 0x41A7
	movq	-24(%rsp), %rdx         # 8-byte Reload
	imulq	$-2836, %rdx, %rdx      # imm = 0xF4EC
	addq	%rdx, %rcx
	movq	%rcx, %rdx
	addq	$2147483647, %rdx       # imm = 0x7FFFFFFF
	cmpq	$0, %rcx
	cmovgq	%rcx, %rdx
	movq	%rdx, seedi
	movl	$264, -4(%rsp)          # imm = 0x108
	cvtsi2ssq	%rdx, %xmm1
	mulss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	retq
.Lfunc_end0:
	.size	ran, .Lfunc_end0-ran
	.cfi_endproc
                                        # -- End function
	.globl	spec_init               # -- Begin function spec_init
	.p2align	4, 0x90
	.type	spec_init,@function
spec_init:                              # @spec_init
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$264, %rsp              # imm = 0x108
	.cfi_def_cfa_offset 272
	movl	$9999, 260(%rsp)        # imm = 0x270F
	movl	dbglvl, %eax
	movl	$280, 260(%rsp)         # imm = 0x118
	cmpl	$3, %eax
	jle	.LBB1_2
# %bb.1:                                # %if.then
	movabsq	$.Lstr.34, %rdi
	callq	puts
	movl	%eax, 256(%rsp)         # 4-byte Spill
.LBB1_2:                                # %if.end
	movabsq	$spec_fd, %rax
	xorl	%esi, %esi
	movl	$16, %ecx
	movl	%ecx, %edx
	movl	spec_fd, %ecx
	movl	$289, 260(%rsp)         # imm = 0x121
	movq	%rax, %rdi
	movl	%ecx, 252(%rsp)         # 4-byte Spill
	callq	memset
	movl	252(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, spec_fd
	movl	$297, 260(%rsp)         # imm = 0x129
	addl	$1048576, %ecx          # imm = 0x100000
	movslq	%ecx, %rdi
	callq	malloc
	movq	%rax, spec_fd+16
	movl	$309, 260(%rsp)         # imm = 0x135
	cmpq	$0, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	jne	.LBB1_4
.LBB1_3:                                # %if.then16
	movabsq	$.Lstr, %rdi
	callq	puts
	xorl	%edi, %edi
	movl	%eax, 236(%rsp)         # 4-byte Spill
	callq	exit
.LBB1_4:                                # %if.end18
	movl	252(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB1_12
# %bb.5:                                # %for.body22.lr.ph
	movq	240(%rsp), %rax         # 8-byte Reload
	movb	$0, (%rax)
	movl	$327, 260(%rsp)         # imm = 0x147
	movl	252(%rsp), %ecx         # 4-byte Reload
	cmpl	$1024, %ecx             # imm = 0x400
	jle	.LBB1_12
# %bb.6:                                # %for.body22.for.body22_crit_edge.preheader
	movl	$1024, %eax             # imm = 0x400
	movl	%eax, %ecx
	movl	252(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rdx
	addq	$-1025, %rdx            # imm = 0xFBFF
	movq	%rdx, %rsi
	shrq	$10, %rsi
	addq	$1, %rsi
	movq	%rsi, %rdi
	andq	$3, %rdi
	cmpq	$3072, %rdx             # imm = 0xC00
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	movq	%rdi, 216(%rsp)         # 8-byte Spill
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	jb	.LBB1_9
# %bb.7:                                # %for.body22.for.body22_crit_edge.preheader.new
	movl	$1024, %eax             # imm = 0x400
	movl	%eax, %ecx
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	subq	%rsi, %rdx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movq	%rdx, 192(%rsp)         # 8-byte Spill
.LBB1_8:                                # %for.body22.for.body22_crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	spec_fd+16, %rdx
	movl	$329, 260(%rsp)         # imm = 0x149
	movb	$0, (%rdx,%rcx)
	movl	$332, 260(%rsp)         # imm = 0x14C
	movq	spec_fd+16, %rdx
	movl	$334, 260(%rsp)         # imm = 0x14E
	movb	$0, 1024(%rdx,%rcx)
	movl	$337, 260(%rsp)         # imm = 0x151
	movq	spec_fd+16, %rdx
	movl	$339, 260(%rsp)         # imm = 0x153
	movb	$0, 2048(%rdx,%rcx)
	movl	$342, 260(%rsp)         # imm = 0x156
	movq	spec_fd+16, %rdx
	movl	$344, 260(%rsp)         # imm = 0x158
	movb	$0, 3072(%rdx,%rcx)
	movl	$356, 260(%rsp)         # imm = 0x164
	addq	$4096, %rcx             # imm = 0x1000
	addq	$-4, %rax
	cmpq	$0, %rax
	movq	%rcx, %rdx
	movq	%rax, 192(%rsp)         # 8-byte Spill
	movq	%rdx, 200(%rsp)         # 8-byte Spill
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	jne	.LBB1_8
.LBB1_9:                                # %for.end.loopexit.unr-lcssa
	movq	208(%rsp), %rax         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	cmpq	$0, %rcx
	movq	%rax, 184(%rsp)         # 8-byte Spill
	je	.LBB1_12
# %bb.10:                               # %for.body22.for.body22_crit_edge.epil.preheader
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	jmp	.LBB1_11
.LBB1_11:                               # %for.body22.for.body22_crit_edge.epil
                                        # =>This Inner Loop Header: Depth=1
	movq	168(%rsp), %rax         # 8-byte Reload
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	spec_fd+16, %rdx
	movl	$358, 260(%rsp)         # imm = 0x166
	movb	$0, (%rdx,%rcx)
	movl	$362, 260(%rsp)         # imm = 0x16A
	addq	$1024, %rcx             # imm = 0x400
	addq	$-1, %rax
	cmpq	$0, %rax
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movq	%rax, 168(%rsp)         # 8-byte Spill
	jne	.LBB1_11
.LBB1_12:                               # %for.end
	xorl	%esi, %esi
	movl	$16, %eax
	movl	%eax, %edx
	movabsq	$spec_fd, %rcx
	movl	spec_fd+24, %eax
	movl	$368, 260(%rsp)         # imm = 0x170
	addq	$24, %rcx
	movq	%rcx, %rdi
	movl	%eax, 164(%rsp)         # 4-byte Spill
	callq	memset
	movl	164(%rsp), %eax         # 4-byte Reload
	movl	%eax, spec_fd+24
	movl	$374, 260(%rsp)         # imm = 0x176
	addl	$1048576, %eax          # imm = 0x100000
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, spec_fd+40
	movl	$379, 260(%rsp)         # imm = 0x17B
	cmpq	$0, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	je	.LBB1_3
# %bb.13:                               # %if.end18.1
	movl	164(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB1_21
# %bb.14:                               # %for.body22.lr.ph.1
	movq	152(%rsp), %rax         # 8-byte Reload
	movb	$0, (%rax)
	movl	$396, 260(%rsp)         # imm = 0x18C
	movl	164(%rsp), %ecx         # 4-byte Reload
	cmpl	$1024, %ecx             # imm = 0x400
	jle	.LBB1_21
# %bb.15:                               # %for.body22.1.for.body22.1_crit_edge.preheader
	movl	$1024, %eax             # imm = 0x400
	movl	%eax, %ecx
	movl	164(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rdx
	addq	$-1025, %rdx            # imm = 0xFBFF
	movq	%rdx, %rsi
	shrq	$10, %rsi
	addq	$1, %rsi
	movq	%rsi, %rdi
	andq	$3, %rdi
	cmpq	$3072, %rdx             # imm = 0xC00
	movq	%rsi, 144(%rsp)         # 8-byte Spill
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	jb	.LBB1_18
# %bb.16:                               # %for.body22.1.for.body22.1_crit_edge.preheader.new
	movl	$1024, %eax             # imm = 0x400
	movl	%eax, %ecx
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	136(%rsp), %rsi         # 8-byte Reload
	subq	%rsi, %rdx
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	movq	%rdx, 112(%rsp)         # 8-byte Spill
.LBB1_17:                               # %for.body22.1.for.body22.1_crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	spec_fd+40, %rdx
	movl	$398, 260(%rsp)         # imm = 0x18E
	movb	$0, (%rdx,%rcx)
	movl	$401, 260(%rsp)         # imm = 0x191
	movq	spec_fd+40, %rdx
	movl	$403, 260(%rsp)         # imm = 0x193
	movb	$0, 1024(%rdx,%rcx)
	movl	$406, 260(%rsp)         # imm = 0x196
	movq	spec_fd+40, %rdx
	movl	$408, 260(%rsp)         # imm = 0x198
	movb	$0, 2048(%rdx,%rcx)
	movl	$411, 260(%rsp)         # imm = 0x19B
	movq	spec_fd+40, %rdx
	movl	$413, 260(%rsp)         # imm = 0x19D
	movb	$0, 3072(%rdx,%rcx)
	movl	$425, 260(%rsp)         # imm = 0x1A9
	addq	$4096, %rcx             # imm = 0x1000
	addq	$-4, %rax
	cmpq	$0, %rax
	movq	%rcx, %rdx
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	jne	.LBB1_17
.LBB1_18:                               # %for.end.1.loopexit.unr-lcssa
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	136(%rsp), %rcx         # 8-byte Reload
	cmpq	$0, %rcx
	movq	%rax, 104(%rsp)         # 8-byte Spill
	je	.LBB1_21
# %bb.19:                               # %for.body22.1.for.body22.1_crit_edge.epil.preheader
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	136(%rsp), %rcx         # 8-byte Reload
	movq	%rax, 96(%rsp)          # 8-byte Spill
	movq	%rcx, 88(%rsp)          # 8-byte Spill
	jmp	.LBB1_20
.LBB1_20:                               # %for.body22.1.for.body22.1_crit_edge.epil
                                        # =>This Inner Loop Header: Depth=1
	movq	88(%rsp), %rax          # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	spec_fd+40, %rdx
	movl	$427, 260(%rsp)         # imm = 0x1AB
	movb	$0, (%rdx,%rcx)
	movl	$431, 260(%rsp)         # imm = 0x1AF
	addq	$1024, %rcx             # imm = 0x400
	addq	$-1, %rax
	cmpq	$0, %rax
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	movq	%rax, 88(%rsp)          # 8-byte Spill
	jne	.LBB1_20
.LBB1_21:                               # %for.end.1
	xorl	%esi, %esi
	movl	$16, %eax
	movl	%eax, %edx
	movabsq	$spec_fd, %rcx
	movl	spec_fd+48, %eax
	movl	$436, 260(%rsp)         # imm = 0x1B4
	addq	$48, %rcx
	movq	%rcx, %rdi
	movl	%eax, 84(%rsp)          # 4-byte Spill
	callq	memset
	movl	84(%rsp), %eax          # 4-byte Reload
	movl	%eax, spec_fd+48
	movl	$442, 260(%rsp)         # imm = 0x1BA
	addl	$1048576, %eax          # imm = 0x100000
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, spec_fd+64
	movl	$447, 260(%rsp)         # imm = 0x1BF
	cmpq	$0, %rax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	je	.LBB1_3
# %bb.22:                               # %if.end18.2
	movl	84(%rsp), %eax          # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB1_30
# %bb.23:                               # %for.body22.lr.ph.2
	movq	72(%rsp), %rax          # 8-byte Reload
	movb	$0, (%rax)
	movl	$464, 260(%rsp)         # imm = 0x1D0
	movl	84(%rsp), %ecx          # 4-byte Reload
	cmpl	$1024, %ecx             # imm = 0x400
	jle	.LBB1_30
# %bb.24:                               # %for.body22.2.for.body22.2_crit_edge.preheader
	movl	$1024, %eax             # imm = 0x400
	movl	%eax, %ecx
	movl	84(%rsp), %eax          # 4-byte Reload
	movslq	%eax, %rdx
	addq	$-1025, %rdx            # imm = 0xFBFF
	movq	%rdx, %rsi
	shrq	$10, %rsi
	addq	$1, %rsi
	movq	%rsi, %rdi
	andq	$3, %rdi
	cmpq	$3072, %rdx             # imm = 0xC00
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	jb	.LBB1_27
# %bb.25:                               # %for.body22.2.for.body22.2_crit_edge.preheader.new
	movl	$1024, %eax             # imm = 0x400
	movl	%eax, %ecx
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	subq	%rsi, %rdx
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%rdx, 32(%rsp)          # 8-byte Spill
.LBB1_26:                               # %for.body22.2.for.body22.2_crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	spec_fd+64, %rdx
	movl	$466, 260(%rsp)         # imm = 0x1D2
	movb	$0, (%rdx,%rcx)
	movl	$469, 260(%rsp)         # imm = 0x1D5
	movq	spec_fd+64, %rdx
	movl	$471, 260(%rsp)         # imm = 0x1D7
	movb	$0, 1024(%rdx,%rcx)
	movl	$474, 260(%rsp)         # imm = 0x1DA
	movq	spec_fd+64, %rdx
	movl	$476, 260(%rsp)         # imm = 0x1DC
	movb	$0, 2048(%rdx,%rcx)
	movl	$479, 260(%rsp)         # imm = 0x1DF
	movq	spec_fd+64, %rdx
	movl	$481, 260(%rsp)         # imm = 0x1E1
	movb	$0, 3072(%rdx,%rcx)
	movl	$493, 260(%rsp)         # imm = 0x1ED
	addq	$4096, %rcx             # imm = 0x1000
	addq	$-4, %rax
	cmpq	$0, %rax
	movq	%rcx, %rdx
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	jne	.LBB1_26
.LBB1_27:                               # %for.end.2.loopexit.unr-lcssa
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	cmpq	$0, %rcx
	movq	%rax, 24(%rsp)          # 8-byte Spill
	je	.LBB1_30
# %bb.28:                               # %for.body22.2.for.body22.2_crit_edge.epil.preheader
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	jmp	.LBB1_29
.LBB1_29:                               # %for.body22.2.for.body22.2_crit_edge.epil
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	spec_fd+64, %rdx
	movl	$495, 260(%rsp)         # imm = 0x1EF
	movb	$0, (%rdx,%rcx)
	movl	$511, 260(%rsp)         # imm = 0x1FF
	addq	$1024, %rcx             # imm = 0x400
	addq	$-1, %rax
	cmpq	$0, %rax
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%rax, 8(%rsp)           # 8-byte Spill
	jne	.LBB1_29
.LBB1_30:                               # %for.end.2
	xorl	%eax, %eax
	addq	$264, %rsp              # imm = 0x108
	retq
.Lfunc_end1:
	.size	spec_init, .Lfunc_end1-spec_init
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function spec_random_load
.LCPI2_0:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI2_1:
	.long	805306368               # float 4.65661287E-10
	.text
	.globl	spec_random_load
	.p2align	4, 0x90
	.type	spec_random_load,@function
spec_random_load:                       # @spec_random_load
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$4194472, %rsp          # imm = 0x4000A8
	.cfi_def_cfa_offset 4194480
	leaq	160(%rsp), %rax
	movl	$9999, 4194468(%rsp)    # imm = 0x270F
	movl	dbglvl, %ecx
	movl	$527, 4194468(%rsp)     # imm = 0x20F
	cmpl	$4, %ecx
	movl	%edi, 156(%rsp)         # 4-byte Spill
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movl	%ecx, 140(%rsp)         # 4-byte Spill
	jle	.LBB2_2
# %bb.1:                                # %if.then
	movabsq	$.Lstr.36, %rdi
	callq	puts
	movl	dbglvl, %ecx
	movl	$544, 4194468(%rsp)     # imm = 0x220
	movl	%eax, 136(%rsp)         # 4-byte Spill
	movl	%ecx, 140(%rsp)         # 4-byte Spill
.LBB2_2:                                # %for.body.preheader
	movl	140(%rsp), %eax         # 4-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	%rdx, 128(%rsp)         # 8-byte Spill
	movl	%eax, 124(%rsp)         # 4-byte Spill
.LBB2_3:                                # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_6 Depth 2
	movl	124(%rsp), %eax         # 4-byte Reload
	movq	128(%rsp), %rcx         # 8-byte Reload
	cmpl	$5, %eax
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	jle	.LBB2_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB2_3 Depth=1
	movabsq	$.L.str.3, %rdi
	movq	112(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, %esi
	movb	$0, %al
	callq	printf
	movl	%eax, 108(%rsp)         # 4-byte Spill
.LBB2_5:                                # %if.end5
                                        #   in Loop: Header=BB2_3 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	seedi, %rdx
	movl	$548, 4194468(%rsp)     # imm = 0x224
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	movq	%rdx, 88(%rsp)          # 8-byte Spill
.LBB2_6:                                # %for.body8
                                        #   Parent Loop BB2_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	88(%rsp), %rax          # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movl	$127773, %edx           # imm = 0x1F31D
	movl	%edx, %esi
	movq	%rax, 80(%rsp)          # 8-byte Spill
	cqto
	idivq	%rsi
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	%rax, 72(%rsp)          # 8-byte Spill
	movq	%rdi, %rax
	cqto
	idivq	%rsi
	imulq	$16807, %rdx, %rdx      # imm = 0x41A7
	movq	72(%rsp), %rsi          # 8-byte Reload
	imulq	$-2836, %rsi, %rsi      # imm = 0xF4EC
	addq	%rsi, %rdx
	movq	%rdx, %rsi
	addq	$2147483647, %rsi       # imm = 0x7FFFFFFF
	cmpq	$0, %rdx
	cmovgq	%rdx, %rsi
	movl	$567, 4194468(%rsp)     # imm = 0x237
	addq	$1, %rcx
	cmpq	$131072, %rcx           # imm = 0x20000
	movq	%rsi, %rdx
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	jne	.LBB2_6
# %bb.7:                                # %for.inc13
                                        #   in Loop: Header=BB2_3 Depth=1
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, seedi
	movl	$535, 4194468(%rsp)     # imm = 0x217
	movq	112(%rsp), %rcx         # 8-byte Reload
	addq	$1, %rcx
	movl	dbglvl, %edx
	movl	$577, 4194468(%rsp)     # imm = 0x241
	cmpq	$32, %rcx
	movl	%edx, %esi
	movl	%edx, 60(%rsp)          # 4-byte Spill
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	movl	%esi, 124(%rsp)         # 4-byte Spill
	jne	.LBB2_3
# %bb.8:                                # %for.end15
	movl	60(%rsp), %eax          # 4-byte Reload
	cmpl	$4, %eax
	jle	.LBB2_10
# %bb.9:                                # %if.then18
	movabsq	$.Lstr.35, %rdi
	callq	puts
	movl	%eax, 56(%rsp)          # 4-byte Spill
.LBB2_10:                               # %if.end20
	movabsq	$spec_fd, %rax
	movl	156(%rsp), %ecx         # 4-byte Reload
	movslq	%ecx, %rdx
	imulq	$24, %rdx, %rsi
	addq	%rsi, %rax
	movl	(%rax), %edi
	movl	$584, 4194468(%rsp)     # imm = 0x248
	cmpl	$0, %edi
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	jle	.LBB2_13
# %bb.11:                               # %for.body26.lr.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$spec_fd, %rdx
	movq	40(%rsp), %rsi          # 8-byte Reload
	imulq	$24, %rsi, %rdi
	addq	%rdi, %rdx
	addq	$16, %rdx
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	%rcx, 24(%rsp)          # 8-byte Spill
.LBB2_12:                               # %for.body26
                                        # =>This Inner Loop Header: Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	$131072, %ecx           # imm = 0x20000
	movl	%ecx, %edx
	leaq	160(%rsp), %rsi
	movsd	.LCPI2_0(%rip), %xmm0   # xmm0 = mem[0],zero
	movss	.LCPI2_1(%rip), %xmm1   # xmm1 = mem[0],zero,zero,zero
	movl	$127773, %ecx           # imm = 0x1F31D
	movl	%ecx, %edi
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	(%r8), %r9
	movl	$586, 4194468(%rsp)     # imm = 0x24A
	addq	%rax, %r9
	movq	seedi, %r10
	movl	$594, 4194468(%rsp)     # imm = 0x252
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	%r10, %rax
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	cqto
	idivq	%rdi
	movq	%rax, (%rsp)            # 8-byte Spill
	movq	%r10, %rax
	cqto
	idivq	%rdi
	imulq	$16807, %rdx, %rdx      # imm = 0x41A7
	movq	(%rsp), %rdi            # 8-byte Reload
	imulq	$-2836, %rdi, %rdi      # imm = 0xF4EC
	addq	%rdi, %rdx
	movq	%rdx, %rdi
	addq	$2147483647, %rdi       # imm = 0x7FFFFFFF
	cmpq	$0, %rdx
	cmovgq	%rdx, %rdi
	movq	%rdi, seedi
	movl	$596, 4194468(%rsp)     # imm = 0x254
	cvtsi2ssq	%rdi, %xmm2
	mulss	%xmm1, %xmm2
	cvtss2sd	%xmm2, %xmm1
	mulsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %ecx
	movslq	%ecx, %rdx
	shlq	$17, %rdx
	addq	%rdx, %rsi
	movq	%r9, %rdi
	movq	8(%rsp), %rdx           # 8-byte Reload
	callq	memcpy
	movq	16(%rsp), %rdx          # 8-byte Reload
	addq	$131072, %rdx           # imm = 0x20000
	movq	48(%rsp), %rsi          # 8-byte Reload
	movl	(%rsi), %ecx
	movl	$613, 4194468(%rsp)     # imm = 0x265
	movslq	%ecx, %rdi
	cmpq	%rdi, %rdx
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	jl	.LBB2_12
.LBB2_13:                               # %for.end35
	xorl	%eax, %eax
	movabsq	$spec_fd, %rcx
	movq	40(%rsp), %rdx          # 8-byte Reload
	imulq	$24, %rdx, %rsi
	addq	%rsi, %rcx
	addq	$4, %rcx
	movl	$1048576, (%rcx)        # imm = 0x100000
	movl	$634, 4194468(%rsp)     # imm = 0x27A
	addq	$4194472, %rsp          # imm = 0x4000A8
	retq
.Lfunc_end2:
	.size	spec_random_load, .Lfunc_end2-spec_random_load
	.cfi_endproc
                                        # -- End function
	.globl	spec_load               # -- Begin function spec_load
	.p2align	4, 0x90
	.type	spec_load,@function
spec_load:                              # @spec_load
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$152, %rsp
	.cfi_def_cfa_offset 160
	xorl	%eax, %eax
	movl	$9999, 148(%rsp)        # imm = 0x270F
	movl	%edi, 144(%rsp)         # 4-byte Spill
	movq	%rsi, %rdi
	movq	%rsi, 136(%rsp)         # 8-byte Spill
	movl	%eax, %esi
	movb	$0, %al
	movl	%edx, 132(%rsp)         # 4-byte Spill
	callq	open
	cmpl	$0, %eax
	movl	%eax, 128(%rsp)         # 4-byte Spill
	jge	.LBB3_2
# %bb.1:                                # %if.then
	movq	stderr, %rdi
	movl	$650, 148(%rsp)         # imm = 0x28A
	movq	%rdi, 120(%rsp)         # 8-byte Spill
	callq	__errno_location
	movl	(%rax), %edi
	movl	$663, 148(%rsp)         # imm = 0x297
	callq	strerror
	movabsq	$.L.str.5, %rsi
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	movl	%eax, 116(%rsp)         # 4-byte Spill
	callq	exit
	jmp	.LBB3_14
.LBB3_2:                                # %if.end
	movabsq	$spec_fd, %rax
	movl	144(%rsp), %ecx         # 4-byte Reload
	movslq	%ecx, %rdx
	imulq	$24, %rdx, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addq	$4, %rdi
	movl	$0, (%rdi)
	movl	$665, 148(%rsp)         # imm = 0x299
	imulq	$24, %rdx, %rsi
	addq	%rsi, %rax
	addq	$8, %rax
	movl	$0, (%rax)
	movl	$672, 148(%rsp)         # imm = 0x2A0
	movl	132(%rsp), %r8d         # 4-byte Reload
	cmpl	$0, %r8d
	movq	%rdi, 104(%rsp)         # 8-byte Spill
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	jle	.LBB3_8
# %bb.3:                                # %for.body.lr.ph
	xorl	%eax, %eax
	movabsq	$spec_fd, %rcx
	movq	96(%rsp), %rdx          # 8-byte Reload
	imulq	$24, %rdx, %rsi
	addq	%rsi, %rcx
	addq	$16, %rcx
	movq	%rcx, 88(%rsp)          # 8-byte Spill
	movl	%eax, 84(%rsp)          # 4-byte Spill
.LBB3_4:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movl	84(%rsp), %eax          # 4-byte Reload
	movl	$131072, %ecx           # imm = 0x20000
	movl	%ecx, %edx
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$683, 148(%rsp)         # imm = 0x2AB
	movslq	%eax, %r8
	addq	%r8, %rdi
	movl	128(%rsp), %ecx         # 4-byte Reload
	movq	%rdi, 72(%rsp)          # 8-byte Spill
	movl	%ecx, %edi
	movq	72(%rsp), %rsi          # 8-byte Reload
	movl	%eax, 68(%rsp)          # 4-byte Spill
	callq	read
	movl	%eax, %ecx
	cmpl	$0, %ecx
	movl	%ecx, 64(%rsp)          # 4-byte Spill
	je	.LBB3_8
# %bb.5:                                # %if.end13
                                        #   in Loop: Header=BB3_4 Depth=1
	movl	64(%rsp), %eax          # 4-byte Reload
	cmpl	$0, %eax
	jge	.LBB3_7
# %bb.6:                                # %if.then16
	movq	stderr, %rdi
	movl	$686, 148(%rsp)         # imm = 0x2AE
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	callq	__errno_location
	movl	(%rax), %edi
	movl	$693, 148(%rsp)         # imm = 0x2B5
	callq	strerror
	movabsq	$.L.str.6, %rsi
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	movl	%eax, 52(%rsp)          # 4-byte Spill
	callq	exit
	jmp	.LBB3_14
.LBB3_7:                                # %if.end20
                                        #   in Loop: Header=BB3_4 Depth=1
	movq	104(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$695, 148(%rsp)         # imm = 0x2B7
	movl	64(%rsp), %edx          # 4-byte Reload
	addl	%edx, %ecx
	movl	%ecx, (%rax)
	movl	$701, 148(%rsp)         # imm = 0x2BD
	movl	68(%rsp), %ecx          # 4-byte Reload
	addl	%edx, %ecx
	movl	132(%rsp), %esi         # 4-byte Reload
	cmpl	%esi, %ecx
	movl	%ecx, 84(%rsp)          # 4-byte Spill
	jl	.LBB3_4
.LBB3_8:                                # %for.end
	movl	128(%rsp), %edi         # 4-byte Reload
	callq	close
	movq	104(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edi
	movl	$711, 148(%rsp)         # imm = 0x2C7
	movl	132(%rsp), %edx         # 4-byte Reload
	cmpl	%edx, %edi
	movl	%eax, 48(%rsp)          # 4-byte Spill
	movl	%edi, 44(%rsp)          # 4-byte Spill
	jge	.LBB3_13
# %bb.9:                                # %while.body.lr.ph
	movabsq	$spec_fd, %rax
	movq	96(%rsp), %rcx          # 8-byte Reload
	imulq	$24, %rcx, %rdx
	addq	%rdx, %rax
	addq	$16, %rax
	movl	44(%rsp), %esi          # 4-byte Reload
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movl	%esi, 28(%rsp)          # 4-byte Spill
.LBB3_10:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movl	28(%rsp), %eax          # 4-byte Reload
	movl	132(%rsp), %ecx         # 4-byte Reload
	subl	%eax, %ecx
	cmpl	%eax, %ecx
	cmovgl	%eax, %ecx
	movl	dbglvl, %edx
	movl	$716, 148(%rsp)         # imm = 0x2CC
	cmpl	$3, %edx
	movl	%ecx, 24(%rsp)          # 4-byte Spill
	movl	%eax, 20(%rsp)          # 4-byte Spill
	jle	.LBB3_12
# %bb.11:                               # %if.then46
                                        #   in Loop: Header=BB3_10 Depth=1
	movabsq	$.L.str.7, %rdi
	movl	24(%rsp), %esi          # 4-byte Reload
	movb	$0, %al
	callq	printf
	movq	104(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %esi
	movl	$719, 148(%rsp)         # imm = 0x2CF
	movl	%eax, 16(%rsp)          # 4-byte Spill
	movl	%esi, 20(%rsp)          # 4-byte Spill
.LBB3_12:                               # %if.end48
                                        #   in Loop: Header=BB3_10 Depth=1
	movl	20(%rsp), %eax          # 4-byte Reload
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$724, 148(%rsp)         # imm = 0x2D4
	movslq	%eax, %rsi
	movq	%rdx, %rdi
	addq	%rsi, %rdi
	movl	24(%rsp), %eax          # 4-byte Reload
	movslq	%eax, %rsi
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	movq	%rdx, %rsi
	movq	8(%rsp), %rdx           # 8-byte Reload
	callq	memcpy
	movq	104(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	movl	$725, 148(%rsp)         # imm = 0x2D5
	movl	24(%rsp), %r8d          # 4-byte Reload
	addl	%r8d, %eax
	movl	%eax, (%rcx)
	movl	$753, 148(%rsp)         # imm = 0x2F1
	movl	132(%rsp), %r9d         # 4-byte Reload
	cmpl	%r9d, %eax
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jl	.LBB3_10
.LBB3_13:                               # %while.end
	xorl	%eax, %eax
	addq	$152, %rsp
	retq
.LBB3_14:                               # %UnifiedUnreachableBlock
.Lfunc_end3:
	.size	spec_load, .Lfunc_end3-spec_load
	.cfi_endproc
                                        # -- End function
	.globl	spec_read               # -- Begin function spec_read
	.p2align	4, 0x90
	.type	spec_read,@function
spec_read:                              # @spec_read
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$88, %rsp
	.cfi_def_cfa_offset 96
	movl	$9999, 84(%rsp)         # imm = 0x270F
	movl	dbglvl, %eax
	movl	$761, 84(%rsp)          # imm = 0x2F9
	cmpl	$4, %eax
	movq	%rsi, 72(%rsp)          # 8-byte Spill
	movl	%edi, 68(%rsp)          # 4-byte Spill
	movl	%edx, 64(%rsp)          # 4-byte Spill
	jle	.LBB4_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.8, %rdi
	movl	68(%rsp), %esi          # 4-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	movl	64(%rsp), %ecx          # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	%eax, 60(%rsp)          # 4-byte Spill
.LBB4_2:                                # %if.end
	movl	68(%rsp), %eax          # 4-byte Reload
	cmpl	$3, %eax
	jle	.LBB4_4
# %bb.3:                                # %if.then2
	movabsq	$.L.str.9, %rsi
	movq	stderr, %rdi
	movl	$768, 84(%rsp)          # imm = 0x300
	movl	68(%rsp), %edx          # 4-byte Reload
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	movl	%eax, 56(%rsp)          # 4-byte Spill
	callq	exit
.LBB4_4:                                # %if.end4
	movabsq	$spec_fd, %rax
	movl	68(%rsp), %ecx          # 4-byte Reload
	movslq	%ecx, %rdx
	imulq	$24, %rdx, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addq	$8, %rdi
	movl	(%rdi), %r8d
	movl	$770, 84(%rsp)          # imm = 0x302
	imulq	$24, %rdx, %rsi
	addq	%rsi, %rax
	addq	$4, %rax
	movl	(%rax), %r9d
	movl	$773, 84(%rsp)          # imm = 0x305
	cmpl	%r8d, %r9d
	movl	%r8d, 52(%rsp)          # 4-byte Spill
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movq	%rdi, 32(%rsp)          # 8-byte Spill
	movl	%r9d, 28(%rsp)          # 4-byte Spill
	jg	.LBB4_7
# %bb.5:                                # %if.then8
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	dbglvl, %ecx
	movl	$784, 84(%rsp)          # imm = 0x310
	cmpl	$4, %ecx
	movl	%eax, 24(%rsp)          # 4-byte Spill
	jle	.LBB4_9
# %bb.6:                                # %if.then10
	movabsq	$.Lstr.39, %rdi
	callq	puts
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	%eax, 20(%rsp)          # 4-byte Spill
	movl	%ecx, 24(%rsp)          # 4-byte Spill
	jmp	.LBB4_9
.LBB4_7:                                # %if.end13
	movabsq	$spec_fd, %rax
	movl	52(%rsp), %ecx          # 4-byte Reload
	movl	64(%rsp), %edx          # 4-byte Reload
	addl	%edx, %ecx
	movl	28(%rsp), %esi          # 4-byte Reload
	movl	52(%rsp), %edi          # 4-byte Reload
	subl	%edi, %esi
	movl	28(%rsp), %r8d          # 4-byte Reload
	cmpl	%r8d, %ecx
	cmovll	%edx, %esi
	movq	40(%rsp), %r9           # 8-byte Reload
	imulq	$24, %r9, %r10
	addq	%r10, %rax
	addq	$16, %rax
	movq	(%rax), %rax
	movl	$789, 84(%rsp)          # imm = 0x315
	movslq	%edi, %r10
	addq	%r10, %rax
	movslq	%esi, %rdx
	movq	72(%rsp), %rdi          # 8-byte Reload
	movl	%esi, 16(%rsp)          # 4-byte Spill
	movq	%rax, %rsi
	callq	memcpy
	movq	32(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %ecx
	movl	$791, 84(%rsp)          # imm = 0x317
	movl	16(%rsp), %r8d          # 4-byte Reload
	addl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$792, 84(%rsp)          # imm = 0x318
	movl	dbglvl, %ecx
	movl	$808, 84(%rsp)          # imm = 0x328
	cmpl	$4, %ecx
	movl	%r8d, 24(%rsp)          # 4-byte Spill
	jle	.LBB4_9
# %bb.8:                                # %if.then43
	movabsq	$.L.str.11, %rdi
	movl	16(%rsp), %esi          # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	16(%rsp), %esi          # 4-byte Reload
	movl	%eax, 12(%rsp)          # 4-byte Spill
	movl	%esi, 24(%rsp)          # 4-byte Spill
.LBB4_9:                                # %cleanup
	movl	24(%rsp), %eax          # 4-byte Reload
	addq	$88, %rsp
	retq
.Lfunc_end4:
	.size	spec_read, .Lfunc_end4-spec_read
	.cfi_endproc
                                        # -- End function
	.globl	spec_fread              # -- Begin function spec_fread
	.p2align	4, 0x90
	.type	spec_fread,@function
spec_fread:                             # @spec_fread
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$104, %rsp
	.cfi_def_cfa_offset 112
	movl	$9999, 100(%rsp)        # imm = 0x270F
	movl	dbglvl, %eax
	movl	$816, 100(%rsp)         # imm = 0x330
	cmpl	$4, %eax
	movl	%edx, 96(%rsp)          # 4-byte Spill
	movl	%esi, 92(%rsp)          # 4-byte Spill
	movq	%rdi, 80(%rsp)          # 8-byte Spill
	movl	%ecx, 76(%rsp)          # 4-byte Spill
	jle	.LBB5_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.12, %rdi
	movq	80(%rsp), %rsi          # 8-byte Reload
	movl	92(%rsp), %edx          # 4-byte Reload
	movl	96(%rsp), %ecx          # 4-byte Reload
	movl	76(%rsp), %r8d          # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	%eax, 72(%rsp)          # 4-byte Spill
.LBB5_2:                                # %if.end
	movl	76(%rsp), %eax          # 4-byte Reload
	cmpl	$3, %eax
	jle	.LBB5_4
# %bb.3:                                # %if.then2
	movabsq	$.L.str.13, %rsi
	movq	stderr, %rdi
	movl	$823, 100(%rsp)         # imm = 0x337
	movl	76(%rsp), %edx          # 4-byte Reload
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	movl	%eax, 68(%rsp)          # 4-byte Spill
	callq	exit
.LBB5_4:                                # %if.end4
	movabsq	$spec_fd, %rax
	movl	76(%rsp), %ecx          # 4-byte Reload
	movslq	%ecx, %rdx
	imulq	$24, %rdx, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addq	$8, %rdi
	movl	(%rdi), %r8d
	movl	$825, 100(%rsp)         # imm = 0x339
	imulq	$24, %rdx, %rsi
	addq	%rsi, %rax
	addq	$4, %rax
	movl	(%rax), %r9d
	movl	$828, 100(%rsp)         # imm = 0x33C
	cmpl	%r8d, %r9d
	movl	%r8d, 64(%rsp)          # 4-byte Spill
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movl	%r9d, 44(%rsp)          # 4-byte Spill
	jg	.LBB5_7
# %bb.5:                                # %if.then8
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	dbglvl, %ecx
	movl	$845, 100(%rsp)         # imm = 0x34D
	cmpl	$4, %ecx
	movl	%eax, 40(%rsp)          # 4-byte Spill
	jle	.LBB5_11
# %bb.6:                                # %if.then10
	movabsq	$.Lstr.39, %rdi
	callq	puts
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	%eax, 36(%rsp)          # 4-byte Spill
	movl	%ecx, 40(%rsp)          # 4-byte Spill
	jmp	.LBB5_11
.LBB5_7:                                # %if.end13
	movl	96(%rsp), %eax          # 4-byte Reload
	movl	92(%rsp), %ecx          # 4-byte Reload
	imull	%ecx, %eax
	movl	64(%rsp), %edx          # 4-byte Reload
	addl	%eax, %edx
	movl	44(%rsp), %esi          # 4-byte Reload
	cmpl	%esi, %edx
	movl	96(%rsp), %edx          # 4-byte Reload
	movl	%eax, 32(%rsp)          # 4-byte Spill
	movl	%edx, 28(%rsp)          # 4-byte Spill
	jl	.LBB5_9
# %bb.8:                                # %if.then21
	movl	44(%rsp), %eax          # 4-byte Reload
	movl	64(%rsp), %ecx          # 4-byte Reload
	subl	%ecx, %eax
	cltd
	movl	92(%rsp), %esi          # 4-byte Reload
	idivl	%esi
	movl	%eax, %edi
	imull	%esi, %edi
	movl	%edi, 32(%rsp)          # 4-byte Spill
	movl	%eax, 28(%rsp)          # 4-byte Spill
.LBB5_9:                                # %if.end28
	movl	28(%rsp), %eax          # 4-byte Reload
	movl	32(%rsp), %ecx          # 4-byte Reload
	movabsq	$spec_fd, %rdx
	movq	56(%rsp), %rsi          # 8-byte Reload
	imulq	$24, %rsi, %rdi
	addq	%rdi, %rdx
	addq	$16, %rdx
	movq	(%rdx), %rdx
	movl	$850, 100(%rsp)         # imm = 0x352
	movl	64(%rsp), %r8d          # 4-byte Reload
	movslq	%r8d, %rdi
	addq	%rdi, %rdx
	movslq	%eax, %rdi
	movq	80(%rsp), %r9           # 8-byte Reload
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movq	%r9, %rdi
	movq	%rdx, %rsi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movl	%eax, 12(%rsp)          # 4-byte Spill
	movl	%ecx, 8(%rsp)           # 4-byte Spill
	callq	memcpy
	movq	48(%rsp), %rdx          # 8-byte Reload
	movl	(%rdx), %eax
	movl	$852, 100(%rsp)         # imm = 0x354
	movl	8(%rsp), %ecx           # 4-byte Reload
	addl	%ecx, %eax
	movl	%eax, (%rdx)
	movl	$853, 100(%rsp)         # imm = 0x355
	movl	dbglvl, %eax
	movl	$865, 100(%rsp)         # imm = 0x361
	cmpl	$4, %eax
	movl	12(%rsp), %eax          # 4-byte Reload
	movl	%eax, 40(%rsp)          # 4-byte Spill
	jle	.LBB5_11
# %bb.10:                               # %if.then44
	movabsq	$.L.str.11, %rdi
	movl	8(%rsp), %esi           # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	12(%rsp), %esi          # 4-byte Reload
	movl	%eax, 4(%rsp)           # 4-byte Spill
	movl	%esi, 40(%rsp)          # 4-byte Spill
.LBB5_11:                               # %cleanup
	movl	40(%rsp), %eax          # 4-byte Reload
	addq	$104, %rsp
	retq
.Lfunc_end5:
	.size	spec_fread, .Lfunc_end5-spec_fread
	.cfi_endproc
                                        # -- End function
	.globl	spec_getc               # -- Begin function spec_getc
	.p2align	4, 0x90
	.type	spec_getc,@function
spec_getc:                              # @spec_getc
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$56, %rsp
	.cfi_def_cfa_offset 64
	movl	$9999, 52(%rsp)         # imm = 0x270F
	movl	dbglvl, %eax
	movl	$873, 52(%rsp)          # imm = 0x369
	cmpl	$4, %eax
	movl	%edi, 48(%rsp)          # 4-byte Spill
	jle	.LBB6_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.14, %rdi
	movl	48(%rsp), %esi          # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	%eax, 44(%rsp)          # 4-byte Spill
.LBB6_2:                                # %if.end
	movl	48(%rsp), %eax          # 4-byte Reload
	cmpl	$3, %eax
	jle	.LBB6_4
# %bb.3:                                # %if.then2
	movabsq	$.L.str.9, %rsi
	movq	stderr, %rdi
	movl	$880, 52(%rsp)          # imm = 0x370
	movl	48(%rsp), %edx          # 4-byte Reload
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	movl	%eax, 40(%rsp)          # 4-byte Spill
	callq	exit
.LBB6_4:                                # %if.end4
	movabsq	$spec_fd, %rax
	movl	48(%rsp), %ecx          # 4-byte Reload
	movslq	%ecx, %rdx
	imulq	$24, %rdx, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addq	$8, %rdi
	movl	(%rdi), %r8d
	movl	$882, 52(%rsp)          # imm = 0x372
	imulq	$24, %rdx, %rsi
	addq	%rsi, %rax
	addq	$4, %rax
	movl	(%rax), %r9d
	movl	$885, 52(%rsp)          # imm = 0x375
	cmpl	%r9d, %r8d
	movl	%r8d, 36(%rsp)          # 4-byte Spill
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	jl	.LBB6_7
# %bb.5:                                # %if.then8
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	dbglvl, %ecx
	movl	$892, 52(%rsp)          # imm = 0x37C
	cmpl	$4, %ecx
	movl	%eax, 12(%rsp)          # 4-byte Spill
	jle	.LBB6_9
# %bb.6:                                # %if.then10
	movabsq	$.Lstr.39, %rdi
	callq	puts
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	%eax, 8(%rsp)           # 4-byte Spill
	movl	%ecx, 12(%rsp)          # 4-byte Spill
	jmp	.LBB6_9
.LBB6_7:                                # %if.end13
	movabsq	$spec_fd, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	imulq	$24, %rcx, %rdx
	addq	%rdx, %rax
	addq	$16, %rax
	movq	(%rax), %rax
	movl	$894, 52(%rsp)          # imm = 0x37E
	movl	36(%rsp), %esi          # 4-byte Reload
	addl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movl	%esi, (%rdx)
	movl	$897, 52(%rsp)          # imm = 0x381
	movl	36(%rsp), %esi          # 4-byte Reload
	movslq	%esi, %rdi
	movb	(%rax,%rdi), %r8b
	movl	$899, 52(%rsp)          # imm = 0x383
	movzbl	%r8b, %r9d
	movl	dbglvl, %r10d
	movl	$912, 52(%rsp)          # imm = 0x390
	cmpl	$4, %r10d
	movl	%r9d, %r10d
	movl	%r9d, 4(%rsp)           # 4-byte Spill
	movl	%r10d, 12(%rsp)         # 4-byte Spill
	jle	.LBB6_9
# %bb.8:                                # %if.then23
	movabsq	$.L.str.11, %rdi
	movl	4(%rsp), %esi           # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	4(%rsp), %esi           # 4-byte Reload
	movl	%eax, (%rsp)            # 4-byte Spill
	movl	%esi, 12(%rsp)          # 4-byte Spill
.LBB6_9:                                # %cleanup
	movl	12(%rsp), %eax          # 4-byte Reload
	addq	$56, %rsp
	retq
.Lfunc_end6:
	.size	spec_getc, .Lfunc_end6-spec_getc
	.cfi_endproc
                                        # -- End function
	.globl	spec_ungetc             # -- Begin function spec_ungetc
	.p2align	4, 0x90
	.type	spec_ungetc,@function
spec_ungetc:                            # @spec_ungetc
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$72, %rsp
	.cfi_def_cfa_offset 80
	movb	%dil, %al
	movl	$9999, 68(%rsp)         # imm = 0x270F
	movl	dbglvl, %edi
	movl	$920, 68(%rsp)          # imm = 0x398
	cmpl	$4, %edi
	movb	%al, 67(%rsp)           # 1-byte Spill
	movl	%esi, 60(%rsp)          # 4-byte Spill
	jle	.LBB7_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.15, %rdi
	movl	60(%rsp), %esi          # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	%eax, 56(%rsp)          # 4-byte Spill
.LBB7_2:                                # %if.end
	movl	60(%rsp), %eax          # 4-byte Reload
	cmpl	$3, %eax
	jle	.LBB7_4
# %bb.3:                                # %if.then2
	movabsq	$.L.str.9, %rsi
	movq	stderr, %rdi
	movl	$927, 68(%rsp)          # imm = 0x39F
	movl	60(%rsp), %edx          # 4-byte Reload
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	movl	%eax, 52(%rsp)          # 4-byte Spill
	callq	exit
	jmp	.LBB7_11
.LBB7_4:                                # %if.end4
	movabsq	$spec_fd, %rax
	movl	60(%rsp), %ecx          # 4-byte Reload
	movslq	%ecx, %rdx
	imulq	$24, %rdx, %rsi
	addq	%rsi, %rax
	addq	$8, %rax
	movl	(%rax), %edi
	movl	$930, 68(%rsp)          # imm = 0x3A2
	cmpl	$1, %edi
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movl	%edi, 28(%rsp)          # 4-byte Spill
	jge	.LBB7_6
# %bb.5:                                # %if.then6
	movabsq	$.L.str.16, %rsi
	movq	stderr, %rdi
	movl	$936, 68(%rsp)          # imm = 0x3A8
	movl	28(%rsp), %edx          # 4-byte Reload
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	movl	%eax, 24(%rsp)          # 4-byte Spill
	callq	exit
	jmp	.LBB7_11
.LBB7_6:                                # %if.end11
	movabsq	$spec_fd, %rax
	movq	40(%rsp), %rcx          # 8-byte Reload
	imulq	$24, %rcx, %rdx
	addq	%rdx, %rax
	addq	$16, %rax
	movq	(%rax), %rax
	movl	$938, 68(%rsp)          # imm = 0x3AA
	movl	28(%rsp), %esi          # 4-byte Reload
	addl	$-1, %esi
	movq	32(%rsp), %rdx          # 8-byte Reload
	movl	%esi, (%rdx)
	movl	$941, 68(%rsp)          # imm = 0x3AD
	movslq	%esi, %rdi
	movb	(%rax,%rdi), %r8b
	movl	$945, 68(%rsp)          # imm = 0x3B1
	movb	67(%rsp), %r9b          # 1-byte Reload
	movzbl	%r9b, %eax
	cmpb	%r9b, %r8b
	movl	%eax, 20(%rsp)          # 4-byte Spill
	je	.LBB7_8
# %bb.7:                                # %if.then22
	movl	$71, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.17, %rdi
	movq	stderr, %rcx
	movl	$954, 68(%rsp)          # imm = 0x3BA
	callq	fwrite
	xorl	%edi, %edi
	movq	%rax, 8(%rsp)           # 8-byte Spill
	callq	exit
	jmp	.LBB7_11
.LBB7_8:                                # %if.end24
	movl	dbglvl, %eax
	movl	$973, 68(%rsp)          # imm = 0x3CD
	cmpl	$4, %eax
	jle	.LBB7_10
# %bb.9:                                # %if.then27
	xorl	%esi, %esi
	movabsq	$.L.str.11, %rdi
	movb	$0, %al
	callq	printf
	movl	%eax, 4(%rsp)           # 4-byte Spill
.LBB7_10:                               # %if.end29
	movl	20(%rsp), %eax          # 4-byte Reload
	addq	$72, %rsp
	retq
.LBB7_11:                               # %UnifiedUnreachableBlock
.Lfunc_end7:
	.size	spec_ungetc, .Lfunc_end7-spec_ungetc
	.cfi_endproc
                                        # -- End function
	.globl	spec_rewind             # -- Begin function spec_rewind
	.p2align	4, 0x90
	.type	spec_rewind,@function
spec_rewind:                            # @spec_rewind
	.cfi_startproc
# %bb.0:                                # %entry
	xorl	%eax, %eax
	movabsq	$spec_fd, %rcx
	movl	$9999, -4(%rsp)         # imm = 0x270F
	movslq	%edi, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	addq	$8, %rcx
	movl	$0, (%rcx)
	movl	$981, -4(%rsp)          # imm = 0x3D5
	retq
.Lfunc_end8:
	.size	spec_rewind, .Lfunc_end8-spec_rewind
	.cfi_endproc
                                        # -- End function
	.globl	spec_reset              # -- Begin function spec_reset
	.p2align	4, 0x90
	.type	spec_reset,@function
spec_reset:                             # @spec_reset
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$56, %rsp
	.cfi_def_cfa_offset 64
	xorl	%eax, %eax
	movabsq	$spec_fd, %rcx
	movl	$9999, 52(%rsp)         # imm = 0x270F
	movslq	%edi, %rdx
	imulq	$24, %rdx, %rsi
	movq	%rcx, %r8
	addq	%rsi, %r8
	addq	$16, %r8
	movq	(%r8), %rdi
	movl	$983, 52(%rsp)          # imm = 0x3D7
	imulq	$24, %rdx, %rsi
	movq	%rcx, %r8
	addq	%rsi, %r8
	addq	$4, %r8
	movl	(%r8), %r9d
	movl	$986, 52(%rsp)          # imm = 0x3DA
	movslq	%r9d, %rsi
	movq	%rsi, 40(%rsp)          # 8-byte Spill
	movl	%eax, %esi
	movq	40(%rsp), %r10          # 8-byte Reload
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movl	%eax, 20(%rsp)          # 4-byte Spill
	movq	%r8, 8(%rsp)            # 8-byte Spill
	callq	memset
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	$0, (%rcx)
	movl	$988, 52(%rsp)          # imm = 0x3DC
	movq	32(%rsp), %rdx          # 8-byte Reload
	imulq	$24, %rdx, %rdi
	movq	24(%rsp), %r8           # 8-byte Reload
	addq	%rdi, %r8
	addq	$8, %r8
	movl	$0, (%r8)
	movl	$996, 52(%rsp)          # imm = 0x3E4
	movl	20(%rsp), %eax          # 4-byte Reload
	addq	$56, %rsp
	retq
.Lfunc_end9:
	.size	spec_reset, .Lfunc_end9-spec_reset
	.cfi_endproc
                                        # -- End function
	.globl	spec_write              # -- Begin function spec_write
	.p2align	4, 0x90
	.type	spec_write,@function
spec_write:                             # @spec_write
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$72, %rsp
	.cfi_def_cfa_offset 80
	movl	$9999, 68(%rsp)         # imm = 0x270F
	movl	dbglvl, %eax
	movl	$1004, 68(%rsp)         # imm = 0x3EC
	cmpl	$4, %eax
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movl	%edi, 52(%rsp)          # 4-byte Spill
	movl	%edx, 48(%rsp)          # 4-byte Spill
	jle	.LBB10_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.18, %rdi
	movl	52(%rsp), %esi          # 4-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movl	48(%rsp), %ecx          # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	%eax, 44(%rsp)          # 4-byte Spill
.LBB10_2:                               # %if.end
	movl	52(%rsp), %eax          # 4-byte Reload
	cmpl	$3, %eax
	jle	.LBB10_4
# %bb.3:                                # %if.then2
	movabsq	$.L.str.19, %rsi
	movq	stderr, %rdi
	movl	$1011, 68(%rsp)         # imm = 0x3F3
	movl	52(%rsp), %edx          # 4-byte Reload
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	movl	%eax, 40(%rsp)          # 4-byte Spill
	callq	exit
.LBB10_4:                               # %if.end4
	movabsq	$spec_fd, %rax
	movl	52(%rsp), %ecx          # 4-byte Reload
	movslq	%ecx, %rdx
	imulq	$24, %rdx, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addq	$16, %rdi
	movq	(%rdi), %rsi
	movl	$1013, 68(%rsp)         # imm = 0x3F5
	imulq	$24, %rdx, %rdi
	movq	%rax, %r8
	addq	%rdi, %r8
	addq	$8, %r8
	movl	(%r8), %r9d
	movl	$1019, 68(%rsp)         # imm = 0x3FB
	movslq	%r9d, %rdi
	addq	%rdi, %rsi
	movl	48(%rsp), %r9d          # 4-byte Reload
	movslq	%r9d, %rdi
	movq	%rdi, 32(%rsp)          # 8-byte Spill
	movq	%rsi, %rdi
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	32(%rsp), %r10          # 8-byte Reload
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	movq	%r10, %rdx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	%r8, 8(%rsp)            # 8-byte Spill
	callq	memcpy
	movq	24(%rsp), %rax          # 8-byte Reload
	imulq	$24, %rax, %rdx
	movq	16(%rsp), %rsi          # 8-byte Reload
	addq	%rdx, %rsi
	addq	$4, %rsi
	movl	(%rsi), %ecx
	movl	$1021, 68(%rsp)         # imm = 0x3FD
	movl	48(%rsp), %r9d          # 4-byte Reload
	addl	%r9d, %ecx
	movl	%ecx, (%rsi)
	movl	$1022, 68(%rsp)         # imm = 0x3FE
	movq	8(%rsp), %rdx           # 8-byte Reload
	movl	(%rdx), %ecx
	movl	$1024, 68(%rsp)         # imm = 0x400
	addl	%r9d, %ecx
	movl	%ecx, (%rdx)
	movl	$1025, 68(%rsp)         # imm = 0x401
	movl	dbglvl, %ecx
	movl	$1039, 68(%rsp)         # imm = 0x40F
	cmpl	$4, %ecx
	jle	.LBB10_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.11, %rdi
	movl	48(%rsp), %esi          # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	%eax, 4(%rsp)           # 4-byte Spill
.LBB10_6:                               # %if.end20
	movl	48(%rsp), %eax          # 4-byte Reload
	addq	$72, %rsp
	retq
.Lfunc_end10:
	.size	spec_write, .Lfunc_end10-spec_write
	.cfi_endproc
                                        # -- End function
	.globl	spec_fwrite             # -- Begin function spec_fwrite
	.p2align	4, 0x90
	.type	spec_fwrite,@function
spec_fwrite:                            # @spec_fwrite
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$88, %rsp
	.cfi_def_cfa_offset 96
	movl	$9999, 84(%rsp)         # imm = 0x270F
	movl	dbglvl, %eax
	movl	$1047, 84(%rsp)         # imm = 0x417
	cmpl	$4, %eax
	movl	%edx, 80(%rsp)          # 4-byte Spill
	movl	%esi, 76(%rsp)          # 4-byte Spill
	movq	%rdi, 64(%rsp)          # 8-byte Spill
	movl	%ecx, 60(%rsp)          # 4-byte Spill
	jle	.LBB11_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.20, %rdi
	movq	64(%rsp), %rsi          # 8-byte Reload
	movl	76(%rsp), %edx          # 4-byte Reload
	movl	80(%rsp), %ecx          # 4-byte Reload
	movl	60(%rsp), %r8d          # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	%eax, 56(%rsp)          # 4-byte Spill
.LBB11_2:                               # %if.end
	movl	60(%rsp), %eax          # 4-byte Reload
	cmpl	$3, %eax
	jle	.LBB11_4
# %bb.3:                                # %if.then2
	movabsq	$.L.str.21, %rsi
	movq	stderr, %rdi
	movl	$1054, 84(%rsp)         # imm = 0x41E
	movl	60(%rsp), %edx          # 4-byte Reload
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	movl	%eax, 52(%rsp)          # 4-byte Spill
	callq	exit
.LBB11_4:                               # %if.end4
	movabsq	$spec_fd, %rax
	movl	60(%rsp), %ecx          # 4-byte Reload
	movslq	%ecx, %rdx
	imulq	$24, %rdx, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addq	$16, %rdi
	movq	(%rdi), %rsi
	movl	$1056, 84(%rsp)         # imm = 0x420
	imulq	$24, %rdx, %rdi
	movq	%rax, %r8
	addq	%rdi, %r8
	addq	$8, %r8
	movl	(%r8), %r9d
	movl	$1063, 84(%rsp)         # imm = 0x427
	movslq	%r9d, %rdi
	addq	%rdi, %rsi
	movl	80(%rsp), %r9d          # 4-byte Reload
	movl	76(%rsp), %r10d         # 4-byte Reload
	imull	%r10d, %r9d
	movslq	%r9d, %rdi
	movq	%rdi, 40(%rsp)          # 8-byte Spill
	movq	%rsi, %rdi
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %r11          # 8-byte Reload
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	%r11, %rdx
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%r8, 16(%rsp)           # 8-byte Spill
	movl	%r9d, 12(%rsp)          # 4-byte Spill
	callq	memcpy
	movq	32(%rsp), %rax          # 8-byte Reload
	imulq	$24, %rax, %rdx
	movq	24(%rsp), %rsi          # 8-byte Reload
	addq	%rdx, %rsi
	addq	$4, %rsi
	movl	(%rsi), %ecx
	movl	$1065, 84(%rsp)         # imm = 0x429
	movl	12(%rsp), %r9d          # 4-byte Reload
	addl	%r9d, %ecx
	movl	%ecx, (%rsi)
	movl	$1066, 84(%rsp)         # imm = 0x42A
	movq	16(%rsp), %rdx          # 8-byte Reload
	movl	(%rdx), %ecx
	movl	$1068, 84(%rsp)         # imm = 0x42C
	addl	%r9d, %ecx
	movl	%ecx, (%rdx)
	movl	$1069, 84(%rsp)         # imm = 0x42D
	movl	dbglvl, %ecx
	movl	$1081, 84(%rsp)         # imm = 0x439
	cmpl	$4, %ecx
	jle	.LBB11_6
# %bb.5:                                # %if.then20
	movabsq	$.L.str.11, %rdi
	movl	80(%rsp), %esi          # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	%eax, 8(%rsp)           # 4-byte Spill
.LBB11_6:                               # %if.end22
	movl	80(%rsp), %eax          # 4-byte Reload
	addq	$88, %rsp
	retq
.Lfunc_end11:
	.size	spec_fwrite, .Lfunc_end11-spec_fwrite
	.cfi_endproc
                                        # -- End function
	.globl	spec_putc               # -- Begin function spec_putc
	.p2align	4, 0x90
	.type	spec_putc,@function
spec_putc:                              # @spec_putc
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$24, %rsp
	.cfi_def_cfa_offset 32
	movb	%dil, %al
	movl	$9999, 20(%rsp)         # imm = 0x270F
	movl	dbglvl, %edi
	movl	$1090, 20(%rsp)         # imm = 0x442
	cmpl	$4, %edi
	movb	%al, 19(%rsp)           # 1-byte Spill
	movl	%esi, 12(%rsp)          # 4-byte Spill
	jle	.LBB12_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.22, %rdi
	movb	19(%rsp), %al           # 1-byte Reload
	movzbl	%al, %esi
	movl	12(%rsp), %edx          # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	%eax, 8(%rsp)           # 4-byte Spill
.LBB12_2:                               # %if.end
	movl	12(%rsp), %eax          # 4-byte Reload
	cmpl	$3, %eax
	jle	.LBB12_4
# %bb.3:                                # %if.then3
	movabsq	$.L.str.19, %rsi
	movq	stderr, %rdi
	movl	$1097, 20(%rsp)         # imm = 0x449
	movl	12(%rsp), %edx          # 4-byte Reload
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	movl	%eax, 4(%rsp)           # 4-byte Spill
	callq	exit
.LBB12_4:                               # %if.end5
	movabsq	$spec_fd, %rax
	movl	12(%rsp), %ecx          # 4-byte Reload
	movslq	%ecx, %rdx
	imulq	$24, %rdx, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addq	$16, %rdi
	movq	(%rdi), %rsi
	movl	$1099, 20(%rsp)         # imm = 0x44B
	imulq	$24, %rdx, %rdi
	movq	%rax, %r8
	addq	%rdi, %r8
	addq	$8, %r8
	movl	(%r8), %r9d
	movl	$1101, 20(%rsp)         # imm = 0x44D
	movl	%r9d, %r10d
	addl	$1, %r10d
	movl	%r10d, (%r8)
	movl	$1104, 20(%rsp)         # imm = 0x450
	movslq	%r9d, %rdi
	movb	19(%rsp), %r11b         # 1-byte Reload
	movb	%r11b, (%rsi,%rdi)
	movl	$1106, 20(%rsp)         # imm = 0x452
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	addq	$4, %rax
	movl	(%rax), %r9d
	movl	$1108, 20(%rsp)         # imm = 0x454
	addl	$1, %r9d
	movl	%r9d, (%rax)
	movl	$1116, 20(%rsp)         # imm = 0x45C
	movzbl	%r11b, %eax
	addq	$24, %rsp
	retq
.Lfunc_end12:
	.size	spec_putc, .Lfunc_end12-spec_putc
	.cfi_endproc
                                        # -- End function
	.globl	main                    # -- Begin function main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$520, %rsp              # imm = 0x208
	.cfi_def_cfa_offset 576
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	$64, %eax
	movabsq	$.L.str.23, %rcx
	movl	$9999, 516(%rsp)        # imm = 0x270F
	movq	$10, seedi
	movl	$1122, 516(%rsp)        # imm = 0x462
	cmpl	$1, %edi
	movl	%eax, %edx
	movl	%edi, 512(%rsp)         # 4-byte Spill
	movq	%rsi, 504(%rsp)         # 8-byte Spill
	movq	%rcx, 496(%rsp)         # 8-byte Spill
	movl	%edx, 492(%rsp)         # 4-byte Spill
	movl	%eax, 488(%rsp)         # 4-byte Spill
	jle	.LBB13_4
# %bb.1:                                # %if.end
	movl	$64, %eax
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rdx
	movl	$1126, 516(%rsp)        # imm = 0x466
	movl	512(%rsp), %esi         # 4-byte Reload
	cmpl	$2, %esi
	movl	%eax, %edi
	movq	%rdx, %r8
	movq	%r8, 496(%rsp)          # 8-byte Spill
	movq	%rdx, 480(%rsp)         # 8-byte Spill
	movl	%edi, 492(%rsp)         # 4-byte Spill
	movl	%eax, 488(%rsp)         # 4-byte Spill
	je	.LBB13_4
# %bb.2:                                # %if.end4
	xorl	%eax, %eax
	movl	%eax, %esi
	movl	$10, %edx
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	16(%rcx), %rdi
	movl	$1135, 516(%rsp)        # imm = 0x46F
	callq	strtol
	movl	%eax, %edx
	movl	512(%rsp), %r8d         # 4-byte Reload
	cmpl	$3, %r8d
	movl	%edx, %r9d
	movq	480(%rsp), %rax         # 8-byte Reload
	movl	%edx, %r10d
	movl	%edx, 476(%rsp)         # 4-byte Spill
	movl	%r9d, 492(%rsp)         # 4-byte Spill
	movq	%rax, 496(%rsp)         # 8-byte Spill
	movl	%r10d, 488(%rsp)        # 4-byte Spill
	jle	.LBB13_4
# %bb.3:                                # %if.then6
	xorl	%eax, %eax
	movl	%eax, %esi
	movl	$10, %edx
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	24(%rcx), %rdi
	movl	$1145, 516(%rsp)        # imm = 0x479
	callq	strtol
	movl	%eax, %edx
	movl	476(%rsp), %r8d         # 4-byte Reload
	movq	480(%rsp), %rax         # 8-byte Reload
	movq	%rax, 496(%rsp)         # 8-byte Spill
	movl	%r8d, 492(%rsp)         # 4-byte Spill
	movl	%edx, 488(%rsp)         # 4-byte Spill
.LBB13_4:                               # %if.end9
	movl	488(%rsp), %eax         # 4-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movl	492(%rsp), %edx         # 4-byte Reload
	movl	%edx, %esi
	shll	$20, %esi
	movl	%esi, spec_fd
	movl	$1148, 516(%rsp)        # imm = 0x47C
	shll	$20, %eax
	movl	%eax, spec_fd+24
	movl	$1150, 516(%rsp)        # imm = 0x47E
	movl	%esi, spec_fd+48
	movl	$1152, 516(%rsp)        # imm = 0x480
	movl	%esi, 472(%rsp)         # 4-byte Spill
	movq	%rcx, 464(%rsp)         # 8-byte Spill
	movl	%edx, 460(%rsp)         # 4-byte Spill
	callq	spec_init
	movl	dbglvl, %edx
	movl	$1158, 516(%rsp)        # imm = 0x486
	cmpl	$2, %edx
	movl	%eax, 456(%rsp)         # 4-byte Spill
	jle	.LBB13_6
# %bb.5:                                # %if.then15
	movabsq	$.Lstr.43, %rdi
	callq	puts
	movl	%eax, 452(%rsp)         # 4-byte Spill
.LBB13_6:                               # %if.end17
	xorl	%edi, %edi
	movq	464(%rsp), %rsi         # 8-byte Reload
	movl	472(%rsp), %edx         # 4-byte Reload
	callq	spec_load
	movl	dbglvl, %edx
	movl	$1163, 516(%rsp)        # imm = 0x48B
	cmpl	$3, %edx
	movl	%eax, 448(%rsp)         # 4-byte Spill
	jle	.LBB13_8
# %bb.7:                                # %if.then21
	movabsq	$.L.str.25, %rdi
	movl	spec_fd+4, %esi
	movl	$1179, 516(%rsp)        # imm = 0x49B
	movb	$0, %al
	callq	printf
	movl	%eax, 444(%rsp)         # 4-byte Spill
.LBB13_8:                               # %if.end23
	movl	460(%rsp), %eax         # 4-byte Reload
	shll	$10, %eax
	movslq	%eax, %rdi
	callq	malloc
	cmpq	$0, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	jne	.LBB13_10
# %bb.9:                                # %if.then28
	movabsq	$.Lstr.42, %rdi
	callq	puts
	xorl	%edi, %edi
	movl	%eax, 428(%rsp)         # 4-byte Spill
	callq	exit
	jmp	.LBB13_89
.LBB13_10:                              # %if.end30
	movl	460(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%cl
	testb	$1, %cl
	movb	%cl, 427(%rsp)          # 1-byte Spill
	jne	.LBB13_12
# %bb.11:                               # %for.end.thread
	movb	$0, smallMode
	movl	$1180, 516(%rsp)        # imm = 0x49C
	movl	$0, verbosity
	movl	$1181, 516(%rsp)        # imm = 0x49D
	movl	$9, blockSize100k
	movl	$1183, 516(%rsp)        # imm = 0x49F
	movl	$30, workFactor
	movl	$1187, 516(%rsp)        # imm = 0x4A3
	jmp	.LBB13_33
.LBB13_12:                              # %for.body.lr.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1027, %eax             # imm = 0x403
	movl	%eax, %edx
	movq	spec_fd+16, %rsi
	movl	$1234, 516(%rsp)        # imm = 0x4D2
	movl	472(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rdi
	cmpq	$1027, %rdi             # imm = 0x403
	movq	%rdx, %r8
	cmovgq	%rdi, %r8
	addq	$-1, %r8
	movq	%r8, %rax
	xorl	%r9d, %r9d
	movq	%rdx, 416(%rsp)         # 8-byte Spill
	movl	%r9d, %edx
	movq	416(%rsp), %r8          # 8-byte Reload
	divq	%r8
	addq	$1, %rax
	cmpq	$16, %rax
	movq	%rcx, %r10
	movq	%r10, 408(%rsp)         # 8-byte Spill
	movq	%rdi, 400(%rsp)         # 8-byte Spill
	movq	%rsi, 392(%rsp)         # 8-byte Spill
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movq	%rcx, 376(%rsp)         # 8-byte Spill
	jb	.LBB13_16
# %bb.13:                               # %vector.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$36028797018963952, %rdx # imm = 0x7FFFFFFFFFFFF0
	movq	384(%rsp), %rsi         # 8-byte Reload
	andq	%rdx, %rsi
	imulq	$1027, %rsi, %rdx       # imm = 0x403
	movq	%rdx, 368(%rsp)         # 8-byte Spill
	movq	%rsi, 360(%rsp)         # 8-byte Spill
	movq	%rcx, 352(%rsp)         # 8-byte Spill
.LBB13_14:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	movq	352(%rsp), %rax         # 8-byte Reload
	imulq	$1027, %rax, %rcx       # imm = 0x403
	movq	392(%rsp), %rdx         # 8-byte Reload
	movzbl	(%rdx,%rcx), %esi
	movl	$1235, 516(%rsp)        # imm = 0x4D3
	movzbl	1027(%rdx,%rcx), %edi
	movl	$1236, 516(%rsp)        # imm = 0x4D4
	movzbl	2054(%rdx,%rcx), %r8d
	movl	$1237, 516(%rsp)        # imm = 0x4D5
	movzbl	3081(%rdx,%rcx), %r9d
	movl	$1238, 516(%rsp)        # imm = 0x4D6
	movzbl	4108(%rdx,%rcx), %r10d
	movl	$1239, 516(%rsp)        # imm = 0x4D7
	movzbl	5135(%rdx,%rcx), %r11d
	movl	$1240, 516(%rsp)        # imm = 0x4D8
	movzbl	6162(%rdx,%rcx), %ebx
	movl	$1241, 516(%rsp)        # imm = 0x4D9
	movzbl	7189(%rdx,%rcx), %ebp
	movl	$1242, 516(%rsp)        # imm = 0x4DA
	movzbl	8216(%rdx,%rcx), %r14d
	movl	$1243, 516(%rsp)        # imm = 0x4DB
	movzbl	9243(%rdx,%rcx), %r15d
	movl	$1244, 516(%rsp)        # imm = 0x4DC
	movzbl	10270(%rdx,%rcx), %r12d
	movl	$1245, 516(%rsp)        # imm = 0x4DD
	movzbl	11297(%rdx,%rcx), %r13d
	movl	$1246, 516(%rsp)        # imm = 0x4DE
	movzbl	12324(%rdx,%rcx), %edx
	movl	$1247, 516(%rsp)        # imm = 0x4DF
	movq	%rax, 344(%rsp)         # 8-byte Spill
	movq	392(%rsp), %rax         # 8-byte Reload
	movzbl	13351(%rax,%rcx), %eax
	movl	$1248, 516(%rsp)        # imm = 0x4E0
	movq	%rcx, 336(%rsp)         # 8-byte Spill
	movq	392(%rsp), %rcx         # 8-byte Reload
	movl	%esi, 332(%rsp)         # 4-byte Spill
	movq	336(%rsp), %rsi         # 8-byte Reload
	movzbl	14378(%rcx,%rsi), %esi
	movl	$1249, 516(%rsp)        # imm = 0x4E1
	movl	%esi, 328(%rsp)         # 4-byte Spill
	movq	336(%rsp), %rsi         # 8-byte Reload
	movzbl	15405(%rcx,%rsi), %esi
	movl	$1268, 516(%rsp)        # imm = 0x4F4
	movl	332(%rsp), %ecx         # 4-byte Reload
	movd	%ecx, %xmm0
	movd	%edi, %xmm1
	punpcklbw	%xmm1, %xmm0    # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
	movd	%r8d, %xmm1
	movd	%r9d, %xmm2
	punpcklbw	%xmm2, %xmm1    # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1],xmm1[2],xmm2[2],xmm1[3],xmm2[3],xmm1[4],xmm2[4],xmm1[5],xmm2[5],xmm1[6],xmm2[6],xmm1[7],xmm2[7]
	punpcklwd	%xmm1, %xmm0    # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3]
	movd	%r10d, %xmm1
	movd	%r11d, %xmm2
	punpcklbw	%xmm2, %xmm1    # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1],xmm1[2],xmm2[2],xmm1[3],xmm2[3],xmm1[4],xmm2[4],xmm1[5],xmm2[5],xmm1[6],xmm2[6],xmm1[7],xmm2[7]
	movd	%ebx, %xmm2
	movd	%ebp, %xmm3
	punpcklbw	%xmm3, %xmm2    # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1],xmm2[2],xmm3[2],xmm2[3],xmm3[3],xmm2[4],xmm3[4],xmm2[5],xmm3[5],xmm2[6],xmm3[6],xmm2[7],xmm3[7]
	punpcklwd	%xmm2, %xmm1    # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1],xmm1[2],xmm2[2],xmm1[3],xmm2[3]
	punpckldq	%xmm1, %xmm0    # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	movd	%r14d, %xmm1
	movd	%r15d, %xmm2
	punpcklbw	%xmm2, %xmm1    # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1],xmm1[2],xmm2[2],xmm1[3],xmm2[3],xmm1[4],xmm2[4],xmm1[5],xmm2[5],xmm1[6],xmm2[6],xmm1[7],xmm2[7]
	movd	%r12d, %xmm2
	movd	%r13d, %xmm3
	punpcklbw	%xmm3, %xmm2    # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1],xmm2[2],xmm3[2],xmm2[3],xmm3[3],xmm2[4],xmm3[4],xmm2[5],xmm3[5],xmm2[6],xmm3[6],xmm2[7],xmm3[7]
	punpcklwd	%xmm2, %xmm1    # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1],xmm1[2],xmm2[2],xmm1[3],xmm2[3]
	movd	%edx, %xmm2
	movd	%eax, %xmm3
	punpcklbw	%xmm3, %xmm2    # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1],xmm2[2],xmm3[2],xmm2[3],xmm3[3],xmm2[4],xmm3[4],xmm2[5],xmm3[5],xmm2[6],xmm3[6],xmm2[7],xmm3[7]
	movl	328(%rsp), %eax         # 4-byte Reload
	movd	%eax, %xmm3
	movd	%esi, %xmm4
	punpcklbw	%xmm4, %xmm3    # xmm3 = xmm3[0],xmm4[0],xmm3[1],xmm4[1],xmm3[2],xmm4[2],xmm3[3],xmm4[3],xmm3[4],xmm4[4],xmm3[5],xmm4[5],xmm3[6],xmm4[6],xmm3[7],xmm4[7]
	punpcklwd	%xmm3, %xmm2    # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1],xmm2[2],xmm3[2],xmm2[3],xmm3[3]
	punpckldq	%xmm2, %xmm1    # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	punpcklqdq	%xmm1, %xmm0    # xmm0 = xmm0[0],xmm1[0]
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	344(%rsp), %rdi         # 8-byte Reload
	movdqu	%xmm0, (%rsi,%rdi)
	movl	$1281, 516(%rsp)        # imm = 0x501
	addq	$16, %rdi
	movq	360(%rsp), %rsi         # 8-byte Reload
	cmpq	%rsi, %rdi
	movq	%rdi, 352(%rsp)         # 8-byte Spill
	jne	.LBB13_14
# %bb.15:                               # %middle.block
	movq	384(%rsp), %rax         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	cmpq	%rcx, %rax
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movq	%rdx, 376(%rsp)         # 8-byte Spill
	je	.LBB13_18
.LBB13_16:                              # %for.body.preheader
	movq	376(%rsp), %rax         # 8-byte Reload
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 320(%rsp)         # 8-byte Spill
	movq	%rax, 312(%rsp)         # 8-byte Spill
.LBB13_17:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	312(%rsp), %rax         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %rdx         # 8-byte Reload
	movb	(%rdx,%rax), %sil
	movl	$1283, 516(%rsp)        # imm = 0x503
	movq	432(%rsp), %rdi         # 8-byte Reload
	movb	%sil, (%rdi,%rcx)
	movl	$1287, 516(%rsp)        # imm = 0x507
	addq	$1, %rcx
	imulq	$1027, %rcx, %r8        # imm = 0x403
	addq	$1027, %rax             # imm = 0x403
	movq	400(%rsp), %r9          # 8-byte Reload
	cmpq	%r9, %r8
	movq	%rcx, 320(%rsp)         # 8-byte Spill
	movq	%rax, 312(%rsp)         # 8-byte Spill
	jl	.LBB13_17
.LBB13_18:                              # %for.end
	movb	$0, smallMode
	movl	$1288, 516(%rsp)        # imm = 0x508
	movl	$0, verbosity
	movl	$1289, 516(%rsp)        # imm = 0x509
	movl	$9, blockSize100k
	movl	$1290, 516(%rsp)        # imm = 0x50A
	movl	$30, workFactor
	movl	$1293, 516(%rsp)        # imm = 0x50D
	movb	427(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB13_19
	jmp	.LBB13_33
.LBB13_19:                              # %for.end.split.us
	movl	472(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movl	dbglvl, %edx
	movl	$1300, 516(%rsp)        # imm = 0x514
	cmpl	$2, %edx
	movq	%rcx, 304(%rsp)         # 8-byte Spill
	jle	.LBB13_21
# %bb.20:                               # %if.then46.us
	movl	$5, %esi
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
	movl	%eax, 300(%rsp)         # 4-byte Spill
.LBB13_21:                              # %if.end48.us
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$5, blockSize100k
	movl	$1304, 516(%rsp)        # imm = 0x518
	callq	compressStream
	movl	dbglvl, %esi
	movl	$1308, 516(%rsp)        # imm = 0x51C
	cmpl	$3, %esi
	jle	.LBB13_23
# %bb.22:                               # %if.then52.us
	movabsq	$.L.str.28, %rdi
	movl	spec_fd+28, %esi
	movl	$1313, 516(%rsp)        # imm = 0x521
	movb	$0, %al
	callq	printf
	movl	%eax, 296(%rsp)         # 4-byte Spill
.LBB13_23:                              # %if.end54.us
	xorl	%esi, %esi
	movq	spec_fd+16, %rdi
	movl	$1315, 516(%rsp)        # imm = 0x523
	movl	spec_fd+4, %eax
	movl	$1319, 516(%rsp)        # imm = 0x527
	movslq	%eax, %rdx
	callq	memset
	movl	$0, spec_fd+4
	movl	$1321, 516(%rsp)        # imm = 0x529
	movl	$0, spec_fd+8
	movl	$1323, 516(%rsp)        # imm = 0x52B
	movl	$0, spec_fd+32
	movl	$1324, 516(%rsp)        # imm = 0x52C
	movl	dbglvl, %eax
	movl	$1330, 516(%rsp)        # imm = 0x532
	cmpl	$2, %eax
	jle	.LBB13_25
# %bb.24:                               # %if.then60.us
	movabsq	$.Lstr.41, %rdi
	callq	puts
	movl	%eax, 292(%rsp)         # 4-byte Spill
.LBB13_25:                              # %if.end62.us
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$0, blockSize100k
	movl	$1334, 516(%rsp)        # imm = 0x536
	callq	uncompressStream
	movl	dbglvl, %esi
	movl	$1338, 516(%rsp)        # imm = 0x53A
	cmpl	$3, %esi
	movb	%al, 291(%rsp)          # 1-byte Spill
	jle	.LBB13_31
# %bb.26:                               # %if.then66.us
	movabsq	$.L.str.30, %rdi
	movl	spec_fd+4, %esi
	movl	$1350, 516(%rsp)        # imm = 0x546
	movb	$0, %al
	callq	printf
	movl	%eax, 284(%rsp)         # 4-byte Spill
	jmp	.LBB13_31
.LBB13_27:                              # %for.cond69.us
                                        #   in Loop: Header=BB13_30 Depth=1
	movq	272(%rsp), %rax         # 8-byte Reload
	imulq	$1027, %rax, %rcx       # imm = 0x403
	movl	268(%rsp), %edx         # 4-byte Reload
	imull	$1027, %edx, %esi       # imm = 0x403
	movq	304(%rsp), %rdi         # 8-byte Reload
	cmpq	%rdi, %rcx
	movq	%rax, 256(%rsp)         # 8-byte Spill
	movl	%edx, 252(%rsp)         # 4-byte Spill
	movl	%esi, 248(%rsp)         # 4-byte Spill
	jl	.LBB13_30
	jmp	.LBB13_32
.LBB13_28:                              # %if.then93.us
	movabsq	$.Lstr.40, %rdi
	callq	puts
	movl	%eax, 244(%rsp)         # 4-byte Spill
.LBB13_29:                              # %if.end95.us
	xorl	%esi, %esi
	movq	spec_fd+40, %rdi
	movl	$1352, 516(%rsp)        # imm = 0x548
	movl	spec_fd+28, %eax
	movl	$1356, 516(%rsp)        # imm = 0x54C
	movslq	%eax, %rdx
	callq	memset
	movl	$0, spec_fd+28
	movl	$1358, 516(%rsp)        # imm = 0x54E
	movl	$0, spec_fd+32
	movl	$1360, 516(%rsp)        # imm = 0x550
	movl	$0, spec_fd+8
	movl	$1361, 516(%rsp)        # imm = 0x551
	movl	dbglvl, %eax
	movl	$1370, 516(%rsp)        # imm = 0x55A
	cmpl	$2, %eax
	jg	.LBB13_45
	jmp	.LBB13_46
.LBB13_30:                              # %for.body74.us
                                        # =>This Inner Loop Header: Depth=1
	movl	252(%rsp), %eax         # 4-byte Reload
	movl	248(%rsp), %ecx         # 4-byte Reload
	movq	256(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$1374, 516(%rsp)        # imm = 0x55E
	movl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	232(%rsp), %r9          # 8-byte Reload
	movb	(%r9,%r8), %r10b
	movl	$1373, 516(%rsp)        # imm = 0x55D
	addq	$1, %rdx
	addl	$1, %eax
	cmpb	%r10b, %dil
	movq	%rdx, 272(%rsp)         # 8-byte Spill
	movl	%eax, 268(%rsp)         # 4-byte Spill
	je	.LBB13_27
	jmp	.LBB13_40
.LBB13_31:                              # %for.body74.lr.ph.us
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movq	spec_fd+16, %rdx
	movl	$1379, 516(%rsp)        # imm = 0x563
	movl	%eax, %esi
	movq	%rdx, 232(%rsp)         # 8-byte Spill
	movl	%esi, 248(%rsp)         # 4-byte Spill
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	movl	%eax, 252(%rsp)         # 4-byte Spill
	jmp	.LBB13_30
.LBB13_32:                              # %for.cond69.for.end89_crit_edge.us
	movl	dbglvl, %eax
	movl	$1382, 516(%rsp)        # imm = 0x566
	cmpl	$3, %eax
	jg	.LBB13_28
	jmp	.LBB13_29
.LBB13_33:                              # %for.end.split
	movl	dbglvl, %eax
	movl	$1388, 516(%rsp)        # imm = 0x56C
	cmpl	$2, %eax
	jle	.LBB13_35
# %bb.34:                               # %if.then46
	movl	$5, %esi
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
	movl	%eax, 228(%rsp)         # 4-byte Spill
.LBB13_35:                              # %if.end48
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$5, blockSize100k
	movl	$1390, 516(%rsp)        # imm = 0x56E
	callq	compressStream
	movl	dbglvl, %esi
	movl	$1394, 516(%rsp)        # imm = 0x572
	cmpl	$3, %esi
	jle	.LBB13_37
# %bb.36:                               # %if.then52
	movabsq	$.L.str.28, %rdi
	movl	spec_fd+28, %esi
	movl	$1399, 516(%rsp)        # imm = 0x577
	movb	$0, %al
	callq	printf
	movl	%eax, 224(%rsp)         # 4-byte Spill
.LBB13_37:                              # %if.end54
	xorl	%esi, %esi
	movq	spec_fd+16, %rdi
	movl	$1401, 516(%rsp)        # imm = 0x579
	movl	spec_fd+4, %eax
	movl	$1405, 516(%rsp)        # imm = 0x57D
	movslq	%eax, %rdx
	callq	memset
	movl	$0, spec_fd+4
	movl	$1407, 516(%rsp)        # imm = 0x57F
	movl	$0, spec_fd+8
	movl	$1409, 516(%rsp)        # imm = 0x581
	movl	$0, spec_fd+32
	movl	$1410, 516(%rsp)        # imm = 0x582
	movl	dbglvl, %eax
	movl	$1416, 516(%rsp)        # imm = 0x588
	cmpl	$2, %eax
	jle	.LBB13_39
# %bb.38:                               # %if.then60
	movabsq	$.Lstr.41, %rdi
	callq	puts
	movl	%eax, 220(%rsp)         # 4-byte Spill
.LBB13_39:                              # %if.end62
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$0, blockSize100k
	movl	$1418, 516(%rsp)        # imm = 0x58A
	callq	uncompressStream
	movl	dbglvl, %esi
	movl	$1426, 516(%rsp)        # imm = 0x592
	cmpl	$3, %esi
	movb	%al, 219(%rsp)          # 1-byte Spill
	jg	.LBB13_41
	jmp	.LBB13_43
.LBB13_40:                              # %if.then84
	movabsq	$.L.str.31, %rdi
	movl	460(%rsp), %esi         # 4-byte Reload
	movb	$0, %al
	callq	printf
	xorl	%edi, %edi
	movl	%eax, 212(%rsp)         # 4-byte Spill
	callq	exit
	jmp	.LBB13_89
.LBB13_41:                              # %for.end89
	movabsq	$.L.str.30, %rdi
	movl	spec_fd+4, %esi
	movl	$1429, 516(%rsp)        # imm = 0x595
	movb	$0, %al
	callq	printf
	movl	dbglvl, %esi
	movl	$1436, 516(%rsp)        # imm = 0x59C
	cmpl	$3, %esi
	movl	%eax, 208(%rsp)         # 4-byte Spill
	jle	.LBB13_43
# %bb.42:                               # %if.then93
	movabsq	$.Lstr.40, %rdi
	callq	puts
	movl	%eax, 204(%rsp)         # 4-byte Spill
.LBB13_43:                              # %if.end95
	xorl	%esi, %esi
	movq	spec_fd+40, %rdi
	movl	$1438, 516(%rsp)        # imm = 0x59E
	movl	spec_fd+28, %eax
	movl	$1442, 516(%rsp)        # imm = 0x5A2
	movslq	%eax, %rdx
	callq	memset
	movl	$0, spec_fd+28
	movl	$1444, 516(%rsp)        # imm = 0x5A4
	movl	$0, spec_fd+32
	movl	$1446, 516(%rsp)        # imm = 0x5A6
	movl	$0, spec_fd+8
	movl	$1447, 516(%rsp)        # imm = 0x5A7
	movl	dbglvl, %eax
	movl	$1451, 516(%rsp)        # imm = 0x5AB
	cmpl	$2, %eax
	jg	.LBB13_71
	jmp	.LBB13_72
.LBB13_44:                              # %for.end99
	movabsq	$.L.str.33, %rdi
	movl	$0, spec_fd+28
	movl	$1453, 516(%rsp)        # imm = 0x5AD
	movl	$0, spec_fd+32
	movl	$1455, 516(%rsp)        # imm = 0x5AF
	movl	$0, spec_fd+8
	movl	$1463, 516(%rsp)        # imm = 0x5B7
	movl	460(%rsp), %esi         # 4-byte Reload
	movb	$0, %al
	callq	printf
	xorl	%esi, %esi
	movl	%eax, 200(%rsp)         # 4-byte Spill
	movl	%esi, %eax
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB13_45:                              # %if.then46.us.1
	movl	$7, %esi
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
	movl	%eax, 196(%rsp)         # 4-byte Spill
.LBB13_46:                              # %if.end48.us.1
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$7, blockSize100k
	movl	$1465, 516(%rsp)        # imm = 0x5B9
	callq	compressStream
	movl	dbglvl, %esi
	movl	$1469, 516(%rsp)        # imm = 0x5BD
	cmpl	$3, %esi
	jle	.LBB13_48
# %bb.47:                               # %if.then52.us.1
	movabsq	$.L.str.28, %rdi
	movl	spec_fd+28, %esi
	movl	$1474, 516(%rsp)        # imm = 0x5C2
	movb	$0, %al
	callq	printf
	movl	%eax, 192(%rsp)         # 4-byte Spill
.LBB13_48:                              # %if.end54.us.1
	xorl	%esi, %esi
	movq	spec_fd+16, %rdi
	movl	$1476, 516(%rsp)        # imm = 0x5C4
	movl	spec_fd+4, %eax
	movl	$1480, 516(%rsp)        # imm = 0x5C8
	movslq	%eax, %rdx
	callq	memset
	movl	$0, spec_fd+4
	movl	$1482, 516(%rsp)        # imm = 0x5CA
	movl	$0, spec_fd+8
	movl	$1484, 516(%rsp)        # imm = 0x5CC
	movl	$0, spec_fd+32
	movl	$1485, 516(%rsp)        # imm = 0x5CD
	movl	dbglvl, %eax
	movl	$1491, 516(%rsp)        # imm = 0x5D3
	cmpl	$2, %eax
	jle	.LBB13_50
# %bb.49:                               # %if.then60.us.1
	movabsq	$.Lstr.41, %rdi
	callq	puts
	movl	%eax, 188(%rsp)         # 4-byte Spill
.LBB13_50:                              # %if.end62.us.1
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$0, blockSize100k
	movl	$1493, 516(%rsp)        # imm = 0x5D5
	callq	uncompressStream
	movl	dbglvl, %esi
	movl	$1497, 516(%rsp)        # imm = 0x5D9
	cmpl	$3, %esi
	movb	%al, 187(%rsp)          # 1-byte Spill
	jle	.LBB13_52
# %bb.51:                               # %if.then66.us.1
	movabsq	$.L.str.30, %rdi
	movl	spec_fd+4, %esi
	movl	$1502, 516(%rsp)        # imm = 0x5DE
	movb	$0, %al
	callq	printf
	movl	%eax, 180(%rsp)         # 4-byte Spill
.LBB13_52:                              # %for.body74.lr.ph.us.1
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movq	spec_fd+16, %rdx
	movl	$1511, 516(%rsp)        # imm = 0x5E7
	movl	%eax, %esi
	movq	%rdx, 168(%rsp)         # 8-byte Spill
	movl	%esi, 164(%rsp)         # 4-byte Spill
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movl	%eax, 148(%rsp)         # 4-byte Spill
.LBB13_53:                              # %for.body74.us.1
                                        # =>This Inner Loop Header: Depth=1
	movl	148(%rsp), %eax         # 4-byte Reload
	movl	164(%rsp), %ecx         # 4-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$1514, 516(%rsp)        # imm = 0x5EA
	movl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	168(%rsp), %r9          # 8-byte Reload
	movb	(%r9,%r8), %r10b
	movl	$1520, 516(%rsp)        # imm = 0x5F0
	addq	$1, %rdx
	addl	$1, %eax
	cmpb	%r10b, %dil
	movq	%rdx, 136(%rsp)         # 8-byte Spill
	movl	%eax, 132(%rsp)         # 4-byte Spill
	jne	.LBB13_40
# %bb.54:                               # %for.cond69.us.1
                                        #   in Loop: Header=BB13_53 Depth=1
	movq	136(%rsp), %rax         # 8-byte Reload
	imulq	$1027, %rax, %rcx       # imm = 0x403
	movl	132(%rsp), %edx         # 4-byte Reload
	imull	$1027, %edx, %esi       # imm = 0x403
	movq	304(%rsp), %rdi         # 8-byte Reload
	cmpq	%rdi, %rcx
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movl	%edx, 148(%rsp)         # 4-byte Spill
	movl	%esi, 164(%rsp)         # 4-byte Spill
	jl	.LBB13_53
# %bb.55:                               # %for.cond69.for.end89_crit_edge.us.1
	movl	dbglvl, %eax
	movl	$1527, 516(%rsp)        # imm = 0x5F7
	cmpl	$3, %eax
	jle	.LBB13_57
# %bb.56:                               # %if.then93.us.1
	movabsq	$.Lstr.40, %rdi
	callq	puts
	movl	%eax, 128(%rsp)         # 4-byte Spill
.LBB13_57:                              # %if.end95.us.1
	xorl	%esi, %esi
	movq	spec_fd+40, %rdi
	movl	$1529, 516(%rsp)        # imm = 0x5F9
	movl	spec_fd+28, %eax
	movl	$1533, 516(%rsp)        # imm = 0x5FD
	movslq	%eax, %rdx
	callq	memset
	movl	$0, spec_fd+28
	movl	$1535, 516(%rsp)        # imm = 0x5FF
	movl	$0, spec_fd+32
	movl	$1537, 516(%rsp)        # imm = 0x601
	movl	$0, spec_fd+8
	movl	$1538, 516(%rsp)        # imm = 0x602
	movl	dbglvl, %eax
	movl	$1544, 516(%rsp)        # imm = 0x608
	cmpl	$2, %eax
	jle	.LBB13_59
# %bb.58:                               # %if.then46.us.2
	movl	$9, %esi
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
	movl	%eax, 124(%rsp)         # 4-byte Spill
.LBB13_59:                              # %if.end48.us.2
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$9, blockSize100k
	movl	$1546, 516(%rsp)        # imm = 0x60A
	callq	compressStream
	movl	dbglvl, %esi
	movl	$1550, 516(%rsp)        # imm = 0x60E
	cmpl	$3, %esi
	jle	.LBB13_61
# %bb.60:                               # %if.then52.us.2
	movabsq	$.L.str.28, %rdi
	movl	spec_fd+28, %esi
	movl	$1555, 516(%rsp)        # imm = 0x613
	movb	$0, %al
	callq	printf
	movl	%eax, 120(%rsp)         # 4-byte Spill
.LBB13_61:                              # %if.end54.us.2
	xorl	%esi, %esi
	movq	spec_fd+16, %rdi
	movl	$1557, 516(%rsp)        # imm = 0x615
	movl	spec_fd+4, %eax
	movl	$1561, 516(%rsp)        # imm = 0x619
	movslq	%eax, %rdx
	callq	memset
	movl	$0, spec_fd+4
	movl	$1563, 516(%rsp)        # imm = 0x61B
	movl	$0, spec_fd+8
	movl	$1565, 516(%rsp)        # imm = 0x61D
	movl	$0, spec_fd+32
	movl	$1566, 516(%rsp)        # imm = 0x61E
	movl	dbglvl, %eax
	movl	$1572, 516(%rsp)        # imm = 0x624
	cmpl	$2, %eax
	jle	.LBB13_63
# %bb.62:                               # %if.then60.us.2
	movabsq	$.Lstr.41, %rdi
	callq	puts
	movl	%eax, 116(%rsp)         # 4-byte Spill
.LBB13_63:                              # %if.end62.us.2
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$0, blockSize100k
	movl	$1574, 516(%rsp)        # imm = 0x626
	callq	uncompressStream
	movl	dbglvl, %esi
	movl	$1578, 516(%rsp)        # imm = 0x62A
	cmpl	$3, %esi
	movb	%al, 115(%rsp)          # 1-byte Spill
	jle	.LBB13_65
# %bb.64:                               # %if.then66.us.2
	movabsq	$.L.str.30, %rdi
	movl	spec_fd+4, %esi
	movl	$1583, 516(%rsp)        # imm = 0x62F
	movb	$0, %al
	callq	printf
	movl	%eax, 108(%rsp)         # 4-byte Spill
.LBB13_65:                              # %for.body74.lr.ph.us.2
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movq	spec_fd+16, %rdx
	movl	$1592, 516(%rsp)        # imm = 0x638
	movl	%eax, %esi
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	movl	%esi, 92(%rsp)          # 4-byte Spill
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movl	%eax, 76(%rsp)          # 4-byte Spill
.LBB13_66:                              # %for.body74.us.2
                                        # =>This Inner Loop Header: Depth=1
	movl	76(%rsp), %eax          # 4-byte Reload
	movl	92(%rsp), %ecx          # 4-byte Reload
	movq	80(%rsp), %rdx          # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$1595, 516(%rsp)        # imm = 0x63B
	movl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	96(%rsp), %r9           # 8-byte Reload
	movb	(%r9,%r8), %r10b
	movl	$1601, 516(%rsp)        # imm = 0x641
	addq	$1, %rdx
	addl	$1, %eax
	cmpb	%r10b, %dil
	movq	%rdx, 64(%rsp)          # 8-byte Spill
	movl	%eax, 60(%rsp)          # 4-byte Spill
	jne	.LBB13_40
# %bb.67:                               # %for.cond69.us.2
                                        #   in Loop: Header=BB13_66 Depth=1
	movq	64(%rsp), %rax          # 8-byte Reload
	imulq	$1027, %rax, %rcx       # imm = 0x403
	movl	60(%rsp), %edx          # 4-byte Reload
	imull	$1027, %edx, %esi       # imm = 0x403
	movq	304(%rsp), %rdi         # 8-byte Reload
	cmpq	%rdi, %rcx
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movl	%edx, 76(%rsp)          # 4-byte Spill
	movl	%esi, 92(%rsp)          # 4-byte Spill
	jl	.LBB13_66
# %bb.68:                               # %for.cond69.for.end89_crit_edge.us.2
	movl	dbglvl, %eax
	movl	$1608, 516(%rsp)        # imm = 0x648
	cmpl	$3, %eax
	jle	.LBB13_70
# %bb.69:                               # %if.then93.us.2
	movabsq	$.Lstr.40, %rdi
	callq	puts
	movl	%eax, 56(%rsp)          # 4-byte Spill
.LBB13_70:                              # %if.end95.us.2
	xorl	%esi, %esi
	movq	spec_fd+40, %rdi
	movl	$1610, 516(%rsp)        # imm = 0x64A
	movl	spec_fd+28, %eax
	movl	$1617, 516(%rsp)        # imm = 0x651
	movslq	%eax, %rdx
	callq	memset
	jmp	.LBB13_44
.LBB13_71:                              # %if.then46.1
	movl	$7, %esi
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
	movl	%eax, 52(%rsp)          # 4-byte Spill
.LBB13_72:                              # %if.end48.1
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$7, blockSize100k
	movl	$1619, 516(%rsp)        # imm = 0x653
	callq	compressStream
	movl	dbglvl, %esi
	movl	$1623, 516(%rsp)        # imm = 0x657
	cmpl	$3, %esi
	jle	.LBB13_74
# %bb.73:                               # %if.then52.1
	movabsq	$.L.str.28, %rdi
	movl	spec_fd+28, %esi
	movl	$1628, 516(%rsp)        # imm = 0x65C
	movb	$0, %al
	callq	printf
	movl	%eax, 48(%rsp)          # 4-byte Spill
.LBB13_74:                              # %if.end54.1
	xorl	%esi, %esi
	movq	spec_fd+16, %rdi
	movl	$1630, 516(%rsp)        # imm = 0x65E
	movl	spec_fd+4, %eax
	movl	$1634, 516(%rsp)        # imm = 0x662
	movslq	%eax, %rdx
	callq	memset
	movl	$0, spec_fd+4
	movl	$1636, 516(%rsp)        # imm = 0x664
	movl	$0, spec_fd+8
	movl	$1638, 516(%rsp)        # imm = 0x666
	movl	$0, spec_fd+32
	movl	$1639, 516(%rsp)        # imm = 0x667
	movl	dbglvl, %eax
	movl	$1645, 516(%rsp)        # imm = 0x66D
	cmpl	$2, %eax
	jle	.LBB13_76
# %bb.75:                               # %if.then60.1
	movabsq	$.Lstr.41, %rdi
	callq	puts
	movl	%eax, 44(%rsp)          # 4-byte Spill
.LBB13_76:                              # %if.end62.1
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$0, blockSize100k
	movl	$1647, 516(%rsp)        # imm = 0x66F
	callq	uncompressStream
	movl	dbglvl, %esi
	movl	$1651, 516(%rsp)        # imm = 0x673
	cmpl	$3, %esi
	movb	%al, 43(%rsp)           # 1-byte Spill
	jle	.LBB13_79
# %bb.77:                               # %for.end89.1
	movabsq	$.L.str.30, %rdi
	movl	spec_fd+4, %esi
	movl	$1654, 516(%rsp)        # imm = 0x676
	movb	$0, %al
	callq	printf
	movl	dbglvl, %esi
	movl	$1661, 516(%rsp)        # imm = 0x67D
	cmpl	$3, %esi
	movl	%eax, 36(%rsp)          # 4-byte Spill
	jle	.LBB13_79
# %bb.78:                               # %if.then93.1
	movabsq	$.Lstr.40, %rdi
	callq	puts
	movl	%eax, 32(%rsp)          # 4-byte Spill
.LBB13_79:                              # %if.end95.1
	xorl	%esi, %esi
	movq	spec_fd+40, %rdi
	movl	$1663, 516(%rsp)        # imm = 0x67F
	movl	spec_fd+28, %eax
	movl	$1667, 516(%rsp)        # imm = 0x683
	movslq	%eax, %rdx
	callq	memset
	movl	$0, spec_fd+28
	movl	$1669, 516(%rsp)        # imm = 0x685
	movl	$0, spec_fd+32
	movl	$1671, 516(%rsp)        # imm = 0x687
	movl	$0, spec_fd+8
	movl	$1672, 516(%rsp)        # imm = 0x688
	movl	dbglvl, %eax
	movl	$1678, 516(%rsp)        # imm = 0x68E
	cmpl	$2, %eax
	jle	.LBB13_81
# %bb.80:                               # %if.then46.2
	movl	$9, %esi
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
	movl	%eax, 28(%rsp)          # 4-byte Spill
.LBB13_81:                              # %if.end48.2
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$9, blockSize100k
	movl	$1680, 516(%rsp)        # imm = 0x690
	callq	compressStream
	movl	dbglvl, %esi
	movl	$1684, 516(%rsp)        # imm = 0x694
	cmpl	$3, %esi
	jle	.LBB13_83
# %bb.82:                               # %if.then52.2
	movabsq	$.L.str.28, %rdi
	movl	spec_fd+28, %esi
	movl	$1689, 516(%rsp)        # imm = 0x699
	movb	$0, %al
	callq	printf
	movl	%eax, 24(%rsp)          # 4-byte Spill
.LBB13_83:                              # %if.end54.2
	xorl	%esi, %esi
	movq	spec_fd+16, %rdi
	movl	$1691, 516(%rsp)        # imm = 0x69B
	movl	spec_fd+4, %eax
	movl	$1695, 516(%rsp)        # imm = 0x69F
	movslq	%eax, %rdx
	callq	memset
	movl	$0, spec_fd+4
	movl	$1697, 516(%rsp)        # imm = 0x6A1
	movl	$0, spec_fd+8
	movl	$1699, 516(%rsp)        # imm = 0x6A3
	movl	$0, spec_fd+32
	movl	$1700, 516(%rsp)        # imm = 0x6A4
	movl	dbglvl, %eax
	movl	$1706, 516(%rsp)        # imm = 0x6AA
	cmpl	$2, %eax
	jle	.LBB13_85
# %bb.84:                               # %if.then60.2
	movabsq	$.Lstr.41, %rdi
	callq	puts
	movl	%eax, 20(%rsp)          # 4-byte Spill
.LBB13_85:                              # %if.end62.2
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$0, blockSize100k
	movl	$1708, 516(%rsp)        # imm = 0x6AC
	callq	uncompressStream
	movl	dbglvl, %esi
	movl	$1712, 516(%rsp)        # imm = 0x6B0
	cmpl	$3, %esi
	movb	%al, 19(%rsp)           # 1-byte Spill
	jle	.LBB13_88
# %bb.86:                               # %for.end89.2
	movabsq	$.L.str.30, %rdi
	movl	spec_fd+4, %esi
	movl	$1715, 516(%rsp)        # imm = 0x6B3
	movb	$0, %al
	callq	printf
	movl	dbglvl, %esi
	movl	$1722, 516(%rsp)        # imm = 0x6BA
	cmpl	$3, %esi
	movl	%eax, 12(%rsp)          # 4-byte Spill
	jle	.LBB13_88
# %bb.87:                               # %if.then93.2
	movabsq	$.Lstr.40, %rdi
	callq	puts
	movl	%eax, 8(%rsp)           # 4-byte Spill
.LBB13_88:                              # %if.end95.2
	xorl	%esi, %esi
	movq	spec_fd+40, %rdi
	movl	$1724, 516(%rsp)        # imm = 0x6BC
	movl	spec_fd+28, %eax
	movl	$1739, 516(%rsp)        # imm = 0x6CB
	movslq	%eax, %rdx
	callq	memset
	jmp	.LBB13_44
.LBB13_89:                              # %UnifiedUnreachableBlock
.Lfunc_end13:
	.size	main, .Lfunc_end13-main
	.cfi_endproc
                                        # -- End function
	.globl	spec_compress           # -- Begin function spec_compress
	.p2align	4, 0x90
	.type	spec_compress,@function
spec_compress:                          # @spec_compress
	.cfi_startproc
# %bb.0:                                # %entry
	movl	$9999, -4(%rsp)         # imm = 0x270F
	movl	%edx, blockSize100k(%rip)
	movl	$1748, -4(%rsp)         # imm = 0x6D4
	jmp	compressStream          # TAILCALL
.Lfunc_end14:
	.size	spec_compress, .Lfunc_end14-spec_compress
	.cfi_endproc
                                        # -- End function
	.globl	spec_uncompress         # -- Begin function spec_uncompress
	.p2align	4, 0x90
	.type	spec_uncompress,@function
spec_uncompress:                        # @spec_uncompress
	.cfi_startproc
# %bb.0:                                # %entry
	movl	$9999, -4(%rsp)         # imm = 0x270F
	movl	$0, blockSize100k(%rip)
	movl	$1754, -4(%rsp)         # imm = 0x6DA
	movl	%edx, -8(%rsp)          # 4-byte Spill
	jmp	uncompressStream        # TAILCALL
.Lfunc_end15:
	.size	spec_uncompress, .Lfunc_end15-spec_uncompress
	.cfi_endproc
                                        # -- End function
	.globl	spec_initbufs           # -- Begin function spec_initbufs
	.p2align	4, 0x90
	.type	spec_initbufs,@function
spec_initbufs:                          # @spec_initbufs
	.cfi_startproc
# %bb.0:                                # %entry
	movl	$9999, -4(%rsp)         # imm = 0x270F
	movb	$0, smallMode
	movl	$1755, -4(%rsp)         # imm = 0x6DB
	movl	$0, verbosity
	movl	$1756, -4(%rsp)         # imm = 0x6DC
	movl	$9, blockSize100k
	movl	$1757, -4(%rsp)         # imm = 0x6DD
	movl	$30, workFactor
	movl	$1784, -4(%rsp)         # imm = 0x6F8
	retq
.Lfunc_end16:
	.size	spec_initbufs, .Lfunc_end16-spec_initbufs
	.cfi_endproc
                                        # -- End function
	.globl	debug_time              # -- Begin function debug_time
	.p2align	4, 0x90
	.type	debug_time,@function
debug_time:                             # @debug_time
	.cfi_startproc
# %bb.0:                                # %entry
	xorl	%eax, %eax
	movl	$9999, -4(%rsp)         # imm = 0x270F
	retq
.Lfunc_end17:
	.size	debug_time, .Lfunc_end17-debug_time
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4               # -- Begin function BZ2_blockSort
.LCPI18_0:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
.LCPI18_1:
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
.LCPI18_2:
	.long	8                       # 0x8
	.long	9                       # 0x9
	.long	10                      # 0xa
	.long	11                      # 0xb
.LCPI18_3:
	.long	12                      # 0xc
	.long	13                      # 0xd
	.long	14                      # 0xe
	.long	15                      # 0xf
.LCPI18_4:
	.long	16                      # 0x10
	.long	17                      # 0x11
	.long	18                      # 0x12
	.long	19                      # 0x13
.LCPI18_5:
	.long	20                      # 0x14
	.long	21                      # 0x15
	.long	22                      # 0x16
	.long	23                      # 0x17
.LCPI18_6:
	.long	24                      # 0x18
	.long	25                      # 0x19
	.long	26                      # 0x1a
	.long	27                      # 0x1b
.LCPI18_7:
	.long	28                      # 0x1c
	.long	29                      # 0x1d
	.long	30                      # 0x1e
	.long	31                      # 0x1f
.LCPI18_8:
	.long	32                      # 0x20
	.long	33                      # 0x21
	.long	34                      # 0x22
	.long	35                      # 0x23
.LCPI18_9:
	.long	36                      # 0x24
	.long	37                      # 0x25
	.long	38                      # 0x26
	.long	39                      # 0x27
.LCPI18_10:
	.long	40                      # 0x28
	.long	41                      # 0x29
	.long	42                      # 0x2a
	.long	43                      # 0x2b
.LCPI18_11:
	.long	44                      # 0x2c
	.long	45                      # 0x2d
	.long	46                      # 0x2e
	.long	47                      # 0x2f
.LCPI18_12:
	.long	48                      # 0x30
	.long	49                      # 0x31
	.long	50                      # 0x32
	.long	51                      # 0x33
.LCPI18_13:
	.long	52                      # 0x34
	.long	53                      # 0x35
	.long	54                      # 0x36
	.long	55                      # 0x37
.LCPI18_14:
	.long	56                      # 0x38
	.long	57                      # 0x39
	.long	58                      # 0x3a
	.long	59                      # 0x3b
.LCPI18_15:
	.long	60                      # 0x3c
	.long	61                      # 0x3d
	.long	62                      # 0x3e
	.long	63                      # 0x3f
.LCPI18_16:
	.long	64                      # 0x40
	.long	65                      # 0x41
	.long	66                      # 0x42
	.long	67                      # 0x43
.LCPI18_17:
	.long	68                      # 0x44
	.long	69                      # 0x45
	.long	70                      # 0x46
	.long	71                      # 0x47
.LCPI18_18:
	.long	72                      # 0x48
	.long	73                      # 0x49
	.long	74                      # 0x4a
	.long	75                      # 0x4b
.LCPI18_19:
	.long	76                      # 0x4c
	.long	77                      # 0x4d
	.long	78                      # 0x4e
	.long	79                      # 0x4f
.LCPI18_20:
	.long	80                      # 0x50
	.long	81                      # 0x51
	.long	82                      # 0x52
	.long	83                      # 0x53
.LCPI18_21:
	.long	84                      # 0x54
	.long	85                      # 0x55
	.long	86                      # 0x56
	.long	87                      # 0x57
.LCPI18_22:
	.long	88                      # 0x58
	.long	89                      # 0x59
	.long	90                      # 0x5a
	.long	91                      # 0x5b
.LCPI18_23:
	.long	92                      # 0x5c
	.long	93                      # 0x5d
	.long	94                      # 0x5e
	.long	95                      # 0x5f
.LCPI18_24:
	.long	96                      # 0x60
	.long	97                      # 0x61
	.long	98                      # 0x62
	.long	99                      # 0x63
.LCPI18_25:
	.long	100                     # 0x64
	.long	101                     # 0x65
	.long	102                     # 0x66
	.long	103                     # 0x67
.LCPI18_26:
	.long	104                     # 0x68
	.long	105                     # 0x69
	.long	106                     # 0x6a
	.long	107                     # 0x6b
.LCPI18_27:
	.long	108                     # 0x6c
	.long	109                     # 0x6d
	.long	110                     # 0x6e
	.long	111                     # 0x6f
.LCPI18_28:
	.long	112                     # 0x70
	.long	113                     # 0x71
	.long	114                     # 0x72
	.long	115                     # 0x73
.LCPI18_29:
	.long	116                     # 0x74
	.long	117                     # 0x75
	.long	118                     # 0x76
	.long	119                     # 0x77
.LCPI18_30:
	.long	120                     # 0x78
	.long	121                     # 0x79
	.long	122                     # 0x7a
	.long	123                     # 0x7b
.LCPI18_31:
	.long	124                     # 0x7c
	.long	125                     # 0x7d
	.long	126                     # 0x7e
	.long	127                     # 0x7f
.LCPI18_32:
	.long	128                     # 0x80
	.long	129                     # 0x81
	.long	130                     # 0x82
	.long	131                     # 0x83
.LCPI18_33:
	.long	132                     # 0x84
	.long	133                     # 0x85
	.long	134                     # 0x86
	.long	135                     # 0x87
.LCPI18_34:
	.long	136                     # 0x88
	.long	137                     # 0x89
	.long	138                     # 0x8a
	.long	139                     # 0x8b
.LCPI18_35:
	.long	140                     # 0x8c
	.long	141                     # 0x8d
	.long	142                     # 0x8e
	.long	143                     # 0x8f
.LCPI18_36:
	.long	144                     # 0x90
	.long	145                     # 0x91
	.long	146                     # 0x92
	.long	147                     # 0x93
.LCPI18_37:
	.long	148                     # 0x94
	.long	149                     # 0x95
	.long	150                     # 0x96
	.long	151                     # 0x97
.LCPI18_38:
	.long	152                     # 0x98
	.long	153                     # 0x99
	.long	154                     # 0x9a
	.long	155                     # 0x9b
.LCPI18_39:
	.long	156                     # 0x9c
	.long	157                     # 0x9d
	.long	158                     # 0x9e
	.long	159                     # 0x9f
.LCPI18_40:
	.long	160                     # 0xa0
	.long	161                     # 0xa1
	.long	162                     # 0xa2
	.long	163                     # 0xa3
.LCPI18_41:
	.long	164                     # 0xa4
	.long	165                     # 0xa5
	.long	166                     # 0xa6
	.long	167                     # 0xa7
.LCPI18_42:
	.long	168                     # 0xa8
	.long	169                     # 0xa9
	.long	170                     # 0xaa
	.long	171                     # 0xab
.LCPI18_43:
	.long	172                     # 0xac
	.long	173                     # 0xad
	.long	174                     # 0xae
	.long	175                     # 0xaf
.LCPI18_44:
	.long	176                     # 0xb0
	.long	177                     # 0xb1
	.long	178                     # 0xb2
	.long	179                     # 0xb3
.LCPI18_45:
	.long	180                     # 0xb4
	.long	181                     # 0xb5
	.long	182                     # 0xb6
	.long	183                     # 0xb7
.LCPI18_46:
	.long	184                     # 0xb8
	.long	185                     # 0xb9
	.long	186                     # 0xba
	.long	187                     # 0xbb
.LCPI18_47:
	.long	188                     # 0xbc
	.long	189                     # 0xbd
	.long	190                     # 0xbe
	.long	191                     # 0xbf
.LCPI18_48:
	.long	192                     # 0xc0
	.long	193                     # 0xc1
	.long	194                     # 0xc2
	.long	195                     # 0xc3
.LCPI18_49:
	.long	196                     # 0xc4
	.long	197                     # 0xc5
	.long	198                     # 0xc6
	.long	199                     # 0xc7
.LCPI18_50:
	.long	200                     # 0xc8
	.long	201                     # 0xc9
	.long	202                     # 0xca
	.long	203                     # 0xcb
.LCPI18_51:
	.long	204                     # 0xcc
	.long	205                     # 0xcd
	.long	206                     # 0xce
	.long	207                     # 0xcf
.LCPI18_52:
	.long	208                     # 0xd0
	.long	209                     # 0xd1
	.long	210                     # 0xd2
	.long	211                     # 0xd3
.LCPI18_53:
	.long	212                     # 0xd4
	.long	213                     # 0xd5
	.long	214                     # 0xd6
	.long	215                     # 0xd7
.LCPI18_54:
	.long	216                     # 0xd8
	.long	217                     # 0xd9
	.long	218                     # 0xda
	.long	219                     # 0xdb
.LCPI18_55:
	.long	220                     # 0xdc
	.long	221                     # 0xdd
	.long	222                     # 0xde
	.long	223                     # 0xdf
.LCPI18_56:
	.long	224                     # 0xe0
	.long	225                     # 0xe1
	.long	226                     # 0xe2
	.long	227                     # 0xe3
.LCPI18_57:
	.long	228                     # 0xe4
	.long	229                     # 0xe5
	.long	230                     # 0xe6
	.long	231                     # 0xe7
.LCPI18_58:
	.long	232                     # 0xe8
	.long	233                     # 0xe9
	.long	234                     # 0xea
	.long	235                     # 0xeb
.LCPI18_59:
	.long	236                     # 0xec
	.long	237                     # 0xed
	.long	238                     # 0xee
	.long	239                     # 0xef
.LCPI18_60:
	.long	240                     # 0xf0
	.long	241                     # 0xf1
	.long	242                     # 0xf2
	.long	243                     # 0xf3
.LCPI18_61:
	.long	244                     # 0xf4
	.long	245                     # 0xf5
	.long	246                     # 0xf6
	.long	247                     # 0xf7
.LCPI18_62:
	.long	248                     # 0xf8
	.long	249                     # 0xf9
	.long	250                     # 0xfa
	.long	251                     # 0xfb
.LCPI18_63:
	.long	252                     # 0xfc
	.long	253                     # 0xfd
	.long	254                     # 0xfe
	.long	255                     # 0xff
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI18_64:
	.long	1065353216              # float 1
	.text
	.globl	BZ2_blockSort
	.p2align	4, 0x90
	.type	BZ2_blockSort,@function
BZ2_blockSort:                          # @BZ2_blockSort
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$6616, %rsp             # imm = 0x19D8
	.cfi_def_cfa_offset 6672
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	leaq	2076(%rsp), %rax
	movl	$9999, 6612(%rsp)       # imm = 0x270F
	movq	56(%rdi), %rcx
	movl	$1786, 6612(%rsp)       # imm = 0x6FA
	movq	64(%rdi), %rdx
	movl	$1788, 6612(%rsp)       # imm = 0x6FC
	movq	40(%rdi), %rsi
	movl	$1790, 6612(%rsp)       # imm = 0x6FE
	movq	%rdi, %r8
	addq	$108, %r8
	movl	108(%rdi), %r9d
	movl	$1792, 6612(%rsp)       # imm = 0x700
	movl	656(%rdi), %r10d
	movl	$1794, 6612(%rsp)       # imm = 0x702
	movl	88(%rdi), %r11d
	movl	$1801, 6612(%rsp)       # imm = 0x709
	cmpl	$10000, %r9d            # imm = 0x2710
	movq	%rdi, 2064(%rsp)        # 8-byte Spill
	movl	%r11d, 2060(%rsp)       # 4-byte Spill
	movq	%rcx, 2048(%rsp)        # 8-byte Spill
	movq	%rdx, 2040(%rsp)        # 8-byte Spill
	movq	%rsi, 2032(%rsp)        # 8-byte Spill
	movq	%r8, 2024(%rsp)         # 8-byte Spill
	movl	%r9d, 2020(%rsp)        # 4-byte Spill
	movl	%r10d, 2016(%rsp)       # 4-byte Spill
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	jge	.LBB18_2
# %bb.1:                                # %if.then
	movq	2064(%rsp), %rax        # 8-byte Reload
	movq	24(%rax), %rdi
	movl	$1803, 6612(%rsp)       # imm = 0x70B
	movq	32(%rax), %rsi
	movl	$1824, 6612(%rsp)       # imm = 0x720
	movq	2032(%rsp), %rdx        # 8-byte Reload
	movl	2020(%rsp), %ecx        # 4-byte Reload
	movl	2016(%rsp), %r8d        # 4-byte Reload
	callq	fallbackSort
	jmp	.LBB18_145
.LBB18_2:                               # %if.else
	leaq	2080(%rsp), %rax
	leaq	3104(%rsp), %rcx
	leaq	4384(%rsp), %rdx
	leaq	4128(%rsp), %rsi
	movl	$3, %edi
	movl	$100, %r8d
	movl	$1, %r9d
	movl	2020(%rsp), %r10d       # 4-byte Reload
	addl	$34, %r10d
	movl	%r10d, %r11d
	andl	$1, %r11d
	movl	2020(%rsp), %ebx        # 4-byte Reload
	addl	$35, %ebx
	cmpl	$0, %r11d
	cmovel	%r10d, %ebx
	movslq	%ebx, %r14
	movq	2040(%rsp), %r15        # 8-byte Reload
	addq	%r14, %r15
	movl	2060(%rsp), %r10d       # 4-byte Reload
	cmpl	$1, %r10d
	cmovgl	%r10d, %r9d
	cmpl	$100, %r9d
	cmovll	%r9d, %r8d
	addl	$-1, %r8d
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	movl	%r8d, %eax
	movq	%rdx, 1992(%rsp)        # 8-byte Spill
	cltd
	idivl	%edi
	movl	2020(%rsp), %edi        # 4-byte Reload
	imull	%edi, %eax
	movl	%eax, 2076(%rsp)
	movl	$1837, 6612(%rsp)       # imm = 0x72D
	movq	2032(%rsp), %r14        # 8-byte Reload
	movq	1992(%rsp), %r12        # 8-byte Reload
	movq	2000(%rsp), %r13        # 8-byte Reload
	movl	2016(%rsp), %r8d        # 4-byte Reload
	cmpl	$3, %r8d
	setg	%bpl
	testb	$1, %bpl
	movq	%r12, 1984(%rsp)        # 8-byte Spill
	movq	%r15, 1976(%rsp)        # 8-byte Spill
	movq	%rsi, 1968(%rsp)        # 8-byte Spill
	movl	%eax, 1964(%rsp)        # 4-byte Spill
	movq	%r14, 1952(%rsp)        # 8-byte Spill
	movq	%rcx, 1944(%rsp)        # 8-byte Spill
	movq	%r13, 1936(%rsp)        # 8-byte Spill
	movb	%bpl, 1935(%rsp)        # 1-byte Spill
	jne	.LBB18_3
	jmp	.LBB18_4
.LBB18_3:                               # %if.then.i
	movl	$33, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.6.1, %rdi
	movq	stderr, %rcx
	movl	$1845, 6612(%rsp)       # imm = 0x735
	callq	fwrite
	movq	%rax, 1920(%rsp)        # 8-byte Spill
.LBB18_4:                               # %for.body6.lr.ph.i
	movl	$4294967289, %eax       # imm = 0xFFFFFFF9
	xorl	%ecx, %ecx
	movl	$262148, %edx           # imm = 0x40004
                                        # kill: def %rdx killed %edx
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movl	%ecx, %esi
	movl	%eax, 1916(%rsp)        # 4-byte Spill
	movl	%ecx, 1912(%rsp)        # 4-byte Spill
	callq	memset
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movb	(%rdx), %r8b
	movl	$1862, 6612(%rsp)       # imm = 0x746
	movzbl	%r8b, %eax
	shll	$8, %eax
	movl	2020(%rsp), %ecx        # 4-byte Reload
	addl	$-1, %ecx
	movslq	%ecx, %rdi
	movl	1912(%rsp), %esi        # 4-byte Reload
	movl	2020(%rsp), %r9d        # 4-byte Reload
	subl	%r9d, %esi
	cmpl	$-7, %esi
	movl	1916(%rsp), %r10d       # 4-byte Reload
	cmovgl	%esi, %r10d
	addl	$3, %r9d
	addl	%r10d, %r9d
	movq	%rdi, %r11
	movq	%r11, 1904(%rsp)        # 8-byte Spill
	movl	%ecx, 1900(%rsp)        # 4-byte Spill
	movq	%rdi, 1888(%rsp)        # 8-byte Spill
	movl	%r9d, 1884(%rsp)        # 4-byte Spill
	movl	%eax, 1880(%rsp)        # 4-byte Spill
.LBB18_5:                               # %for.body6.i
                                        # =>This Inner Loop Header: Depth=1
	movl	1880(%rsp), %eax        # 4-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %rdx        # 8-byte Reload
	movw	$0, (%rdx,%rcx,2)
	movl	$1866, 6612(%rsp)       # imm = 0x74A
	sarl	$8, %eax
	movq	2040(%rsp), %rsi        # 8-byte Reload
	movb	(%rsi,%rcx), %dil
	movl	$1872, 6612(%rsp)       # imm = 0x750
	movzbl	%dil, %r8d
	shll	$8, %r8d
	orl	%eax, %r8d
	movslq	%r8d, %r9
	movq	2032(%rsp), %r10        # 8-byte Reload
	movl	(%r10,%r9,4), %eax
	movl	$1874, 6612(%rsp)       # imm = 0x752
	addl	$1, %eax
	movl	%eax, (%r10,%r9,4)
	movl	$1877, 6612(%rsp)       # imm = 0x755
	movw	$0, -2(%rdx,%rcx,2)
	movl	$1880, 6612(%rsp)       # imm = 0x758
	sarl	$8, %r8d
	movb	-1(%rsi,%rcx), %dil
	movl	$1886, 6612(%rsp)       # imm = 0x75E
	movzbl	%dil, %eax
	shll	$8, %eax
	orl	%r8d, %eax
	movslq	%eax, %r9
	movl	(%r10,%r9,4), %r8d
	movl	$1888, 6612(%rsp)       # imm = 0x760
	addl	$1, %r8d
	movl	%r8d, (%r10,%r9,4)
	movl	$1891, 6612(%rsp)       # imm = 0x763
	movw	$0, -4(%rdx,%rcx,2)
	movl	$1894, 6612(%rsp)       # imm = 0x766
	sarl	$8, %eax
	movb	-2(%rsi,%rcx), %dil
	movl	$1900, 6612(%rsp)       # imm = 0x76C
	movzbl	%dil, %r8d
	shll	$8, %r8d
	orl	%eax, %r8d
	movslq	%r8d, %r9
	movl	(%r10,%r9,4), %eax
	movl	$1902, 6612(%rsp)       # imm = 0x76E
	addl	$1, %eax
	movl	%eax, (%r10,%r9,4)
	movl	$1905, 6612(%rsp)       # imm = 0x771
	movw	$0, -6(%rdx,%rcx,2)
	movl	$1908, 6612(%rsp)       # imm = 0x774
	sarl	$8, %r8d
	movb	-3(%rsi,%rcx), %dil
	movl	$1913, 6612(%rsp)       # imm = 0x779
	movzbl	%dil, %eax
	shll	$8, %eax
	orl	%r8d, %eax
	movslq	%eax, %r9
	movl	(%r10,%r9,4), %r8d
	movl	$1915, 6612(%rsp)       # imm = 0x77B
	addl	$1, %r8d
	movl	%r8d, (%r10,%r9,4)
	movl	$1930, 6612(%rsp)       # imm = 0x78A
	movq	%rcx, %r9
	addq	$-4, %r9
	cmpq	$6, %rcx
	movl	%eax, %r8d
	movl	%eax, 1876(%rsp)        # 4-byte Spill
	movq	%r9, 1904(%rsp)         # 8-byte Spill
	movl	%r8d, 1880(%rsp)        # 4-byte Spill
	jg	.LBB18_5
# %bb.6:                                # %for.end60.i
	movl	1884(%rsp), %eax        # 4-byte Reload
	andl	$-4, %eax
	movl	2020(%rsp), %ecx        # 4-byte Reload
	addl	$-5, %ecx
	subl	%eax, %ecx
	cmpl	$-1, %ecx
	setg	%dl
	testb	$1, %dl
	movl	%ecx, 1872(%rsp)        # 4-byte Spill
	movb	%dl, 1871(%rsp)         # 1-byte Spill
	jne	.LBB18_7
	jmp	.LBB18_9
.LBB18_7:                               # %for.body64.lr.ph.i
	movl	1872(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movl	1876(%rsp), %edx        # 4-byte Reload
	movq	%rcx, 1856(%rsp)        # 8-byte Spill
	movl	%edx, 1852(%rsp)        # 4-byte Spill
.LBB18_8:                               # %for.body64.i
                                        # =>This Inner Loop Header: Depth=1
	movl	1852(%rsp), %eax        # 4-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %rdx        # 8-byte Reload
	movw	$0, (%rdx,%rcx,2)
	movl	$1933, 6612(%rsp)       # imm = 0x78D
	sarl	$8, %eax
	movq	2040(%rsp), %rsi        # 8-byte Reload
	movb	(%rsi,%rcx), %dil
	movl	$1938, 6612(%rsp)       # imm = 0x792
	movzbl	%dil, %r8d
	shll	$8, %r8d
	orl	%eax, %r8d
	movslq	%r8d, %r9
	movq	2032(%rsp), %r10        # 8-byte Reload
	movl	(%r10,%r9,4), %eax
	movl	$1940, 6612(%rsp)       # imm = 0x794
	addl	$1, %eax
	movl	%eax, (%r10,%r9,4)
	movl	$1944, 6612(%rsp)       # imm = 0x798
	movq	%rcx, %r9
	addq	$-1, %r9
	cmpq	$0, %rcx
	movq	%r9, 1856(%rsp)         # 8-byte Spill
	movl	%r8d, 1852(%rsp)        # 4-byte Spill
	jg	.LBB18_8
.LBB18_9:                               # %for.end79.i
	movl	2020(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movb	(%rdx), %sil
	movl	$1946, 6612(%rsp)       # imm = 0x79A
	movb	%sil, (%rdx,%rcx)
	movl	$1948, 6612(%rsp)       # imm = 0x79C
	movq	1976(%rsp), %rdi        # 8-byte Reload
	movw	$0, (%rdi,%rcx,2)
	movl	$1950, 6612(%rsp)       # imm = 0x79E
	movb	1(%rdx), %sil
	movl	$1953, 6612(%rsp)       # imm = 0x7A1
	movb	%sil, 1(%rdx,%rcx)
	movl	$1955, 6612(%rsp)       # imm = 0x7A3
	movw	$0, 2(%rdi,%rcx,2)
	movl	$1957, 6612(%rsp)       # imm = 0x7A5
	movb	2(%rdx), %sil
	movl	$1960, 6612(%rsp)       # imm = 0x7A8
	movb	%sil, 2(%rdx,%rcx)
	movl	$1962, 6612(%rsp)       # imm = 0x7AA
	movw	$0, 4(%rdi,%rcx,2)
	movl	$1964, 6612(%rsp)       # imm = 0x7AC
	movb	3(%rdx), %sil
	movl	$1967, 6612(%rsp)       # imm = 0x7AF
	movb	%sil, 3(%rdx,%rcx)
	movl	$1969, 6612(%rsp)       # imm = 0x7B1
	movw	$0, 6(%rdi,%rcx,2)
	movl	$1971, 6612(%rsp)       # imm = 0x7B3
	movb	4(%rdx), %sil
	movl	$1974, 6612(%rsp)       # imm = 0x7B6
	movb	%sil, 4(%rdx,%rcx)
	movl	$1976, 6612(%rsp)       # imm = 0x7B8
	movw	$0, 8(%rdi,%rcx,2)
	movl	$1978, 6612(%rsp)       # imm = 0x7BA
	movb	5(%rdx), %sil
	movl	$1981, 6612(%rsp)       # imm = 0x7BD
	movb	%sil, 5(%rdx,%rcx)
	movl	$1983, 6612(%rsp)       # imm = 0x7BF
	movw	$0, 10(%rdi,%rcx,2)
	movl	$1985, 6612(%rsp)       # imm = 0x7C1
	movb	6(%rdx), %sil
	movl	$1988, 6612(%rsp)       # imm = 0x7C4
	movb	%sil, 6(%rdx,%rcx)
	movl	$1990, 6612(%rsp)       # imm = 0x7C6
	movw	$0, 12(%rdi,%rcx,2)
	movl	$1992, 6612(%rsp)       # imm = 0x7C8
	movb	7(%rdx), %sil
	movl	$1995, 6612(%rsp)       # imm = 0x7CB
	movb	%sil, 7(%rdx,%rcx)
	movl	$1997, 6612(%rsp)       # imm = 0x7CD
	movw	$0, 14(%rdi,%rcx,2)
	movl	$1999, 6612(%rsp)       # imm = 0x7CF
	movb	8(%rdx), %sil
	movl	$2002, 6612(%rsp)       # imm = 0x7D2
	movb	%sil, 8(%rdx,%rcx)
	movl	$2004, 6612(%rsp)       # imm = 0x7D4
	movw	$0, 16(%rdi,%rcx,2)
	movl	$2006, 6612(%rsp)       # imm = 0x7D6
	movb	9(%rdx), %sil
	movl	$2009, 6612(%rsp)       # imm = 0x7D9
	movb	%sil, 9(%rdx,%rcx)
	movl	$2011, 6612(%rsp)       # imm = 0x7DB
	movw	$0, 18(%rdi,%rcx,2)
	movl	$2013, 6612(%rsp)       # imm = 0x7DD
	movb	10(%rdx), %sil
	movl	$2016, 6612(%rsp)       # imm = 0x7E0
	movb	%sil, 10(%rdx,%rcx)
	movl	$2018, 6612(%rsp)       # imm = 0x7E2
	movw	$0, 20(%rdi,%rcx,2)
	movl	$2020, 6612(%rsp)       # imm = 0x7E4
	movb	11(%rdx), %sil
	movl	$2023, 6612(%rsp)       # imm = 0x7E7
	movb	%sil, 11(%rdx,%rcx)
	movl	$2025, 6612(%rsp)       # imm = 0x7E9
	movw	$0, 22(%rdi,%rcx,2)
	movl	$2027, 6612(%rsp)       # imm = 0x7EB
	movb	12(%rdx), %sil
	movl	$2030, 6612(%rsp)       # imm = 0x7EE
	movb	%sil, 12(%rdx,%rcx)
	movl	$2032, 6612(%rsp)       # imm = 0x7F0
	movw	$0, 24(%rdi,%rcx,2)
	movl	$2034, 6612(%rsp)       # imm = 0x7F2
	movb	13(%rdx), %sil
	movl	$2037, 6612(%rsp)       # imm = 0x7F5
	movb	%sil, 13(%rdx,%rcx)
	movl	$2039, 6612(%rsp)       # imm = 0x7F7
	movw	$0, 26(%rdi,%rcx,2)
	movl	$2041, 6612(%rsp)       # imm = 0x7F9
	movb	14(%rdx), %sil
	movl	$2044, 6612(%rsp)       # imm = 0x7FC
	movb	%sil, 14(%rdx,%rcx)
	movl	$2046, 6612(%rsp)       # imm = 0x7FE
	movw	$0, 28(%rdi,%rcx,2)
	movl	$2048, 6612(%rsp)       # imm = 0x800
	movb	15(%rdx), %sil
	movl	$2051, 6612(%rsp)       # imm = 0x803
	movb	%sil, 15(%rdx,%rcx)
	movl	$2053, 6612(%rsp)       # imm = 0x805
	movw	$0, 30(%rdi,%rcx,2)
	movl	$2055, 6612(%rsp)       # imm = 0x807
	movb	16(%rdx), %sil
	movl	$2058, 6612(%rsp)       # imm = 0x80A
	movb	%sil, 16(%rdx,%rcx)
	movl	$2060, 6612(%rsp)       # imm = 0x80C
	movw	$0, 32(%rdi,%rcx,2)
	movl	$2062, 6612(%rsp)       # imm = 0x80E
	movb	17(%rdx), %sil
	movl	$2065, 6612(%rsp)       # imm = 0x811
	movb	%sil, 17(%rdx,%rcx)
	movl	$2067, 6612(%rsp)       # imm = 0x813
	movw	$0, 34(%rdi,%rcx,2)
	movl	$2069, 6612(%rsp)       # imm = 0x815
	movb	18(%rdx), %sil
	movl	$2072, 6612(%rsp)       # imm = 0x818
	movb	%sil, 18(%rdx,%rcx)
	movl	$2074, 6612(%rsp)       # imm = 0x81A
	movw	$0, 36(%rdi,%rcx,2)
	movl	$2076, 6612(%rsp)       # imm = 0x81C
	movb	19(%rdx), %sil
	movl	$2079, 6612(%rsp)       # imm = 0x81F
	movb	%sil, 19(%rdx,%rcx)
	movl	$2081, 6612(%rsp)       # imm = 0x821
	movw	$0, 38(%rdi,%rcx,2)
	movl	$2083, 6612(%rsp)       # imm = 0x823
	movb	20(%rdx), %sil
	movl	$2086, 6612(%rsp)       # imm = 0x826
	movb	%sil, 20(%rdx,%rcx)
	movl	$2088, 6612(%rsp)       # imm = 0x828
	movw	$0, 40(%rdi,%rcx,2)
	movl	$2090, 6612(%rsp)       # imm = 0x82A
	movb	21(%rdx), %sil
	movl	$2093, 6612(%rsp)       # imm = 0x82D
	movb	%sil, 21(%rdx,%rcx)
	movl	$2095, 6612(%rsp)       # imm = 0x82F
	movw	$0, 42(%rdi,%rcx,2)
	movl	$2097, 6612(%rsp)       # imm = 0x831
	movb	22(%rdx), %sil
	movl	$2100, 6612(%rsp)       # imm = 0x834
	movb	%sil, 22(%rdx,%rcx)
	movl	$2102, 6612(%rsp)       # imm = 0x836
	movw	$0, 44(%rdi,%rcx,2)
	movl	$2104, 6612(%rsp)       # imm = 0x838
	movb	23(%rdx), %sil
	movl	$2107, 6612(%rsp)       # imm = 0x83B
	movb	%sil, 23(%rdx,%rcx)
	movl	$2109, 6612(%rsp)       # imm = 0x83D
	movw	$0, 46(%rdi,%rcx,2)
	movl	$2111, 6612(%rsp)       # imm = 0x83F
	movb	24(%rdx), %sil
	movl	$2114, 6612(%rsp)       # imm = 0x842
	movb	%sil, 24(%rdx,%rcx)
	movl	$2116, 6612(%rsp)       # imm = 0x844
	movw	$0, 48(%rdi,%rcx,2)
	movl	$2118, 6612(%rsp)       # imm = 0x846
	movb	25(%rdx), %sil
	movl	$2121, 6612(%rsp)       # imm = 0x849
	movb	%sil, 25(%rdx,%rcx)
	movl	$2123, 6612(%rsp)       # imm = 0x84B
	movw	$0, 50(%rdi,%rcx,2)
	movl	$2125, 6612(%rsp)       # imm = 0x84D
	movb	26(%rdx), %sil
	movl	$2128, 6612(%rsp)       # imm = 0x850
	movb	%sil, 26(%rdx,%rcx)
	movl	$2130, 6612(%rsp)       # imm = 0x852
	movw	$0, 52(%rdi,%rcx,2)
	movl	$2132, 6612(%rsp)       # imm = 0x854
	movb	27(%rdx), %sil
	movl	$2135, 6612(%rsp)       # imm = 0x857
	movb	%sil, 27(%rdx,%rcx)
	movl	$2137, 6612(%rsp)       # imm = 0x859
	movw	$0, 54(%rdi,%rcx,2)
	movl	$2139, 6612(%rsp)       # imm = 0x85B
	movb	28(%rdx), %sil
	movl	$2142, 6612(%rsp)       # imm = 0x85E
	movb	%sil, 28(%rdx,%rcx)
	movl	$2144, 6612(%rsp)       # imm = 0x860
	movw	$0, 56(%rdi,%rcx,2)
	movl	$2146, 6612(%rsp)       # imm = 0x862
	movb	29(%rdx), %sil
	movl	$2149, 6612(%rsp)       # imm = 0x865
	movb	%sil, 29(%rdx,%rcx)
	movl	$2151, 6612(%rsp)       # imm = 0x867
	movw	$0, 58(%rdi,%rcx,2)
	movl	$2153, 6612(%rsp)       # imm = 0x869
	movb	30(%rdx), %sil
	movl	$2156, 6612(%rsp)       # imm = 0x86C
	movb	%sil, 30(%rdx,%rcx)
	movl	$2158, 6612(%rsp)       # imm = 0x86E
	movw	$0, 60(%rdi,%rcx,2)
	movl	$2160, 6612(%rsp)       # imm = 0x870
	movb	31(%rdx), %sil
	movl	$2163, 6612(%rsp)       # imm = 0x873
	movb	%sil, 31(%rdx,%rcx)
	movl	$2165, 6612(%rsp)       # imm = 0x875
	movw	$0, 62(%rdi,%rcx,2)
	movl	$2167, 6612(%rsp)       # imm = 0x877
	movb	32(%rdx), %sil
	movl	$2170, 6612(%rsp)       # imm = 0x87A
	movb	%sil, 32(%rdx,%rcx)
	movl	$2172, 6612(%rsp)       # imm = 0x87C
	movw	$0, 64(%rdi,%rcx,2)
	movl	$2174, 6612(%rsp)       # imm = 0x87E
	movb	33(%rdx), %sil
	movl	$2177, 6612(%rsp)       # imm = 0x881
	movb	%sil, 33(%rdx,%rcx)
	movl	$2179, 6612(%rsp)       # imm = 0x883
	movw	$0, 66(%rdi,%rcx,2)
	movl	$2181, 6612(%rsp)       # imm = 0x885
	movb	1935(%rsp), %sil        # 1-byte Reload
	testb	$1, %sil
	jne	.LBB18_10
	jmp	.LBB18_11
.LBB18_10:                              # %if.then96.i
	movl	$27, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.2, %rdi
	movq	stderr, %rcx
	movl	$2186, 6612(%rsp)       # imm = 0x88A
	callq	fwrite
	movq	%rax, 1840(%rsp)        # 8-byte Spill
.LBB18_11:                              # %if.end98.i
	movl	$1, %eax
	movl	%eax, %ecx
	movq	2032(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %eax
	movl	$2193, 6612(%rsp)       # imm = 0x891
	movl	%eax, 1836(%rsp)        # 4-byte Spill
	movq	%rcx, 1824(%rsp)        # 8-byte Spill
.LBB18_12:                              # %for.body102.i
                                        # =>This Inner Loop Header: Depth=1
	movq	1824(%rsp), %rax        # 8-byte Reload
	movl	1836(%rsp), %ecx        # 4-byte Reload
	movq	2032(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rax,4), %esi
	movl	$2195, 6612(%rsp)       # imm = 0x893
	addl	%ecx, %esi
	movl	%esi, (%rdx,%rax,4)
	movl	$2198, 6612(%rsp)       # imm = 0x896
	movl	4(%rdx,%rax,4), %ecx
	movl	$2200, 6612(%rsp)       # imm = 0x898
	addl	%esi, %ecx
	movl	%ecx, 4(%rdx,%rax,4)
	movl	$2203, 6612(%rsp)       # imm = 0x89B
	movl	8(%rdx,%rax,4), %esi
	movl	$2205, 6612(%rsp)       # imm = 0x89D
	addl	%ecx, %esi
	movl	%esi, 8(%rdx,%rax,4)
	movl	$2208, 6612(%rsp)       # imm = 0x8A0
	movl	12(%rdx,%rax,4), %ecx
	movl	$2209, 6612(%rsp)       # imm = 0x8A1
	addl	%esi, %ecx
	movl	%ecx, 12(%rdx,%rax,4)
	movl	$2212, 6612(%rsp)       # imm = 0x8A4
	addq	$4, %rax
	cmpq	$65537, %rax            # imm = 0x10001
	movl	%ecx, 1836(%rsp)        # 4-byte Spill
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	jne	.LBB18_12
# %bb.13:                               # %for.body120.lr.ph.i
	movq	2040(%rsp), %rax        # 8-byte Reload
	movb	(%rax), %cl
	movl	$2222, 6612(%rsp)       # imm = 0x8AE
	movzbl	%cl, %edx
	movw	%dx, %si
	shlw	$8, %si
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	%rdi, 1816(%rsp)        # 8-byte Spill
	movw	%si, 1814(%rsp)         # 2-byte Spill
.LBB18_14:                              # %for.body120.i
                                        # =>This Inner Loop Header: Depth=1
	movw	1814(%rsp), %ax         # 2-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	shrw	$8, %ax
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movb	(%rdx,%rcx), %sil
	movl	$2228, 6612(%rsp)       # imm = 0x8B4
	movzbl	%sil, %edi
	movw	%di, %r8w
	shlw	$8, %r8w
	orw	%ax, %r8w
	movzwl	%r8w, %edi
	movl	%edi, %r9d
	movq	2032(%rsp), %r10        # 8-byte Reload
	movl	(%r10,%r9,4), %edi
	movl	$2230, 6612(%rsp)       # imm = 0x8B6
	addl	$-1, %edi
	movl	%edi, (%r10,%r9,4)
	movl	$2234, 6612(%rsp)       # imm = 0x8BA
	movslq	%edi, %r9
	movl	%ecx, %edi
	movq	2048(%rsp), %r11        # 8-byte Reload
	movl	%edi, (%r11,%r9,4)
	movl	$2238, 6612(%rsp)       # imm = 0x8BE
	movzbl	%sil, %edi
	movl	%edi, %r9d
	movq	%rcx, %rbx
	addq	$-1, %rbx
	movb	-1(%rdx,%rcx), %sil
	movl	$2243, 6612(%rsp)       # imm = 0x8C3
	movzbl	%sil, %edi
	movl	%edi, %r14d
	movq	%r14, %r15
	shlq	$8, %r15
	orq	%r9, %r15
	movl	(%r10,%r15,4), %edi
	movl	$2245, 6612(%rsp)       # imm = 0x8C5
	addl	$-1, %edi
	movl	%edi, (%r10,%r15,4)
	movl	$2249, 6612(%rsp)       # imm = 0x8C9
	movslq	%edi, %r9
	movl	%ebx, %edi
	movl	%edi, (%r11,%r9,4)
	movl	$2252, 6612(%rsp)       # imm = 0x8CC
	movq	%rcx, %r9
	addq	$-2, %r9
	movb	-2(%rdx,%rcx), %sil
	movl	$2257, 6612(%rsp)       # imm = 0x8D1
	movzbl	%sil, %edi
	movl	%edi, %ebx
	shlq	$8, %rbx
	orq	%r14, %rbx
	movl	(%r10,%rbx,4), %edi
	movl	$2259, 6612(%rsp)       # imm = 0x8D3
	addl	$-1, %edi
	movl	%edi, (%r10,%rbx,4)
	movl	$2263, 6612(%rsp)       # imm = 0x8D7
	movslq	%edi, %rbx
	movl	%r9d, %edi
	movl	%edi, (%r11,%rbx,4)
	movl	$2267, 6612(%rsp)       # imm = 0x8DB
	movzbl	%sil, %edi
	movw	%di, %ax
	movq	%rcx, %r9
	addq	$-3, %r9
	movb	-3(%rdx,%rcx), %sil
	movl	$2272, 6612(%rsp)       # imm = 0x8E0
	movzbl	%sil, %edi
	movw	%di, %r8w
	shlw	$8, %r8w
	orw	%ax, %r8w
	movzwl	%r8w, %edi
	movl	%edi, %ebx
	movl	(%r10,%rbx,4), %edi
	movl	$2274, 6612(%rsp)       # imm = 0x8E2
	addl	$-1, %edi
	movl	%edi, (%r10,%rbx,4)
	movl	$2278, 6612(%rsp)       # imm = 0x8E6
	movslq	%edi, %rbx
	movl	%r9d, %edi
	movl	%edi, (%r11,%rbx,4)
	movl	$2290, 6612(%rsp)       # imm = 0x8F2
	movq	%rcx, %r9
	addq	$-4, %r9
	cmpq	$6, %rcx
	movw	%r8w, %ax
	movw	%r8w, 1812(%rsp)        # 2-byte Spill
	movq	%r9, 1816(%rsp)         # 8-byte Spill
	movw	%ax, 1814(%rsp)         # 2-byte Spill
	jg	.LBB18_14
# %bb.15:                               # %for.end189.i
	movb	1871(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB18_16
	jmp	.LBB18_18
.LBB18_16:                              # %for.body193.lr.ph.i
	movl	1872(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movw	1812(%rsp), %dx         # 2-byte Reload
	movq	%rcx, 1800(%rsp)        # 8-byte Spill
	movw	%dx, 1798(%rsp)         # 2-byte Spill
.LBB18_17:                              # %for.body193.i
                                        # =>This Inner Loop Header: Depth=1
	movw	1798(%rsp), %ax         # 2-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	shrw	$8, %ax
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movb	(%rdx,%rcx), %sil
	movl	$2295, 6612(%rsp)       # imm = 0x8F7
	movzbl	%sil, %edi
	movw	%di, %r8w
	shlw	$8, %r8w
	orw	%ax, %r8w
	movzwl	%r8w, %edi
	movl	%edi, %r9d
	movq	2032(%rsp), %r10        # 8-byte Reload
	movl	(%r10,%r9,4), %edi
	movl	$2297, 6612(%rsp)       # imm = 0x8F9
	addl	$-1, %edi
	movl	%edi, (%r10,%r9,4)
	movl	$2301, 6612(%rsp)       # imm = 0x8FD
	movslq	%edi, %r9
	movl	%ecx, %edi
	movq	2048(%rsp), %r11        # 8-byte Reload
	movl	%edi, (%r11,%r9,4)
	movl	$2306, 6612(%rsp)       # imm = 0x902
	movq	%rcx, %r9
	addq	$-1, %r9
	cmpq	$0, %rcx
	movq	%r9, 1800(%rsp)         # 8-byte Spill
	movw	%r8w, 1798(%rsp)        # 2-byte Spill
	jg	.LBB18_17
.LBB18_18:                              # %for.end211.i
	movl	$121, %eax
	movl	%eax, %ecx
	xorps	%xmm0, %xmm0
	movq	1968(%rsp), %rdx        # 8-byte Reload
	movaps	%xmm0, 240(%rdx)
	movaps	%xmm0, 224(%rdx)
	movaps	%xmm0, 208(%rdx)
	movaps	%xmm0, 192(%rdx)
	movaps	%xmm0, 176(%rdx)
	movaps	%xmm0, 160(%rdx)
	movaps	%xmm0, 144(%rdx)
	movaps	%xmm0, 128(%rdx)
	movaps	%xmm0, 112(%rdx)
	movaps	%xmm0, 96(%rdx)
	movaps	%xmm0, 80(%rdx)
	movaps	%xmm0, 64(%rdx)
	movaps	%xmm0, 48(%rdx)
	movaps	%xmm0, 32(%rdx)
	movaps	%xmm0, 16(%rdx)
	movaps	%xmm0, (%rdx)
	movaps	.LCPI18_0(%rip), %xmm0  # xmm0 = [0,1,2,3]
	movaps	%xmm0, 4384(%rsp)
	movl	$2310, 6612(%rsp)       # imm = 0x906
	movaps	.LCPI18_1(%rip), %xmm0  # xmm0 = [4,5,6,7]
	movaps	%xmm0, 4400(%rsp)
	movl	$2314, 6612(%rsp)       # imm = 0x90A
	movaps	.LCPI18_2(%rip), %xmm0  # xmm0 = [8,9,10,11]
	movaps	%xmm0, 4416(%rsp)
	movl	$2318, 6612(%rsp)       # imm = 0x90E
	movaps	.LCPI18_3(%rip), %xmm0  # xmm0 = [12,13,14,15]
	movaps	%xmm0, 4432(%rsp)
	movl	$2322, 6612(%rsp)       # imm = 0x912
	movaps	.LCPI18_4(%rip), %xmm0  # xmm0 = [16,17,18,19]
	movaps	%xmm0, 4448(%rsp)
	movl	$2326, 6612(%rsp)       # imm = 0x916
	movaps	.LCPI18_5(%rip), %xmm0  # xmm0 = [20,21,22,23]
	movaps	%xmm0, 4464(%rsp)
	movl	$2330, 6612(%rsp)       # imm = 0x91A
	movaps	.LCPI18_6(%rip), %xmm0  # xmm0 = [24,25,26,27]
	movaps	%xmm0, 4480(%rsp)
	movl	$2334, 6612(%rsp)       # imm = 0x91E
	movaps	.LCPI18_7(%rip), %xmm0  # xmm0 = [28,29,30,31]
	movaps	%xmm0, 4496(%rsp)
	movl	$2338, 6612(%rsp)       # imm = 0x922
	movaps	.LCPI18_8(%rip), %xmm0  # xmm0 = [32,33,34,35]
	movaps	%xmm0, 4512(%rsp)
	movl	$2342, 6612(%rsp)       # imm = 0x926
	movaps	.LCPI18_9(%rip), %xmm0  # xmm0 = [36,37,38,39]
	movaps	%xmm0, 4528(%rsp)
	movl	$2346, 6612(%rsp)       # imm = 0x92A
	movaps	.LCPI18_10(%rip), %xmm0 # xmm0 = [40,41,42,43]
	movaps	%xmm0, 4544(%rsp)
	movl	$2350, 6612(%rsp)       # imm = 0x92E
	movaps	.LCPI18_11(%rip), %xmm0 # xmm0 = [44,45,46,47]
	movaps	%xmm0, 4560(%rsp)
	movl	$2354, 6612(%rsp)       # imm = 0x932
	movaps	.LCPI18_12(%rip), %xmm0 # xmm0 = [48,49,50,51]
	movaps	%xmm0, 4576(%rsp)
	movl	$2358, 6612(%rsp)       # imm = 0x936
	movaps	.LCPI18_13(%rip), %xmm0 # xmm0 = [52,53,54,55]
	movaps	%xmm0, 4592(%rsp)
	movl	$2362, 6612(%rsp)       # imm = 0x93A
	movaps	.LCPI18_14(%rip), %xmm0 # xmm0 = [56,57,58,59]
	movaps	%xmm0, 4608(%rsp)
	movl	$2366, 6612(%rsp)       # imm = 0x93E
	movaps	.LCPI18_15(%rip), %xmm0 # xmm0 = [60,61,62,63]
	movaps	%xmm0, 4624(%rsp)
	movl	$2370, 6612(%rsp)       # imm = 0x942
	movaps	.LCPI18_16(%rip), %xmm0 # xmm0 = [64,65,66,67]
	movaps	%xmm0, 4640(%rsp)
	movl	$2374, 6612(%rsp)       # imm = 0x946
	movaps	.LCPI18_17(%rip), %xmm0 # xmm0 = [68,69,70,71]
	movaps	%xmm0, 4656(%rsp)
	movl	$2378, 6612(%rsp)       # imm = 0x94A
	movaps	.LCPI18_18(%rip), %xmm0 # xmm0 = [72,73,74,75]
	movaps	%xmm0, 4672(%rsp)
	movl	$2382, 6612(%rsp)       # imm = 0x94E
	movaps	.LCPI18_19(%rip), %xmm0 # xmm0 = [76,77,78,79]
	movaps	%xmm0, 4688(%rsp)
	movl	$2386, 6612(%rsp)       # imm = 0x952
	movaps	.LCPI18_20(%rip), %xmm0 # xmm0 = [80,81,82,83]
	movaps	%xmm0, 4704(%rsp)
	movl	$2390, 6612(%rsp)       # imm = 0x956
	movaps	.LCPI18_21(%rip), %xmm0 # xmm0 = [84,85,86,87]
	movaps	%xmm0, 4720(%rsp)
	movl	$2394, 6612(%rsp)       # imm = 0x95A
	movaps	.LCPI18_22(%rip), %xmm0 # xmm0 = [88,89,90,91]
	movaps	%xmm0, 4736(%rsp)
	movl	$2398, 6612(%rsp)       # imm = 0x95E
	movaps	.LCPI18_23(%rip), %xmm0 # xmm0 = [92,93,94,95]
	movaps	%xmm0, 4752(%rsp)
	movl	$2402, 6612(%rsp)       # imm = 0x962
	movaps	.LCPI18_24(%rip), %xmm0 # xmm0 = [96,97,98,99]
	movaps	%xmm0, 4768(%rsp)
	movl	$2406, 6612(%rsp)       # imm = 0x966
	movaps	.LCPI18_25(%rip), %xmm0 # xmm0 = [100,101,102,103]
	movaps	%xmm0, 4784(%rsp)
	movl	$2410, 6612(%rsp)       # imm = 0x96A
	movaps	.LCPI18_26(%rip), %xmm0 # xmm0 = [104,105,106,107]
	movaps	%xmm0, 4800(%rsp)
	movl	$2414, 6612(%rsp)       # imm = 0x96E
	movaps	.LCPI18_27(%rip), %xmm0 # xmm0 = [108,109,110,111]
	movaps	%xmm0, 4816(%rsp)
	movl	$2418, 6612(%rsp)       # imm = 0x972
	movaps	.LCPI18_28(%rip), %xmm0 # xmm0 = [112,113,114,115]
	movaps	%xmm0, 4832(%rsp)
	movl	$2422, 6612(%rsp)       # imm = 0x976
	movaps	.LCPI18_29(%rip), %xmm0 # xmm0 = [116,117,118,119]
	movaps	%xmm0, 4848(%rsp)
	movl	$2426, 6612(%rsp)       # imm = 0x97A
	movaps	.LCPI18_30(%rip), %xmm0 # xmm0 = [120,121,122,123]
	movaps	%xmm0, 4864(%rsp)
	movl	$2430, 6612(%rsp)       # imm = 0x97E
	movaps	.LCPI18_31(%rip), %xmm0 # xmm0 = [124,125,126,127]
	movaps	%xmm0, 4880(%rsp)
	movl	$2434, 6612(%rsp)       # imm = 0x982
	movaps	.LCPI18_32(%rip), %xmm0 # xmm0 = [128,129,130,131]
	movaps	%xmm0, 4896(%rsp)
	movl	$2438, 6612(%rsp)       # imm = 0x986
	movaps	.LCPI18_33(%rip), %xmm0 # xmm0 = [132,133,134,135]
	movaps	%xmm0, 4912(%rsp)
	movl	$2442, 6612(%rsp)       # imm = 0x98A
	movaps	.LCPI18_34(%rip), %xmm0 # xmm0 = [136,137,138,139]
	movaps	%xmm0, 4928(%rsp)
	movl	$2446, 6612(%rsp)       # imm = 0x98E
	movaps	.LCPI18_35(%rip), %xmm0 # xmm0 = [140,141,142,143]
	movaps	%xmm0, 4944(%rsp)
	movl	$2450, 6612(%rsp)       # imm = 0x992
	movaps	.LCPI18_36(%rip), %xmm0 # xmm0 = [144,145,146,147]
	movaps	%xmm0, 4960(%rsp)
	movl	$2454, 6612(%rsp)       # imm = 0x996
	movaps	.LCPI18_37(%rip), %xmm0 # xmm0 = [148,149,150,151]
	movaps	%xmm0, 4976(%rsp)
	movl	$2458, 6612(%rsp)       # imm = 0x99A
	movaps	.LCPI18_38(%rip), %xmm0 # xmm0 = [152,153,154,155]
	movaps	%xmm0, 4992(%rsp)
	movl	$2462, 6612(%rsp)       # imm = 0x99E
	movaps	.LCPI18_39(%rip), %xmm0 # xmm0 = [156,157,158,159]
	movaps	%xmm0, 5008(%rsp)
	movl	$2466, 6612(%rsp)       # imm = 0x9A2
	movaps	.LCPI18_40(%rip), %xmm0 # xmm0 = [160,161,162,163]
	movaps	%xmm0, 5024(%rsp)
	movl	$2470, 6612(%rsp)       # imm = 0x9A6
	movaps	.LCPI18_41(%rip), %xmm0 # xmm0 = [164,165,166,167]
	movaps	%xmm0, 5040(%rsp)
	movl	$2474, 6612(%rsp)       # imm = 0x9AA
	movaps	.LCPI18_42(%rip), %xmm0 # xmm0 = [168,169,170,171]
	movaps	%xmm0, 5056(%rsp)
	movl	$2478, 6612(%rsp)       # imm = 0x9AE
	movaps	.LCPI18_43(%rip), %xmm0 # xmm0 = [172,173,174,175]
	movaps	%xmm0, 5072(%rsp)
	movl	$2482, 6612(%rsp)       # imm = 0x9B2
	movaps	.LCPI18_44(%rip), %xmm0 # xmm0 = [176,177,178,179]
	movaps	%xmm0, 5088(%rsp)
	movl	$2486, 6612(%rsp)       # imm = 0x9B6
	movaps	.LCPI18_45(%rip), %xmm0 # xmm0 = [180,181,182,183]
	movaps	%xmm0, 5104(%rsp)
	movl	$2490, 6612(%rsp)       # imm = 0x9BA
	movaps	.LCPI18_46(%rip), %xmm0 # xmm0 = [184,185,186,187]
	movaps	%xmm0, 5120(%rsp)
	movl	$2494, 6612(%rsp)       # imm = 0x9BE
	movaps	.LCPI18_47(%rip), %xmm0 # xmm0 = [188,189,190,191]
	movaps	%xmm0, 5136(%rsp)
	movl	$2498, 6612(%rsp)       # imm = 0x9C2
	movaps	.LCPI18_48(%rip), %xmm0 # xmm0 = [192,193,194,195]
	movaps	%xmm0, 5152(%rsp)
	movl	$2502, 6612(%rsp)       # imm = 0x9C6
	movaps	.LCPI18_49(%rip), %xmm0 # xmm0 = [196,197,198,199]
	movaps	%xmm0, 5168(%rsp)
	movl	$2506, 6612(%rsp)       # imm = 0x9CA
	movaps	.LCPI18_50(%rip), %xmm0 # xmm0 = [200,201,202,203]
	movaps	%xmm0, 5184(%rsp)
	movl	$2510, 6612(%rsp)       # imm = 0x9CE
	movaps	.LCPI18_51(%rip), %xmm0 # xmm0 = [204,205,206,207]
	movaps	%xmm0, 5200(%rsp)
	movl	$2514, 6612(%rsp)       # imm = 0x9D2
	movaps	.LCPI18_52(%rip), %xmm0 # xmm0 = [208,209,210,211]
	movaps	%xmm0, 5216(%rsp)
	movl	$2518, 6612(%rsp)       # imm = 0x9D6
	movaps	.LCPI18_53(%rip), %xmm0 # xmm0 = [212,213,214,215]
	movaps	%xmm0, 5232(%rsp)
	movl	$2522, 6612(%rsp)       # imm = 0x9DA
	movaps	.LCPI18_54(%rip), %xmm0 # xmm0 = [216,217,218,219]
	movaps	%xmm0, 5248(%rsp)
	movl	$2526, 6612(%rsp)       # imm = 0x9DE
	movaps	.LCPI18_55(%rip), %xmm0 # xmm0 = [220,221,222,223]
	movaps	%xmm0, 5264(%rsp)
	movl	$2530, 6612(%rsp)       # imm = 0x9E2
	movaps	.LCPI18_56(%rip), %xmm0 # xmm0 = [224,225,226,227]
	movaps	%xmm0, 5280(%rsp)
	movl	$2534, 6612(%rsp)       # imm = 0x9E6
	movaps	.LCPI18_57(%rip), %xmm0 # xmm0 = [228,229,230,231]
	movaps	%xmm0, 5296(%rsp)
	movl	$2538, 6612(%rsp)       # imm = 0x9EA
	movaps	.LCPI18_58(%rip), %xmm0 # xmm0 = [232,233,234,235]
	movaps	%xmm0, 5312(%rsp)
	movl	$2542, 6612(%rsp)       # imm = 0x9EE
	movaps	.LCPI18_59(%rip), %xmm0 # xmm0 = [236,237,238,239]
	movaps	%xmm0, 5328(%rsp)
	movl	$2546, 6612(%rsp)       # imm = 0x9F2
	movaps	.LCPI18_60(%rip), %xmm0 # xmm0 = [240,241,242,243]
	movaps	%xmm0, 5344(%rsp)
	movl	$2550, 6612(%rsp)       # imm = 0x9F6
	movaps	.LCPI18_61(%rip), %xmm0 # xmm0 = [244,245,246,247]
	movaps	%xmm0, 5360(%rsp)
	movl	$2554, 6612(%rsp)       # imm = 0x9FA
	movaps	.LCPI18_62(%rip), %xmm0 # xmm0 = [248,249,250,251]
	movaps	%xmm0, 5376(%rsp)
	movl	$2558, 6612(%rsp)       # imm = 0x9FE
	movaps	.LCPI18_63(%rip), %xmm0 # xmm0 = [252,253,254,255]
	movaps	%xmm0, 5392(%rsp)
	movl	$2565, 6612(%rsp)       # imm = 0xA05
	movq	%rcx, 1784(%rsp)        # 8-byte Spill
.LBB18_19:                              # %for.body230.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_20 Depth 2
	movq	1784(%rsp), %rax        # 8-byte Reload
	movl	4384(%rsp,%rax,4), %ecx
	movl	$2570, 6612(%rsp)       # imm = 0xA0A
	movl	%ecx, %edx
	shll	$8, %edx
	movl	%edx, %esi
	addl	$256, %esi              # imm = 0x100
	movslq	%esi, %rdi
	movq	2032(%rsp), %r8         # 8-byte Reload
	movl	(%r8,%rdi,4), %esi
	movl	$2573, 6612(%rsp)       # imm = 0xA0D
	movslq	%edx, %rdi
	movl	(%r8,%rdi,4), %edx
	movl	$2581, 6612(%rsp)       # imm = 0xA15
	subl	%edx, %esi
	movl	%eax, %edx
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	movl	%ecx, 1772(%rsp)        # 4-byte Spill
	movl	%esi, 1768(%rsp)        # 4-byte Spill
	movl	%edx, 1764(%rsp)        # 4-byte Spill
.LBB18_20:                              # %while.cond.i
                                        #   Parent Loop BB18_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1764(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ecx
	addl	$-121, %ecx
	movslq	%ecx, %rdx
	movl	4384(%rsp,%rdx,4), %esi
	movl	$2586, 6612(%rsp)       # imm = 0xA1A
	movl	%esi, %edi
	shll	$8, %edi
	movl	%edi, %r8d
	addl	$256, %r8d              # imm = 0x100
	movslq	%r8d, %r9
	movq	2032(%rsp), %r10        # 8-byte Reload
	movl	(%r10,%r9,4), %r8d
	movl	$2589, 6612(%rsp)       # imm = 0xA1D
	movslq	%edi, %r9
	movl	(%r10,%r9,4), %edi
	movl	$2595, 6612(%rsp)       # imm = 0xA23
	subl	%edi, %r8d
	movslq	%eax, %r9
	movl	1768(%rsp), %edi        # 4-byte Reload
	cmpl	%edi, %r8d
	movq	%r9, %r11
	movl	%eax, 1760(%rsp)        # 4-byte Spill
	movl	%ecx, 1756(%rsp)        # 4-byte Spill
	movq	%rdx, 1744(%rsp)        # 8-byte Spill
	movl	%esi, 1740(%rsp)        # 4-byte Spill
	movq	%r9, 1728(%rsp)         # 8-byte Spill
	movq	%r11, 1720(%rsp)        # 8-byte Spill
	jbe	.LBB18_22
# %bb.21:                               # %while.body.i
                                        #   in Loop: Header=BB18_20 Depth=2
	movq	1728(%rsp), %rax        # 8-byte Reload
	movl	1740(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 4384(%rsp,%rax,4)
	movl	$2600, 6612(%rsp)       # imm = 0xA28
	movl	1760(%rsp), %edx        # 4-byte Reload
	cmpl	$242, %edx
	movl	1756(%rsp), %esi        # 4-byte Reload
	movq	1744(%rsp), %rdi        # 8-byte Reload
	movl	%esi, 1764(%rsp)        # 4-byte Spill
	movq	%rdi, 1720(%rsp)        # 8-byte Spill
	jge	.LBB18_20
.LBB18_22:                              # %zero.i
                                        #   in Loop: Header=BB18_19 Depth=1
	movq	1720(%rsp), %rax        # 8-byte Reload
	movl	1772(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 4384(%rsp,%rax,4)
	movl	$2609, 6612(%rsp)       # imm = 0xA31
	movq	1776(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	1776(%rsp), %rdx        # 8-byte Reload
	cmpq	$255, %rdx
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	jb	.LBB18_19
# %bb.23:                               # %for.body230.i.1.preheader
	movl	$40, %eax
	movl	%eax, %ecx
	movq	%rcx, 1712(%rsp)        # 8-byte Spill
	jmp	.LBB18_152
.LBB18_24:                              # %for.body280.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_25 Depth 2
                                        #       Child Loop BB18_31 Depth 3
                                        #         Child Loop BB18_32 Depth 4
                                        #           Child Loop BB18_62 Depth 5
                                        #             Child Loop BB18_64 Depth 6
                                        #               Child Loop BB18_65 Depth 7
                                        #             Child Loop BB18_74 Depth 6
                                        #               Child Loop BB18_75 Depth 7
                                        #         Child Loop BB18_88 Depth 4
                                        #         Child Loop BB18_91 Depth 4
                                        #         Child Loop BB18_96 Depth 4
                                        #         Child Loop BB18_99 Depth 4
                                        #         Child Loop BB18_37 Depth 4
                                        #         Child Loop BB18_40 Depth 4
                                        #           Child Loop BB18_43 Depth 5
                                        #             Child Loop BB18_46 Depth 6
                                        #             Child Loop BB18_51 Depth 6
                                        #             Child Loop BB18_56 Depth 6
                                        #     Child Loop BB18_109 Depth 2
                                        #     Child Loop BB18_112 Depth 2
                                        #     Child Loop BB18_117 Depth 2
                                        #     Child Loop BB18_124 Depth 2
                                        #     Child Loop BB18_127 Depth 2
                                        #     Child Loop BB18_130 Depth 2
	movl	1708(%rsp), %eax        # 4-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	xorl	%edx, %edx
	movl	%edx, %esi
	movl	4384(%rsp,%rcx,4), %edx
	movl	$2621, 6612(%rsp)       # imm = 0xA3D
	movl	%edx, %edi
	shll	$8, %edi
	movslq	%edi, %r8
	movl	%edx, %r9d
	movl	%r9d, %r10d
	movq	%rsi, 1688(%rsp)        # 8-byte Spill
	movq	%rcx, 1680(%rsp)        # 8-byte Spill
	movq	%r10, 1672(%rsp)        # 8-byte Spill
	movl	%edx, 1668(%rsp)        # 4-byte Spill
	movl	%edi, 1664(%rsp)        # 4-byte Spill
	movq	%r8, 1656(%rsp)         # 8-byte Spill
	movl	%eax, 1652(%rsp)        # 4-byte Spill
.LBB18_25:                              # %for.body286.i
                                        #   Parent Loop BB18_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_31 Depth 3
                                        #         Child Loop BB18_32 Depth 4
                                        #           Child Loop BB18_62 Depth 5
                                        #             Child Loop BB18_64 Depth 6
                                        #               Child Loop BB18_65 Depth 7
                                        #             Child Loop BB18_74 Depth 6
                                        #               Child Loop BB18_75 Depth 7
                                        #         Child Loop BB18_88 Depth 4
                                        #         Child Loop BB18_91 Depth 4
                                        #         Child Loop BB18_96 Depth 4
                                        #         Child Loop BB18_99 Depth 4
                                        #         Child Loop BB18_37 Depth 4
                                        #         Child Loop BB18_40 Depth 4
                                        #           Child Loop BB18_43 Depth 5
                                        #             Child Loop BB18_46 Depth 6
                                        #             Child Loop BB18_51 Depth 6
                                        #             Child Loop BB18_56 Depth 6
	movl	1652(%rsp), %eax        # 4-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %rdx        # 8-byte Reload
	cmpq	%rdx, %rcx
	movl	%eax, %esi
	movl	%eax, 1648(%rsp)        # 4-byte Spill
	movq	%rcx, 1640(%rsp)        # 8-byte Spill
	movl	%esi, 1636(%rsp)        # 4-byte Spill
	je	.LBB18_105
# %bb.26:                               # %if.then289.i
                                        #   in Loop: Header=BB18_25 Depth=2
	movq	1640(%rsp), %rax        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	%rax, %rdx
	shlq	$2, %rdx
	movq	2032(%rsp), %rsi        # 8-byte Reload
	addq	%rdx, %rsi
	movq	2032(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rax,4), %edi
	movl	$2628, 6612(%rsp)       # imm = 0xA44
	movl	%edi, %r8d
	andl	$2097152, %r8d          # imm = 0x200000
	cmpl	$0, %r8d
	movl	%edi, %r8d
	movl	1648(%rsp), %r9d        # 4-byte Reload
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	movq	%rsi, 1616(%rsp)        # 8-byte Spill
	movl	%edi, 1612(%rsp)        # 4-byte Spill
	movl	%r8d, 1608(%rsp)        # 4-byte Spill
	movl	%r9d, 1604(%rsp)        # 4-byte Spill
	jne	.LBB18_104
# %bb.27:                               # %if.then294.i
                                        #   in Loop: Header=BB18_25 Depth=2
	movl	1612(%rsp), %eax        # 4-byte Reload
	andl	$-2097153, %eax         # imm = 0xFFDFFFFF
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movl	4(%rcx,%rdx,4), %esi
	movl	$2634, 6612(%rsp)       # imm = 0xA4A
	andl	$-2097153, %esi         # imm = 0xFFDFFFFF
	addl	$-1, %esi
	cmpl	%eax, %esi
	movl	1612(%rsp), %edi        # 4-byte Reload
	movl	1648(%rsp), %r8d        # 4-byte Reload
	movl	%eax, 1600(%rsp)        # 4-byte Spill
	movl	%esi, 1596(%rsp)        # 4-byte Spill
	movl	%edi, 1608(%rsp)        # 4-byte Spill
	movl	%r8d, 1604(%rsp)        # 4-byte Spill
	jle	.LBB18_104
# %bb.28:                               # %if.then305.i
                                        #   in Loop: Header=BB18_25 Depth=2
	movb	1935(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB18_29
	jmp	.LBB18_30
.LBB18_29:                              # %if.then308.i
                                        #   in Loop: Header=BB18_25 Depth=2
	movabsq	$.L.str.7.2, %rsi
	movl	$1, %eax
	movq	stderr, %rdi
	movl	$2648, 6612(%rsp)       # imm = 0xA58
	movl	1600(%rsp), %ecx        # 4-byte Reload
	subl	%ecx, %eax
	movl	1596(%rsp), %edx        # 4-byte Reload
	addl	%edx, %eax
	movq	1640(%rsp), %r8         # 8-byte Reload
	movl	%r8d, %r9d
	movl	1668(%rsp), %edx        # 4-byte Reload
	movl	%r9d, %ecx
	movl	1648(%rsp), %r8d        # 4-byte Reload
	movl	%eax, %r9d
	movb	$0, %al
	callq	fprintf
	movl	%eax, 1592(%rsp)        # 4-byte Spill
.LBB18_30:                              # %if.end312.i
                                        #   in Loop: Header=BB18_25 Depth=2
	movl	$1, %eax
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movl	1600(%rsp), %edx        # 4-byte Reload
	movl	%edx, (%rcx)
	movl	$2650, 6612(%rsp)       # imm = 0xA5A
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movl	1596(%rsp), %edi        # 4-byte Reload
	movl	%edi, (%rsi)
	movl	$2652, 6612(%rsp)       # imm = 0xA5C
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	$2, (%r8)
	movl	$2671, 6612(%rsp)       # imm = 0xA6F
	movl	%eax, 1564(%rsp)        # 4-byte Spill
.LBB18_31:                              # %while.body.lr.ph.i.i
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB18_32 Depth 4
                                        #           Child Loop BB18_62 Depth 5
                                        #             Child Loop BB18_64 Depth 6
                                        #               Child Loop BB18_65 Depth 7
                                        #             Child Loop BB18_74 Depth 6
                                        #               Child Loop BB18_75 Depth 7
                                        #         Child Loop BB18_88 Depth 4
                                        #         Child Loop BB18_91 Depth 4
                                        #         Child Loop BB18_96 Depth 4
                                        #         Child Loop BB18_99 Depth 4
                                        #         Child Loop BB18_37 Depth 4
                                        #         Child Loop BB18_40 Depth 4
                                        #           Child Loop BB18_43 Depth 5
                                        #             Child Loop BB18_46 Depth 6
                                        #             Child Loop BB18_51 Depth 6
                                        #             Child Loop BB18_56 Depth 6
	movl	1564(%rsp), %eax        # 4-byte Reload
	leaq	5408(%rsp), %rcx
	leaq	5808(%rsp), %rdx
	leaq	6208(%rsp), %rsi
	cmpl	$100, %eax
	setl	%dil
	movl	%eax, %r8d
	addl	$-1, %r8d
	movslq	%r8d, %r9
	movq	%r9, %r10
	shlq	$2, %r10
	addq	%r10, %rsi
	movq	%r9, %r10
	shlq	$2, %r10
	addq	%r10, %rdx
	shlq	$2, %r9
	addq	%r9, %rcx
	movl	%eax, 1560(%rsp)        # 4-byte Spill
	movq	%rcx, 1552(%rsp)        # 8-byte Spill
	movq	%rdx, 1544(%rsp)        # 8-byte Spill
	movq	%rsi, 1536(%rsp)        # 8-byte Spill
	movb	%dil, 1535(%rsp)        # 1-byte Spill
	movl	%r8d, 1528(%rsp)        # 4-byte Spill
.LBB18_32:                              # %while.body.i.i
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB18_62 Depth 5
                                        #             Child Loop BB18_64 Depth 6
                                        #               Child Loop BB18_65 Depth 7
                                        #             Child Loop BB18_74 Depth 6
                                        #               Child Loop BB18_75 Depth 7
	movb	1535(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB18_34
	jmp	.LBB18_33
.LBB18_33:                              # %if.then.i.i
                                        #   in Loop: Header=BB18_32 Depth=4
	movl	$1001, %edi             # imm = 0x3E9
	callq	BZ2_bz__AssertH__fail
.LBB18_34:                              # %if.end.i.i
                                        #   in Loop: Header=BB18_32 Depth=4
	movq	1536(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$2672, 6612(%rsp)       # imm = 0xA70
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %esi
	movl	$2673, 6612(%rsp)       # imm = 0xA71
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %r8d
	movl	$2685, 6612(%rsp)       # imm = 0xA7D
	movl	%esi, %r9d
	subl	%ecx, %r9d
	cmpl	$20, %r9d
	setl	%r10b
	cmpl	$14, %r8d
	setg	%r11b
	orb	%r11b, %r10b
	testb	$1, %r10b
	movl	%ecx, 1524(%rsp)        # 4-byte Spill
	movl	%esi, 1520(%rsp)        # 4-byte Spill
	movl	%r8d, 1516(%rsp)        # 4-byte Spill
	movl	%r9d, 1512(%rsp)        # 4-byte Spill
	jne	.LBB18_35
	jmp	.LBB18_61
.LBB18_35:                              # %if.then14.i.i
                                        #   in Loop: Header=BB18_31 Depth=3
	movl	1512(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	jl	.LBB18_59
# %bb.36:                               # %while.cond.i.i.i.preheader
                                        #   in Loop: Header=BB18_31 Depth=3
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, 1504(%rsp)        # 8-byte Spill
	jmp	.LBB18_37
.LBB18_37:                              # %while.cond.i.i.i
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	1504(%rsp), %rax        # 8-byte Reload
	movl	incs(,%rax,4), %ecx
	movl	$2698, 6612(%rsp)       # imm = 0xA8A
	movq	%rax, %rdx
	addq	$1, %rdx
	movl	1512(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %ecx
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	movq	%rdx, 1504(%rsp)        # 8-byte Spill
	jle	.LBB18_37
# %bb.38:                               # %while.end.i.i.i
                                        #   in Loop: Header=BB18_31 Depth=3
	movq	1496(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB18_59
# %bb.39:                               # %for.body.lr.ph.i.i.i
                                        #   in Loop: Header=BB18_31 Depth=3
	movl	1520(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	1496(%rsp), %rdx        # 8-byte Reload
	shlq	$32, %rdx
	sarq	$32, %rdx
	movq	%rcx, 1488(%rsp)        # 8-byte Spill
	movq	%rdx, 1480(%rsp)        # 8-byte Spill
.LBB18_40:                              # %for.body.i.i.i
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB18_43 Depth 5
                                        #             Child Loop BB18_46 Depth 6
                                        #             Child Loop BB18_51 Depth 6
                                        #             Child Loop BB18_56 Depth 6
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	%rax, %rcx
	addq	$-1, %rcx
	movl	incs-4(,%rax,4), %edx
	movl	$2710, 6612(%rsp)       # imm = 0xA96
	movl	%edx, %esi
	movl	1524(%rsp), %edi        # 4-byte Reload
	addl	%edi, %esi
	movl	1520(%rsp), %r8d        # 4-byte Reload
	cmpl	%r8d, %esi
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	movq	%rcx, 1464(%rsp)        # 8-byte Spill
	movl	%edx, 1460(%rsp)        # 4-byte Spill
	movl	%esi, 1456(%rsp)        # 4-byte Spill
	jg	.LBB18_58
# %bb.41:                               # %if.end10.lr.ph.i.i.i
                                        #   in Loop: Header=BB18_40 Depth=4
	movl	1456(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movl	1460(%rsp), %edx        # 4-byte Reload
	movslq	%edx, %rsi
	movq	%rsi, 1448(%rsp)        # 8-byte Spill
	movq	%rcx, 1440(%rsp)        # 8-byte Spill
	jmp	.LBB18_43
.LBB18_42:                              # %while.cond6.i.i.i
                                        #   in Loop: Header=BB18_43 Depth=5
	movq	1432(%rsp), %rax        # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	jg	.LBB18_58
.LBB18_43:                              # %if.end10.i.i.i
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        #         Parent Loop BB18_40 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB18_46 Depth 6
                                        #             Child Loop BB18_51 Depth 6
                                        #             Child Loop BB18_56 Depth 6
	movq	1440(%rsp), %rax        # 8-byte Reload
	leaq	2076(%rsp), %r9
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx,%rax,4), %edx
	movl	$2713, 6612(%rsp)       # imm = 0xA99
	movq	%rax, %rsi
	movq	1448(%rsp), %rdi        # 8-byte Reload
	subq	%rdi, %rsi
	movq	%rsi, %r8
	shlq	$2, %r8
	addq	%r8, %rcx
	movq	2048(%rsp), %r8         # 8-byte Reload
	movl	(%r8,%rsi,4), %r10d
	movl	$2727, 6612(%rsp)       # imm = 0xAA7
	movl	1516(%rsp), %r11d       # 4-byte Reload
	addl	%r11d, %r10d
	movl	%edx, %ebx
	addl	%r11d, %ebx
	movl	%r10d, %edi
	movq	%rsi, 1424(%rsp)        # 8-byte Spill
	movl	%ebx, %esi
	movq	2040(%rsp), %r14        # 8-byte Reload
	movl	%edx, 1420(%rsp)        # 4-byte Spill
	movq	%r14, %rdx
	movq	1976(%rsp), %r15        # 8-byte Reload
	movq	%rcx, 1408(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movl	2020(%rsp), %r8d        # 4-byte Reload
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	movl	%ebx, 1396(%rsp)        # 4-byte Spill
	callq	mainGtU
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %esi
	cmpb	$0, %al
	movl	%esi, %edi
	movl	%esi, 1392(%rsp)        # 4-byte Spill
	movl	%edi, 1388(%rsp)        # 4-byte Spill
	je	.LBB18_47
# %bb.44:                               # %while.body19.lr.ph.i.i.i
                                        #   in Loop: Header=BB18_43 Depth=5
	movq	1424(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movq	1408(%rsp), %rdx        # 8-byte Reload
	movl	1392(%rsp), %esi        # 4-byte Reload
	movq	%rdx, 1376(%rsp)        # 8-byte Spill
	movl	%ecx, 1372(%rsp)        # 4-byte Spill
	movl	%esi, 1368(%rsp)        # 4-byte Spill
	jmp	.LBB18_46
.LBB18_45:                              # %while.cond13.i.i.i
                                        #   in Loop: Header=BB18_46 Depth=6
	leaq	2076(%rsp), %r9
	movl	1364(%rsp), %eax        # 4-byte Reload
	movl	1460(%rsp), %ecx        # 4-byte Reload
	subl	%ecx, %eax
	movslq	%eax, %rdx
	movq	%rdx, %rsi
	shlq	$2, %rsi
	movq	2048(%rsp), %rdi        # 8-byte Reload
	addq	%rsi, %rdi
	movq	2048(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi,%rdx,4), %r8d
	movl	$2735, 6612(%rsp)       # imm = 0xAAF
	movl	1516(%rsp), %r10d       # 4-byte Reload
	addl	%r10d, %r8d
	movq	%rdi, 1352(%rsp)        # 8-byte Spill
	movl	%r8d, %edi
	movl	1396(%rsp), %esi        # 4-byte Reload
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movl	2020(%rsp), %r8d        # 4-byte Reload
	movl	%eax, 1348(%rsp)        # 4-byte Spill
	callq	mainGtU
	cmpb	$0, %al
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movl	1348(%rsp), %esi        # 4-byte Reload
	movl	1364(%rsp), %edi        # 4-byte Reload
	movl	1364(%rsp), %r8d        # 4-byte Reload
	movq	%rcx, 1376(%rsp)        # 8-byte Spill
	movl	%esi, 1372(%rsp)        # 4-byte Spill
	movl	%edi, 1368(%rsp)        # 4-byte Spill
	movl	%r8d, 1388(%rsp)        # 4-byte Spill
	je	.LBB18_47
.LBB18_46:                              # %while.body19.i.i.i
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        #         Parent Loop BB18_40 Depth=4
                                        #           Parent Loop BB18_43 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	1368(%rsp), %eax        # 4-byte Reload
	movl	1372(%rsp), %ecx        # 4-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %esi
	movl	$2738, 6612(%rsp)       # imm = 0xAB2
	movslq	%eax, %rdx
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi,%rdx,4)
	movl	$2744, 6612(%rsp)       # imm = 0xAB8
	movl	1456(%rsp), %eax        # 4-byte Reload
	cmpl	%eax, %ecx
	movl	%ecx, %esi
	movl	%ecx, 1364(%rsp)        # 4-byte Spill
	movl	%esi, 1388(%rsp)        # 4-byte Spill
	jge	.LBB18_45
.LBB18_47:                              # %while.end31.i.i.i
                                        #   in Loop: Header=BB18_43 Depth=5
	movl	1388(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	2048(%rsp), %rdx        # 8-byte Reload
	movl	1420(%rsp), %eax        # 4-byte Reload
	movl	%eax, (%rdx,%rcx,4)
	movl	$2749, 6612(%rsp)       # imm = 0xABD
	movq	1400(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdi        # 8-byte Reload
	cmpq	%rdi, %rsi
	movq	%rcx, 1336(%rsp)        # 8-byte Spill
	jge	.LBB18_58
# %bb.48:                               # %if.end37.i.i.i
                                        #   in Loop: Header=BB18_43 Depth=5
	leaq	2076(%rsp), %r9
	movq	2048(%rsp), %rax        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movl	(%rax,%rcx,4), %edx
	movl	$2752, 6612(%rsp)       # imm = 0xAC0
	movq	1448(%rsp), %rsi        # 8-byte Reload
	subq	%rsi, %rcx
	movq	%rcx, %rdi
	shlq	$2, %rdi
	addq	%rdi, %rax
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi,%rcx,4), %r8d
	movl	$2764, 6612(%rsp)       # imm = 0xACC
	movl	1516(%rsp), %r10d       # 4-byte Reload
	addl	%r10d, %r8d
	movl	%edx, %r11d
	addl	%r10d, %r11d
	movl	%r8d, %edi
	movl	%r11d, %esi
	movq	2040(%rsp), %rbx        # 8-byte Reload
	movl	%edx, 1332(%rsp)        # 4-byte Spill
	movq	%rbx, %rdx
	movq	1976(%rsp), %r14        # 8-byte Reload
	movq	%rcx, 1320(%rsp)        # 8-byte Spill
	movq	%r14, %rcx
	movl	2020(%rsp), %r8d        # 4-byte Reload
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	movl	%r11d, 1308(%rsp)       # 4-byte Spill
	callq	mainGtU
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %esi
	cmpb	$0, %al
	movl	%esi, %edi
	movl	%esi, 1304(%rsp)        # 4-byte Spill
	movl	%edi, 1300(%rsp)        # 4-byte Spill
	je	.LBB18_52
# %bb.49:                               # %while.body48.lr.ph.i.i.i
                                        #   in Loop: Header=BB18_43 Depth=5
	movq	1320(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movq	1312(%rsp), %rdx        # 8-byte Reload
	movl	1304(%rsp), %esi        # 4-byte Reload
	movq	%rdx, 1288(%rsp)        # 8-byte Spill
	movl	%ecx, 1284(%rsp)        # 4-byte Spill
	movl	%esi, 1280(%rsp)        # 4-byte Spill
	jmp	.LBB18_51
.LBB18_50:                              # %while.cond40.i.i.i
                                        #   in Loop: Header=BB18_51 Depth=6
	leaq	2076(%rsp), %r9
	movl	1276(%rsp), %eax        # 4-byte Reload
	movl	1460(%rsp), %ecx        # 4-byte Reload
	subl	%ecx, %eax
	movslq	%eax, %rdx
	movq	%rdx, %rsi
	shlq	$2, %rsi
	movq	2048(%rsp), %rdi        # 8-byte Reload
	addq	%rsi, %rdi
	movq	2048(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi,%rdx,4), %r8d
	movl	$2772, 6612(%rsp)       # imm = 0xAD4
	movl	1516(%rsp), %r10d       # 4-byte Reload
	addl	%r10d, %r8d
	movq	%rdi, 1264(%rsp)        # 8-byte Spill
	movl	%r8d, %edi
	movl	1308(%rsp), %esi        # 4-byte Reload
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movl	2020(%rsp), %r8d        # 4-byte Reload
	movl	%eax, 1260(%rsp)        # 4-byte Spill
	callq	mainGtU
	cmpb	$0, %al
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movl	1260(%rsp), %esi        # 4-byte Reload
	movl	1276(%rsp), %edi        # 4-byte Reload
	movl	1276(%rsp), %r8d        # 4-byte Reload
	movq	%rcx, 1288(%rsp)        # 8-byte Spill
	movl	%esi, 1284(%rsp)        # 4-byte Spill
	movl	%edi, 1280(%rsp)        # 4-byte Spill
	movl	%r8d, 1300(%rsp)        # 4-byte Spill
	je	.LBB18_52
.LBB18_51:                              # %while.body48.i.i.i
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        #         Parent Loop BB18_40 Depth=4
                                        #           Parent Loop BB18_43 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	1280(%rsp), %eax        # 4-byte Reload
	movl	1284(%rsp), %ecx        # 4-byte Reload
	movq	1288(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %esi
	movl	$2775, 6612(%rsp)       # imm = 0xAD7
	movslq	%eax, %rdx
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi,%rdx,4)
	movl	$2781, 6612(%rsp)       # imm = 0xADD
	movl	1456(%rsp), %eax        # 4-byte Reload
	cmpl	%eax, %ecx
	movl	%ecx, %esi
	movl	%ecx, 1276(%rsp)        # 4-byte Spill
	movl	%esi, 1300(%rsp)        # 4-byte Spill
	jge	.LBB18_50
.LBB18_52:                              # %while.end60.i.i.i
                                        #   in Loop: Header=BB18_43 Depth=5
	movl	1300(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	2048(%rsp), %rdx        # 8-byte Reload
	movl	1332(%rsp), %eax        # 4-byte Reload
	movl	%eax, (%rdx,%rcx,4)
	movl	$2786, 6612(%rsp)       # imm = 0xAE2
	movq	1400(%rsp), %rcx        # 8-byte Reload
	addq	$2, %rcx
	movq	1488(%rsp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rcx
	movq	%rcx, 1248(%rsp)        # 8-byte Spill
	jg	.LBB18_58
# %bb.53:                               # %if.end66.i.i.i
                                        #   in Loop: Header=BB18_43 Depth=5
	leaq	2076(%rsp), %r9
	movq	2048(%rsp), %rax        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movl	(%rax,%rcx,4), %edx
	movl	$2789, 6612(%rsp)       # imm = 0xAE5
	movq	1448(%rsp), %rsi        # 8-byte Reload
	subq	%rsi, %rcx
	movq	%rcx, %rdi
	shlq	$2, %rdi
	addq	%rdi, %rax
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi,%rcx,4), %r8d
	movl	$2801, 6612(%rsp)       # imm = 0xAF1
	movl	1516(%rsp), %r10d       # 4-byte Reload
	addl	%r10d, %r8d
	movl	%edx, %r11d
	addl	%r10d, %r11d
	movl	%r8d, %edi
	movl	%r11d, %esi
	movq	2040(%rsp), %rbx        # 8-byte Reload
	movl	%edx, 1244(%rsp)        # 4-byte Spill
	movq	%rbx, %rdx
	movq	1976(%rsp), %r14        # 8-byte Reload
	movq	%rcx, 1232(%rsp)        # 8-byte Spill
	movq	%r14, %rcx
	movl	2020(%rsp), %r8d        # 4-byte Reload
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	movl	%r11d, 1220(%rsp)       # 4-byte Spill
	callq	mainGtU
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %esi
	cmpb	$0, %al
	movl	%esi, %edi
	movl	%esi, 1216(%rsp)        # 4-byte Spill
	movl	%edi, 1212(%rsp)        # 4-byte Spill
	je	.LBB18_57
# %bb.54:                               # %while.body77.lr.ph.i.i.i
                                        #   in Loop: Header=BB18_43 Depth=5
	movq	1232(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movl	1216(%rsp), %esi        # 4-byte Reload
	movq	%rdx, 1200(%rsp)        # 8-byte Spill
	movl	%ecx, 1196(%rsp)        # 4-byte Spill
	movl	%esi, 1192(%rsp)        # 4-byte Spill
	jmp	.LBB18_56
.LBB18_55:                              # %while.cond69.i.i.i
                                        #   in Loop: Header=BB18_56 Depth=6
	leaq	2076(%rsp), %r9
	movl	1188(%rsp), %eax        # 4-byte Reload
	movl	1460(%rsp), %ecx        # 4-byte Reload
	subl	%ecx, %eax
	movslq	%eax, %rdx
	movq	%rdx, %rsi
	shlq	$2, %rsi
	movq	2048(%rsp), %rdi        # 8-byte Reload
	addq	%rsi, %rdi
	movq	2048(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi,%rdx,4), %r8d
	movl	$2809, 6612(%rsp)       # imm = 0xAF9
	movl	1516(%rsp), %r10d       # 4-byte Reload
	addl	%r10d, %r8d
	movq	%rdi, 1176(%rsp)        # 8-byte Spill
	movl	%r8d, %edi
	movl	1220(%rsp), %esi        # 4-byte Reload
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movl	2020(%rsp), %r8d        # 4-byte Reload
	movl	%eax, 1172(%rsp)        # 4-byte Spill
	callq	mainGtU
	cmpb	$0, %al
	movq	1176(%rsp), %rcx        # 8-byte Reload
	movl	1172(%rsp), %esi        # 4-byte Reload
	movl	1188(%rsp), %edi        # 4-byte Reload
	movl	1188(%rsp), %r8d        # 4-byte Reload
	movq	%rcx, 1200(%rsp)        # 8-byte Spill
	movl	%esi, 1196(%rsp)        # 4-byte Spill
	movl	%edi, 1192(%rsp)        # 4-byte Spill
	movl	%r8d, 1212(%rsp)        # 4-byte Spill
	je	.LBB18_57
.LBB18_56:                              # %while.body77.i.i.i
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        #         Parent Loop BB18_40 Depth=4
                                        #           Parent Loop BB18_43 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	1192(%rsp), %eax        # 4-byte Reload
	movl	1196(%rsp), %ecx        # 4-byte Reload
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %esi
	movl	$2812, 6612(%rsp)       # imm = 0xAFC
	movslq	%eax, %rdx
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi,%rdx,4)
	movl	$2818, 6612(%rsp)       # imm = 0xB02
	movl	1456(%rsp), %eax        # 4-byte Reload
	cmpl	%eax, %ecx
	movl	%ecx, %esi
	movl	%ecx, 1188(%rsp)        # 4-byte Spill
	movl	%esi, 1212(%rsp)        # 4-byte Spill
	jge	.LBB18_55
.LBB18_57:                              # %while.end89.i.i.i
                                        #   in Loop: Header=BB18_43 Depth=5
	movl	1212(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	2048(%rsp), %rdx        # 8-byte Reload
	movl	1244(%rsp), %eax        # 4-byte Reload
	movl	%eax, (%rdx,%rcx,4)
	movl	$2819, 6612(%rsp)       # imm = 0xB03
	movl	2076(%rsp), %esi
	movl	$2824, 6612(%rsp)       # imm = 0xB08
	movq	1400(%rsp), %rcx        # 8-byte Reload
	addq	$3, %rcx
	cmpl	$0, %esi
	movq	%rcx, 1432(%rsp)        # 8-byte Spill
	movl	%esi, 1168(%rsp)        # 4-byte Spill
	jl	.LBB18_102
	jmp	.LBB18_42
.LBB18_58:                              # %for.inc.i.i.i
                                        #   in Loop: Header=BB18_40 Depth=4
	movq	1472(%rsp), %rax        # 8-byte Reload
	cmpq	$1, %rax
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1480(%rsp)        # 8-byte Spill
	jg	.LBB18_40
.LBB18_59:                              # %mainSimpleSort.exit.i.i
                                        #   in Loop: Header=BB18_31 Depth=3
	movl	2076(%rsp), %eax
	movl	$2832, 6612(%rsp)       # imm = 0xB10
	cmpl	$0, %eax
	movl	1528(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 1164(%rsp)        # 4-byte Spill
	movl	%eax, 1168(%rsp)        # 4-byte Spill
	jl	.LBB18_102
.LBB18_60:                              # %while.cond.outer.backedge.i.i
                                        #   in Loop: Header=BB18_31 Depth=3
	movl	1164(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	movl	%eax, 1564(%rsp)        # 4-byte Spill
	jg	.LBB18_31
	jmp	.LBB18_101
.LBB18_61:                              # %if.end18.i.i
                                        #   in Loop: Header=BB18_32 Depth=4
	movl	1524(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	2048(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %esi
	movl	$2836, 6612(%rsp)       # imm = 0xB14
	movl	1516(%rsp), %edi        # 4-byte Reload
	addl	%edi, %esi
	movl	%esi, %esi
	movl	%esi, %ecx
	movq	2040(%rsp), %r8         # 8-byte Reload
	movb	(%r8,%rcx), %r9b
	movl	$2839, 6612(%rsp)       # imm = 0xB17
	movl	1520(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %r10d
	movl	$2843, 6612(%rsp)       # imm = 0xB1B
	addl	%edi, %r10d
	movl	%r10d, %r10d
	movl	%r10d, %ecx
	movb	(%r8,%rcx), %r11b
	movl	$2848, 6612(%rsp)       # imm = 0xB20
	addl	%eax, %esi
	sarl	$1, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	$2852, 6612(%rsp)       # imm = 0xB24
	addl	%edi, %esi
	movl	%esi, %esi
	movl	%esi, %ecx
	movb	(%r8,%rcx), %bl
	movl	$2886, 6612(%rsp)       # imm = 0xB46
	cmpb	%r11b, %r9b
	movb	%r9b, %bpl
	movb	%r9b, 1163(%rsp)        # 1-byte Spill
	movb	%r11b, 1162(%rsp)       # 1-byte Spill
	movb	%bl, 1161(%rsp)         # 1-byte Spill
	movb	%bpl, 1160(%rsp)        # 1-byte Spill
	ja	.LBB18_173
# %bb.172:                              # %if.end18.i.i
                                        #   in Loop: Header=BB18_32 Depth=4
	movb	1162(%rsp), %al         # 1-byte Reload
	movb	%al, 1160(%rsp)         # 1-byte Spill
.LBB18_173:                             # %if.end18.i.i
                                        #   in Loop: Header=BB18_32 Depth=4
	movb	1160(%rsp), %al         # 1-byte Reload
	movb	1163(%rsp), %cl         # 1-byte Reload
	movb	1162(%rsp), %dl         # 1-byte Reload
	cmpb	%dl, %cl
	movb	%al, 1159(%rsp)         # 1-byte Spill
	movb	%dl, 1158(%rsp)         # 1-byte Spill
	ja	.LBB18_175
# %bb.174:                              # %if.end18.i.i
                                        #   in Loop: Header=BB18_32 Depth=4
	movb	1163(%rsp), %al         # 1-byte Reload
	movb	%al, 1158(%rsp)         # 1-byte Spill
.LBB18_175:                             # %if.end18.i.i
                                        #   in Loop: Header=BB18_32 Depth=4
	movb	1158(%rsp), %al         # 1-byte Reload
	movb	1161(%rsp), %cl         # 1-byte Reload
	cmpb	%cl, %al
	movb	%al, 1157(%rsp)         # 1-byte Spill
	ja	.LBB18_177
# %bb.176:                              # %if.end18.i.i
                                        #   in Loop: Header=BB18_32 Depth=4
	movb	1161(%rsp), %al         # 1-byte Reload
	movb	%al, 1157(%rsp)         # 1-byte Spill
.LBB18_177:                             # %if.end18.i.i
                                        #   in Loop: Header=BB18_32 Depth=4
	movb	1157(%rsp), %al         # 1-byte Reload
	movb	1159(%rsp), %cl         # 1-byte Reload
	movb	1161(%rsp), %dl         # 1-byte Reload
	cmpb	%dl, %cl
	movb	%al, 1156(%rsp)         # 1-byte Spill
	ja	.LBB18_179
# %bb.178:                              # %if.end18.i.i
                                        #   in Loop: Header=BB18_32 Depth=4
	movb	1159(%rsp), %al         # 1-byte Reload
	movb	%al, 1156(%rsp)         # 1-byte Spill
.LBB18_179:                             # %if.end18.i.i
                                        #   in Loop: Header=BB18_32 Depth=4
	movb	1156(%rsp), %al         # 1-byte Reload
	movzbl	%al, %ecx
	movl	1520(%rsp), %edx        # 4-byte Reload
	movl	1524(%rsp), %esi        # 4-byte Reload
	movl	1520(%rsp), %edi        # 4-byte Reload
	movl	1524(%rsp), %r8d        # 4-byte Reload
	movl	%ecx, 1152(%rsp)        # 4-byte Spill
	movl	%edx, 1148(%rsp)        # 4-byte Spill
	movl	%esi, 1144(%rsp)        # 4-byte Spill
	movl	%edi, 1140(%rsp)        # 4-byte Spill
	movl	%r8d, 1136(%rsp)        # 4-byte Spill
.LBB18_62:                              # %while.cond34.i.i
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        #         Parent Loop BB18_32 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB18_64 Depth 6
                                        #               Child Loop BB18_65 Depth 7
                                        #             Child Loop BB18_74 Depth 6
                                        #               Child Loop BB18_75 Depth 7
	movl	1136(%rsp), %eax        # 4-byte Reload
	movl	1140(%rsp), %ecx        # 4-byte Reload
	movl	1144(%rsp), %edx        # 4-byte Reload
	movl	1148(%rsp), %esi        # 4-byte Reload
	cmpl	%ecx, %eax
	movl	%edx, %edi
	movl	%eax, %r8d
	movl	%eax, 1132(%rsp)        # 4-byte Spill
	movl	%ecx, 1128(%rsp)        # 4-byte Spill
	movl	%edx, 1124(%rsp)        # 4-byte Spill
	movl	%esi, 1120(%rsp)        # 4-byte Spill
	movl	%edi, 1116(%rsp)        # 4-byte Spill
	movl	%r8d, 1112(%rsp)        # 4-byte Spill
	jg	.LBB18_72
# %bb.63:                               # %if.end41.lr.ph.lr.ph.i.i
                                        #   in Loop: Header=BB18_62 Depth=5
	movl	1128(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movl	1124(%rsp), %edx        # 4-byte Reload
	movslq	%edx, %rsi
	movl	1132(%rsp), %edi        # 4-byte Reload
	movq	%rcx, 1104(%rsp)        # 8-byte Spill
	movq	%rsi, 1096(%rsp)        # 8-byte Spill
	movl	%edi, 1092(%rsp)        # 4-byte Spill
.LBB18_64:                              # %if.end41.lr.ph.i.i
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        #         Parent Loop BB18_32 Depth=4
                                        #           Parent Loop BB18_62 Depth=5
                                        # =>          This Loop Header: Depth=6
                                        #               Child Loop BB18_65 Depth 7
	movl	1092(%rsp), %eax        # 4-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movslq	%eax, %rdx
	movq	%rdx, 1080(%rsp)        # 8-byte Spill
	movq	%rcx, 1072(%rsp)        # 8-byte Spill
	movl	%eax, 1068(%rsp)        # 4-byte Spill
.LBB18_65:                              # %if.end41.i.i
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        #         Parent Loop BB18_32 Depth=4
                                        #           Parent Loop BB18_62 Depth=5
                                        #             Parent Loop BB18_64 Depth=6
                                        # =>            This Inner Loop Header: Depth=7
	movl	1068(%rsp), %eax        # 4-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	2048(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %esi
	movl	$2890, 6612(%rsp)       # imm = 0xB4A
	movl	%esi, %edi
	movl	1516(%rsp), %r8d        # 4-byte Reload
	addl	%r8d, %edi
	movl	%edi, %edi
	movl	%edi, %r9d
	movq	2040(%rsp), %r10        # 8-byte Reload
	movb	(%r10,%r9), %r11b
	movl	$2898, 6612(%rsp)       # imm = 0xB52
	movzbl	%r11b, %edi
	movl	1152(%rsp), %ebx        # 4-byte Reload
	subl	%ebx, %edi
	cmpl	$0, %edi
	movl	%eax, 1064(%rsp)        # 4-byte Spill
	movq	%rcx, 1056(%rsp)        # 8-byte Spill
	movl	%esi, 1052(%rsp)        # 4-byte Spill
	movl	%edi, 1048(%rsp)        # 4-byte Spill
	jne	.LBB18_67
# %bb.66:                               # %if.then51.i.i
                                        #   in Loop: Header=BB18_64 Depth=6
	movq	1056(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movq	2048(%rsp), %rdx        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movl	(%rdx,%rsi,4), %edi
	movl	$2899, 6612(%rsp)       # imm = 0xB53
	movl	%edi, (%rdx,%rax,4)
	movl	$2900, 6612(%rsp)       # imm = 0xB54
	movl	1052(%rsp), %edi        # 4-byte Reload
	movl	%edi, (%rdx,%rsi,4)
	movl	$2929, 6612(%rsp)       # imm = 0xB71
	addq	$1, %rsi
	movl	%ecx, %r8d
	addl	$1, %r8d
	movl	1128(%rsp), %r9d        # 4-byte Reload
	cmpl	%ecx, %r9d
	movq	%rsi, %r10
	movl	%r8d, %ecx
	movq	%rsi, 1040(%rsp)        # 8-byte Spill
	movl	%r8d, 1036(%rsp)        # 4-byte Spill
	movq	%r10, 1096(%rsp)        # 8-byte Spill
	movl	%ecx, 1092(%rsp)        # 4-byte Spill
	jg	.LBB18_64
	jmp	.LBB18_69
.LBB18_67:                              # %if.end62.i.i
                                        #   in Loop: Header=BB18_65 Depth=7
	movl	1048(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jg	.LBB18_70
# %bb.68:                               # %if.end66.i.i
                                        #   in Loop: Header=BB18_65 Depth=7
	movq	1056(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movl	1064(%rsp), %ecx        # 4-byte Reload
	addl	$1, %ecx
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rdx
	movl	%ecx, %edi
	movl	%ecx, 1032(%rsp)        # 4-byte Spill
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	movl	%edi, 1068(%rsp)        # 4-byte Spill
	jl	.LBB18_65
	jmp	.LBB18_71
.LBB18_69:                              # %while.end.loopexit87.i.i
                                        #   in Loop: Header=BB18_62 Depth=5
	movq	1040(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	1036(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1116(%rsp)        # 4-byte Spill
	movl	%edx, 1112(%rsp)        # 4-byte Spill
	jmp	.LBB18_72
.LBB18_70:                              # %while.end.loopexit.split.loop.exit.i.i
                                        #   in Loop: Header=BB18_62 Depth=5
	movq	1072(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movl	%edx, %esi
	movl	%ecx, 1116(%rsp)        # 4-byte Spill
	movl	%esi, 1112(%rsp)        # 4-byte Spill
	jmp	.LBB18_72
.LBB18_71:                              # %while.end.loopexit.split.loop.exit181.i.i
                                        #   in Loop: Header=BB18_62 Depth=5
	movq	1072(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	1032(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1116(%rsp)        # 4-byte Spill
	movl	%edx, 1112(%rsp)        # 4-byte Spill
.LBB18_72:                              # %while.end.i.i
                                        #   in Loop: Header=BB18_62 Depth=5
	movl	1112(%rsp), %eax        # 4-byte Reload
	movl	1116(%rsp), %ecx        # 4-byte Reload
	movl	1128(%rsp), %edx        # 4-byte Reload
	cmpl	%edx, %eax
	movl	1120(%rsp), %esi        # 4-byte Reload
	movl	%eax, 1028(%rsp)        # 4-byte Spill
	movl	%ecx, 1024(%rsp)        # 4-byte Spill
	movl	%edx, 1020(%rsp)        # 4-byte Spill
	movl	%esi, 1016(%rsp)        # 4-byte Spill
	jg	.LBB18_82
# %bb.73:                               # %if.end73.lr.ph.lr.ph.i.i
                                        #   in Loop: Header=BB18_62 Depth=5
	movl	1028(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movl	1120(%rsp), %edx        # 4-byte Reload
	movslq	%edx, %rsi
	movl	1128(%rsp), %edi        # 4-byte Reload
	movq	%rcx, 1008(%rsp)        # 8-byte Spill
	movq	%rsi, 1000(%rsp)        # 8-byte Spill
	movl	%edi, 996(%rsp)         # 4-byte Spill
.LBB18_74:                              # %if.end73.lr.ph.i.i
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        #         Parent Loop BB18_32 Depth=4
                                        #           Parent Loop BB18_62 Depth=5
                                        # =>          This Loop Header: Depth=6
                                        #               Child Loop BB18_75 Depth 7
	movl	996(%rsp), %eax         # 4-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movslq	%eax, %rdx
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	movq	%rdx, 976(%rsp)         # 8-byte Spill
.LBB18_75:                              # %if.end73.i.i
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        #         Parent Loop BB18_32 Depth=4
                                        #           Parent Loop BB18_62 Depth=5
                                        #             Parent Loop BB18_74 Depth=6
                                        # =>            This Inner Loop Header: Depth=7
	movq	976(%rsp), %rax         # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx,%rax,4), %edx
	movl	$2933, 6612(%rsp)       # imm = 0xB75
	movl	%edx, %esi
	movl	1516(%rsp), %edi        # 4-byte Reload
	addl	%edi, %esi
	movl	%esi, %esi
	movl	%esi, %r8d
	movq	2040(%rsp), %r9         # 8-byte Reload
	movb	(%r9,%r8), %r10b
	movl	$2941, 6612(%rsp)       # imm = 0xB7D
	movzbl	%r10b, %esi
	movl	1152(%rsp), %r11d       # 4-byte Reload
	subl	%r11d, %esi
	cmpl	$0, %esi
	movq	%rax, 968(%rsp)         # 8-byte Spill
	movl	%edx, 964(%rsp)         # 4-byte Spill
	movl	%esi, 960(%rsp)         # 4-byte Spill
	jne	.LBB18_77
# %bb.76:                               # %if.then83.i.i
                                        #   in Loop: Header=BB18_74 Depth=6
	movq	968(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movq	2048(%rsp), %rdx        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	movl	(%rdx,%rsi,4), %edi
	movl	$2942, 6612(%rsp)       # imm = 0xB7E
	movl	%edi, (%rdx,%rax,4)
	movl	$2943, 6612(%rsp)       # imm = 0xB7F
	movl	964(%rsp), %edi         # 4-byte Reload
	movl	%edi, (%rdx,%rsi,4)
	movl	$2953, 6612(%rsp)       # imm = 0xB89
	addq	$-1, %rsi
	movl	%ecx, %r8d
	addl	$-1, %r8d
	movl	1028(%rsp), %r9d        # 4-byte Reload
	cmpl	%ecx, %r9d
	movq	%rsi, %r10
	movl	%r8d, %ecx
	movq	%rsi, 952(%rsp)         # 8-byte Spill
	movl	%r8d, 948(%rsp)         # 4-byte Spill
	movq	%r10, 1000(%rsp)        # 8-byte Spill
	movl	%ecx, 996(%rsp)         # 4-byte Spill
	jl	.LBB18_74
	jmp	.LBB18_81
.LBB18_77:                              # %if.end95.i.i
                                        #   in Loop: Header=BB18_75 Depth=7
	movl	960(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	jl	.LBB18_79
# %bb.78:                               # %if.end99.i.i
                                        #   in Loop: Header=BB18_75 Depth=7
	movq	968(%rsp), %rax         # 8-byte Reload
	addq	$-1, %rax
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %rdx        # 8-byte Reload
	cmpq	%rdx, %rcx
	movq	%rax, %rsi
	movq	%rax, 936(%rsp)         # 8-byte Spill
	movq	%rsi, 976(%rsp)         # 8-byte Spill
	jg	.LBB18_75
	jmp	.LBB18_80
.LBB18_79:                              # %if.end105.i.i
                                        #   in Loop: Header=BB18_62 Depth=5
	movq	984(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movq	968(%rsp), %rdx         # 8-byte Reload
	movl	%edx, %esi
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	(%rdi,%r8,4), %r9d
	movl	$2954, 6612(%rsp)       # imm = 0xB8A
	movl	964(%rsp), %r10d        # 4-byte Reload
	movl	%r10d, (%rdi,%r8,4)
	movl	$2955, 6612(%rsp)       # imm = 0xB8B
	movl	%r9d, (%rdi,%rdx,4)
	movl	$2967, 6612(%rsp)       # imm = 0xB97
	movl	1028(%rsp), %r9d        # 4-byte Reload
	addl	$1, %r9d
	addl	$-1, %esi
	movl	1024(%rsp), %r11d       # 4-byte Reload
	movl	%r11d, 1144(%rsp)       # 4-byte Spill
	movl	%esi, 1140(%rsp)        # 4-byte Spill
	movl	%ecx, 1148(%rsp)        # 4-byte Spill
	movl	%r9d, 1136(%rsp)        # 4-byte Spill
	jmp	.LBB18_62
.LBB18_80:                              # %while.end117.loopexit.i.i
                                        #   in Loop: Header=BB18_32 Depth=4
	movq	984(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movq	936(%rsp), %rdx         # 8-byte Reload
	movl	%edx, %esi
	movl	%ecx, 1016(%rsp)        # 4-byte Spill
	movl	%esi, 1020(%rsp)        # 4-byte Spill
	jmp	.LBB18_82
.LBB18_81:                              # %while.end117.loopexit86.i.i
                                        #   in Loop: Header=BB18_32 Depth=4
	movq	952(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movl	948(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 1016(%rsp)        # 4-byte Spill
	movl	%edx, 1020(%rsp)        # 4-byte Spill
.LBB18_82:                              # %while.end117.i.i
                                        #   in Loop: Header=BB18_32 Depth=4
	movl	1020(%rsp), %eax        # 4-byte Reload
	movl	1016(%rsp), %ecx        # 4-byte Reload
	movl	1024(%rsp), %edx        # 4-byte Reload
	cmpl	%edx, %ecx
	movl	%eax, 932(%rsp)         # 4-byte Spill
	movl	%ecx, 928(%rsp)         # 4-byte Spill
	jge	.LBB18_84
# %bb.83:                               # %if.then120.i.i
                                        #   in Loop: Header=BB18_32 Depth=4
	movl	1516(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	$3036, 6612(%rsp)       # imm = 0xBDC
	jmp	.LBB18_32
.LBB18_84:                              # %if.end129.i.i
                                        #   in Loop: Header=BB18_31 Depth=3
	movl	1024(%rsp), %eax        # 4-byte Reload
	movl	1524(%rsp), %ecx        # 4-byte Reload
	subl	%ecx, %eax
	movl	1028(%rsp), %edx        # 4-byte Reload
	movl	1024(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	cmpl	%edx, %eax
	cmovll	%eax, %edx
	cmpl	$0, %edx
	movl	%edx, 924(%rsp)         # 4-byte Spill
	jle	.LBB18_92
# %bb.85:                               # %while.body140.lr.ph.i.i
                                        #   in Loop: Header=BB18_31 Depth=3
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	1524(%rsp), %ecx        # 4-byte Reload
	movslq	%ecx, %rdx
	movl	1028(%rsp), %esi        # 4-byte Reload
	movl	924(%rsp), %edi         # 4-byte Reload
	subl	%edi, %esi
	movslq	%esi, %r8
	addl	$-1, %ecx
	movl	1024(%rsp), %esi        # 4-byte Reload
	subl	%esi, %ecx
	addl	$-1, %esi
	movl	1028(%rsp), %r9d        # 4-byte Reload
	subl	%r9d, %esi
	cmpl	%esi, %ecx
	movl	%esi, %r10d
	cmovgl	%ecx, %r10d
	cmpl	$-2, %r10d
	cmovgl	%r10d, %eax
	cmpl	%esi, %ecx
	cmovgl	%ecx, %esi
	subl	%esi, %eax
	movl	%eax, %ecx
	movl	%ecx, %r11d
	addq	$1, %r11
	cmpq	$8, %r11
	movq	%rdx, %rbx
	movq	%r8, %r14
	movq	%r8, 912(%rsp)          # 8-byte Spill
	movq	%rdx, 904(%rsp)         # 8-byte Spill
	movl	%edi, 900(%rsp)         # 4-byte Spill
	movl	%eax, 896(%rsp)         # 4-byte Spill
	movq	%r11, 888(%rsp)         # 8-byte Spill
	movq	%rbx, 880(%rsp)         # 8-byte Spill
	movq	%r14, 872(%rsp)         # 8-byte Spill
	jb	.LBB18_90
# %bb.86:                               # %vector.memcheck363
                                        #   in Loop: Header=BB18_31 Depth=3
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	904(%rsp), %rcx         # 8-byte Reload
	shlq	$2, %rcx
	movq	2048(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movl	1524(%rsp), %esi        # 4-byte Reload
	addl	$-1, %esi
	movl	1024(%rsp), %edi        # 4-byte Reload
	subl	%edi, %esi
	addl	$-1, %edi
	movl	1028(%rsp), %r8d        # 4-byte Reload
	subl	%r8d, %edi
	cmpl	%edi, %esi
	movl	%edi, %r9d
	cmovgl	%esi, %r9d
	cmpl	$-2, %r9d
	cmovgl	%r9d, %eax
	cmpl	%edi, %esi
	cmovgl	%esi, %edi
	subl	%edi, %eax
	movl	%eax, %eax
	movl	%eax, %ecx
	movq	904(%rsp), %r10         # 8-byte Reload
	addq	%rcx, %r10
	shlq	$2, %r10
	movq	864(%rsp), %r11         # 8-byte Reload
	addq	%r10, %r11
	movq	912(%rsp), %r10         # 8-byte Reload
	shlq	$2, %r10
	movq	2048(%rsp), %rbx        # 8-byte Reload
	addq	%r10, %rbx
	movslq	%r8d, %r10
	addq	%rcx, %r10
	movl	924(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	subq	%rcx, %r10
	shlq	$2, %r10
	movq	856(%rsp), %rcx         # 8-byte Reload
	addq	%r10, %rcx
	cmpq	%rcx, %rdx
	setb	%bpl
	cmpq	%r11, %rbx
	setb	%r14b
	andb	%r14b, %bpl
	testb	$1, %bpl
	movq	904(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movl	%eax, 900(%rsp)         # 4-byte Spill
	movq	%rcx, 880(%rsp)         # 8-byte Spill
	movq	%rdx, 872(%rsp)         # 8-byte Spill
	jne	.LBB18_90
# %bb.87:                               # %vector.ph364
                                        #   in Loop: Header=BB18_31 Depth=3
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	896(%rsp), %eax         # 4-byte Reload
	addl	$1, %eax
	andl	$7, %eax
	movl	%eax, %edx
	movl	%edx, %esi
	movq	888(%rsp), %rdi         # 8-byte Reload
	subq	%rsi, %rdi
	movq	%rdi, %rsi
	movq	904(%rsp), %r8          # 8-byte Reload
	addq	%r8, %rsi
	movq	%rdi, %r9
	movq	912(%rsp), %r10         # 8-byte Reload
	addq	%r10, %r9
	movl	%edi, %edx
	movl	924(%rsp), %r11d        # 4-byte Reload
	subl	%edx, %r11d
	movl	%r11d, 852(%rsp)        # 4-byte Spill
	movl	%eax, 848(%rsp)         # 4-byte Spill
	movq	%rdi, 840(%rsp)         # 8-byte Spill
	movq	%rsi, 832(%rsp)         # 8-byte Spill
	movq	%r9, 824(%rsp)          # 8-byte Spill
	movq	%rcx, 816(%rsp)         # 8-byte Spill
.LBB18_88:                              # %vector.body338
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, %rcx
	movq	904(%rsp), %rdx         # 8-byte Reload
	addq	%rdx, %rcx
	movq	%rax, %rsi
	movq	912(%rsp), %rdi         # 8-byte Reload
	addq	%rdi, %rsi
	movq	2048(%rsp), %r8         # 8-byte Reload
	movdqu	(%r8,%rcx,4), %xmm0
	movl	$3039, 6612(%rsp)       # imm = 0xBDF
	movdqu	16(%r8,%rcx,4), %xmm1
	movl	$3042, 6612(%rsp)       # imm = 0xBE2
	movdqu	(%r8,%rsi,4), %xmm2
	movl	$3045, 6612(%rsp)       # imm = 0xBE5
	movdqu	16(%r8,%rsi,4), %xmm3
	movl	$3047, 6612(%rsp)       # imm = 0xBE7
	movdqu	%xmm2, (%r8,%rcx,4)
	movl	$3049, 6612(%rsp)       # imm = 0xBE9
	movdqu	%xmm3, 16(%r8,%rcx,4)
	movl	$3051, 6612(%rsp)       # imm = 0xBEB
	movdqu	%xmm0, (%r8,%rsi,4)
	movl	$3053, 6612(%rsp)       # imm = 0xBED
	movdqu	%xmm1, 16(%r8,%rsi,4)
	movl	$3069, 6612(%rsp)       # imm = 0xBFD
	addq	$8, %rax
	movq	840(%rsp), %rcx         # 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	jne	.LBB18_88
# %bb.89:                               # %middle.block339
                                        #   in Loop: Header=BB18_31 Depth=3
	movl	848(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %rdx         # 8-byte Reload
	movl	852(%rsp), %esi         # 4-byte Reload
	movq	%rcx, 880(%rsp)         # 8-byte Spill
	movq	%rdx, 872(%rsp)         # 8-byte Spill
	movl	%esi, 900(%rsp)         # 4-byte Spill
	je	.LBB18_92
.LBB18_90:                              # %while.body140.i.i.preheader
                                        #   in Loop: Header=BB18_31 Depth=3
	movl	900(%rsp), %eax         # 4-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, 808(%rsp)         # 8-byte Spill
	movq	%rdx, 800(%rsp)         # 8-byte Spill
	movl	%eax, 796(%rsp)         # 4-byte Spill
.LBB18_91:                              # %while.body140.i.i
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	796(%rsp), %eax         # 4-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	2048(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi,%rdx,4), %edi
	movl	$3071, 6612(%rsp)       # imm = 0xBFF
	movl	(%rsi,%rcx,4), %r8d
	movl	$3072, 6612(%rsp)       # imm = 0xC00
	movl	%r8d, (%rsi,%rdx,4)
	movl	$3073, 6612(%rsp)       # imm = 0xC01
	movl	%edi, (%rsi,%rcx,4)
	movl	$3144, 6612(%rsp)       # imm = 0xC48
	addq	$1, %rdx
	addq	$1, %rcx
	movl	%eax, %edi
	addl	$-1, %edi
	cmpl	$1, %eax
	movq	%rcx, 808(%rsp)         # 8-byte Spill
	movq	%rdx, 800(%rsp)         # 8-byte Spill
	movl	%edi, 796(%rsp)         # 4-byte Spill
	jg	.LBB18_91
.LBB18_92:                              # %while.end153.i.i
                                        #   in Loop: Header=BB18_31 Depth=3
	movl	1520(%rsp), %eax        # 4-byte Reload
	movl	928(%rsp), %ecx         # 4-byte Reload
	subl	%ecx, %eax
	movl	932(%rsp), %edx         # 4-byte Reload
	subl	%edx, %ecx
	cmpl	%ecx, %eax
	movl	%ecx, %esi
	cmovll	%eax, %esi
	cmpl	$0, %esi
	movl	%esi, 792(%rsp)         # 4-byte Spill
	movl	%ecx, 788(%rsp)         # 4-byte Spill
	jle	.LBB18_100
# %bb.93:                               # %while.body172.lr.ph.i.i
                                        #   in Loop: Header=BB18_31 Depth=3
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	1520(%rsp), %ecx        # 4-byte Reload
	movl	792(%rsp), %edx         # 4-byte Reload
	subl	%edx, %ecx
	movslq	%ecx, %rsi
	movl	1028(%rsp), %ecx        # 4-byte Reload
	movslq	%ecx, %rdi
	movl	928(%rsp), %r8d         # 4-byte Reload
	addl	$-1, %r8d
	movl	1520(%rsp), %r9d        # 4-byte Reload
	subl	%r9d, %r8d
	movl	932(%rsp), %r10d        # 4-byte Reload
	addl	$-1, %r10d
	movl	928(%rsp), %r11d        # 4-byte Reload
	subl	%r11d, %r10d
	cmpl	%r10d, %r8d
	movl	%r10d, %ebx
	cmovgl	%r8d, %ebx
	cmpl	$-2, %ebx
	cmovgl	%ebx, %eax
	cmpl	%r10d, %r8d
	cmovgl	%r8d, %r10d
	subl	%r10d, %eax
	movl	%eax, %r8d
	movl	%r8d, %r14d
	addq	$1, %r14
	cmpq	$8, %r14
	movq	%rdi, %r15
	movq	%rsi, %r12
	movl	%edx, 784(%rsp)         # 4-byte Spill
	movq	%rsi, 776(%rsp)         # 8-byte Spill
	movq	%rdi, 768(%rsp)         # 8-byte Spill
	movl	%eax, 764(%rsp)         # 4-byte Spill
	movq	%r14, 752(%rsp)         # 8-byte Spill
	movq	%r15, 744(%rsp)         # 8-byte Spill
	movq	%r12, 736(%rsp)         # 8-byte Spill
	jb	.LBB18_98
# %bb.94:                               # %vector.memcheck
                                        #   in Loop: Header=BB18_31 Depth=3
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	768(%rsp), %rcx         # 8-byte Reload
	shlq	$2, %rcx
	movq	2048(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movl	928(%rsp), %esi         # 4-byte Reload
	addl	$-1, %esi
	movl	1520(%rsp), %edi        # 4-byte Reload
	subl	%edi, %esi
	movl	932(%rsp), %r8d         # 4-byte Reload
	addl	$-1, %r8d
	movl	928(%rsp), %r9d         # 4-byte Reload
	subl	%r9d, %r8d
	cmpl	%r8d, %esi
	movl	%r8d, %r10d
	cmovgl	%esi, %r10d
	cmpl	$-2, %r10d
	cmovgl	%r10d, %eax
	cmpl	%r8d, %esi
	cmovgl	%esi, %r8d
	subl	%r8d, %eax
	movl	%eax, %eax
	movl	%eax, %ecx
	movq	768(%rsp), %r11         # 8-byte Reload
	addq	%rcx, %r11
	shlq	$2, %r11
	movq	728(%rsp), %rbx         # 8-byte Reload
	addq	%r11, %rbx
	movq	776(%rsp), %r11         # 8-byte Reload
	shlq	$2, %r11
	movq	720(%rsp), %r14         # 8-byte Reload
	addq	%r11, %r14
	movslq	%edi, %r11
	addq	%rcx, %r11
	movl	792(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	subq	%rcx, %r11
	shlq	$2, %r11
	movq	712(%rsp), %rcx         # 8-byte Reload
	addq	%r11, %rcx
	cmpq	%rcx, %rdx
	setb	%bpl
	cmpq	%rbx, %r14
	setb	%r15b
	andb	%r15b, %bpl
	testb	$1, %bpl
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movl	%eax, 784(%rsp)         # 4-byte Spill
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	movq	%rdx, 736(%rsp)         # 8-byte Spill
	jne	.LBB18_98
# %bb.95:                               # %vector.ph315
                                        #   in Loop: Header=BB18_31 Depth=3
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	764(%rsp), %eax         # 4-byte Reload
	addl	$1, %eax
	andl	$7, %eax
	movl	%eax, %edx
	movl	%edx, %esi
	movq	752(%rsp), %rdi         # 8-byte Reload
	subq	%rsi, %rdi
	movq	%rdi, %rsi
	movq	768(%rsp), %r8          # 8-byte Reload
	addq	%r8, %rsi
	movq	%rdi, %r9
	movq	776(%rsp), %r10         # 8-byte Reload
	addq	%r10, %r9
	movl	%edi, %edx
	movl	792(%rsp), %r11d        # 4-byte Reload
	subl	%edx, %r11d
	movl	%r11d, 708(%rsp)        # 4-byte Spill
	movl	%eax, 704(%rsp)         # 4-byte Spill
	movq	%rdi, 696(%rsp)         # 8-byte Spill
	movq	%rsi, 688(%rsp)         # 8-byte Spill
	movq	%r9, 680(%rsp)          # 8-byte Spill
	movq	%rcx, 672(%rsp)         # 8-byte Spill
.LBB18_96:                              # %vector.body296
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	672(%rsp), %rax         # 8-byte Reload
	movq	%rax, %rcx
	movq	768(%rsp), %rdx         # 8-byte Reload
	addq	%rdx, %rcx
	movq	%rax, %rsi
	movq	776(%rsp), %rdi         # 8-byte Reload
	addq	%rdi, %rsi
	movq	2048(%rsp), %r8         # 8-byte Reload
	movdqu	(%r8,%rcx,4), %xmm0
	movl	$3147, 6612(%rsp)       # imm = 0xC4B
	movdqu	16(%r8,%rcx,4), %xmm1
	movl	$3150, 6612(%rsp)       # imm = 0xC4E
	movdqu	4(%r8,%rsi,4), %xmm2
	movl	$3153, 6612(%rsp)       # imm = 0xC51
	movdqu	20(%r8,%rsi,4), %xmm3
	movl	$3155, 6612(%rsp)       # imm = 0xC53
	movdqu	%xmm2, (%r8,%rcx,4)
	movl	$3157, 6612(%rsp)       # imm = 0xC55
	movdqu	%xmm3, 16(%r8,%rcx,4)
	movl	$3159, 6612(%rsp)       # imm = 0xC57
	movdqu	%xmm0, 4(%r8,%rsi,4)
	movl	$3161, 6612(%rsp)       # imm = 0xC59
	movdqu	%xmm1, 20(%r8,%rsi,4)
	movl	$3177, 6612(%rsp)       # imm = 0xC69
	addq	$8, %rax
	movq	696(%rsp), %rcx         # 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	jne	.LBB18_96
# %bb.97:                               # %middle.block297
                                        #   in Loop: Header=BB18_31 Depth=3
	movl	704(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %rdx         # 8-byte Reload
	movl	708(%rsp), %esi         # 4-byte Reload
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	movq	%rdx, 736(%rsp)         # 8-byte Spill
	movl	%esi, 784(%rsp)         # 4-byte Spill
	je	.LBB18_100
.LBB18_98:                              # %while.body172.i.i.preheader
                                        #   in Loop: Header=BB18_31 Depth=3
	movl	784(%rsp), %eax         # 4-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	movq	%rdx, 656(%rsp)         # 8-byte Spill
	movl	%eax, 652(%rsp)         # 4-byte Spill
.LBB18_99:                              # %while.body172.i.i
                                        #   Parent Loop BB18_24 Depth=1
                                        #     Parent Loop BB18_25 Depth=2
                                        #       Parent Loop BB18_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	652(%rsp), %eax         # 4-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, %rsi
	addq	$1, %rsi
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi,%rdx,4), %r8d
	movl	$3179, 6612(%rsp)       # imm = 0xC6B
	movl	4(%rdi,%rcx,4), %r9d
	movl	$3180, 6612(%rsp)       # imm = 0xC6C
	movl	%r9d, (%rdi,%rdx,4)
	movl	$3181, 6612(%rsp)       # imm = 0xC6D
	movl	%r8d, 4(%rdi,%rcx,4)
	movl	$3215, 6612(%rsp)       # imm = 0xC8F
	addq	$1, %rdx
	movl	%eax, %r8d
	addl	$-1, %r8d
	cmpl	$1, %eax
	movq	%rsi, 664(%rsp)         # 8-byte Spill
	movq	%rdx, 656(%rsp)         # 8-byte Spill
	movl	%r8d, 652(%rsp)         # 4-byte Spill
	jg	.LBB18_99
.LBB18_100:                             # %while.end185.i.i
                                        #   in Loop: Header=BB18_31 Depth=3
	movl	1524(%rsp), %eax        # 4-byte Reload
	movl	1024(%rsp), %ecx        # 4-byte Reload
	subl	%ecx, %eax
	movl	1028(%rsp), %edx        # 4-byte Reload
	addl	%edx, %eax
	movl	%eax, %esi
	addl	$-1, %esi
	movl	1520(%rsp), %edi        # 4-byte Reload
	movl	788(%rsp), %r8d         # 4-byte Reload
	subl	%r8d, %edi
	movl	%edi, %r9d
	addl	$1, %r9d
	movl	1516(%rsp), %r10d       # 4-byte Reload
	addl	$1, %r10d
	movl	%esi, %r11d
	movl	1524(%rsp), %ebx        # 4-byte Reload
	subl	%ebx, %r11d
	movl	1520(%rsp), %ebp        # 4-byte Reload
	subl	%r9d, %ebp
	cmpl	%ebp, %r11d
	movl	%r9d, %r14d
	cmovll	%ebx, %r14d
	cmpl	%ebp, %r11d
	cmovll	%r9d, %ebx
	cmpl	%ebp, %r11d
	movl	1520(%rsp), %r9d        # 4-byte Reload
	cmovll	%esi, %r9d
	cmpl	%ebp, %r11d
	movl	1520(%rsp), %r11d       # 4-byte Reload
	cmovll	%r11d, %esi
	movl	%r9d, %ebp
	subl	%r14d, %ebp
	movl	%edi, %r15d
	subl	%eax, %r15d
	cmpl	%r15d, %ebp
	movl	%r14d, %r12d
	cmovll	%eax, %r12d
	cmpl	%r15d, %ebp
	movl	%edi, %r13d
	cmovll	%r9d, %r13d
	cmpl	%r15d, %ebp
	cmovll	%edi, %r9d
	cmpl	%r15d, %ebp
	movl	%r10d, %edi
	movl	1516(%rsp), %ecx        # 4-byte Reload
	cmovll	%ecx, %edi
	cmpl	%r15d, %ebp
	cmovll	%r10d, %ecx
	cmpl	%r15d, %ebp
	cmovll	%r14d, %eax
	movl	%esi, %r10d
	subl	%ebx, %r10d
	movl	%r9d, %ebp
	subl	%r12d, %ebp
	cmpl	%ebp, %r10d
	movl	%r12d, %r14d
	cmovll	%ebx, %r14d
	cmpl	%ebp, %r10d
	cmovll	%r12d, %ebx
	cmpl	%ebp, %r10d
	movl	%r9d, %r15d
	cmovll	%esi, %r15d
	cmpl	%ebp, %r10d
	cmovll	%r9d, %esi
	cmpl	%ebp, %r10d
	movl	%ecx, %r9d
	movl	1516(%rsp), %r12d       # 4-byte Reload
	cmovll	%r12d, %r9d
	cmpl	%ebp, %r10d
	cmovll	%ecx, %r12d
	movq	1536(%rsp), %r8         # 8-byte Reload
	movl	%ebx, (%r8)
	movl	$3216, 6612(%rsp)       # imm = 0xC90
	movq	1544(%rsp), %r8         # 8-byte Reload
	movl	%esi, (%r8)
	movl	$3217, 6612(%rsp)       # imm = 0xC91
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movl	%r12d, (%rsi)
	movl	$3220, 6612(%rsp)       # imm = 0xC94
	movl	1560(%rsp), %ecx        # 4-byte Reload
	movslq	%ecx, %rsi
	movl	%r14d, 6208(%rsp,%rsi,4)
	movl	$3222, 6612(%rsp)       # imm = 0xC96
	movl	%r15d, 5808(%rsp,%rsi,4)
	movl	$3224, 6612(%rsp)       # imm = 0xC98
	movl	%r9d, 5408(%rsp,%rsi,4)
	movl	$3228, 6612(%rsp)       # imm = 0xC9C
	addl	$1, %ecx
	movslq	%ecx, %rsi
	movl	%eax, 6208(%rsp,%rsi,4)
	movl	$3230, 6612(%rsp)       # imm = 0xC9E
	movl	%r13d, 5808(%rsp,%rsi,4)
	movl	$3232, 6612(%rsp)       # imm = 0xCA0
	movl	%edi, 5408(%rsp,%rsi,4)
	movl	$3234, 6612(%rsp)       # imm = 0xCA2
	movl	1560(%rsp), %eax        # 4-byte Reload
	addl	$2, %eax
	movl	%eax, 1164(%rsp)        # 4-byte Spill
	jmp	.LBB18_60
.LBB18_101:                             # %mainQSort3.exitthread-pre-split.i
                                        #   in Loop: Header=BB18_25 Depth=2
	movl	2076(%rsp), %eax
	movl	$3245, 6612(%rsp)       # imm = 0xCAD
	movl	%eax, 1168(%rsp)        # 4-byte Spill
.LBB18_102:                             # %mainQSort3.exit.i
                                        #   in Loop: Header=BB18_25 Depth=2
	movl	1168(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jl	.LBB18_138
# %bb.103:                              # %mainQSort3.exit.if.end322_crit_edge.i
                                        #   in Loop: Header=BB18_25 Depth=2
	movl	1648(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	1600(%rsp), %ecx        # 4-byte Reload
	subl	%ecx, %eax
	movl	1596(%rsp), %edx        # 4-byte Reload
	addl	%edx, %eax
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %edi
	movl	$3250, 6612(%rsp)       # imm = 0xCB2
	movl	%edi, 1608(%rsp)        # 4-byte Spill
	movl	%eax, 1604(%rsp)        # 4-byte Spill
.LBB18_104:                             # %if.end322.i
                                        #   in Loop: Header=BB18_25 Depth=2
	movl	1604(%rsp), %eax        # 4-byte Reload
	movl	1608(%rsp), %ecx        # 4-byte Reload
	orl	$2097152, %ecx          # imm = 0x200000
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movl	%ecx, (%rdx)
	movl	$3256, 6612(%rsp)       # imm = 0xCB8
	movl	%eax, 1636(%rsp)        # 4-byte Spill
.LBB18_105:                             # %for.inc327.i
                                        #   in Loop: Header=BB18_25 Depth=2
	movl	1636(%rsp), %eax        # 4-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	cmpq	$256, %rcx              # imm = 0x100
	movl	%eax, %edx
	movl	%eax, 648(%rsp)         # 4-byte Spill
	movq	%rcx, 1688(%rsp)        # 8-byte Spill
	movl	%edx, 1652(%rsp)        # 4-byte Spill
	jb	.LBB18_25
# %bb.106:                              # %for.end329.i
                                        #   in Loop: Header=BB18_24 Depth=1
	leaq	4128(%rsp), %rax
	movl	1668(%rsp), %ecx        # 4-byte Reload
	movslq	%ecx, %rdx
	addq	%rdx, %rax
	movb	4128(%rsp,%rdx), %sil
	movl	$3268, 6612(%rsp)       # imm = 0xCC4
	cmpb	$0, %sil
	movq	%rdx, 640(%rsp)         # 8-byte Spill
	movq	%rax, 632(%rsp)         # 8-byte Spill
	je	.LBB18_108
# %bb.107:                              # %if.then333.i
                                        #   in Loop: Header=BB18_24 Depth=1
	movl	$1006, %edi             # imm = 0x3EE
	callq	BZ2_bz__AssertH__fail
.LBB18_108:                             # %for.body338.i.preheader
                                        #   in Loop: Header=BB18_24 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, 624(%rsp)         # 8-byte Spill
	jmp	.LBB18_109
.LBB18_109:                             # %for.body338.i
                                        #   Parent Loop BB18_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	624(%rsp), %rax         # 8-byte Reload
	movq	%rax, %rcx
	shlq	$8, %rcx
	movq	640(%rsp), %rdx         # 8-byte Reload
	addq	%rdx, %rcx
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi,%rcx,4), %edi
	movl	$3271, 6612(%rsp)       # imm = 0xCC7
	andl	$-2097153, %edi         # imm = 0xFFDFFFFF
	movl	%edi, 3104(%rsp,%rax,4)
	movl	$3274, 6612(%rsp)       # imm = 0xCCA
	movl	4(%rsi,%rcx,4), %edi
	movl	$3278, 6612(%rsp)       # imm = 0xCCE
	andl	$-2097153, %edi         # imm = 0xFFDFFFFF
	addl	$-1, %edi
	movl	%edi, 2080(%rsp,%rax,4)
	movl	$3283, 6612(%rsp)       # imm = 0xCD3
	movq	%rax, %rcx
	orq	$1, %rcx
	movq	%rcx, %r8
	shlq	$8, %r8
	addq	%rdx, %r8
	movl	(%rsi,%r8,4), %edi
	movl	$3286, 6612(%rsp)       # imm = 0xCD6
	andl	$-2097153, %edi         # imm = 0xFFDFFFFF
	movl	%edi, 3104(%rsp,%rcx,4)
	movl	$3289, 6612(%rsp)       # imm = 0xCD9
	movl	4(%rsi,%r8,4), %edi
	movl	$3293, 6612(%rsp)       # imm = 0xCDD
	andl	$-2097153, %edi         # imm = 0xFFDFFFFF
	addl	$-1, %edi
	movl	%edi, 2080(%rsp,%rcx,4)
	movl	$3297, 6612(%rsp)       # imm = 0xCE1
	addq	$2, %rax
	cmpq	$256, %rax              # imm = 0x100
	movq	%rax, 624(%rsp)         # 8-byte Spill
	jne	.LBB18_109
# %bb.110:                              # %for.end357.i
                                        #   in Loop: Header=BB18_24 Depth=1
	leaq	3104(%rsp), %rax
	movq	1656(%rsp), %rcx        # 8-byte Reload
	shlq	$2, %rcx
	movq	2032(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %rsi        # 8-byte Reload
	movl	(%rcx,%rsi,4), %edi
	movl	$3300, 6612(%rsp)       # imm = 0xCE4
	andl	$-2097153, %edi         # imm = 0xFFDFFFFF
	movq	640(%rsp), %r8          # 8-byte Reload
	shlq	$2, %r8
	addq	%r8, %rax
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	3104(%rsp,%r8,4), %r9d
	movl	$3310, 6612(%rsp)       # imm = 0xCEE
	cmpl	%r9d, %edi
	movl	%r9d, %r10d
	movq	%rax, 616(%rsp)         # 8-byte Spill
	movq	%rdx, 608(%rsp)         # 8-byte Spill
	movl	%edi, 604(%rsp)         # 4-byte Spill
	movl	%r9d, 600(%rsp)         # 4-byte Spill
	movl	%r10d, 596(%rsp)        # 4-byte Spill
	jge	.LBB18_115
# %bb.111:                              # %for.body367.lr.ph.i
                                        #   in Loop: Header=BB18_24 Depth=1
	movl	604(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movl	600(%rsp), %edx         # 4-byte Reload
	movl	%edx, 592(%rsp)         # 4-byte Spill
	movq	%rcx, 584(%rsp)         # 8-byte Spill
.LBB18_112:                             # %for.body367.i
                                        #   Parent Loop BB18_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	584(%rsp), %rax         # 8-byte Reload
	movl	592(%rsp), %ecx         # 4-byte Reload
	xorl	%edx, %edx
	movq	2048(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi,%rax,4), %edi
	movl	$3317, 6612(%rsp)       # imm = 0xCF5
	addl	$-1, %edi
	cmpl	$0, %edi
	movl	2020(%rsp), %r8d        # 4-byte Reload
	cmovll	%r8d, %edx
	addl	%edi, %edx
	movslq	%edx, %r9
	movq	2040(%rsp), %r10        # 8-byte Reload
	movb	(%r10,%r9), %r11b
	movl	$3320, 6612(%rsp)       # imm = 0xCF8
	movzbl	%r11b, %edi
	movl	%edi, %r9d
	movb	4128(%rsp,%r9), %r11b
	movl	$3324, 6612(%rsp)       # imm = 0xCFC
	cmpb	$0, %r11b
	movq	%rax, 576(%rsp)         # 8-byte Spill
	movq	%r9, 568(%rsp)          # 8-byte Spill
	movl	%edx, 564(%rsp)         # 4-byte Spill
	movl	%ecx, 560(%rsp)         # 4-byte Spill
	jne	.LBB18_114
# %bb.113:                              # %if.then381.i
                                        #   in Loop: Header=BB18_112 Depth=2
	movq	568(%rsp), %rax         # 8-byte Reload
	movl	3104(%rsp,%rax,4), %ecx
	movl	$3326, 6612(%rsp)       # imm = 0xCFE
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, 3104(%rsp,%rax,4)
	movl	$3329, 6612(%rsp)       # imm = 0xD01
	movslq	%ecx, %rsi
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movl	564(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, (%rdi,%rsi,4)
	movl	$3330, 6612(%rsp)       # imm = 0xD02
	movq	616(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %edx
	movl	$3339, 6612(%rsp)       # imm = 0xD0B
	movl	%edx, 560(%rsp)         # 4-byte Spill
.LBB18_114:                             # %for.inc388.i
                                        #   in Loop: Header=BB18_112 Depth=2
	movl	560(%rsp), %eax         # 4-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	addq	$1, %rcx
	movslq	%eax, %rdx
	cmpq	%rdx, %rcx
	movl	%eax, %esi
	movq	%rcx, 584(%rsp)         # 8-byte Spill
	movl	%esi, 592(%rsp)         # 4-byte Spill
	movl	%eax, 596(%rsp)         # 4-byte Spill
	jl	.LBB18_112
.LBB18_115:                             # %for.end390.i
                                        #   in Loop: Header=BB18_24 Depth=1
	movl	596(%rsp), %eax         # 4-byte Reload
	leaq	2080(%rsp), %rcx
	movl	1664(%rsp), %edx        # 4-byte Reload
	addl	$256, %edx              # imm = 0x100
	movslq	%edx, %rsi
	movq	%rsi, %rdi
	shlq	$2, %rdi
	movq	2032(%rsp), %r8         # 8-byte Reload
	addq	%rdi, %r8
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi,%rsi,4), %edx
	movl	$3343, 6612(%rsp)       # imm = 0xD0F
	andl	$-2097153, %edx         # imm = 0xFFDFFFFF
	addl	$-1, %edx
	movq	640(%rsp), %rsi         # 8-byte Reload
	shlq	$2, %rsi
	addq	%rsi, %rcx
	movq	640(%rsp), %rsi         # 8-byte Reload
	movl	2080(%rsp,%rsi,4), %r9d
	movl	$3353, 6612(%rsp)       # imm = 0xD19
	cmpl	%r9d, %edx
	movl	%r9d, %r10d
	movl	%eax, 556(%rsp)         # 4-byte Spill
	movq	%rcx, 544(%rsp)         # 8-byte Spill
	movq	%r8, 536(%rsp)          # 8-byte Spill
	movl	%edx, 532(%rsp)         # 4-byte Spill
	movl	%r9d, 528(%rsp)         # 4-byte Spill
	movl	%r10d, 524(%rsp)        # 4-byte Spill
	jle	.LBB18_120
# %bb.116:                              # %for.body402.i.preheader
                                        #   in Loop: Header=BB18_24 Depth=1
	movl	528(%rsp), %eax         # 4-byte Reload
	movl	532(%rsp), %ecx         # 4-byte Reload
	movl	%eax, 520(%rsp)         # 4-byte Spill
	movl	%ecx, 516(%rsp)         # 4-byte Spill
	jmp	.LBB18_117
.LBB18_117:                             # %for.body402.i
                                        #   Parent Loop BB18_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	516(%rsp), %eax         # 4-byte Reload
	movl	520(%rsp), %ecx         # 4-byte Reload
	xorl	%edx, %edx
	movslq	%eax, %rsi
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi,%rsi,4), %r8d
	movl	$3360, 6612(%rsp)       # imm = 0xD20
	addl	$-1, %r8d
	cmpl	$0, %r8d
	movl	2020(%rsp), %r9d        # 4-byte Reload
	cmovll	%r9d, %edx
	addl	%r8d, %edx
	movslq	%edx, %rsi
	movq	2040(%rsp), %r10        # 8-byte Reload
	movb	(%r10,%rsi), %r11b
	movl	$3363, 6612(%rsp)       # imm = 0xD23
	movzbl	%r11b, %r8d
	movl	%r8d, %esi
	movb	4128(%rsp,%rsi), %r11b
	movl	$3367, 6612(%rsp)       # imm = 0xD27
	cmpb	$0, %r11b
	movl	%eax, 512(%rsp)         # 4-byte Spill
	movq	%rsi, 504(%rsp)         # 8-byte Spill
	movl	%edx, 500(%rsp)         # 4-byte Spill
	movl	%ecx, 496(%rsp)         # 4-byte Spill
	jne	.LBB18_119
# %bb.118:                              # %if.then416.i
                                        #   in Loop: Header=BB18_117 Depth=2
	movq	504(%rsp), %rax         # 8-byte Reload
	movl	2080(%rsp,%rax,4), %ecx
	movl	$3369, 6612(%rsp)       # imm = 0xD29
	movl	%ecx, %edx
	addl	$-1, %edx
	movl	%edx, 2080(%rsp,%rax,4)
	movl	$3372, 6612(%rsp)       # imm = 0xD2C
	movslq	%ecx, %rsi
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movl	500(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, (%rdi,%rsi,4)
	movl	$3373, 6612(%rsp)       # imm = 0xD2D
	movq	544(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %edx
	movl	$3394, 6612(%rsp)       # imm = 0xD42
	movl	%edx, 496(%rsp)         # 4-byte Spill
.LBB18_119:                             # %for.inc423.i
                                        #   in Loop: Header=BB18_117 Depth=2
	movl	496(%rsp), %eax         # 4-byte Reload
	movl	512(%rsp), %ecx         # 4-byte Reload
	addl	$-1, %ecx
	cmpl	%eax, %ecx
	movl	%eax, %edx
	movl	%ecx, 516(%rsp)         # 4-byte Spill
	movl	%edx, 520(%rsp)         # 4-byte Spill
	movl	%eax, 524(%rsp)         # 4-byte Spill
	jg	.LBB18_117
.LBB18_120:                             # %for.end425.i
                                        #   in Loop: Header=BB18_24 Depth=1
	movl	524(%rsp), %eax         # 4-byte Reload
	movl	556(%rsp), %ecx         # 4-byte Reload
	addl	$-1, %ecx
	cmpl	%eax, %ecx
	movl	%eax, 492(%rsp)         # 4-byte Spill
	je	.LBB18_123
# %bb.121:                              # %lor.lhs.false.i
                                        #   in Loop: Header=BB18_24 Depth=1
	movl	556(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%cl
	movl	492(%rsp), %edx         # 4-byte Reload
	movl	1900(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %edx
	sete	%dil
	andb	%dil, %cl
	testb	$1, %cl
	jne	.LBB18_123
# %bb.122:                              # %if.then442.i
                                        #   in Loop: Header=BB18_24 Depth=1
	movl	$1007, %edi             # imm = 0x3EF
	callq	BZ2_bz__AssertH__fail
.LBB18_123:                             # %for.body447.i.preheader
                                        #   in Loop: Header=BB18_24 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, 480(%rsp)         # 8-byte Spill
	jmp	.LBB18_124
.LBB18_124:                             # %for.body447.i
                                        #   Parent Loop BB18_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	480(%rsp), %rax         # 8-byte Reload
	movq	%rax, %rcx
	shlq	$8, %rcx
	movq	640(%rsp), %rdx         # 8-byte Reload
	addq	%rdx, %rcx
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi,%rcx,4), %edi
	movl	$3396, 6612(%rsp)       # imm = 0xD44
	orl	$2097152, %edi          # imm = 0x200000
	movl	%edi, (%rsi,%rcx,4)
	movl	$3401, 6612(%rsp)       # imm = 0xD49
	movq	%rax, %rcx
	shlq	$8, %rcx
	orq	$256, %rcx              # imm = 0x100
	addq	%rdx, %rcx
	movl	(%rsi,%rcx,4), %edi
	movl	$3403, 6612(%rsp)       # imm = 0xD4B
	orl	$2097152, %edi          # imm = 0x200000
	movl	%edi, (%rsi,%rcx,4)
	movl	$3406, 6612(%rsp)       # imm = 0xD4E
	addq	$2, %rax
	cmpq	$256, %rax              # imm = 0x100
	movq	%rax, 480(%rsp)         # 8-byte Spill
	jne	.LBB18_124
# %bb.125:                              # %for.end455.i
                                        #   in Loop: Header=BB18_24 Depth=1
	movq	632(%rsp), %rax         # 8-byte Reload
	movb	$1, (%rax)
	movl	$3410, 6612(%rsp)       # imm = 0xD52
	movq	1680(%rsp), %rcx        # 8-byte Reload
	cmpq	$255, %rcx
	jae	.LBB18_135
# %bb.126:                              # %if.then460.i
                                        #   in Loop: Header=BB18_24 Depth=1
	xorl	%eax, %eax
	movq	608(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$3412, 6612(%rsp)       # imm = 0xD54
	andl	$-2097153, %edx         # imm = 0xFFDFFFFF
	movq	536(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %edi
	movl	$3431, 6612(%rsp)       # imm = 0xD67
	andl	$-2097153, %edi         # imm = 0xFFDFFFFF
	subl	%edx, %edi
	movl	%edi, 476(%rsp)         # 4-byte Spill
	movl	%edx, 472(%rsp)         # 4-byte Spill
	movl	%eax, 468(%rsp)         # 4-byte Spill
.LBB18_127:                             # %while.cond471.i
                                        #   Parent Loop BB18_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	468(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	476(%rsp), %edx         # 4-byte Reload
	sarl	%cl, %edx
	movl	%eax, %esi
	addl	$1, %esi
	cmpl	$65534, %edx            # imm = 0xFFFE
	movl	%eax, 464(%rsp)         # 4-byte Spill
	movl	%esi, 468(%rsp)         # 4-byte Spill
	jg	.LBB18_127
# %bb.128:                              # %while.end477.i
                                        #   in Loop: Header=BB18_24 Depth=1
	movl	476(%rsp), %eax         # 4-byte Reload
	addl	$-1, %eax
	movl	476(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movl	%eax, 460(%rsp)         # 4-byte Spill
	jle	.LBB18_133
# %bb.129:                              # %for.body482.lr.ph.i
                                        #   in Loop: Header=BB18_24 Depth=1
	movl	476(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movl	472(%rsp), %edx         # 4-byte Reload
	movslq	%edx, %rsi
	movq	%rsi, 448(%rsp)         # 8-byte Spill
	movq	%rcx, 440(%rsp)         # 8-byte Spill
.LBB18_130:                             # %for.body482.i
                                        #   Parent Loop BB18_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, %rdx
	movq	448(%rsp), %rsi         # 8-byte Reload
	addq	%rsi, %rdx
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi,%rdx,4), %r8d
	movl	$3437, 6612(%rsp)       # imm = 0xD6D
	movl	%ecx, %r9d
	movl	464(%rsp), %r10d        # 4-byte Reload
	movq	%rcx, 432(%rsp)         # 8-byte Spill
	movl	%r10d, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %r9d
	movw	%r9w, %r11w
	movslq	%r8d, %rdx
	movq	1976(%rsp), %rbx        # 8-byte Reload
	movw	%r11w, (%rbx,%rdx,2)
	movl	$3443, 6612(%rsp)       # imm = 0xD73
	cmpl	$34, %r8d
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movl	%r8d, 420(%rsp)         # 4-byte Spill
	movw	%r11w, 418(%rsp)        # 2-byte Spill
	jge	.LBB18_132
# %bb.131:                              # %if.then492.i
                                        #   in Loop: Header=BB18_130 Depth=2
	movl	420(%rsp), %eax         # 4-byte Reload
	movl	2020(%rsp), %ecx        # 4-byte Reload
	addl	%ecx, %eax
	movslq	%eax, %rdx
	movq	1976(%rsp), %rsi        # 8-byte Reload
	movw	418(%rsp), %di          # 2-byte Reload
	movw	%di, (%rsi,%rdx,2)
	movl	$3456, 6612(%rsp)       # imm = 0xD80
.LBB18_132:                             # %if.end496.i
                                        #   in Loop: Header=BB18_130 Depth=2
	movq	424(%rsp), %rax         # 8-byte Reload
	cmpq	$1, %rax
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 440(%rsp)         # 8-byte Spill
	jg	.LBB18_130
.LBB18_133:                             # %for.end499.i
                                        #   in Loop: Header=BB18_24 Depth=1
	movl	464(%rsp), %ecx         # 4-byte Reload
                                        # kill: def %cl killed %ecx
	movl	460(%rsp), %eax         # 4-byte Reload
	sarl	%cl, %eax
	cmpl	$65536, %eax            # imm = 0x10000
	jl	.LBB18_135
# %bb.134:                              # %if.then504.i
                                        #   in Loop: Header=BB18_24 Depth=1
	movl	$1002, %edi             # imm = 0x3EA
	callq	BZ2_bz__AssertH__fail
.LBB18_135:                             # %for.inc507.i
                                        #   in Loop: Header=BB18_24 Depth=1
	movq	1680(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	cmpq	$256, %rax              # imm = 0x100
	movl	648(%rsp), %ecx         # 4-byte Reload
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	movl	%ecx, 1708(%rsp)        # 4-byte Spill
	jb	.LBB18_24
# %bb.136:                              # %for.end509.i
	movb	1935(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB18_137
	jmp	.LBB18_138
.LBB18_137:                             # %if.then512.i
	movabsq	$.L.str.8.3, %rsi
	movq	stderr, %rdi
	movl	$3467, 6612(%rsp)       # imm = 0xD8B
	movl	2020(%rsp), %eax        # 4-byte Reload
	movl	648(%rsp), %ecx         # 4-byte Reload
	subl	%ecx, %eax
	movl	2020(%rsp), %edx        # 4-byte Reload
	movl	%eax, %r8d
	movb	$0, %al
	callq	fprintf
	movl	%eax, 412(%rsp)         # 4-byte Spill
.LBB18_138:                             # %mainSort.exit
	movl	2016(%rsp), %eax        # 4-byte Reload
	cmpl	$2, %eax
	jg	.LBB18_140
# %bb.139:                              # %mainSort.exit.if.end21_crit_edge
	movl	2076(%rsp), %eax
	movl	$3469, 6612(%rsp)       # imm = 0xD8D
	movl	%eax, 408(%rsp)         # 4-byte Spill
	jmp	.LBB18_141
.LBB18_140:                             # %if.then13
	movabsq	$.L.str, %rsi
	movss	.LCPI18_64(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	stderr, %rdi
	movl	$3470, 6612(%rsp)       # imm = 0xD8E
	movl	2076(%rsp), %eax
	movl	$3487, 6612(%rsp)       # imm = 0xD9F
	movl	1964(%rsp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	cvtsi2ssl	%ecx, %xmm1
	movl	2020(%rsp), %edx        # 4-byte Reload
	cvtsi2ssl	%edx, %xmm2
	cmpl	$0, %edx
	movq	%rsi, 400(%rsp)         # 8-byte Spill
	movss	%xmm2, 396(%rsp)        # 4-byte Spill
	movq	%rdi, 384(%rsp)         # 8-byte Spill
	movl	%eax, 380(%rsp)         # 4-byte Spill
	movl	%ecx, 376(%rsp)         # 4-byte Spill
	movss	%xmm1, 372(%rsp)        # 4-byte Spill
	movss	%xmm0, 368(%rsp)        # 4-byte Spill
	je	.LBB18_181
# %bb.180:                              # %if.then13
	movss	396(%rsp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, 368(%rsp)        # 4-byte Spill
.LBB18_181:                             # %if.then13
	movss	368(%rsp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	movss	372(%rsp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	divss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movl	376(%rsp), %edx         # 4-byte Reload
	movl	2020(%rsp), %ecx        # 4-byte Reload
	movb	$1, %al
	callq	fprintf
	movl	380(%rsp), %ecx         # 4-byte Reload
	movl	%eax, 364(%rsp)         # 4-byte Spill
	movl	%ecx, 408(%rsp)         # 4-byte Spill
.LBB18_141:                             # %if.end21
	movl	408(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	jge	.LBB18_145
# %bb.142:                              # %if.then24
	movl	2016(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	jle	.LBB18_144
# %bb.143:                              # %if.then27
	movl	$53, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.1, %rdi
	movq	stderr, %rcx
	movl	$3493, 6612(%rsp)       # imm = 0xDA5
	callq	fwrite
	movq	%rax, 352(%rsp)         # 8-byte Spill
.LBB18_144:                             # %if.end29
	movq	2064(%rsp), %rax        # 8-byte Reload
	movq	24(%rax), %rdi
	movl	$3495, 6612(%rsp)       # imm = 0xDA7
	movq	32(%rax), %rsi
	movl	$3499, 6612(%rsp)       # imm = 0xDAB
	movq	2032(%rsp), %rdx        # 8-byte Reload
	movl	2020(%rsp), %ecx        # 4-byte Reload
	movl	2016(%rsp), %r8d        # 4-byte Reload
	callq	fallbackSort
.LBB18_145:                             # %if.end33
	movq	2064(%rsp), %rax        # 8-byte Reload
	addq	$48, %rax
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movl	$-1, 48(%rcx)
	movl	$3500, 6612(%rsp)       # imm = 0xDAC
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %esi
	movl	$3508, 6612(%rsp)       # imm = 0xDB4
	cmpl	$0, %esi
	movq	%rax, 344(%rsp)         # 8-byte Spill
	movl	%esi, 340(%rsp)         # 4-byte Spill
	jle	.LBB18_150
# %bb.146:                              # %for.body.lr.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	340(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rdx
	movq	%rdx, 328(%rsp)         # 8-byte Spill
	movq	%rcx, 320(%rsp)         # 8-byte Spill
.LBB18_147:                             # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	320(%rsp), %rax         # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx,%rax,4), %edx
	movl	$3512, 6612(%rsp)       # imm = 0xDB8
	cmpl	$0, %edx
	movq	%rax, 312(%rsp)         # 8-byte Spill
	jne	.LBB18_149
# %bb.148:                              # %for.end.thread
	movq	312(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movq	344(%rsp), %rdx         # 8-byte Reload
	movl	%ecx, (%rdx)
	movl	$3525, 6612(%rsp)       # imm = 0xDC5
	jmp	.LBB18_151
.LBB18_149:                             # %for.inc
                                        #   in Loop: Header=BB18_147 Depth=1
	movq	312(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	328(%rsp), %rcx         # 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, 320(%rsp)         # 8-byte Spill
	jl	.LBB18_147
.LBB18_150:                             # %if.then48
	movl	$1003, %edi             # imm = 0x3EB
	callq	BZ2_bz__AssertH__fail
.LBB18_151:                             # %if.end49
	addq	$6616, %rsp             # imm = 0x19D8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB18_152:                             # %for.body230.i.1
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_153 Depth 2
	movq	1712(%rsp), %rax        # 8-byte Reload
	movl	4384(%rsp,%rax,4), %ecx
	movl	$3530, 6612(%rsp)       # imm = 0xDCA
	movl	%ecx, %edx
	shll	$8, %edx
	movl	%edx, %esi
	addl	$256, %esi              # imm = 0x100
	movslq	%esi, %rdi
	movq	2032(%rsp), %r8         # 8-byte Reload
	movl	(%r8,%rdi,4), %esi
	movl	$3533, 6612(%rsp)       # imm = 0xDCD
	movslq	%edx, %rdi
	movl	(%r8,%rdi,4), %edx
	movl	$3541, 6612(%rsp)       # imm = 0xDD5
	subl	%edx, %esi
	movl	%eax, %edx
	movq	%rax, 304(%rsp)         # 8-byte Spill
	movl	%ecx, 300(%rsp)         # 4-byte Spill
	movl	%esi, 296(%rsp)         # 4-byte Spill
	movl	%edx, 292(%rsp)         # 4-byte Spill
.LBB18_153:                             # %while.cond.i.1
                                        #   Parent Loop BB18_152 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	292(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ecx
	addl	$-40, %ecx
	movslq	%ecx, %rdx
	movl	4384(%rsp,%rdx,4), %esi
	movl	$3546, 6612(%rsp)       # imm = 0xDDA
	movl	%esi, %edi
	shll	$8, %edi
	movl	%edi, %r8d
	addl	$256, %r8d              # imm = 0x100
	movslq	%r8d, %r9
	movq	2032(%rsp), %r10        # 8-byte Reload
	movl	(%r10,%r9,4), %r8d
	movl	$3549, 6612(%rsp)       # imm = 0xDDD
	movslq	%edi, %r9
	movl	(%r10,%r9,4), %edi
	movl	$3555, 6612(%rsp)       # imm = 0xDE3
	subl	%edi, %r8d
	movslq	%eax, %r9
	movl	296(%rsp), %edi         # 4-byte Reload
	cmpl	%edi, %r8d
	movq	%r9, %r11
	movl	%eax, 288(%rsp)         # 4-byte Spill
	movl	%ecx, 284(%rsp)         # 4-byte Spill
	movq	%rdx, 272(%rsp)         # 8-byte Spill
	movl	%esi, 268(%rsp)         # 4-byte Spill
	movq	%r9, 256(%rsp)          # 8-byte Spill
	movq	%r11, 248(%rsp)         # 8-byte Spill
	jbe	.LBB18_155
# %bb.154:                              # %while.body.i.1
                                        #   in Loop: Header=BB18_153 Depth=2
	movq	256(%rsp), %rax         # 8-byte Reload
	movl	268(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, 4384(%rsp,%rax,4)
	movl	$3560, 6612(%rsp)       # imm = 0xDE8
	movl	288(%rsp), %edx         # 4-byte Reload
	cmpl	$80, %edx
	movl	284(%rsp), %esi         # 4-byte Reload
	movq	272(%rsp), %rdi         # 8-byte Reload
	movl	%esi, 292(%rsp)         # 4-byte Spill
	movq	%rdi, 248(%rsp)         # 8-byte Spill
	jge	.LBB18_153
.LBB18_155:                             # %zero.i.1
                                        #   in Loop: Header=BB18_152 Depth=1
	movq	248(%rsp), %rax         # 8-byte Reload
	movl	300(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, 4384(%rsp,%rax,4)
	movl	$3568, 6612(%rsp)       # imm = 0xDF0
	movq	304(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	304(%rsp), %rdx         # 8-byte Reload
	cmpq	$255, %rdx
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	jb	.LBB18_152
# %bb.156:                              # %for.body230.i.2.preheader
	movl	$13, %eax
	movl	%eax, %ecx
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	jmp	.LBB18_157
.LBB18_157:                             # %for.body230.i.2
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_158 Depth 2
	movq	240(%rsp), %rax         # 8-byte Reload
	movl	4384(%rsp,%rax,4), %ecx
	movl	$3573, 6612(%rsp)       # imm = 0xDF5
	movl	%ecx, %edx
	shll	$8, %edx
	movl	%edx, %esi
	addl	$256, %esi              # imm = 0x100
	movslq	%esi, %rdi
	movq	2032(%rsp), %r8         # 8-byte Reload
	movl	(%r8,%rdi,4), %esi
	movl	$3576, 6612(%rsp)       # imm = 0xDF8
	movslq	%edx, %rdi
	movl	(%r8,%rdi,4), %edx
	movl	$3584, 6612(%rsp)       # imm = 0xE00
	subl	%edx, %esi
	movl	%eax, %edx
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movl	%ecx, 228(%rsp)         # 4-byte Spill
	movl	%esi, 224(%rsp)         # 4-byte Spill
	movl	%edx, 220(%rsp)         # 4-byte Spill
.LBB18_158:                             # %while.cond.i.2
                                        #   Parent Loop BB18_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	220(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ecx
	addl	$-13, %ecx
	movslq	%ecx, %rdx
	movl	4384(%rsp,%rdx,4), %esi
	movl	$3589, 6612(%rsp)       # imm = 0xE05
	movl	%esi, %edi
	shll	$8, %edi
	movl	%edi, %r8d
	addl	$256, %r8d              # imm = 0x100
	movslq	%r8d, %r9
	movq	2032(%rsp), %r10        # 8-byte Reload
	movl	(%r10,%r9,4), %r8d
	movl	$3592, 6612(%rsp)       # imm = 0xE08
	movslq	%edi, %r9
	movl	(%r10,%r9,4), %edi
	movl	$3598, 6612(%rsp)       # imm = 0xE0E
	subl	%edi, %r8d
	movslq	%eax, %r9
	movl	224(%rsp), %edi         # 4-byte Reload
	cmpl	%edi, %r8d
	movq	%r9, %r11
	movl	%eax, 216(%rsp)         # 4-byte Spill
	movl	%ecx, 212(%rsp)         # 4-byte Spill
	movq	%rdx, 200(%rsp)         # 8-byte Spill
	movl	%esi, 196(%rsp)         # 4-byte Spill
	movq	%r9, 184(%rsp)          # 8-byte Spill
	movq	%r11, 176(%rsp)         # 8-byte Spill
	jbe	.LBB18_160
# %bb.159:                              # %while.body.i.2
                                        #   in Loop: Header=BB18_158 Depth=2
	movq	184(%rsp), %rax         # 8-byte Reload
	movl	196(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, 4384(%rsp,%rax,4)
	movl	$3603, 6612(%rsp)       # imm = 0xE13
	movl	216(%rsp), %edx         # 4-byte Reload
	cmpl	$26, %edx
	movl	212(%rsp), %esi         # 4-byte Reload
	movq	200(%rsp), %rdi         # 8-byte Reload
	movl	%esi, 220(%rsp)         # 4-byte Spill
	movq	%rdi, 176(%rsp)         # 8-byte Spill
	jge	.LBB18_158
.LBB18_160:                             # %zero.i.2
                                        #   in Loop: Header=BB18_157 Depth=1
	movq	176(%rsp), %rax         # 8-byte Reload
	movl	228(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, 4384(%rsp,%rax,4)
	movl	$3610, 6612(%rsp)       # imm = 0xE1A
	movq	232(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	232(%rsp), %rdx         # 8-byte Reload
	cmpq	$255, %rdx
	movq	%rax, 240(%rsp)         # 8-byte Spill
	jb	.LBB18_157
# %bb.161:                              # %for.body230.i.3.preheader
	movl	$4, %eax
	movl	%eax, %ecx
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	jmp	.LBB18_162
.LBB18_162:                             # %for.body230.i.3
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_163 Depth 2
	movq	168(%rsp), %rax         # 8-byte Reload
	movl	4384(%rsp,%rax,4), %ecx
	movl	$3615, 6612(%rsp)       # imm = 0xE1F
	movl	%ecx, %edx
	shll	$8, %edx
	movl	%edx, %esi
	addl	$256, %esi              # imm = 0x100
	movslq	%esi, %rdi
	movq	2032(%rsp), %r8         # 8-byte Reload
	movl	(%r8,%rdi,4), %esi
	movl	$3618, 6612(%rsp)       # imm = 0xE22
	movslq	%edx, %rdi
	movl	(%r8,%rdi,4), %edx
	movl	$3626, 6612(%rsp)       # imm = 0xE2A
	subl	%edx, %esi
	movl	%eax, %edx
	movq	%rax, 160(%rsp)         # 8-byte Spill
	movl	%ecx, 156(%rsp)         # 4-byte Spill
	movl	%esi, 152(%rsp)         # 4-byte Spill
	movl	%edx, 148(%rsp)         # 4-byte Spill
.LBB18_163:                             # %while.cond.i.3
                                        #   Parent Loop BB18_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	148(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ecx
	addl	$-4, %ecx
	movslq	%ecx, %rdx
	movl	4384(%rsp,%rdx,4), %esi
	movl	$3631, 6612(%rsp)       # imm = 0xE2F
	movl	%esi, %edi
	shll	$8, %edi
	movl	%edi, %r8d
	addl	$256, %r8d              # imm = 0x100
	movslq	%r8d, %r9
	movq	2032(%rsp), %r10        # 8-byte Reload
	movl	(%r10,%r9,4), %r8d
	movl	$3634, 6612(%rsp)       # imm = 0xE32
	movslq	%edi, %r9
	movl	(%r10,%r9,4), %edi
	movl	$3640, 6612(%rsp)       # imm = 0xE38
	subl	%edi, %r8d
	movslq	%eax, %r9
	movl	152(%rsp), %edi         # 4-byte Reload
	cmpl	%edi, %r8d
	movq	%r9, %r11
	movl	%eax, 144(%rsp)         # 4-byte Spill
	movl	%ecx, 140(%rsp)         # 4-byte Spill
	movq	%rdx, 128(%rsp)         # 8-byte Spill
	movl	%esi, 124(%rsp)         # 4-byte Spill
	movq	%r9, 112(%rsp)          # 8-byte Spill
	movq	%r11, 104(%rsp)         # 8-byte Spill
	jbe	.LBB18_165
# %bb.164:                              # %while.body.i.3
                                        #   in Loop: Header=BB18_163 Depth=2
	movq	112(%rsp), %rax         # 8-byte Reload
	movl	124(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, 4384(%rsp,%rax,4)
	movl	$3645, 6612(%rsp)       # imm = 0xE3D
	movl	144(%rsp), %edx         # 4-byte Reload
	cmpl	$8, %edx
	movl	140(%rsp), %esi         # 4-byte Reload
	movq	128(%rsp), %rdi         # 8-byte Reload
	movl	%esi, 148(%rsp)         # 4-byte Spill
	movq	%rdi, 104(%rsp)         # 8-byte Spill
	jge	.LBB18_163
.LBB18_165:                             # %zero.i.3
                                        #   in Loop: Header=BB18_162 Depth=1
	movq	104(%rsp), %rax         # 8-byte Reload
	movl	156(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, 4384(%rsp,%rax,4)
	movl	$3652, 6612(%rsp)       # imm = 0xE44
	movq	160(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	160(%rsp), %rdx         # 8-byte Reload
	cmpq	$255, %rdx
	movq	%rax, 168(%rsp)         # 8-byte Spill
	jb	.LBB18_162
# %bb.166:                              # %for.body230.i.4.preheader
	movl	$1, %eax
	movl	%eax, %ecx
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	jmp	.LBB18_167
.LBB18_167:                             # %for.body230.i.4
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_168 Depth 2
	movq	96(%rsp), %rax          # 8-byte Reload
	movl	4384(%rsp,%rax,4), %ecx
	movl	$3657, 6612(%rsp)       # imm = 0xE49
	movl	%ecx, %edx
	shll	$8, %edx
	movl	%edx, %esi
	addl	$256, %esi              # imm = 0x100
	movslq	%esi, %rdi
	movq	2032(%rsp), %r8         # 8-byte Reload
	movl	(%r8,%rdi,4), %esi
	movl	$3660, 6612(%rsp)       # imm = 0xE4C
	movslq	%edx, %rdi
	movl	(%r8,%rdi,4), %edx
	movl	$3668, 6612(%rsp)       # imm = 0xE54
	subl	%edx, %esi
	movl	%eax, %edx
	movq	%rax, 88(%rsp)          # 8-byte Spill
	movl	%ecx, 84(%rsp)          # 4-byte Spill
	movl	%esi, 80(%rsp)          # 4-byte Spill
	movl	%edx, 76(%rsp)          # 4-byte Spill
.LBB18_168:                             # %while.cond.i.4
                                        #   Parent Loop BB18_167 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	76(%rsp), %eax          # 4-byte Reload
	movl	%eax, %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rdx
	movl	4384(%rsp,%rdx,4), %esi
	movl	$3673, 6612(%rsp)       # imm = 0xE59
	movl	%esi, %edi
	shll	$8, %edi
	movl	%edi, %r8d
	addl	$256, %r8d              # imm = 0x100
	movslq	%r8d, %r9
	movq	2032(%rsp), %r10        # 8-byte Reload
	movl	(%r10,%r9,4), %r8d
	movl	$3676, 6612(%rsp)       # imm = 0xE5C
	movslq	%edi, %r9
	movl	(%r10,%r9,4), %edi
	movl	$3682, 6612(%rsp)       # imm = 0xE62
	subl	%edi, %r8d
	movslq	%eax, %r9
	movl	80(%rsp), %edi          # 4-byte Reload
	cmpl	%edi, %r8d
	movq	%r9, %r11
	movl	%eax, 72(%rsp)          # 4-byte Spill
	movl	%ecx, 68(%rsp)          # 4-byte Spill
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	movl	%esi, 52(%rsp)          # 4-byte Spill
	movq	%r9, 40(%rsp)           # 8-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	jbe	.LBB18_170
# %bb.169:                              # %while.body.i.4
                                        #   in Loop: Header=BB18_168 Depth=2
	movq	40(%rsp), %rax          # 8-byte Reload
	movl	52(%rsp), %ecx          # 4-byte Reload
	movl	%ecx, 4384(%rsp,%rax,4)
	movl	$3687, 6612(%rsp)       # imm = 0xE67
	movl	72(%rsp), %edx          # 4-byte Reload
	cmpl	$2, %edx
	movl	68(%rsp), %esi          # 4-byte Reload
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	%esi, 76(%rsp)          # 4-byte Spill
	movq	%rdi, 32(%rsp)          # 8-byte Spill
	jge	.LBB18_168
.LBB18_170:                             # %zero.i.4
                                        #   in Loop: Header=BB18_167 Depth=1
	movq	32(%rsp), %rax          # 8-byte Reload
	movl	84(%rsp), %ecx          # 4-byte Reload
	movl	%ecx, 4384(%rsp,%rax,4)
	movl	$3714, 6612(%rsp)       # imm = 0xE82
	movq	88(%rsp), %rax          # 8-byte Reload
	addq	$1, %rax
	movq	88(%rsp), %rdx          # 8-byte Reload
	cmpq	$255, %rdx
	movq	%rax, 96(%rsp)          # 8-byte Spill
	jb	.LBB18_167
# %bb.171:                              # %do.cond273.i.4
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	leaq	5408(%rsp), %rdx
	leaq	5808(%rsp), %rsi
	leaq	6208(%rsp), %rdi
	movq	%rdi, %r8
	movq	%rsi, %r9
	movq	%rdx, %r10
	movq	2048(%rsp), %r11        # 8-byte Reload
	addq	$4, %r11
	movq	2048(%rsp), %rbx        # 8-byte Reload
	addq	$4, %rbx
	movq	2048(%rsp), %r14        # 8-byte Reload
	addq	$8, %r14
	movq	2048(%rsp), %r15        # 8-byte Reload
	addq	$4, %r15
	movq	2048(%rsp), %r12        # 8-byte Reload
	addq	$4, %r12
	movq	%r12, 856(%rsp)         # 8-byte Spill
	movq	%rcx, 1696(%rsp)        # 8-byte Spill
	movq	%rdx, 1568(%rsp)        # 8-byte Spill
	movq	%rsi, 1576(%rsp)        # 8-byte Spill
	movq	%rdi, 1584(%rsp)        # 8-byte Spill
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%r9, 16(%rsp)           # 8-byte Spill
	movq	%r10, 8(%rsp)           # 8-byte Spill
	movq	%r11, 728(%rsp)         # 8-byte Spill
	movq	%rbx, 720(%rsp)         # 8-byte Spill
	movq	%r14, 712(%rsp)         # 8-byte Spill
	movq	%r15, 864(%rsp)         # 8-byte Spill
	movl	%eax, 1708(%rsp)        # 4-byte Spill
	jmp	.LBB18_24
.Lfunc_end18:
	.size	BZ2_blockSort, .Lfunc_end18-BZ2_blockSort
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fallbackSort
	.type	fallbackSort,@function
fallbackSort:                           # @fallbackSort
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$4272, %rsp             # imm = 0x10B0
	.cfi_def_cfa_offset 4320
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	leaq	1392(%rsp), %rax
	leaq	2416(%rsp), %r9
	movl	$9999, 4268(%rsp)       # imm = 0x270F
	movq	%rdx, %r10
	movq	%rsi, %r11
	cmpl	$3, %r8d
	setg	%bl
	testb	$1, %bl
	movq	%rsi, 1384(%rsp)        # 8-byte Spill
	movq	%r11, 1376(%rsp)        # 8-byte Spill
	movl	%ecx, 1372(%rsp)        # 4-byte Spill
	movq	%rdx, 1360(%rsp)        # 8-byte Spill
	movq	%rdi, 1352(%rsp)        # 8-byte Spill
	movq	%r9, 1344(%rsp)         # 8-byte Spill
	movq	%r10, 1336(%rsp)        # 8-byte Spill
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movb	%bl, 1327(%rsp)         # 1-byte Spill
	jne	.LBB19_1
	jmp	.LBB19_2
.LBB19_1:                               # %if.then
	movl	$27, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.2, %rdi
	movq	stderr, %rcx
	movl	$3733, 4268(%rsp)       # imm = 0xE95
	callq	fwrite
	movq	%rax, 1312(%rsp)        # 8-byte Spill
.LBB19_2:                               # %if.end
	xorl	%eax, %eax
	movl	$1028, %ecx             # imm = 0x404
	movl	%ecx, %edx
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movl	%eax, %esi
	movl	%eax, 1308(%rsp)        # 4-byte Spill
	callq	memset
	movl	1372(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setg	%r8b
	testb	$1, %r8b
	movl	1308(%rsp), %ecx        # 4-byte Reload
	movb	%r8b, 1307(%rsp)        # 1-byte Spill
	movl	%ecx, 1300(%rsp)        # 4-byte Spill
	jne	.LBB19_3
	jmp	.LBB19_10
.LBB19_3:                               # %for.body4.lr.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	1372(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edx
	movl	%edx, %esi
	movq	%rsi, %rdi
	addq	$-1, %rdi
	movq	%rsi, %r8
	andq	$3, %r8
	cmpq	$3, %rdi
	movq	%r8, 1288(%rsp)         # 8-byte Spill
	movq	%rsi, 1280(%rsp)        # 8-byte Spill
	movq	%rcx, 1272(%rsp)        # 8-byte Spill
	jb	.LBB19_6
# %bb.4:                                # %for.body4.lr.ph.new
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	subq	%rsi, %rdx
	movq	%rcx, 1264(%rsp)        # 8-byte Spill
	movq	%rdx, 1256(%rsp)        # 8-byte Spill
.LBB19_5:                               # %for.body4
                                        # =>This Inner Loop Header: Depth=1
	movq	1256(%rsp), %rax        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movb	(%rdx,%rcx), %sil
	movl	$3736, 4268(%rsp)       # imm = 0xE98
	movzbl	%sil, %edi
	movl	%edi, %r8d
	movl	2416(%rsp,%r8,4), %edi
	movl	$3738, 4268(%rsp)       # imm = 0xE9A
	addl	$1, %edi
	movl	%edi, 2416(%rsp,%r8,4)
	movl	$3741, 4268(%rsp)       # imm = 0xE9D
	movq	%rcx, %r8
	orq	$1, %r8
	movb	(%rdx,%r8), %sil
	movl	$3744, 4268(%rsp)       # imm = 0xEA0
	movzbl	%sil, %edi
	movl	%edi, %r8d
	movl	2416(%rsp,%r8,4), %edi
	movl	$3746, 4268(%rsp)       # imm = 0xEA2
	addl	$1, %edi
	movl	%edi, 2416(%rsp,%r8,4)
	movl	$3749, 4268(%rsp)       # imm = 0xEA5
	movq	%rcx, %r8
	orq	$2, %r8
	movb	(%rdx,%r8), %sil
	movl	$3752, 4268(%rsp)       # imm = 0xEA8
	movzbl	%sil, %edi
	movl	%edi, %r8d
	movl	2416(%rsp,%r8,4), %edi
	movl	$3754, 4268(%rsp)       # imm = 0xEAA
	addl	$1, %edi
	movl	%edi, 2416(%rsp,%r8,4)
	movl	$3757, 4268(%rsp)       # imm = 0xEAD
	movq	%rcx, %r8
	orq	$3, %r8
	movb	(%rdx,%r8), %sil
	movl	$3760, 4268(%rsp)       # imm = 0xEB0
	movzbl	%sil, %edi
	movl	%edi, %r8d
	movl	2416(%rsp,%r8,4), %edi
	movl	$3762, 4268(%rsp)       # imm = 0xEB2
	addl	$1, %edi
	movl	%edi, 2416(%rsp,%r8,4)
	movl	$3774, 4268(%rsp)       # imm = 0xEBE
	addq	$4, %rcx
	addq	$-4, %rax
	cmpq	$0, %rax
	movq	%rcx, %r8
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	movq	%r8, 1264(%rsp)         # 8-byte Spill
	movq	%rcx, 1272(%rsp)        # 8-byte Spill
	jne	.LBB19_5
.LBB19_6:                               # %for.end12.loopexit.unr-lcssa
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	cmpq	$0, %rcx
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	je	.LBB19_9
# %bb.7:                                # %for.body4.epil.preheader
	movq	1248(%rsp), %rax        # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	movq	%rcx, 1232(%rsp)        # 8-byte Spill
	jmp	.LBB19_8
.LBB19_8:                               # %for.body4.epil
                                        # =>This Inner Loop Header: Depth=1
	movq	1232(%rsp), %rax        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movb	(%rdx,%rcx), %sil
	movl	$3777, 4268(%rsp)       # imm = 0xEC1
	movzbl	%sil, %edi
	movl	%edi, %r8d
	movl	2416(%rsp,%r8,4), %edi
	movl	$3779, 4268(%rsp)       # imm = 0xEC3
	addl	$1, %edi
	movl	%edi, 2416(%rsp,%r8,4)
	movl	$3783, 4268(%rsp)       # imm = 0xEC7
	addq	$1, %rcx
	addq	$-1, %rax
	cmpq	$0, %rax
	movq	%rcx, 1240(%rsp)        # 8-byte Spill
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	jne	.LBB19_8
.LBB19_9:                               # %for.end12.loopexit
	movl	2416(%rsp), %eax
	movl	$3793, 4268(%rsp)       # imm = 0xED1
	movl	%eax, 1300(%rsp)        # 4-byte Spill
.LBB19_10:                              # %for.end12
	movl	1300(%rsp), %eax        # 4-byte Reload
	movl	$1, %ecx
	movl	%ecx, %edx
	movl	$1024, %ecx             # imm = 0x400
	movl	%ecx, %esi
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 1224(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	1224(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 1216(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movl	%eax, 1212(%rsp)        # 4-byte Spill
	callq	memcpy
	movl	1212(%rsp), %eax        # 4-byte Reload
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movl	%eax, 1208(%rsp)        # 4-byte Spill
	movq	%rdx, 1200(%rsp)        # 8-byte Spill
.LBB19_11:                              # %for.body25
                                        # =>This Inner Loop Header: Depth=1
	movq	1200(%rsp), %rax        # 8-byte Reload
	movl	1208(%rsp), %ecx        # 4-byte Reload
	movl	2416(%rsp,%rax,4), %edx
	movl	$3795, 4268(%rsp)       # imm = 0xED3
	addl	%ecx, %edx
	movl	%edx, 2416(%rsp,%rax,4)
	movl	$3798, 4268(%rsp)       # imm = 0xED6
	movl	2420(%rsp,%rax,4), %ecx
	movl	$3800, 4268(%rsp)       # imm = 0xED8
	addl	%edx, %ecx
	movl	%ecx, 2420(%rsp,%rax,4)
	movl	$3803, 4268(%rsp)       # imm = 0xEDB
	movl	2424(%rsp,%rax,4), %edx
	movl	$3805, 4268(%rsp)       # imm = 0xEDD
	addl	%ecx, %edx
	movl	%edx, 2424(%rsp,%rax,4)
	movl	$3808, 4268(%rsp)       # imm = 0xEE0
	movl	2428(%rsp,%rax,4), %ecx
	movl	$3809, 4268(%rsp)       # imm = 0xEE1
	addl	%edx, %ecx
	movl	%ecx, 2428(%rsp,%rax,4)
	movl	$3824, 4268(%rsp)       # imm = 0xEF0
	addq	$4, %rax
	cmpq	$257, %rax              # imm = 0x101
	movl	%ecx, 1208(%rsp)        # 4-byte Spill
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	jne	.LBB19_11
# %bb.12:                               # %for.end32
	movb	1307(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB19_13
	jmp	.LBB19_18
.LBB19_13:                              # %for.body35.lr.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	1372(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edx
	movl	%edx, %esi
	movq	%rsi, %rdi
	andq	$1, %rdi
	cmpl	$1, %eax
	movq	%rdi, 1192(%rsp)        # 8-byte Spill
	movq	%rsi, 1184(%rsp)        # 8-byte Spill
	movq	%rcx, 1176(%rsp)        # 8-byte Spill
	je	.LBB19_16
# %bb.14:                               # %for.body35.lr.ph.new
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1192(%rsp), %rsi        # 8-byte Reload
	subq	%rsi, %rdx
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	movq	%rdx, 1160(%rsp)        # 8-byte Spill
.LBB19_15:                              # %for.body35
                                        # =>This Inner Loop Header: Depth=1
	movq	1160(%rsp), %rax        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movb	(%rdx,%rcx), %sil
	movl	$3827, 4268(%rsp)       # imm = 0xEF3
	movzbl	%sil, %edi
	movl	%edi, %r8d
	movl	2416(%rsp,%r8,4), %edi
	movl	$3829, 4268(%rsp)       # imm = 0xEF5
	addl	$-1, %edi
	movl	%edi, 2416(%rsp,%r8,4)
	movl	$3833, 4268(%rsp)       # imm = 0xEF9
	movslq	%edi, %r8
	movl	%ecx, %edi
	movq	1352(%rsp), %r9         # 8-byte Reload
	movl	%edi, (%r9,%r8,4)
	movl	$3836, 4268(%rsp)       # imm = 0xEFC
	movq	%rcx, %r8
	orq	$1, %r8
	movb	(%rdx,%r8), %sil
	movl	$3839, 4268(%rsp)       # imm = 0xEFF
	movzbl	%sil, %edi
	movl	%edi, %r10d
	movl	2416(%rsp,%r10,4), %edi
	movl	$3841, 4268(%rsp)       # imm = 0xF01
	addl	$-1, %edi
	movl	%edi, 2416(%rsp,%r10,4)
	movl	$3845, 4268(%rsp)       # imm = 0xF05
	movslq	%edi, %r10
	movl	%r8d, %edi
	movl	%edi, (%r9,%r10,4)
	movl	$3852, 4268(%rsp)       # imm = 0xF0C
	addq	$2, %rcx
	addq	$-2, %rax
	cmpq	$0, %rax
	movq	%rcx, %r8
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	movq	%r8, 1168(%rsp)         # 8-byte Spill
	movq	%rcx, 1176(%rsp)        # 8-byte Spill
	jne	.LBB19_15
.LBB19_16:                              # %for.end47.loopexit.unr-lcssa
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	cmpq	$0, %rcx
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	je	.LBB19_18
# %bb.17:                               # %for.body35.epil
	movq	1376(%rsp), %rax        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movb	(%rax,%rcx), %dl
	movl	$3855, 4268(%rsp)       # imm = 0xF0F
	movzbl	%dl, %esi
	movl	%esi, %edi
	movl	2416(%rsp,%rdi,4), %esi
	movl	$3857, 4268(%rsp)       # imm = 0xF11
	addl	$-1, %esi
	movl	%esi, 2416(%rsp,%rdi,4)
	movl	$3861, 4268(%rsp)       # imm = 0xF15
	movslq	%esi, %rdi
	movl	%ecx, %esi
	movq	1352(%rsp), %r8         # 8-byte Reload
	movl	%esi, (%r8,%rdi,4)
	movl	$3878, 4268(%rsp)       # imm = 0xF26
.LBB19_18:                              # %for.end47
	movl	1372(%rsp), %eax        # 4-byte Reload
	cmpl	$-64, %eax
	jle	.LBB19_20
# %bb.19:                               # %for.body52.lr.ph
	xorl	%eax, %eax
	movl	$32, %ecx
	movl	1372(%rsp), %edx        # 4-byte Reload
	movl	%eax, 1148(%rsp)        # 4-byte Spill
	movl	%edx, %eax
	cltd
	idivl	%ecx
	addl	$1, %eax
	cmpl	$0, %eax
	movl	1148(%rsp), %ecx        # 4-byte Reload
	cmovgl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, %esi
	shlq	$2, %rsi
	addq	$4, %rsi
	movq	1336(%rsp), %rdi        # 8-byte Reload
	movl	1148(%rsp), %eax        # 4-byte Reload
	movq	%rsi, 1136(%rsp)        # 8-byte Spill
	movl	%eax, %esi
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	%r8, %rdx
	callq	memset
.LBB19_20:                              # %for.body61.preheader
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, 1128(%rsp)        # 8-byte Spill
	jmp	.LBB19_21
.LBB19_21:                              # %for.body61
                                        # =>This Inner Loop Header: Depth=1
	movq	1128(%rsp), %rax        # 8-byte Reload
	movl	$1, %ecx
	movl	2416(%rsp,%rax,4), %edx
	movl	$3884, 4268(%rsp)       # imm = 0xF2C
	movl	%edx, %esi
	andl	$31, %esi
	movl	%ecx, 1124(%rsp)        # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	movl	1124(%rsp), %esi        # 4-byte Reload
	shll	%cl, %esi
	sarl	$5, %edx
	movslq	%edx, %rdi
	movq	1360(%rsp), %r8         # 8-byte Reload
	movl	(%r8,%rdi,4), %edx
	movl	$3886, 4268(%rsp)       # imm = 0xF2E
	orl	%edx, %esi
	movl	%esi, (%r8,%rdi,4)
	movl	$3889, 4268(%rsp)       # imm = 0xF31
	movq	%rax, %rdi
	orq	$1, %rdi
	movl	2416(%rsp,%rdi,4), %edx
	movl	$3895, 4268(%rsp)       # imm = 0xF37
	movl	%edx, %esi
	andl	$31, %esi
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	movl	1124(%rsp), %esi        # 4-byte Reload
	shll	%cl, %esi
	sarl	$5, %edx
	movslq	%edx, %rdi
	movl	(%r8,%rdi,4), %edx
	movl	$3897, 4268(%rsp)       # imm = 0xF39
	orl	%edx, %esi
	movl	%esi, (%r8,%rdi,4)
	movl	$3910, 4268(%rsp)       # imm = 0xF46
	addq	$2, %rax
	cmpq	$256, %rax              # imm = 0x100
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	jne	.LBB19_21
# %bb.22:                               # %for.body74.preheader
	xorl	%eax, %eax
	movl	%eax, 1120(%rsp)        # 4-byte Spill
	jmp	.LBB19_23
.LBB19_23:                              # %for.body74
                                        # =>This Inner Loop Header: Depth=1
	movl	1120(%rsp), %eax        # 4-byte Reload
	movl	$1, %ecx
	movl	%eax, %edx
	shll	$1, %edx
	movl	1372(%rsp), %esi        # 4-byte Reload
	addl	%esi, %edx
	movl	%edx, %edi
	andl	$31, %edi
	movl	%ecx, 1116(%rsp)        # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: def %cl killed %ecx
	movl	1116(%rsp), %edi        # 4-byte Reload
	shll	%cl, %edi
	movl	%edx, %r8d
	sarl	$5, %r8d
	movslq	%r8d, %r9
	movq	1360(%rsp), %r10        # 8-byte Reload
	movl	(%r10,%r9,4), %r8d
	movl	$3912, 4268(%rsp)       # imm = 0xF48
	orl	%edi, %r8d
	movl	%r8d, (%r10,%r9,4)
	movl	$3920, 4268(%rsp)       # imm = 0xF50
	addl	$1, %edx
	movl	%edx, %edi
	andl	$31, %edi
	movl	%edi, %ecx
                                        # kill: def %cl killed %ecx
	movl	1116(%rsp), %edi        # 4-byte Reload
	shll	%cl, %edi
	xorl	$-1, %edi
	sarl	$5, %edx
	movslq	%edx, %r9
	movl	(%r10,%r9,4), %edx
	movl	$3922, 4268(%rsp)       # imm = 0xF52
	andl	%edi, %edx
	movl	%edx, (%r10,%r9,4)
	movl	$3939, 4268(%rsp)       # imm = 0xF63
	addl	$1, %eax
	cmpl	$32, %eax
	movl	%eax, 1120(%rsp)        # 4-byte Spill
	jne	.LBB19_23
# %bb.24:                               # %for.end98
	movl	$1, %eax
	leaq	3456(%rsp), %rcx
	leaq	3856(%rsp), %rdx
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	movl	1372(%rsp), %r8d        # 4-byte Reload
	movl	%r8d, %r9d
	movl	%r9d, %r10d
	movq	1352(%rsp), %r11        # 8-byte Reload
	addq	$4, %r11
	movq	1352(%rsp), %rbx        # 8-byte Reload
	addq	$4, %rbx
	movq	1352(%rsp), %r14        # 8-byte Reload
	addq	$8, %r14
	movq	1352(%rsp), %r15        # 8-byte Reload
	addq	$4, %r15
	movq	1352(%rsp), %r12        # 8-byte Reload
	addq	$4, %r12
	movq	%r12, 1104(%rsp)        # 8-byte Spill
	movq	%rcx, 1096(%rsp)        # 8-byte Spill
	movq	%rdx, 1088(%rsp)        # 8-byte Spill
	movq	%rsi, 1080(%rsp)        # 8-byte Spill
	movq	%rdi, 1072(%rsp)        # 8-byte Spill
	movq	%r10, 1064(%rsp)        # 8-byte Spill
	movq	%r11, 1056(%rsp)        # 8-byte Spill
	movq	%rbx, 1048(%rsp)        # 8-byte Spill
	movq	%r14, 1040(%rsp)        # 8-byte Spill
	movq	%r15, 1032(%rsp)        # 8-byte Spill
	movl	%eax, 1028(%rsp)        # 4-byte Spill
.LBB19_25:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_29 Depth 2
                                        #     Child Loop BB19_31 Depth 2
                                        #       Child Loop BB19_32 Depth 3
                                        #         Child Loop BB19_33 Depth 4
                                        #         Child Loop BB19_36 Depth 4
                                        #         Child Loop BB19_38 Depth 4
                                        #         Child Loop BB19_41 Depth 4
                                        #         Child Loop BB19_44 Depth 4
                                        #         Child Loop BB19_46 Depth 4
                                        #       Child Loop BB19_50 Depth 3
                                        #         Child Loop BB19_51 Depth 4
                                        #           Child Loop BB19_58 Depth 5
                                        #             Child Loop BB19_60 Depth 6
                                        #           Child Loop BB19_66 Depth 5
                                        #             Child Loop BB19_68 Depth 6
                                        #         Child Loop BB19_78 Depth 4
                                        #           Child Loop BB19_80 Depth 5
                                        #             Child Loop BB19_81 Depth 6
                                        #           Child Loop BB19_90 Depth 5
                                        #             Child Loop BB19_91 Depth 6
                                        #         Child Loop BB19_104 Depth 4
                                        #         Child Loop BB19_107 Depth 4
                                        #         Child Loop BB19_112 Depth 4
                                        #         Child Loop BB19_115 Depth 4
                                        #       Child Loop BB19_123 Depth 3
	movl	1028(%rsp), %eax        # 4-byte Reload
	movb	1327(%rsp), %cl         # 1-byte Reload
	testb	$1, %cl
	movl	%eax, 1024(%rsp)        # 4-byte Spill
	jne	.LBB19_26
	jmp	.LBB19_27
.LBB19_26:                              # %if.then101
                                        #   in Loop: Header=BB19_25 Depth=1
	movabsq	$.L.str.3.4, %rsi
	movq	stderr, %rdi
	movl	$3953, 4268(%rsp)       # imm = 0xF71
	movl	1024(%rsp), %edx        # 4-byte Reload
	movb	$0, %al
	callq	fprintf
	movl	%eax, 1020(%rsp)        # 4-byte Spill
.LBB19_27:                              # %if.end103
                                        #   in Loop: Header=BB19_25 Depth=1
	movb	1307(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB19_28
	jmp	.LBB19_30
.LBB19_28:                              # %for.body107.preheader
                                        #   in Loop: Header=BB19_25 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movq	%rcx, 1008(%rsp)        # 8-byte Spill
	movl	%eax, 1004(%rsp)        # 4-byte Spill
	jmp	.LBB19_29
.LBB19_29:                              # %for.body107
                                        #   Parent Loop BB19_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1004(%rsp), %eax        # 4-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	xorl	%edx, %edx
	movl	$1, %esi
	movl	%ecx, %edi
	movq	%rcx, %r8
	shrq	$5, %r8
	andq	$134217727, %r8         # imm = 0x7FFFFFF
	movq	1360(%rsp), %r9         # 8-byte Reload
	movl	(%r9,%r8,4), %r10d
	movl	$3959, 4268(%rsp)       # imm = 0xF77
	movl	%edi, %r11d
	andl	$31, %r11d
	movq	%rcx, 992(%rsp)         # 8-byte Spill
	movl	%r11d, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %esi
	andl	%esi, %r10d
	cmpl	$0, %r10d
	cmovel	%eax, %edi
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	992(%rsp), %rbx         # 8-byte Reload
	movl	(%r8,%rbx,4), %eax
	movl	$3966, 4268(%rsp)       # imm = 0xF7E
	movl	1024(%rsp), %esi        # 4-byte Reload
	subl	%esi, %eax
	cmpl	$0, %eax
	movl	1372(%rsp), %r10d       # 4-byte Reload
	cmovll	%r10d, %edx
	addl	%eax, %edx
	movslq	%edx, %r14
	movq	1384(%rsp), %r15        # 8-byte Reload
	movl	%edi, (%r15,%r14,4)
	movl	$3982, 4268(%rsp)       # imm = 0xF8E
	addq	$1, %rbx
	movq	1064(%rsp), %r14        # 8-byte Reload
	cmpq	%r14, %rbx
	movq	%rbx, 1008(%rsp)        # 8-byte Spill
	movl	%edi, 1004(%rsp)        # 4-byte Spill
	jne	.LBB19_29
.LBB19_30:                              # %while.cond129.preheader
                                        #   in Loop: Header=BB19_25 Depth=1
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	movl	%eax, 988(%rsp)         # 4-byte Spill
	movl	%ecx, 984(%rsp)         # 4-byte Spill
	jmp	.LBB19_31
.LBB19_31:                              # %while.cond129.outer
                                        #   Parent Loop BB19_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_32 Depth 3
                                        #         Child Loop BB19_33 Depth 4
                                        #         Child Loop BB19_36 Depth 4
                                        #         Child Loop BB19_38 Depth 4
                                        #         Child Loop BB19_41 Depth 4
                                        #         Child Loop BB19_44 Depth 4
                                        #         Child Loop BB19_46 Depth 4
                                        #       Child Loop BB19_50 Depth 3
                                        #         Child Loop BB19_51 Depth 4
                                        #           Child Loop BB19_58 Depth 5
                                        #             Child Loop BB19_60 Depth 6
                                        #           Child Loop BB19_66 Depth 5
                                        #             Child Loop BB19_68 Depth 6
                                        #         Child Loop BB19_78 Depth 4
                                        #           Child Loop BB19_80 Depth 5
                                        #             Child Loop BB19_81 Depth 6
                                        #           Child Loop BB19_90 Depth 5
                                        #             Child Loop BB19_91 Depth 6
                                        #         Child Loop BB19_104 Depth 4
                                        #         Child Loop BB19_107 Depth 4
                                        #         Child Loop BB19_112 Depth 4
                                        #         Child Loop BB19_115 Depth 4
                                        #       Child Loop BB19_123 Depth 3
	movl	984(%rsp), %eax         # 4-byte Reload
	movl	988(%rsp), %ecx         # 4-byte Reload
	movl	%eax, 980(%rsp)         # 4-byte Spill
	movl	%ecx, 976(%rsp)         # 4-byte Spill
.LBB19_32:                              # %while.cond129
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB19_33 Depth 4
                                        #         Child Loop BB19_36 Depth 4
                                        #         Child Loop BB19_38 Depth 4
                                        #         Child Loop BB19_41 Depth 4
                                        #         Child Loop BB19_44 Depth 4
                                        #         Child Loop BB19_46 Depth 4
	movl	976(%rsp), %eax         # 4-byte Reload
	movl	%eax, 972(%rsp)         # 4-byte Spill
.LBB19_33:                              # %while.cond132
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	972(%rsp), %eax         # 4-byte Reload
	movl	$1, %ecx
	addl	$1, %eax
	movl	%eax, %edx
	sarl	$5, %edx
	movslq	%edx, %rsi
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi,%rsi,4), %edx
	movl	$3997, 4268(%rsp)       # imm = 0xF9D
	movl	%eax, %r8d
	andl	$31, %r8d
	movl	%ecx, 968(%rsp)         # 4-byte Spill
	movl	%r8d, %ecx
                                        # kill: def %cl killed %ecx
	movl	968(%rsp), %r9d         # 4-byte Reload
	shll	%cl, %r9d
	andl	%edx, %r9d
	cmpl	$0, %r9d
	sete	%cl
	cmpl	$0, %r8d
	sete	%r10b
	orb	%cl, %r10b
	testb	$1, %r10b
	movl	%eax, %edx
	movb	%cl, 967(%rsp)          # 1-byte Spill
	movl	%eax, 960(%rsp)         # 4-byte Spill
	movl	%edx, 972(%rsp)         # 4-byte Spill
	jne	.LBB19_34
	jmp	.LBB19_33
.LBB19_34:                              # %while.end
                                        #   in Loop: Header=BB19_32 Depth=3
	movb	967(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movl	960(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, 956(%rsp)         # 4-byte Spill
	jne	.LBB19_39
	jmp	.LBB19_35
.LBB19_35:                              # %while.cond152.preheader
                                        #   in Loop: Header=BB19_32 Depth=3
	movl	960(%rsp), %eax         # 4-byte Reload
	movl	%eax, 952(%rsp)         # 4-byte Spill
	jmp	.LBB19_36
.LBB19_36:                              # %while.cond152
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	952(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ecx
	sarl	$5, %ecx
	movslq	%ecx, %rdx
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi,%rdx,4), %ecx
	movl	$4006, 4268(%rsp)       # imm = 0xFA6
	movl	%eax, %edi
	addl	$32, %edi
	cmpl	$-1, %ecx
	movl	%eax, 948(%rsp)         # 4-byte Spill
	movl	%edi, 952(%rsp)         # 4-byte Spill
	je	.LBB19_36
# %bb.37:                               # %while.cond161.preheader
                                        #   in Loop: Header=BB19_32 Depth=3
	movl	948(%rsp), %eax         # 4-byte Reload
	movl	%eax, 944(%rsp)         # 4-byte Spill
	jmp	.LBB19_38
.LBB19_38:                              # %while.cond161
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	944(%rsp), %eax         # 4-byte Reload
	movl	$1, %ecx
	movl	%eax, %edx
	sarl	$5, %edx
	movslq	%edx, %rsi
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi,%rsi,4), %edx
	movl	$4021, 4268(%rsp)       # imm = 0xFB5
	movl	%eax, %r8d
	andl	$31, %r8d
	movl	%ecx, 940(%rsp)         # 4-byte Spill
	movl	%r8d, %ecx
                                        # kill: def %cl killed %ecx
	movl	940(%rsp), %r8d         # 4-byte Reload
	shll	%cl, %r8d
	andl	%edx, %r8d
	movl	%eax, %edx
	addl	$1, %edx
	cmpl	$0, %r8d
	movl	%edx, 944(%rsp)         # 4-byte Spill
	movl	%eax, 956(%rsp)         # 4-byte Spill
	jne	.LBB19_38
.LBB19_39:                              # %if.end172
                                        #   in Loop: Header=BB19_32 Depth=3
	movl	956(%rsp), %eax         # 4-byte Reload
	movl	1372(%rsp), %ecx        # 4-byte Reload
	cmpl	%ecx, %eax
	movl	%eax, 936(%rsp)         # 4-byte Spill
	jg	.LBB19_126
# %bb.40:                               # %while.cond178.preheader
                                        #   in Loop: Header=BB19_32 Depth=3
	movl	936(%rsp), %eax         # 4-byte Reload
	movl	%eax, 932(%rsp)         # 4-byte Spill
	jmp	.LBB19_41
.LBB19_41:                              # %while.cond178
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	932(%rsp), %eax         # 4-byte Reload
	movl	$1, %ecx
	movl	%eax, %edx
	sarl	$5, %edx
	movslq	%edx, %rsi
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi,%rsi,4), %edx
	movl	$4037, 4268(%rsp)       # imm = 0xFC5
	movl	%eax, %r8d
	andl	$31, %r8d
	movl	%ecx, 928(%rsp)         # 4-byte Spill
	movl	%r8d, %ecx
                                        # kill: def %cl killed %ecx
	movl	928(%rsp), %r9d         # 4-byte Reload
	shll	%cl, %r9d
	andl	%edx, %r9d
	cmpl	$0, %r9d
	setne	%cl
	cmpl	$0, %r8d
	sete	%r10b
	orb	%cl, %r10b
	movl	%eax, %edx
	addl	$1, %edx
	testb	$1, %r10b
	movl	%eax, 924(%rsp)         # 4-byte Spill
	movl	%r9d, 920(%rsp)         # 4-byte Spill
	movl	%edx, 932(%rsp)         # 4-byte Spill
	jne	.LBB19_42
	jmp	.LBB19_41
.LBB19_42:                              # %while.end192
                                        #   in Loop: Header=BB19_32 Depth=3
	movl	920(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	movl	924(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, 916(%rsp)         # 4-byte Spill
	jne	.LBB19_47
# %bb.43:                               # %while.cond201.preheader
                                        #   in Loop: Header=BB19_32 Depth=3
	movl	924(%rsp), %eax         # 4-byte Reload
	movl	%eax, 912(%rsp)         # 4-byte Spill
	jmp	.LBB19_44
.LBB19_44:                              # %while.cond201
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	912(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ecx
	sarl	$5, %ecx
	movslq	%ecx, %rdx
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi,%rdx,4), %ecx
	movl	$4046, 4268(%rsp)       # imm = 0xFCE
	movl	%eax, %edi
	addl	$32, %edi
	cmpl	$0, %ecx
	movl	%eax, 908(%rsp)         # 4-byte Spill
	movl	%edi, 912(%rsp)         # 4-byte Spill
	je	.LBB19_44
# %bb.45:                               # %while.cond210.preheader
                                        #   in Loop: Header=BB19_32 Depth=3
	movl	908(%rsp), %eax         # 4-byte Reload
	movl	%eax, 904(%rsp)         # 4-byte Spill
	jmp	.LBB19_46
.LBB19_46:                              # %while.cond210
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	904(%rsp), %eax         # 4-byte Reload
	movl	$1, %ecx
	movl	%eax, %edx
	sarl	$5, %edx
	movslq	%edx, %rsi
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi,%rsi,4), %edx
	movl	$4063, 4268(%rsp)       # imm = 0xFDF
	movl	%eax, %r8d
	andl	$31, %r8d
	movl	%ecx, 900(%rsp)         # 4-byte Spill
	movl	%r8d, %ecx
                                        # kill: def %cl killed %ecx
	movl	900(%rsp), %r8d         # 4-byte Reload
	shll	%cl, %r8d
	andl	%edx, %r8d
	movl	%eax, %edx
	addl	$1, %edx
	cmpl	$0, %r8d
	movl	%edx, 904(%rsp)         # 4-byte Spill
	movl	%eax, 916(%rsp)         # 4-byte Spill
	je	.LBB19_46
.LBB19_47:                              # %if.end221
                                        #   in Loop: Header=BB19_32 Depth=3
	movl	916(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	1372(%rsp), %edx        # 4-byte Reload
	cmpl	%edx, %eax
	movl	%eax, 896(%rsp)         # 4-byte Spill
	movl	%ecx, 892(%rsp)         # 4-byte Spill
	jg	.LBB19_126
# %bb.48:                               # %if.end226
                                        #   in Loop: Header=BB19_32 Depth=3
	movl	896(%rsp), %eax         # 4-byte Reload
	movl	936(%rsp), %ecx         # 4-byte Reload
	cmpl	%ecx, %eax
	movl	892(%rsp), %edx         # 4-byte Reload
	movl	%edx, 976(%rsp)         # 4-byte Spill
	jle	.LBB19_32
# %bb.49:                               # %if.then229
                                        #   in Loop: Header=BB19_31 Depth=2
	xorl	%eax, %eax
	movl	$1, %ecx
	movl	936(%rsp), %edx         # 4-byte Reload
	addl	$-1, %edx
	movl	%ecx, %esi
	movl	936(%rsp), %edi         # 4-byte Reload
	subl	%edi, %esi
	movl	980(%rsp), %r8d         # 4-byte Reload
	addl	$1, %r8d
	addl	%esi, %r8d
	movl	892(%rsp), %esi         # 4-byte Reload
	addl	%esi, %r8d
	movq	1088(%rsp), %r9         # 8-byte Reload
	movl	%edx, (%r9)
	movl	$4064, 4268(%rsp)       # imm = 0xFE0
	movq	1096(%rsp), %r10        # 8-byte Reload
	movl	%esi, (%r10)
	movl	$4080, 4268(%rsp)       # imm = 0xFF0
	movl	%eax, 888(%rsp)         # 4-byte Spill
	movl	%edx, 884(%rsp)         # 4-byte Spill
	movl	%r8d, 880(%rsp)         # 4-byte Spill
	movl	%ecx, 876(%rsp)         # 4-byte Spill
.LBB19_50:                              # %while.body.lr.ph.i
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB19_51 Depth 4
                                        #           Child Loop BB19_58 Depth 5
                                        #             Child Loop BB19_60 Depth 6
                                        #           Child Loop BB19_66 Depth 5
                                        #             Child Loop BB19_68 Depth 6
                                        #         Child Loop BB19_78 Depth 4
                                        #           Child Loop BB19_80 Depth 5
                                        #             Child Loop BB19_81 Depth 6
                                        #           Child Loop BB19_90 Depth 5
                                        #             Child Loop BB19_91 Depth 6
                                        #         Child Loop BB19_104 Depth 4
                                        #         Child Loop BB19_107 Depth 4
                                        #         Child Loop BB19_112 Depth 4
                                        #         Child Loop BB19_115 Depth 4
	movl	876(%rsp), %eax         # 4-byte Reload
	movl	888(%rsp), %ecx         # 4-byte Reload
	movslq	%eax, %rdx
	movl	%ecx, 872(%rsp)         # 4-byte Spill
	movq	%rdx, 864(%rsp)         # 8-byte Spill
.LBB19_51:                              # %while.body.i
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_50 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB19_58 Depth 5
                                        #             Child Loop BB19_60 Depth 6
                                        #           Child Loop BB19_66 Depth 5
                                        #             Child Loop BB19_68 Depth 6
	movq	864(%rsp), %rax         # 8-byte Reload
	cmpq	$100, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	jl	.LBB19_53
# %bb.52:                               # %if.then.i
                                        #   in Loop: Header=BB19_51 Depth=4
	movl	$1004, %edi             # imm = 0x3EC
	callq	BZ2_bz__AssertH__fail
.LBB19_53:                              # %if.end.i
                                        #   in Loop: Header=BB19_51 Depth=4
	movq	856(%rsp), %rax         # 8-byte Reload
	addq	$-1, %rax
	movq	856(%rsp), %rcx         # 8-byte Reload
	movl	3852(%rsp,%rcx,4), %edx
	movl	$4082, 4268(%rsp)       # imm = 0xFF2
	movl	3452(%rsp,%rcx,4), %esi
	movl	$4102, 4268(%rsp)       # imm = 0x1006
	movl	%esi, %edi
	subl	%edx, %edi
	cmpl	$10, %edi
	movq	%rax, 848(%rsp)         # 8-byte Spill
	movl	%edx, 844(%rsp)         # 4-byte Spill
	movl	%esi, 840(%rsp)         # 4-byte Spill
	movl	%edi, 836(%rsp)         # 4-byte Spill
	jge	.LBB19_74
# %bb.54:                               # %if.then9.i
                                        #   in Loop: Header=BB19_51 Depth=4
	movl	840(%rsp), %eax         # 4-byte Reload
	movl	844(%rsp), %ecx         # 4-byte Reload
	cmpl	%ecx, %eax
	je	.LBB19_73
# %bb.55:                               # %if.end.i.i
                                        #   in Loop: Header=BB19_51 Depth=4
	movl	836(%rsp), %eax         # 4-byte Reload
	cmpl	$3, %eax
	jle	.LBB19_64
# %bb.56:                               # %if.then2.i.i
                                        #   in Loop: Header=BB19_51 Depth=4
	movl	840(%rsp), %eax         # 4-byte Reload
	addl	$-4, %eax
	movl	844(%rsp), %ecx         # 4-byte Reload
	cmpl	%ecx, %eax
	movl	%eax, 832(%rsp)         # 4-byte Spill
	jl	.LBB19_64
# %bb.57:                               # %for.body.lr.ph.i.i
                                        #   in Loop: Header=BB19_51 Depth=4
	movl	840(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movl	832(%rsp), %edx         # 4-byte Reload
	movslq	%edx, %rsi
	movl	844(%rsp), %edi         # 4-byte Reload
	movslq	%edi, %r8
	movl	%eax, 828(%rsp)         # 4-byte Spill
	movq	%rcx, 816(%rsp)         # 8-byte Spill
	movq	%r8, 808(%rsp)          # 8-byte Spill
	movq	%rsi, 800(%rsp)         # 8-byte Spill
.LBB19_58:                              # %for.body.i.i
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_50 Depth=3
                                        #         Parent Loop BB19_51 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB19_60 Depth 6
	movl	828(%rsp), %eax         # 4-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %esi
	movl	$4105, 4268(%rsp)       # imm = 0x1009
	movslq	%esi, %rdi
	movq	1384(%rsp), %r8         # 8-byte Reload
	movl	(%r8,%rdi,4), %r9d
	movl	$4117, 4268(%rsp)       # imm = 0x1015
	movq	%rcx, %rdi
	addq	$4, %rdi
	movl	%ecx, %r10d
	movq	816(%rsp), %r11         # 8-byte Reload
	cmpq	%r11, %rdi
	movl	%r10d, %ebx
	movl	%eax, 796(%rsp)         # 4-byte Spill
	movq	%rcx, 784(%rsp)         # 8-byte Spill
	movl	%esi, 780(%rsp)         # 4-byte Spill
	movl	%r9d, 776(%rsp)         # 4-byte Spill
	movl	%r10d, 772(%rsp)        # 4-byte Spill
	movl	%ebx, 768(%rsp)         # 4-byte Spill
	jg	.LBB19_63
# %bb.59:                               # %land.rhs.lr.ph.i.i
                                        #   in Loop: Header=BB19_58 Depth=5
	movl	796(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movl	772(%rsp), %edx         # 4-byte Reload
	movq	%rcx, 760(%rsp)         # 8-byte Spill
	movl	%edx, 756(%rsp)         # 4-byte Spill
.LBB19_60:                              # %land.rhs.i.i
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_50 Depth=3
                                        #         Parent Loop BB19_51 Depth=4
                                        #           Parent Loop BB19_58 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	756(%rsp), %eax         # 4-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %esi
	movl	$4120, 4268(%rsp)       # imm = 0x1018
	movl	%esi, %edi
	movl	%edi, %r8d
	movq	1384(%rsp), %r9         # 8-byte Reload
	movl	(%r9,%r8,4), %edi
	movl	$4125, 4268(%rsp)       # imm = 0x101D
	movl	776(%rsp), %r10d        # 4-byte Reload
	cmpl	%edi, %r10d
	movl	%eax, %edi
	movl	%eax, 752(%rsp)         # 4-byte Spill
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	movl	%esi, 740(%rsp)         # 4-byte Spill
	movl	%edi, 768(%rsp)         # 4-byte Spill
	jbe	.LBB19_63
# %bb.61:                               # %for.body14.i.i
                                        #   in Loop: Header=BB19_60 Depth=6
	movl	752(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movl	740(%rsp), %esi         # 4-byte Reload
	movl	%esi, (%rdx,%rcx,4)
	movl	$4133, 4268(%rsp)       # imm = 0x1025
	movq	744(%rsp), %rcx         # 8-byte Reload
	addq	$4, %rcx
	movq	744(%rsp), %rdi         # 8-byte Reload
	movl	%edi, %r8d
	movq	816(%rsp), %r9          # 8-byte Reload
	cmpq	%r9, %rcx
	movq	%rcx, 760(%rsp)         # 8-byte Spill
	movl	%r8d, 756(%rsp)         # 4-byte Spill
	jle	.LBB19_60
# %bb.62:                               # %for.end.i.i.loopexit.split.loop.exit
                                        #   in Loop: Header=BB19_58 Depth=5
	movq	744(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, 768(%rsp)         # 4-byte Spill
.LBB19_63:                              # %for.end.i.i
                                        #   in Loop: Header=BB19_58 Depth=5
	movl	768(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movl	780(%rsp), %eax         # 4-byte Reload
	movl	%eax, (%rdx,%rcx,4)
	movl	$4146, 4268(%rsp)       # imm = 0x1032
	movq	784(%rsp), %rcx         # 8-byte Reload
	addq	$-1, %rcx
	movl	796(%rsp), %esi         # 4-byte Reload
	addl	$-1, %esi
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	cmpq	%r8, %rdi
	movq	%rcx, 800(%rsp)         # 8-byte Spill
	movl	%esi, 828(%rsp)         # 4-byte Spill
	jg	.LBB19_58
.LBB19_64:                              # %if.end26.i.i
                                        #   in Loop: Header=BB19_51 Depth=4
	movl	840(%rsp), %eax         # 4-byte Reload
	movl	844(%rsp), %ecx         # 4-byte Reload
	cmpl	%ecx, %eax
	jle	.LBB19_73
# %bb.65:                               # %for.body30.lr.ph.i.i
                                        #   in Loop: Header=BB19_51 Depth=4
	movl	840(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movl	844(%rsp), %edx         # 4-byte Reload
	movslq	%edx, %rsi
	movq	%rcx, %rdi
	movl	%eax, 736(%rsp)         # 4-byte Spill
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	movq	%rsi, 720(%rsp)         # 8-byte Spill
	movq	%rdi, 712(%rsp)         # 8-byte Spill
.LBB19_66:                              # %for.body30.i.i
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_50 Depth=3
                                        #         Parent Loop BB19_51 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB19_68 Depth 6
	movl	736(%rsp), %eax         # 4-byte Reload
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, %rdx
	addq	$-1, %rdx
	movl	%eax, %esi
	addl	$-1, %esi
	movq	1352(%rsp), %rdi        # 8-byte Reload
	movl	-4(%rdi,%rcx,4), %r8d
	movl	$4149, 4268(%rsp)       # imm = 0x1035
	movslq	%r8d, %r9
	movq	1384(%rsp), %r10        # 8-byte Reload
	movl	(%r10,%r9,4), %r11d
	movl	$4158, 4268(%rsp)       # imm = 0x103E
	movl	840(%rsp), %ebx         # 4-byte Reload
	cmpl	%ebx, %eax
	movl	%esi, %ebp
	movl	%eax, 708(%rsp)         # 4-byte Spill
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	movq	%rdx, 688(%rsp)         # 8-byte Spill
	movl	%esi, 684(%rsp)         # 4-byte Spill
	movl	%r8d, 680(%rsp)         # 4-byte Spill
	movl	%r11d, 676(%rsp)        # 4-byte Spill
	movl	%ebp, 672(%rsp)         # 4-byte Spill
	jg	.LBB19_72
# %bb.67:                               # %land.rhs38.i.i.preheader
                                        #   in Loop: Header=BB19_66 Depth=5
	movq	696(%rsp), %rax         # 8-byte Reload
	movl	708(%rsp), %ecx         # 4-byte Reload
	movq	%rax, 664(%rsp)         # 8-byte Spill
	movl	%ecx, 660(%rsp)         # 4-byte Spill
	jmp	.LBB19_68
.LBB19_68:                              # %land.rhs38.i.i
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_50 Depth=3
                                        #         Parent Loop BB19_51 Depth=4
                                        #           Parent Loop BB19_66 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	660(%rsp), %eax         # 4-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %esi
	movl	$4161, 4268(%rsp)       # imm = 0x1041
	movl	%esi, %edi
	movl	%edi, %r8d
	movq	1384(%rsp), %r9         # 8-byte Reload
	movl	(%r9,%r8,4), %edi
	movl	$4166, 4268(%rsp)       # imm = 0x1046
	movl	676(%rsp), %r10d        # 4-byte Reload
	cmpl	%edi, %r10d
	movl	%eax, 656(%rsp)         # 4-byte Spill
	movq	%rcx, 648(%rsp)         # 8-byte Spill
	movl	%esi, 644(%rsp)         # 4-byte Spill
	jbe	.LBB19_70
# %bb.69:                               # %for.body45.i.i
                                        #   in Loop: Header=BB19_68 Depth=6
	movq	1352(%rsp), %rax        # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movl	644(%rsp), %edx         # 4-byte Reload
	movl	%edx, -4(%rax,%rcx,4)
	movl	$4177, 4268(%rsp)       # imm = 0x1051
	addq	$1, %rcx
	movl	656(%rsp), %esi         # 4-byte Reload
	addl	$1, %esi
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	cmpq	%r8, %rdi
	movl	%esi, %r9d
	movl	%r9d, 660(%rsp)         # 4-byte Spill
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	movl	%esi, 640(%rsp)         # 4-byte Spill
	jl	.LBB19_68
	jmp	.LBB19_71
.LBB19_70:                              # %for.end52.loopexit.split.loop.exit.i.i
                                        #   in Loop: Header=BB19_66 Depth=5
	movq	648(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, 640(%rsp)         # 4-byte Spill
.LBB19_71:                              # %for.end52.loopexit.i.i
                                        #   in Loop: Header=BB19_66 Depth=5
	movl	640(%rsp), %eax         # 4-byte Reload
	addl	$-1, %eax
	movl	%eax, 672(%rsp)         # 4-byte Spill
.LBB19_72:                              # %for.end52.i.i
                                        #   in Loop: Header=BB19_66 Depth=5
	movl	672(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movl	680(%rsp), %eax         # 4-byte Reload
	movl	%eax, (%rdx,%rcx,4)
	movl	$4198, 4268(%rsp)       # imm = 0x1066
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	cmpq	%rsi, %rcx
	movl	684(%rsp), %edi         # 4-byte Reload
	movq	%rcx, 712(%rsp)         # 8-byte Spill
	movl	%edi, 736(%rsp)         # 4-byte Spill
	jg	.LBB19_66
.LBB19_73:                              # %fallbackSimpleSort.exit.i
                                        #   in Loop: Header=BB19_51 Depth=4
	movq	856(%rsp), %rax         # 8-byte Reload
	cmpq	$1, %rax
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 864(%rsp)         # 8-byte Spill
	jg	.LBB19_51
	jmp	.LBB19_120
.LBB19_74:                              # %if.end10.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movq	848(%rsp), %rax         # 8-byte Reload
	leaq	3856(%rsp,%rax,4), %rcx
	leaq	3456(%rsp,%rax,4), %rdx
	movq	856(%rsp), %rsi         # 8-byte Reload
	movl	%esi, %edi
	movl	%eax, %r8d
	movl	872(%rsp), %r9d         # 4-byte Reload
	imull	$7621, %r9d, %r10d      # imm = 0x1DC5
	addl	$1, %r10d
	andl	$32767, %r10d           # imm = 0x7FFF
	movl	%r10d, %r11d
	movl	$2863311531, %ebx       # imm = 0xAAAAAAAB
	movl	%ebx, %r14d
	imulq	%r14, %r11
	shrq	$33, %r11
	movl	%r11d, %ebx
	movl	%ebx, %r11d
	leal	(%r11,%r11,2), %ebx
	movl	%r10d, %ebp
	subl	%ebx, %ebp
	movb	%bpl, %r15b
	testb	$3, %r15b
	movl	844(%rsp), %ebx         # 4-byte Reload
	movq	%rcx, 632(%rsp)         # 8-byte Spill
	movq	%rdx, 624(%rsp)         # 8-byte Spill
	movl	%edi, 620(%rsp)         # 4-byte Spill
	movl	%r8d, 616(%rsp)         # 4-byte Spill
	movl	%r10d, 612(%rsp)        # 4-byte Spill
	movb	%r15b, 611(%rsp)        # 1-byte Spill
	movl	%ebx, 604(%rsp)         # 4-byte Spill
	je	.LBB19_77
	jmp	.LBB19_139
.LBB19_139:                             # %if.end10.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movb	611(%rsp), %al          # 1-byte Reload
	andb	$3, %al
	subb	$1, %al
	movb	%al, 603(%rsp)          # 1-byte Spill
	jne	.LBB19_76
	jmp	.LBB19_75
.LBB19_75:                              # %if.then19.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	840(%rsp), %eax         # 4-byte Reload
	movl	844(%rsp), %ecx         # 4-byte Reload
	addl	%ecx, %eax
	sarl	$1, %eax
	movl	%eax, 604(%rsp)         # 4-byte Spill
	jmp	.LBB19_77
.LBB19_76:                              # %if.else25.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	840(%rsp), %eax         # 4-byte Reload
	movl	%eax, 604(%rsp)         # 4-byte Spill
	jmp	.LBB19_77
.LBB19_77:                              # %if.end31.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	604(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %eax
	movl	$4201, 4268(%rsp)       # imm = 0x1069
	movl	%eax, %eax
	movl	%eax, %ecx
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi,%rcx,4), %eax
	movl	$4227, 4268(%rsp)       # imm = 0x1083
	movl	840(%rsp), %edi         # 4-byte Reload
	movl	844(%rsp), %r8d         # 4-byte Reload
	movl	840(%rsp), %r9d         # 4-byte Reload
	movl	844(%rsp), %r10d        # 4-byte Reload
	movl	%eax, 596(%rsp)         # 4-byte Spill
	movl	%edi, 592(%rsp)         # 4-byte Spill
	movl	%r8d, 588(%rsp)         # 4-byte Spill
	movl	%r9d, 584(%rsp)         # 4-byte Spill
	movl	%r10d, 580(%rsp)        # 4-byte Spill
.LBB19_78:                              # %while.cond32.i
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_50 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB19_80 Depth 5
                                        #             Child Loop BB19_81 Depth 6
                                        #           Child Loop BB19_90 Depth 5
                                        #             Child Loop BB19_91 Depth 6
	movl	580(%rsp), %eax         # 4-byte Reload
	movl	584(%rsp), %ecx         # 4-byte Reload
	movl	588(%rsp), %edx         # 4-byte Reload
	movl	592(%rsp), %esi         # 4-byte Reload
	cmpl	%ecx, %eax
	movl	%edx, %edi
	movl	%eax, %r8d
	movl	%eax, 576(%rsp)         # 4-byte Spill
	movl	%ecx, 572(%rsp)         # 4-byte Spill
	movl	%edx, 568(%rsp)         # 4-byte Spill
	movl	%esi, 564(%rsp)         # 4-byte Spill
	movl	%edi, 560(%rsp)         # 4-byte Spill
	movl	%r8d, 556(%rsp)         # 4-byte Spill
	jg	.LBB19_88
# %bb.79:                               # %if.end38.lr.ph.lr.ph.i
                                        #   in Loop: Header=BB19_78 Depth=4
	movl	572(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movl	568(%rsp), %edx         # 4-byte Reload
	movslq	%edx, %rsi
	movl	576(%rsp), %edi         # 4-byte Reload
	movq	%rcx, 544(%rsp)         # 8-byte Spill
	movq	%rsi, 536(%rsp)         # 8-byte Spill
	movl	%edi, 532(%rsp)         # 4-byte Spill
.LBB19_80:                              # %if.end38.lr.ph.i
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_50 Depth=3
                                        #         Parent Loop BB19_78 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB19_81 Depth 6
	movl	532(%rsp), %eax         # 4-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movslq	%eax, %rdx
	movq	%rdx, 520(%rsp)         # 8-byte Spill
	movq	%rcx, 512(%rsp)         # 8-byte Spill
	movl	%eax, 508(%rsp)         # 4-byte Spill
.LBB19_81:                              # %if.end38.i
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_50 Depth=3
                                        #         Parent Loop BB19_78 Depth=4
                                        #           Parent Loop BB19_80 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	508(%rsp), %eax         # 4-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %esi
	movl	$4230, 4268(%rsp)       # imm = 0x1086
	movl	%esi, %edi
	movl	%edi, %r8d
	movq	1384(%rsp), %r9         # 8-byte Reload
	movl	(%r9,%r8,4), %edi
	movl	$4237, 4268(%rsp)       # imm = 0x108D
	movl	596(%rsp), %r10d        # 4-byte Reload
	subl	%r10d, %edi
	cmpl	$0, %edi
	movl	%eax, 504(%rsp)         # 4-byte Spill
	movq	%rcx, 496(%rsp)         # 8-byte Spill
	movl	%esi, 492(%rsp)         # 4-byte Spill
	movl	%edi, 488(%rsp)         # 4-byte Spill
	jne	.LBB19_83
# %bb.82:                               # %if.then45.i
                                        #   in Loop: Header=BB19_80 Depth=5
	movq	496(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movl	(%rdx,%rsi,4), %edi
	movl	$4238, 4268(%rsp)       # imm = 0x108E
	movl	%edi, (%rdx,%rax,4)
	movl	$4239, 4268(%rsp)       # imm = 0x108F
	movl	492(%rsp), %edi         # 4-byte Reload
	movl	%edi, (%rdx,%rsi,4)
	movl	$4268, 4268(%rsp)       # imm = 0x10AC
	addq	$1, %rsi
	movl	%ecx, %r8d
	addl	$1, %r8d
	movl	572(%rsp), %r9d         # 4-byte Reload
	cmpl	%ecx, %r9d
	movq	%rsi, %r10
	movl	%r8d, %ecx
	movq	%rsi, 480(%rsp)         # 8-byte Spill
	movl	%r8d, 476(%rsp)         # 4-byte Spill
	movq	%r10, 536(%rsp)         # 8-byte Spill
	movl	%ecx, 532(%rsp)         # 4-byte Spill
	jg	.LBB19_80
	jmp	.LBB19_85
.LBB19_83:                              # %if.end56.i
                                        #   in Loop: Header=BB19_81 Depth=6
	movl	488(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	jg	.LBB19_86
# %bb.84:                               # %if.end59.i
                                        #   in Loop: Header=BB19_81 Depth=6
	movq	496(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movl	504(%rsp), %ecx         # 4-byte Reload
	addl	$1, %ecx
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rsi         # 8-byte Reload
	cmpq	%rsi, %rdx
	movl	%ecx, %edi
	movl	%ecx, 472(%rsp)         # 4-byte Spill
	movq	%rax, 520(%rsp)         # 8-byte Spill
	movl	%edi, 508(%rsp)         # 4-byte Spill
	jl	.LBB19_81
	jmp	.LBB19_87
.LBB19_85:                              # %while.end.loopexit417.i
                                        #   in Loop: Header=BB19_78 Depth=4
	movq	480(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movl	476(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 560(%rsp)         # 4-byte Spill
	movl	%edx, 556(%rsp)         # 4-byte Spill
	jmp	.LBB19_88
.LBB19_86:                              # %while.end.loopexit.split.loop.exit.i
                                        #   in Loop: Header=BB19_78 Depth=4
	movq	512(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movq	496(%rsp), %rdx         # 8-byte Reload
	movl	%edx, %esi
	movl	%ecx, 560(%rsp)         # 4-byte Spill
	movl	%esi, 556(%rsp)         # 4-byte Spill
	jmp	.LBB19_88
.LBB19_87:                              # %while.end.loopexit.split.loop.exit514.i
                                        #   in Loop: Header=BB19_78 Depth=4
	movq	512(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movl	472(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 560(%rsp)         # 4-byte Spill
	movl	%edx, 556(%rsp)         # 4-byte Spill
.LBB19_88:                              # %while.end.i
                                        #   in Loop: Header=BB19_78 Depth=4
	movl	556(%rsp), %eax         # 4-byte Reload
	movl	560(%rsp), %ecx         # 4-byte Reload
	movl	572(%rsp), %edx         # 4-byte Reload
	cmpl	%edx, %eax
	movl	564(%rsp), %esi         # 4-byte Reload
	movl	%eax, 468(%rsp)         # 4-byte Spill
	movl	%ecx, 464(%rsp)         # 4-byte Spill
	movl	%edx, 460(%rsp)         # 4-byte Spill
	movl	%esi, 456(%rsp)         # 4-byte Spill
	jg	.LBB19_98
# %bb.89:                               # %if.end65.lr.ph.lr.ph.i
                                        #   in Loop: Header=BB19_78 Depth=4
	movl	468(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movl	564(%rsp), %edx         # 4-byte Reload
	movslq	%edx, %rsi
	movl	572(%rsp), %edi         # 4-byte Reload
	movq	%rcx, 448(%rsp)         # 8-byte Spill
	movq	%rsi, 440(%rsp)         # 8-byte Spill
	movl	%edi, 436(%rsp)         # 4-byte Spill
.LBB19_90:                              # %if.end65.lr.ph.i
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_50 Depth=3
                                        #         Parent Loop BB19_78 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB19_91 Depth 6
	movl	436(%rsp), %eax         # 4-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movslq	%eax, %rdx
	movq	%rcx, 424(%rsp)         # 8-byte Spill
	movq	%rdx, 416(%rsp)         # 8-byte Spill
.LBB19_91:                              # %if.end65.i
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_50 Depth=3
                                        #         Parent Loop BB19_78 Depth=4
                                        #           Parent Loop BB19_90 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movq	416(%rsp), %rax         # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx,%rax,4), %edx
	movl	$4271, 4268(%rsp)       # imm = 0x10AF
	movl	%edx, %esi
	movl	%esi, %edi
	movq	1384(%rsp), %r8         # 8-byte Reload
	movl	(%r8,%rdi,4), %esi
	movl	$4278, 4268(%rsp)       # imm = 0x10B6
	movl	596(%rsp), %r9d         # 4-byte Reload
	subl	%r9d, %esi
	cmpl	$0, %esi
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movl	%edx, 404(%rsp)         # 4-byte Spill
	movl	%esi, 400(%rsp)         # 4-byte Spill
	jne	.LBB19_93
# %bb.92:                               # %if.then72.i
                                        #   in Loop: Header=BB19_90 Depth=5
	movq	408(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movq	424(%rsp), %rsi         # 8-byte Reload
	movl	(%rdx,%rsi,4), %edi
	movl	$4279, 4268(%rsp)       # imm = 0x10B7
	movl	%edi, (%rdx,%rax,4)
	movl	$4280, 4268(%rsp)       # imm = 0x10B8
	movl	404(%rsp), %edi         # 4-byte Reload
	movl	%edi, (%rdx,%rsi,4)
	movl	$4290, 4268(%rsp)       # imm = 0x10C2
	addq	$-1, %rsi
	movl	%ecx, %r8d
	addl	$-1, %r8d
	movl	468(%rsp), %r9d         # 4-byte Reload
	cmpl	%ecx, %r9d
	movq	%rsi, %r10
	movl	%r8d, %ecx
	movq	%rsi, 392(%rsp)         # 8-byte Spill
	movl	%r8d, 388(%rsp)         # 4-byte Spill
	movq	%r10, 440(%rsp)         # 8-byte Spill
	movl	%ecx, 436(%rsp)         # 4-byte Spill
	jl	.LBB19_90
	jmp	.LBB19_97
.LBB19_93:                              # %if.end84.i
                                        #   in Loop: Header=BB19_91 Depth=6
	movl	400(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	jl	.LBB19_95
# %bb.94:                               # %if.end87.i
                                        #   in Loop: Header=BB19_91 Depth=6
	movq	408(%rsp), %rax         # 8-byte Reload
	addq	$-1, %rax
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	cmpq	%rdx, %rcx
	movq	%rax, %rsi
	movq	%rax, 376(%rsp)         # 8-byte Spill
	movq	%rsi, 416(%rsp)         # 8-byte Spill
	jg	.LBB19_91
	jmp	.LBB19_96
.LBB19_95:                              # %if.end92.i
                                        #   in Loop: Header=BB19_78 Depth=4
	movq	424(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movq	408(%rsp), %rdx         # 8-byte Reload
	movl	%edx, %esi
	movq	1352(%rsp), %rdi        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movl	(%rdi,%r8,4), %r9d
	movl	$4291, 4268(%rsp)       # imm = 0x10C3
	movl	404(%rsp), %r10d        # 4-byte Reload
	movl	%r10d, (%rdi,%r8,4)
	movl	$4292, 4268(%rsp)       # imm = 0x10C4
	movl	%r9d, (%rdi,%rdx,4)
	movl	$4370, 4268(%rsp)       # imm = 0x1112
	movl	468(%rsp), %r9d         # 4-byte Reload
	addl	$1, %r9d
	addl	$-1, %esi
	movl	464(%rsp), %r11d        # 4-byte Reload
	movl	%r11d, 588(%rsp)        # 4-byte Spill
	movl	%esi, 584(%rsp)         # 4-byte Spill
	movl	%ecx, 592(%rsp)         # 4-byte Spill
	movl	%r9d, 580(%rsp)         # 4-byte Spill
	jmp	.LBB19_78
.LBB19_96:                              # %while.end104.loopexit.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movq	424(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movq	376(%rsp), %rdx         # 8-byte Reload
	movl	%edx, %esi
	movl	%ecx, 456(%rsp)         # 4-byte Spill
	movl	%esi, 460(%rsp)         # 4-byte Spill
	jmp	.LBB19_98
.LBB19_97:                              # %while.end104.loopexit416.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movq	392(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movl	388(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 456(%rsp)         # 4-byte Spill
	movl	%edx, 460(%rsp)         # 4-byte Spill
.LBB19_98:                              # %while.end104.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	460(%rsp), %eax         # 4-byte Reload
	movl	456(%rsp), %ecx         # 4-byte Reload
	movl	464(%rsp), %edx         # 4-byte Reload
	cmpl	%edx, %ecx
	movl	616(%rsp), %esi         # 4-byte Reload
	movl	%eax, 372(%rsp)         # 4-byte Spill
	movl	%ecx, 368(%rsp)         # 4-byte Spill
	movl	%esi, 364(%rsp)         # 4-byte Spill
	jge	.LBB19_100
.LBB19_99:                              # %while.cond.outer.backedge.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	364(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	movl	612(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, 888(%rsp)         # 4-byte Spill
	movl	%eax, 876(%rsp)         # 4-byte Spill
	jg	.LBB19_50
	jmp	.LBB19_120
.LBB19_100:                             # %if.end107.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	464(%rsp), %eax         # 4-byte Reload
	movl	844(%rsp), %ecx         # 4-byte Reload
	subl	%ecx, %eax
	movl	468(%rsp), %edx         # 4-byte Reload
	movl	464(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	cmpl	%edx, %eax
	cmovll	%eax, %edx
	cmpl	$0, %edx
	movl	%edx, 360(%rsp)         # 4-byte Spill
	jle	.LBB19_108
# %bb.101:                              # %while.body116.lr.ph.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	468(%rsp), %ecx         # 4-byte Reload
	movl	360(%rsp), %edx         # 4-byte Reload
	subl	%edx, %ecx
	movslq	%ecx, %rsi
	movl	844(%rsp), %ecx         # 4-byte Reload
	movslq	%ecx, %rdi
	movl	464(%rsp), %r8d         # 4-byte Reload
	addl	$-1, %r8d
	movl	468(%rsp), %r9d         # 4-byte Reload
	subl	%r9d, %r8d
	addl	$-1, %ecx
	movl	464(%rsp), %r10d        # 4-byte Reload
	subl	%r10d, %ecx
	cmpl	%ecx, %r8d
	movl	%ecx, %r11d
	cmovgl	%r8d, %r11d
	cmpl	$-2, %r11d
	cmovgl	%r11d, %eax
	cmpl	%ecx, %r8d
	cmovgl	%r8d, %ecx
	subl	%ecx, %eax
	movl	%eax, %ecx
	movl	%ecx, %ebx
	addq	$1, %rbx
	cmpq	$8, %rbx
	movq	%rdi, %r14
	movq	%rsi, %r15
	movl	%edx, 356(%rsp)         # 4-byte Spill
	movq	%rsi, 344(%rsp)         # 8-byte Spill
	movq	%rdi, 336(%rsp)         # 8-byte Spill
	movl	%eax, 332(%rsp)         # 4-byte Spill
	movq	%rbx, 320(%rsp)         # 8-byte Spill
	movq	%r14, 312(%rsp)         # 8-byte Spill
	movq	%r15, 304(%rsp)         # 8-byte Spill
	jb	.LBB19_106
# %bb.102:                              # %vector.memcheck723
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	336(%rsp), %rcx         # 8-byte Reload
	shlq	$2, %rcx
	movq	1352(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movl	464(%rsp), %esi         # 4-byte Reload
	addl	$-1, %esi
	movl	468(%rsp), %edi         # 4-byte Reload
	subl	%edi, %esi
	movl	844(%rsp), %r8d         # 4-byte Reload
	addl	$-1, %r8d
	movl	464(%rsp), %r9d         # 4-byte Reload
	subl	%r9d, %r8d
	cmpl	%r8d, %esi
	movl	%r8d, %r10d
	cmovgl	%esi, %r10d
	cmpl	$-2, %r10d
	cmovgl	%r10d, %eax
	cmpl	%r8d, %esi
	cmovgl	%esi, %r8d
	subl	%r8d, %eax
	movl	%eax, %eax
	movl	%eax, %ecx
	movq	336(%rsp), %r11         # 8-byte Reload
	addq	%rcx, %r11
	shlq	$2, %r11
	movq	1032(%rsp), %rbx        # 8-byte Reload
	addq	%r11, %rbx
	movq	344(%rsp), %r11         # 8-byte Reload
	shlq	$2, %r11
	movq	1352(%rsp), %r14        # 8-byte Reload
	addq	%r11, %r14
	movslq	%edi, %r11
	addq	%rcx, %r11
	movl	360(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	subq	%rcx, %r11
	shlq	$2, %r11
	movq	1104(%rsp), %rcx        # 8-byte Reload
	addq	%r11, %rcx
	cmpq	%rcx, %rdx
	setb	%bpl
	cmpq	%rbx, %r14
	setb	%r15b
	andb	%r15b, %bpl
	testb	$1, %bpl
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movl	%eax, 356(%rsp)         # 4-byte Spill
	movq	%rcx, 312(%rsp)         # 8-byte Spill
	movq	%rdx, 304(%rsp)         # 8-byte Spill
	jne	.LBB19_106
# %bb.103:                              # %vector.ph724
                                        #   in Loop: Header=BB19_50 Depth=3
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	332(%rsp), %eax         # 4-byte Reload
	addl	$1, %eax
	andl	$7, %eax
	movl	%eax, %edx
	movl	%edx, %esi
	movq	320(%rsp), %rdi         # 8-byte Reload
	subq	%rsi, %rdi
	movq	%rdi, %rsi
	movq	336(%rsp), %r8          # 8-byte Reload
	addq	%r8, %rsi
	movq	%rdi, %r9
	movq	344(%rsp), %r10         # 8-byte Reload
	addq	%r10, %r9
	movl	%edi, %edx
	movl	360(%rsp), %r11d        # 4-byte Reload
	subl	%edx, %r11d
	movl	%r11d, 300(%rsp)        # 4-byte Spill
	movl	%eax, 296(%rsp)         # 4-byte Spill
	movq	%rdi, 288(%rsp)         # 8-byte Spill
	movq	%rsi, 280(%rsp)         # 8-byte Spill
	movq	%r9, 272(%rsp)          # 8-byte Spill
	movq	%rcx, 264(%rsp)         # 8-byte Spill
.LBB19_104:                             # %vector.body698
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_50 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	264(%rsp), %rax         # 8-byte Reload
	movq	%rax, %rcx
	movq	336(%rsp), %rdx         # 8-byte Reload
	addq	%rdx, %rcx
	movq	%rax, %rsi
	movq	344(%rsp), %rdi         # 8-byte Reload
	addq	%rdi, %rsi
	movq	1352(%rsp), %r8         # 8-byte Reload
	movdqu	(%r8,%rcx,4), %xmm0
	movl	$4373, 4268(%rsp)       # imm = 0x1115
	movdqu	16(%r8,%rcx,4), %xmm1
	movl	$4376, 4268(%rsp)       # imm = 0x1118
	movdqu	(%r8,%rsi,4), %xmm2
	movl	$4379, 4268(%rsp)       # imm = 0x111B
	movdqu	16(%r8,%rsi,4), %xmm3
	movl	$4381, 4268(%rsp)       # imm = 0x111D
	movdqu	%xmm2, (%r8,%rcx,4)
	movl	$4383, 4268(%rsp)       # imm = 0x111F
	movdqu	%xmm3, 16(%r8,%rcx,4)
	movl	$4385, 4268(%rsp)       # imm = 0x1121
	movdqu	%xmm0, (%r8,%rsi,4)
	movl	$4387, 4268(%rsp)       # imm = 0x1123
	movdqu	%xmm1, 16(%r8,%rsi,4)
	movl	$4403, 4268(%rsp)       # imm = 0x1133
	addq	$8, %rax
	movq	288(%rsp), %rcx         # 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, 264(%rsp)         # 8-byte Spill
	jne	.LBB19_104
# %bb.105:                              # %middle.block699
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	296(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	272(%rsp), %rdx         # 8-byte Reload
	movl	300(%rsp), %esi         # 4-byte Reload
	movq	%rcx, 312(%rsp)         # 8-byte Spill
	movq	%rdx, 304(%rsp)         # 8-byte Spill
	movl	%esi, 356(%rsp)         # 4-byte Spill
	je	.LBB19_108
.LBB19_106:                             # %while.body116.i.preheader
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	356(%rsp), %eax         # 4-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	movq	%rdx, 248(%rsp)         # 8-byte Spill
	movl	%eax, 244(%rsp)         # 4-byte Spill
.LBB19_107:                             # %while.body116.i
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_50 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	244(%rsp), %eax         # 4-byte Reload
	movq	256(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi,%rdx,4), %edi
	movl	$4405, 4268(%rsp)       # imm = 0x1135
	movl	(%rsi,%rcx,4), %r8d
	movl	$4406, 4268(%rsp)       # imm = 0x1136
	movl	%r8d, (%rsi,%rdx,4)
	movl	$4407, 4268(%rsp)       # imm = 0x1137
	movl	%edi, (%rsi,%rcx,4)
	movl	$4475, 4268(%rsp)       # imm = 0x117B
	addq	$1, %rdx
	addq	$1, %rcx
	movl	%eax, %edi
	addl	$-1, %edi
	cmpl	$1, %eax
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	movq	%rdx, 248(%rsp)         # 8-byte Spill
	movl	%edi, 244(%rsp)         # 4-byte Spill
	jg	.LBB19_107
.LBB19_108:                             # %while.end129.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	840(%rsp), %eax         # 4-byte Reload
	movl	368(%rsp), %ecx         # 4-byte Reload
	subl	%ecx, %eax
	movl	372(%rsp), %edx         # 4-byte Reload
	subl	%edx, %ecx
	cmpl	%ecx, %eax
	movl	%ecx, %esi
	cmovll	%eax, %esi
	cmpl	$0, %esi
	movl	%esi, 240(%rsp)         # 4-byte Spill
	movl	%ecx, 236(%rsp)         # 4-byte Spill
	jle	.LBB19_116
# %bb.109:                              # %while.body146.lr.ph.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	840(%rsp), %ecx         # 4-byte Reload
	movl	240(%rsp), %edx         # 4-byte Reload
	subl	%edx, %ecx
	movslq	%ecx, %rsi
	movl	468(%rsp), %ecx         # 4-byte Reload
	movslq	%ecx, %rdi
	movl	368(%rsp), %r8d         # 4-byte Reload
	addl	$-1, %r8d
	movl	840(%rsp), %r9d         # 4-byte Reload
	subl	%r9d, %r8d
	movl	372(%rsp), %r10d        # 4-byte Reload
	addl	$-1, %r10d
	movl	368(%rsp), %r11d        # 4-byte Reload
	subl	%r11d, %r10d
	cmpl	%r10d, %r8d
	movl	%r10d, %ebx
	cmovgl	%r8d, %ebx
	cmpl	$-2, %ebx
	cmovgl	%ebx, %eax
	cmpl	%r10d, %r8d
	cmovgl	%r8d, %r10d
	subl	%r10d, %eax
	movl	%eax, %r8d
	movl	%r8d, %r14d
	addq	$1, %r14
	cmpq	$8, %r14
	movq	%rdi, %r15
	movq	%rsi, %r12
	movl	%edx, 232(%rsp)         # 4-byte Spill
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	movq	%rdi, 216(%rsp)         # 8-byte Spill
	movl	%eax, 212(%rsp)         # 4-byte Spill
	movq	%r14, 200(%rsp)         # 8-byte Spill
	movq	%r15, 192(%rsp)         # 8-byte Spill
	movq	%r12, 184(%rsp)         # 8-byte Spill
	jb	.LBB19_114
# %bb.110:                              # %vector.memcheck
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	216(%rsp), %rcx         # 8-byte Reload
	shlq	$2, %rcx
	movq	1352(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movl	368(%rsp), %esi         # 4-byte Reload
	addl	$-1, %esi
	movl	840(%rsp), %edi         # 4-byte Reload
	subl	%edi, %esi
	movl	372(%rsp), %r8d         # 4-byte Reload
	addl	$-1, %r8d
	movl	368(%rsp), %r9d         # 4-byte Reload
	subl	%r9d, %r8d
	cmpl	%r8d, %esi
	movl	%r8d, %r10d
	cmovgl	%esi, %r10d
	cmpl	$-2, %r10d
	cmovgl	%r10d, %eax
	cmpl	%r8d, %esi
	cmovgl	%esi, %r8d
	subl	%r8d, %eax
	movl	%eax, %eax
	movl	%eax, %ecx
	movq	216(%rsp), %r11         # 8-byte Reload
	addq	%rcx, %r11
	shlq	$2, %r11
	movq	1056(%rsp), %rbx        # 8-byte Reload
	addq	%r11, %rbx
	movq	224(%rsp), %r11         # 8-byte Reload
	shlq	$2, %r11
	movq	1048(%rsp), %r14        # 8-byte Reload
	addq	%r11, %r14
	movslq	%edi, %r11
	addq	%rcx, %r11
	movl	240(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	subq	%rcx, %r11
	shlq	$2, %r11
	movq	1040(%rsp), %rcx        # 8-byte Reload
	addq	%r11, %rcx
	cmpq	%rcx, %rdx
	setb	%bpl
	cmpq	%rbx, %r14
	setb	%r15b
	andb	%r15b, %bpl
	testb	$1, %bpl
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movl	%eax, 232(%rsp)         # 4-byte Spill
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	movq	%rdx, 184(%rsp)         # 8-byte Spill
	jne	.LBB19_114
# %bb.111:                              # %vector.ph
                                        #   in Loop: Header=BB19_50 Depth=3
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	212(%rsp), %eax         # 4-byte Reload
	addl	$1, %eax
	andl	$7, %eax
	movl	%eax, %edx
	movl	%edx, %esi
	movq	200(%rsp), %rdi         # 8-byte Reload
	subq	%rsi, %rdi
	movq	%rdi, %rsi
	movq	216(%rsp), %r8          # 8-byte Reload
	addq	%r8, %rsi
	movq	%rdi, %r9
	movq	224(%rsp), %r10         # 8-byte Reload
	addq	%r10, %r9
	movl	%edi, %edx
	movl	240(%rsp), %r11d        # 4-byte Reload
	subl	%edx, %r11d
	movl	%r11d, 180(%rsp)        # 4-byte Spill
	movl	%eax, 176(%rsp)         # 4-byte Spill
	movq	%rdi, 168(%rsp)         # 8-byte Spill
	movq	%rsi, 160(%rsp)         # 8-byte Spill
	movq	%r9, 152(%rsp)          # 8-byte Spill
	movq	%rcx, 144(%rsp)         # 8-byte Spill
.LBB19_112:                             # %vector.body
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_50 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%rax, %rcx
	movq	216(%rsp), %rdx         # 8-byte Reload
	addq	%rdx, %rcx
	movq	%rax, %rsi
	movq	224(%rsp), %rdi         # 8-byte Reload
	addq	%rdi, %rsi
	movq	1352(%rsp), %r8         # 8-byte Reload
	movdqu	(%r8,%rcx,4), %xmm0
	movl	$4478, 4268(%rsp)       # imm = 0x117E
	movdqu	16(%r8,%rcx,4), %xmm1
	movl	$4481, 4268(%rsp)       # imm = 0x1181
	movdqu	4(%r8,%rsi,4), %xmm2
	movl	$4484, 4268(%rsp)       # imm = 0x1184
	movdqu	20(%r8,%rsi,4), %xmm3
	movl	$4486, 4268(%rsp)       # imm = 0x1186
	movdqu	%xmm2, (%r8,%rcx,4)
	movl	$4488, 4268(%rsp)       # imm = 0x1188
	movdqu	%xmm3, 16(%r8,%rcx,4)
	movl	$4490, 4268(%rsp)       # imm = 0x118A
	movdqu	%xmm0, 4(%r8,%rsi,4)
	movl	$4492, 4268(%rsp)       # imm = 0x118C
	movdqu	%xmm1, 20(%r8,%rsi,4)
	movl	$4508, 4268(%rsp)       # imm = 0x119C
	addq	$8, %rax
	movq	168(%rsp), %rcx         # 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, 144(%rsp)         # 8-byte Spill
	jne	.LBB19_112
# %bb.113:                              # %middle.block
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	176(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movl	180(%rsp), %esi         # 4-byte Reload
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	movq	%rdx, 184(%rsp)         # 8-byte Spill
	movl	%esi, 232(%rsp)         # 4-byte Spill
	je	.LBB19_116
.LBB19_114:                             # %while.body146.i.preheader
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	232(%rsp), %eax         # 4-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, 136(%rsp)         # 8-byte Spill
	movq	%rdx, 128(%rsp)         # 8-byte Spill
	movl	%eax, 124(%rsp)         # 4-byte Spill
.LBB19_115:                             # %while.body146.i
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        #       Parent Loop BB19_50 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	124(%rsp), %eax         # 4-byte Reload
	movq	136(%rsp), %rcx         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, %rsi
	addq	$1, %rsi
	movq	1352(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi,%rdx,4), %r8d
	movl	$4510, 4268(%rsp)       # imm = 0x119E
	movl	4(%rdi,%rcx,4), %r9d
	movl	$4511, 4268(%rsp)       # imm = 0x119F
	movl	%r9d, (%rdi,%rdx,4)
	movl	$4512, 4268(%rsp)       # imm = 0x11A0
	movl	%r8d, 4(%rdi,%rcx,4)
	movl	$4524, 4268(%rsp)       # imm = 0x11AC
	addq	$1, %rdx
	movl	%eax, %r8d
	addl	$-1, %r8d
	cmpl	$1, %eax
	movq	%rsi, 136(%rsp)         # 8-byte Spill
	movq	%rdx, 128(%rsp)         # 8-byte Spill
	movl	%r8d, 124(%rsp)         # 4-byte Spill
	jg	.LBB19_115
.LBB19_116:                             # %while.end159.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	844(%rsp), %eax         # 4-byte Reload
	addl	$-1, %eax
	movl	464(%rsp), %ecx         # 4-byte Reload
	subl	%ecx, %eax
	movl	468(%rsp), %edx         # 4-byte Reload
	addl	%edx, %eax
	movl	840(%rsp), %esi         # 4-byte Reload
	movl	236(%rsp), %edi         # 4-byte Reload
	subl	%edi, %esi
	addl	$1, %esi
	movl	%eax, %r8d
	movl	844(%rsp), %r9d         # 4-byte Reload
	subl	%r9d, %r8d
	movl	840(%rsp), %r10d        # 4-byte Reload
	subl	%esi, %r10d
	cmpl	%r10d, %r8d
	movl	%eax, 120(%rsp)         # 4-byte Spill
	movl	%esi, 116(%rsp)         # 4-byte Spill
	jle	.LBB19_118
# %bb.117:                              # %if.then169.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movq	624(%rsp), %rax         # 8-byte Reload
	movl	120(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$4526, 4268(%rsp)       # imm = 0x11AE
	movl	116(%rsp), %edx         # 4-byte Reload
	movl	840(%rsp), %esi         # 4-byte Reload
	movl	%edx, 112(%rsp)         # 4-byte Spill
	movl	%esi, 108(%rsp)         # 4-byte Spill
	jmp	.LBB19_119
.LBB19_118:                             # %if.else180.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movq	632(%rsp), %rax         # 8-byte Reload
	movl	116(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$4533, 4268(%rsp)       # imm = 0x11B5
	movl	844(%rsp), %edx         # 4-byte Reload
	movl	120(%rsp), %esi         # 4-byte Reload
	movl	%edx, 112(%rsp)         # 4-byte Spill
	movl	%esi, 108(%rsp)         # 4-byte Spill
.LBB19_119:                             # %if.end191.i
                                        #   in Loop: Header=BB19_50 Depth=3
	movl	108(%rsp), %eax         # 4-byte Reload
	movl	112(%rsp), %ecx         # 4-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	shlq	$32, %rdx
	sarq	$32, %rdx
	movl	%ecx, 3856(%rsp,%rdx,4)
	movl	$4535, 4268(%rsp)       # imm = 0x11B7
	movl	%eax, 3456(%rsp,%rdx,4)
	movl	$4550, 4268(%rsp)       # imm = 0x11C6
	movl	620(%rsp), %eax         # 4-byte Reload
	addl	$1, %eax
	movl	%eax, 364(%rsp)         # 4-byte Spill
	jmp	.LBB19_99
.LBB19_120:                             # %fallbackQSort3.exit
                                        #   in Loop: Header=BB19_31 Depth=2
	movl	936(%rsp), %eax         # 4-byte Reload
	movl	896(%rsp), %ecx         # 4-byte Reload
	cmpl	%ecx, %eax
	jle	.LBB19_122
.LBB19_121:                             # %while.cond129.outer.backedge
                                        #   in Loop: Header=BB19_31 Depth=2
	movl	892(%rsp), %eax         # 4-byte Reload
	movl	880(%rsp), %ecx         # 4-byte Reload
	movl	%eax, 988(%rsp)         # 4-byte Spill
	movl	%ecx, 984(%rsp)         # 4-byte Spill
	jmp	.LBB19_31
.LBB19_122:                             # %for.body236.lr.ph
                                        #   in Loop: Header=BB19_31 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	884(%rsp), %ecx         # 4-byte Reload
	movslq	%ecx, %rdx
	movl	896(%rsp), %esi         # 4-byte Reload
	movslq	%esi, %rdi
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	movq	%rdi, 88(%rsp)          # 8-byte Spill
	movl	%eax, 84(%rsp)          # 4-byte Spill
.LBB19_123:                             # %for.body236
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	84(%rsp), %eax          # 4-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %esi
	movl	$4553, 4268(%rsp)       # imm = 0x11C9
	movl	%esi, %esi
	movl	%esi, %edi
	movq	1384(%rsp), %r8         # 8-byte Reload
	movl	(%r8,%rdi,4), %esi
	movl	$4562, 4268(%rsp)       # imm = 0x11D2
	cmpl	%esi, %eax
	movl	%esi, 80(%rsp)          # 4-byte Spill
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movl	%eax, 68(%rsp)          # 4-byte Spill
	je	.LBB19_125
# %bb.124:                              # %if.then243
                                        #   in Loop: Header=BB19_123 Depth=3
	movl	$1, %eax
	movq	72(%rsp), %rcx          # 8-byte Reload
	movl	%ecx, %edx
	movl	%edx, %esi
	andl	$31, %esi
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %eax
	sarl	$5, %edx
	movslq	%edx, %rdi
	movq	1360(%rsp), %r8         # 8-byte Reload
	movl	(%r8,%rdi,4), %edx
	movl	$4564, 4268(%rsp)       # imm = 0x11D4
	orl	%eax, %edx
	movl	%edx, (%r8,%rdi,4)
	movl	$4569, 4268(%rsp)       # imm = 0x11D9
	movl	80(%rsp), %eax          # 4-byte Reload
	movl	%eax, 68(%rsp)          # 4-byte Spill
.LBB19_125:                             # %for.inc251
                                        #   in Loop: Header=BB19_123 Depth=3
	movl	68(%rsp), %eax          # 4-byte Reload
	movq	72(%rsp), %rcx          # 8-byte Reload
	addq	$1, %rcx
	movq	88(%rsp), %rdx          # 8-byte Reload
	cmpq	%rdx, %rcx
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	movl	%eax, 84(%rsp)          # 4-byte Spill
	jl	.LBB19_123
	jmp	.LBB19_121
.LBB19_126:                             # %while.end255
                                        #   in Loop: Header=BB19_25 Depth=1
	movb	1327(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB19_127
	jmp	.LBB19_128
.LBB19_127:                             # %if.then258
                                        #   in Loop: Header=BB19_25 Depth=1
	movabsq	$.L.str.4, %rsi
	movq	stderr, %rdi
	movl	$4578, 4268(%rsp)       # imm = 0x11E2
	movl	980(%rsp), %edx         # 4-byte Reload
	movb	$0, %al
	callq	fprintf
	movl	%eax, 64(%rsp)          # 4-byte Spill
.LBB19_128:                             # %if.end260
                                        #   in Loop: Header=BB19_25 Depth=1
	movl	1024(%rsp), %eax        # 4-byte Reload
	shll	$1, %eax
	movl	1372(%rsp), %ecx        # 4-byte Reload
	cmpl	%ecx, %eax
	setg	%dl
	movl	980(%rsp), %esi         # 4-byte Reload
	cmpl	$0, %esi
	sete	%dil
	orb	%dil, %dl
	testb	$1, %dl
	movl	%eax, 1028(%rsp)        # 4-byte Spill
	jne	.LBB19_129
	jmp	.LBB19_25
.LBB19_129:                             # %while.end268
	movb	1327(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB19_130
	jmp	.LBB19_131
.LBB19_130:                             # %if.then271
	movl	$33, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.5.5, %rdi
	movq	stderr, %rcx
	movl	$4594, 4268(%rsp)       # imm = 0x11F2
	callq	fwrite
	movq	%rax, 56(%rsp)          # 8-byte Spill
.LBB19_131:                             # %if.end273
	movb	1307(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB19_132
	jmp	.LBB19_138
.LBB19_132:                             # %for.body277.lr.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	1372(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edx
	movl	%edx, %esi
	movq	%rcx, %rdi
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movq	%rsi, 40(%rsp)          # 8-byte Spill
	movq	%rcx, 32(%rsp)          # 8-byte Spill
.LBB19_133:                             # %for.body277
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_134 Depth 2
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	48(%rsp), %rcx          # 8-byte Reload
	shlq	$32, %rax
	sarq	$32, %rax
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%rax, 16(%rsp)          # 8-byte Spill
.LBB19_134:                             # %while.cond278
                                        #   Parent Loop BB19_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	16(%rsp), %rax          # 8-byte Reload
	movl	1392(%rsp,%rax,4), %ecx
	movl	$4599, 4268(%rsp)       # imm = 0x11F7
	movq	%rax, %rdx
	addq	$1, %rdx
	cmpl	$0, %ecx
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movl	%ecx, 4(%rsp)           # 4-byte Spill
	movq	%rdx, 16(%rsp)          # 8-byte Spill
	je	.LBB19_134
# %bb.135:                              # %while.end285
                                        #   in Loop: Header=BB19_133 Depth=1
	movl	4(%rsp), %eax           # 4-byte Reload
	addl	$-1, %eax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	%eax, 1392(%rsp,%rcx,4)
	movl	$4602, 4268(%rsp)       # imm = 0x11FA
	movb	%cl, %dl
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	(%rsi,%rdi,4), %eax
	movl	$4605, 4268(%rsp)       # imm = 0x11FD
	movl	%eax, %eax
	movl	%eax, %r8d
	movq	1376(%rsp), %r9         # 8-byte Reload
	movb	%dl, (%r9,%r8)
	movl	$4626, 4268(%rsp)       # imm = 0x1212
	addq	$1, %rdi
	movq	40(%rsp), %r8           # 8-byte Reload
	cmpq	%r8, %rdi
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	jne	.LBB19_133
# %bb.136:                              # %for.end295
	movq	8(%rsp), %rax           # 8-byte Reload
	movl	%eax, %ecx
	cmpl	$256, %ecx              # imm = 0x100
	jl	.LBB19_138
# %bb.137:                              # %if.then298
	movl	$1005, %edi             # imm = 0x3ED
	callq	BZ2_bz__AssertH__fail
.LBB19_138:                             # %if.end299
	addq	$4272, %rsp             # imm = 0x10B0
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end19:
	.size	fallbackSort, .Lfunc_end19-fallbackSort
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mainGtU
	.type	mainGtU,@function
mainGtU:                                # @mainGtU
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbx
	.cfi_def_cfa_offset 16
	subq	$168, %rsp
	.cfi_def_cfa_offset 184
	.cfi_offset %rbx, -16
	movl	$9999, 164(%rsp)        # imm = 0x270F
	movl	%edi, %eax
	movl	%eax, %r10d
	movb	(%rdx,%r10), %r11b
	movl	$4629, 164(%rsp)        # imm = 0x1215
	movl	%esi, %eax
	movl	%eax, %r10d
	movb	(%rdx,%r10), %bl
	movl	$4638, 164(%rsp)        # imm = 0x121E
	cmpb	%bl, %r11b
	movl	%esi, 160(%rsp)         # 4-byte Spill
	movq	%r9, 152(%rsp)          # 8-byte Spill
	movl	%r8d, 148(%rsp)         # 4-byte Spill
	movq	%rcx, 136(%rsp)         # 8-byte Spill
	movq	%rdx, 128(%rsp)         # 8-byte Spill
	movl	%edi, 124(%rsp)         # 4-byte Spill
	movb	%r11b, 123(%rsp)        # 1-byte Spill
	movb	%bl, 122(%rsp)          # 1-byte Spill
	je	.LBB20_2
# %bb.1:                                # %if.then
	movb	123(%rsp), %al          # 1-byte Reload
	movb	122(%rsp), %cl          # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_2:                               # %if.end
	movl	124(%rsp), %eax         # 4-byte Reload
	addl	$1, %eax
	movl	160(%rsp), %ecx         # 4-byte Reload
	addl	$1, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4641, 164(%rsp)        # imm = 0x1221
	movl	%ecx, %eax
	movl	%eax, %edx
	movb	(%rsi,%rdx), %r8b
	movl	$4650, 164(%rsp)        # imm = 0x122A
	cmpb	%r8b, %dil
	movb	%dil, 120(%rsp)         # 1-byte Spill
	movb	%r8b, 119(%rsp)         # 1-byte Spill
	je	.LBB20_4
# %bb.3:                                # %if.then19
	movb	120(%rsp), %al          # 1-byte Reload
	movb	119(%rsp), %cl          # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_4:                               # %if.end25
	movl	124(%rsp), %eax         # 4-byte Reload
	addl	$2, %eax
	movl	160(%rsp), %ecx         # 4-byte Reload
	addl	$2, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4653, 164(%rsp)        # imm = 0x122D
	movl	%ecx, %eax
	movl	%eax, %edx
	movb	(%rsi,%rdx), %r8b
	movl	$4662, 164(%rsp)        # imm = 0x1236
	cmpb	%r8b, %dil
	movb	%dil, 118(%rsp)         # 1-byte Spill
	movb	%r8b, 117(%rsp)         # 1-byte Spill
	je	.LBB20_6
# %bb.5:                                # %if.then36
	movb	118(%rsp), %al          # 1-byte Reload
	movb	117(%rsp), %cl          # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_6:                               # %if.end42
	movl	124(%rsp), %eax         # 4-byte Reload
	addl	$3, %eax
	movl	160(%rsp), %ecx         # 4-byte Reload
	addl	$3, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4665, 164(%rsp)        # imm = 0x1239
	movl	%ecx, %eax
	movl	%eax, %edx
	movb	(%rsi,%rdx), %r8b
	movl	$4674, 164(%rsp)        # imm = 0x1242
	cmpb	%r8b, %dil
	movb	%dil, 116(%rsp)         # 1-byte Spill
	movb	%r8b, 115(%rsp)         # 1-byte Spill
	je	.LBB20_8
# %bb.7:                                # %if.then53
	movb	116(%rsp), %al          # 1-byte Reload
	movb	115(%rsp), %cl          # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_8:                               # %if.end59
	movl	124(%rsp), %eax         # 4-byte Reload
	addl	$4, %eax
	movl	160(%rsp), %ecx         # 4-byte Reload
	addl	$4, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4677, 164(%rsp)        # imm = 0x1245
	movl	%ecx, %eax
	movl	%eax, %edx
	movb	(%rsi,%rdx), %r8b
	movl	$4686, 164(%rsp)        # imm = 0x124E
	cmpb	%r8b, %dil
	movb	%dil, 114(%rsp)         # 1-byte Spill
	movb	%r8b, 113(%rsp)         # 1-byte Spill
	je	.LBB20_10
# %bb.9:                                # %if.then70
	movb	114(%rsp), %al          # 1-byte Reload
	movb	113(%rsp), %cl          # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_10:                              # %if.end76
	movl	124(%rsp), %eax         # 4-byte Reload
	addl	$5, %eax
	movl	160(%rsp), %ecx         # 4-byte Reload
	addl	$5, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4689, 164(%rsp)        # imm = 0x1251
	movl	%ecx, %eax
	movl	%eax, %edx
	movb	(%rsi,%rdx), %r8b
	movl	$4698, 164(%rsp)        # imm = 0x125A
	cmpb	%r8b, %dil
	movb	%dil, 112(%rsp)         # 1-byte Spill
	movb	%r8b, 111(%rsp)         # 1-byte Spill
	je	.LBB20_12
# %bb.11:                               # %if.then87
	movb	112(%rsp), %al          # 1-byte Reload
	movb	111(%rsp), %cl          # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_12:                              # %if.end93
	movl	124(%rsp), %eax         # 4-byte Reload
	addl	$6, %eax
	movl	160(%rsp), %ecx         # 4-byte Reload
	addl	$6, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4701, 164(%rsp)        # imm = 0x125D
	movl	%ecx, %eax
	movl	%eax, %edx
	movb	(%rsi,%rdx), %r8b
	movl	$4710, 164(%rsp)        # imm = 0x1266
	cmpb	%r8b, %dil
	movb	%dil, 110(%rsp)         # 1-byte Spill
	movb	%r8b, 109(%rsp)         # 1-byte Spill
	je	.LBB20_14
# %bb.13:                               # %if.then104
	movb	110(%rsp), %al          # 1-byte Reload
	movb	109(%rsp), %cl          # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_14:                              # %if.end110
	movl	124(%rsp), %eax         # 4-byte Reload
	addl	$7, %eax
	movl	160(%rsp), %ecx         # 4-byte Reload
	addl	$7, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4713, 164(%rsp)        # imm = 0x1269
	movl	%ecx, %eax
	movl	%eax, %edx
	movb	(%rsi,%rdx), %r8b
	movl	$4722, 164(%rsp)        # imm = 0x1272
	cmpb	%r8b, %dil
	movb	%dil, 108(%rsp)         # 1-byte Spill
	movb	%r8b, 107(%rsp)         # 1-byte Spill
	je	.LBB20_16
# %bb.15:                               # %if.then121
	movb	108(%rsp), %al          # 1-byte Reload
	movb	107(%rsp), %cl          # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_16:                              # %if.end127
	movl	124(%rsp), %eax         # 4-byte Reload
	addl	$8, %eax
	movl	160(%rsp), %ecx         # 4-byte Reload
	addl	$8, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4725, 164(%rsp)        # imm = 0x1275
	movl	%ecx, %eax
	movl	%eax, %edx
	movb	(%rsi,%rdx), %r8b
	movl	$4734, 164(%rsp)        # imm = 0x127E
	cmpb	%r8b, %dil
	movb	%dil, 106(%rsp)         # 1-byte Spill
	movb	%r8b, 105(%rsp)         # 1-byte Spill
	je	.LBB20_18
# %bb.17:                               # %if.then138
	movb	106(%rsp), %al          # 1-byte Reload
	movb	105(%rsp), %cl          # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_18:                              # %if.end144
	movl	124(%rsp), %eax         # 4-byte Reload
	addl	$9, %eax
	movl	160(%rsp), %ecx         # 4-byte Reload
	addl	$9, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4737, 164(%rsp)        # imm = 0x1281
	movl	%ecx, %eax
	movl	%eax, %edx
	movb	(%rsi,%rdx), %r8b
	movl	$4746, 164(%rsp)        # imm = 0x128A
	cmpb	%r8b, %dil
	movb	%dil, 104(%rsp)         # 1-byte Spill
	movb	%r8b, 103(%rsp)         # 1-byte Spill
	je	.LBB20_20
# %bb.19:                               # %if.then155
	movb	104(%rsp), %al          # 1-byte Reload
	movb	103(%rsp), %cl          # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_20:                              # %if.end161
	movl	124(%rsp), %eax         # 4-byte Reload
	addl	$10, %eax
	movl	160(%rsp), %ecx         # 4-byte Reload
	addl	$10, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4749, 164(%rsp)        # imm = 0x128D
	movl	%ecx, %eax
	movl	%eax, %edx
	movb	(%rsi,%rdx), %r8b
	movl	$4758, 164(%rsp)        # imm = 0x1296
	cmpb	%r8b, %dil
	movb	%dil, 102(%rsp)         # 1-byte Spill
	movb	%r8b, 101(%rsp)         # 1-byte Spill
	je	.LBB20_22
# %bb.21:                               # %if.then172
	movb	102(%rsp), %al          # 1-byte Reload
	movb	101(%rsp), %cl          # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_22:                              # %if.end178
	movl	124(%rsp), %eax         # 4-byte Reload
	addl	$11, %eax
	movl	160(%rsp), %ecx         # 4-byte Reload
	addl	$11, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4761, 164(%rsp)        # imm = 0x1299
	movl	%ecx, %eax
	movl	%eax, %edx
	movb	(%rsi,%rdx), %r8b
	movl	$4778, 164(%rsp)        # imm = 0x12AA
	cmpb	%r8b, %dil
	movb	%dil, 100(%rsp)         # 1-byte Spill
	movb	%r8b, 99(%rsp)          # 1-byte Spill
	je	.LBB20_24
# %bb.23:                               # %if.then189
	movb	100(%rsp), %al          # 1-byte Reload
	movb	99(%rsp), %cl           # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_24:                              # %if.end195
	movl	124(%rsp), %eax         # 4-byte Reload
	addl	$12, %eax
	movl	160(%rsp), %ecx         # 4-byte Reload
	addl	$12, %ecx
	movl	148(%rsp), %edx         # 4-byte Reload
	addl	$8, %edx
	movl	%ecx, 92(%rsp)          # 4-byte Spill
	movl	%eax, 88(%rsp)          # 4-byte Spill
	movl	%edx, 84(%rsp)          # 4-byte Spill
.LBB20_25:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	84(%rsp), %eax          # 4-byte Reload
	movl	88(%rsp), %ecx          # 4-byte Reload
	movl	92(%rsp), %edx          # 4-byte Reload
	movl	%ecx, %esi
	movl	%esi, %edi
	movq	128(%rsp), %r8          # 8-byte Reload
	movb	(%r8,%rdi), %r9b
	movl	$4781, 164(%rsp)        # imm = 0x12AD
	movl	%edx, %esi
	movl	%esi, %r10d
	movb	(%r8,%r10), %r11b
	movl	$4787, 164(%rsp)        # imm = 0x12B3
	cmpb	%r11b, %r9b
	movl	%eax, 80(%rsp)          # 4-byte Spill
	movl	%ecx, 76(%rsp)          # 4-byte Spill
	movl	%edx, 72(%rsp)          # 4-byte Spill
	movq	%rdi, 64(%rsp)          # 8-byte Spill
	movb	%r9b, 63(%rsp)          # 1-byte Spill
	movq	%r10, 48(%rsp)          # 8-byte Spill
	movb	%r11b, 47(%rsp)         # 1-byte Spill
	je	.LBB20_27
# %bb.26:                               # %if.then206
	movb	63(%rsp), %al           # 1-byte Reload
	movb	47(%rsp), %cl           # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_27:                              # %if.end212
                                        #   in Loop: Header=BB20_25 Depth=1
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	64(%rsp), %rcx          # 8-byte Reload
	movw	(%rax,%rcx,2), %dx
	movl	$4789, 164(%rsp)        # imm = 0x12B5
	movq	48(%rsp), %rsi          # 8-byte Reload
	movw	(%rax,%rsi,2), %di
	movl	$4798, 164(%rsp)        # imm = 0x12BE
	cmpw	%di, %dx
	movw	%dx, 44(%rsp)           # 2-byte Spill
	movw	%di, 42(%rsp)           # 2-byte Spill
	je	.LBB20_29
# %bb.28:                               # %if.then221
	movw	44(%rsp), %ax           # 2-byte Reload
	movw	42(%rsp), %cx           # 2-byte Reload
	cmpw	%cx, %ax
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_29:                              # %if.end227
                                        #   in Loop: Header=BB20_25 Depth=1
	movl	76(%rsp), %eax          # 4-byte Reload
	addl	$1, %eax
	movl	72(%rsp), %ecx          # 4-byte Reload
	addl	$1, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4801, 164(%rsp)        # imm = 0x12C1
	movl	%ecx, %eax
	movl	%eax, %r8d
	movb	(%rsi,%r8), %r9b
	movl	$4807, 164(%rsp)        # imm = 0x12C7
	cmpb	%r9b, %dil
	movb	%dil, 41(%rsp)          # 1-byte Spill
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movb	%r9b, 23(%rsp)          # 1-byte Spill
	je	.LBB20_31
# %bb.30:                               # %if.then238
	movb	41(%rsp), %al           # 1-byte Reload
	movb	23(%rsp), %cl           # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_31:                              # %if.end244
                                        #   in Loop: Header=BB20_25 Depth=1
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	32(%rsp), %rcx          # 8-byte Reload
	movw	(%rax,%rcx,2), %dx
	movl	$4809, 164(%rsp)        # imm = 0x12C9
	movq	24(%rsp), %rsi          # 8-byte Reload
	movw	(%rax,%rsi,2), %di
	movl	$4818, 164(%rsp)        # imm = 0x12D2
	cmpw	%di, %dx
	movw	%dx, 20(%rsp)           # 2-byte Spill
	movw	%di, 18(%rsp)           # 2-byte Spill
	je	.LBB20_33
# %bb.32:                               # %if.then253
	movw	20(%rsp), %ax           # 2-byte Reload
	movw	18(%rsp), %cx           # 2-byte Reload
	cmpw	%cx, %ax
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_33:                              # %if.end259
                                        #   in Loop: Header=BB20_25 Depth=1
	movl	76(%rsp), %eax          # 4-byte Reload
	addl	$2, %eax
	movl	72(%rsp), %ecx          # 4-byte Reload
	addl	$2, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4821, 164(%rsp)        # imm = 0x12D5
	movl	%ecx, %eax
	movl	%eax, %r8d
	movb	(%rsi,%r8), %r9b
	movl	$4827, 164(%rsp)        # imm = 0x12DB
	cmpb	%r9b, %dil
	movb	%dil, 17(%rsp)          # 1-byte Spill
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movq	%r8, (%rsp)             # 8-byte Spill
	movb	%r9b, -1(%rsp)          # 1-byte Spill
	je	.LBB20_35
# %bb.34:                               # %if.then270
	movb	17(%rsp), %al           # 1-byte Reload
	movb	-1(%rsp), %cl           # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_35:                              # %if.end276
                                        #   in Loop: Header=BB20_25 Depth=1
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	8(%rsp), %rcx           # 8-byte Reload
	movw	(%rax,%rcx,2), %dx
	movl	$4829, 164(%rsp)        # imm = 0x12DD
	movq	(%rsp), %rsi            # 8-byte Reload
	movw	(%rax,%rsi,2), %di
	movl	$4838, 164(%rsp)        # imm = 0x12E6
	cmpw	%di, %dx
	movw	%dx, -4(%rsp)           # 2-byte Spill
	movw	%di, -6(%rsp)           # 2-byte Spill
	je	.LBB20_37
# %bb.36:                               # %if.then285
	movw	-4(%rsp), %ax           # 2-byte Reload
	movw	-6(%rsp), %cx           # 2-byte Reload
	cmpw	%cx, %ax
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_37:                              # %if.end291
                                        #   in Loop: Header=BB20_25 Depth=1
	movl	76(%rsp), %eax          # 4-byte Reload
	addl	$3, %eax
	movl	72(%rsp), %ecx          # 4-byte Reload
	addl	$3, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4841, 164(%rsp)        # imm = 0x12E9
	movl	%ecx, %eax
	movl	%eax, %r8d
	movb	(%rsi,%r8), %r9b
	movl	$4847, 164(%rsp)        # imm = 0x12EF
	cmpb	%r9b, %dil
	movb	%dil, -7(%rsp)          # 1-byte Spill
	movq	%rdx, -16(%rsp)         # 8-byte Spill
	movq	%r8, -24(%rsp)          # 8-byte Spill
	movb	%r9b, -25(%rsp)         # 1-byte Spill
	je	.LBB20_39
# %bb.38:                               # %if.then302
	movb	-7(%rsp), %al           # 1-byte Reload
	movb	-25(%rsp), %cl          # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_39:                              # %if.end308
                                        #   in Loop: Header=BB20_25 Depth=1
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	-16(%rsp), %rcx         # 8-byte Reload
	movw	(%rax,%rcx,2), %dx
	movl	$4849, 164(%rsp)        # imm = 0x12F1
	movq	-24(%rsp), %rsi         # 8-byte Reload
	movw	(%rax,%rsi,2), %di
	movl	$4858, 164(%rsp)        # imm = 0x12FA
	cmpw	%di, %dx
	movw	%dx, -28(%rsp)          # 2-byte Spill
	movw	%di, -30(%rsp)          # 2-byte Spill
	je	.LBB20_41
# %bb.40:                               # %if.then317
	movw	-28(%rsp), %ax          # 2-byte Reload
	movw	-30(%rsp), %cx          # 2-byte Reload
	cmpw	%cx, %ax
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_41:                              # %if.end323
                                        #   in Loop: Header=BB20_25 Depth=1
	movl	76(%rsp), %eax          # 4-byte Reload
	addl	$4, %eax
	movl	72(%rsp), %ecx          # 4-byte Reload
	addl	$4, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4861, 164(%rsp)        # imm = 0x12FD
	movl	%ecx, %eax
	movl	%eax, %r8d
	movb	(%rsi,%r8), %r9b
	movl	$4867, 164(%rsp)        # imm = 0x1303
	cmpb	%r9b, %dil
	movb	%dil, -31(%rsp)         # 1-byte Spill
	movq	%rdx, -40(%rsp)         # 8-byte Spill
	movq	%r8, -48(%rsp)          # 8-byte Spill
	movb	%r9b, -49(%rsp)         # 1-byte Spill
	je	.LBB20_43
# %bb.42:                               # %if.then334
	movb	-31(%rsp), %al          # 1-byte Reload
	movb	-49(%rsp), %cl          # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_43:                              # %if.end340
                                        #   in Loop: Header=BB20_25 Depth=1
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	-40(%rsp), %rcx         # 8-byte Reload
	movw	(%rax,%rcx,2), %dx
	movl	$4869, 164(%rsp)        # imm = 0x1305
	movq	-48(%rsp), %rsi         # 8-byte Reload
	movw	(%rax,%rsi,2), %di
	movl	$4878, 164(%rsp)        # imm = 0x130E
	cmpw	%di, %dx
	movw	%dx, -52(%rsp)          # 2-byte Spill
	movw	%di, -54(%rsp)          # 2-byte Spill
	je	.LBB20_45
# %bb.44:                               # %if.then349
	movw	-52(%rsp), %ax          # 2-byte Reload
	movw	-54(%rsp), %cx          # 2-byte Reload
	cmpw	%cx, %ax
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_45:                              # %if.end355
                                        #   in Loop: Header=BB20_25 Depth=1
	movl	76(%rsp), %eax          # 4-byte Reload
	addl	$5, %eax
	movl	72(%rsp), %ecx          # 4-byte Reload
	addl	$5, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4881, 164(%rsp)        # imm = 0x1311
	movl	%ecx, %eax
	movl	%eax, %r8d
	movb	(%rsi,%r8), %r9b
	movl	$4887, 164(%rsp)        # imm = 0x1317
	cmpb	%r9b, %dil
	movb	%dil, -55(%rsp)         # 1-byte Spill
	movq	%rdx, -64(%rsp)         # 8-byte Spill
	movq	%r8, -72(%rsp)          # 8-byte Spill
	movb	%r9b, -73(%rsp)         # 1-byte Spill
	je	.LBB20_47
# %bb.46:                               # %if.then366
	movb	-55(%rsp), %al          # 1-byte Reload
	movb	-73(%rsp), %cl          # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_47:                              # %if.end372
                                        #   in Loop: Header=BB20_25 Depth=1
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	-64(%rsp), %rcx         # 8-byte Reload
	movw	(%rax,%rcx,2), %dx
	movl	$4889, 164(%rsp)        # imm = 0x1319
	movq	-72(%rsp), %rsi         # 8-byte Reload
	movw	(%rax,%rsi,2), %di
	movl	$4898, 164(%rsp)        # imm = 0x1322
	cmpw	%di, %dx
	movw	%dx, -76(%rsp)          # 2-byte Spill
	movw	%di, -78(%rsp)          # 2-byte Spill
	je	.LBB20_49
# %bb.48:                               # %if.then381
	movw	-76(%rsp), %ax          # 2-byte Reload
	movw	-78(%rsp), %cx          # 2-byte Reload
	cmpw	%cx, %ax
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_49:                              # %if.end387
                                        #   in Loop: Header=BB20_25 Depth=1
	movl	76(%rsp), %eax          # 4-byte Reload
	addl	$6, %eax
	movl	72(%rsp), %ecx          # 4-byte Reload
	addl	$6, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4901, 164(%rsp)        # imm = 0x1325
	movl	%ecx, %eax
	movl	%eax, %r8d
	movb	(%rsi,%r8), %r9b
	movl	$4907, 164(%rsp)        # imm = 0x132B
	cmpb	%r9b, %dil
	movb	%dil, -79(%rsp)         # 1-byte Spill
	movq	%rdx, -88(%rsp)         # 8-byte Spill
	movq	%r8, -96(%rsp)          # 8-byte Spill
	movb	%r9b, -97(%rsp)         # 1-byte Spill
	je	.LBB20_51
# %bb.50:                               # %if.then398
	movb	-79(%rsp), %al          # 1-byte Reload
	movb	-97(%rsp), %cl          # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_51:                              # %if.end404
                                        #   in Loop: Header=BB20_25 Depth=1
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	-88(%rsp), %rcx         # 8-byte Reload
	movw	(%rax,%rcx,2), %dx
	movl	$4909, 164(%rsp)        # imm = 0x132D
	movq	-96(%rsp), %rsi         # 8-byte Reload
	movw	(%rax,%rsi,2), %di
	movl	$4918, 164(%rsp)        # imm = 0x1336
	cmpw	%di, %dx
	movw	%dx, -100(%rsp)         # 2-byte Spill
	movw	%di, -102(%rsp)         # 2-byte Spill
	je	.LBB20_53
# %bb.52:                               # %if.then413
	movw	-100(%rsp), %ax         # 2-byte Reload
	movw	-102(%rsp), %cx         # 2-byte Reload
	cmpw	%cx, %ax
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_53:                              # %if.end419
                                        #   in Loop: Header=BB20_25 Depth=1
	movl	76(%rsp), %eax          # 4-byte Reload
	addl	$7, %eax
	movl	72(%rsp), %ecx          # 4-byte Reload
	addl	$7, %ecx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$4921, 164(%rsp)        # imm = 0x1339
	movl	%ecx, %eax
	movl	%eax, %r8d
	movb	(%rsi,%r8), %r9b
	movl	$4927, 164(%rsp)        # imm = 0x133F
	cmpb	%r9b, %dil
	movb	%dil, -103(%rsp)        # 1-byte Spill
	movq	%rdx, -112(%rsp)        # 8-byte Spill
	movq	%r8, -120(%rsp)         # 8-byte Spill
	movb	%r9b, -121(%rsp)        # 1-byte Spill
	je	.LBB20_55
# %bb.54:                               # %if.then430
	movb	-103(%rsp), %al         # 1-byte Reload
	movb	-121(%rsp), %cl         # 1-byte Reload
	cmpb	%cl, %al
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_55:                              # %if.end436
                                        #   in Loop: Header=BB20_25 Depth=1
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	-112(%rsp), %rcx        # 8-byte Reload
	movw	(%rax,%rcx,2), %dx
	movl	$4929, 164(%rsp)        # imm = 0x1341
	movq	-120(%rsp), %rsi        # 8-byte Reload
	movw	(%rax,%rsi,2), %di
	movl	$4940, 164(%rsp)        # imm = 0x134C
	cmpw	%di, %dx
	movw	%dx, -124(%rsp)         # 2-byte Spill
	movw	%di, -126(%rsp)         # 2-byte Spill
	je	.LBB20_57
# %bb.56:                               # %if.then445
	movw	-124(%rsp), %ax         # 2-byte Reload
	movw	-126(%rsp), %cx         # 2-byte Reload
	cmpw	%cx, %ax
	seta	%dl
	movb	%dl, 121(%rsp)          # 1-byte Spill
	jmp	.LBB20_58
.LBB20_57:                              # %if.end451
                                        #   in Loop: Header=BB20_25 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	xorl	%eax, %eax
	movl	76(%rsp), %edx          # 4-byte Reload
	addl	$8, %edx
	movl	72(%rsp), %esi          # 4-byte Reload
	addl	$8, %esi
	movl	148(%rsp), %edi         # 4-byte Reload
	cmpl	%edi, %edx
	cmovbl	%eax, %edi
	subl	%edi, %edx
	movl	148(%rsp), %edi         # 4-byte Reload
	cmpl	%edi, %esi
	cmovbl	%eax, %edi
	subl	%edi, %esi
	movl	80(%rsp), %eax          # 4-byte Reload
	addl	$-8, %eax
	movq	152(%rsp), %r8          # 8-byte Reload
	movl	(%r8), %edi
	movl	$4942, 164(%rsp)        # imm = 0x134E
	addl	$-1, %edi
	movl	%edi, (%r8)
	movl	$4988, 164(%rsp)        # imm = 0x137C
	movl	80(%rsp), %edi          # 4-byte Reload
	cmpl	$7, %edi
	movl	%eax, 84(%rsp)          # 4-byte Spill
	movl	%esi, 92(%rsp)          # 4-byte Spill
	movl	%edx, 88(%rsp)          # 4-byte Spill
	movb	%cl, 121(%rsp)          # 1-byte Spill
	jg	.LBB20_25
.LBB20_58:                              # %cleanup
	movb	121(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	addq	$168, %rsp
	popq	%rbx
	retq
.Lfunc_end20:
	.size	mainGtU, .Lfunc_end20-mainGtU
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream
.LCPI21_0:
	.quad	4636737291354636288     # double 100
.LCPI21_1:
	.quad	4607182418800017408     # double 1
.LCPI21_2:
	.quad	4620693217682128896     # double 8
.LCPI21_3:
	.quad	4859383997932765184     # double 72057594037927936
.LCPI21_4:
	.quad	4643211215818981376     # double 256
.LCPI21_5:
	.quad	4679240012837945344     # double 65536
.LCPI21_6:
	.quad	4715268809856909312     # double 16777216
.LCPI21_7:
	.quad	4751297606875873280     # double 4294967296
.LCPI21_8:
	.quad	4787326403894837248     # double 1099511627776
.LCPI21_9:
	.quad	4823355200913801216     # double 281474976710656
	.text
	.globl	compressStream
	.p2align	4, 0x90
	.type	compressStream,@function
compressStream:                         # @compressStream
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$5336, %rsp             # imm = 0x14D8
	.cfi_def_cfa_offset 5392
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	leaq	300(%rsp), %rax
	leaq	296(%rsp), %rcx
	leaq	304(%rsp), %rdx
	leaq	308(%rsp), %r8
	leaq	312(%rsp), %r9
	leaq	316(%rsp), %r10
	leaq	320(%rsp), %r11
	movl	$9999, 5332(%rsp)       # imm = 0x270F
	movq	%rax, %rbx
	movl	blockSize100k, %ebp
	movl	$4989, 5332(%rsp)       # imm = 0x137D
	movl	verbosity, %r14d
	movl	$4990, 5332(%rsp)       # imm = 0x137E
	movl	workFactor, %r15d
	movl	$4994, 5332(%rsp)       # imm = 0x1382
	movl	%edi, 204(%rsp)         # 4-byte Spill
	movq	%rax, %rdi
	movl	%esi, 200(%rsp)         # 4-byte Spill
	movq	%rdx, 192(%rsp)         # 8-byte Spill
	movl	%ebp, %edx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	movl	%r14d, %ecx
	movq	%r8, 176(%rsp)          # 8-byte Spill
	movl	%r15d, %r8d
	movq	%r11, 168(%rsp)         # 8-byte Spill
	movq	%r10, 160(%rsp)         # 8-byte Spill
	movq	%r9, 152(%rsp)          # 8-byte Spill
	movq	%rbx, 144(%rsp)         # 8-byte Spill
	callq	BZ2_bzWriteOpen
	movl	300(%rsp), %ecx
	movl	$4997, 5332(%rsp)       # imm = 0x1385
	cmpl	$0, %ecx
	movq	%rax, 136(%rsp)         # 8-byte Spill
	jne	.LBB21_16
# %bb.1:                                # %if.end
	movl	verbosity, %eax
	movl	$5000, 5332(%rsp)       # imm = 0x1388
	cmpl	$1, %eax
	jle	.LBB21_3
# %bb.2:                                # %if.then2
	movl	$10, %edi
	movq	stderr, %rsi
	movl	$5023, 5332(%rsp)       # imm = 0x139F
	callq	fputc
	movl	%eax, 132(%rsp)         # 4-byte Spill
.LBB21_3:                               # %if.end4
	movl	204(%rsp), %edi         # 4-byte Reload
	callq	spec_getc
	cmpl	$-1, %eax
	movl	%eax, 128(%rsp)         # 4-byte Spill
	je	.LBB21_9
# %bb.4:                                # %if.end7.preheader
	movl	128(%rsp), %eax         # 4-byte Reload
	movl	%eax, 124(%rsp)         # 4-byte Spill
	jmp	.LBB21_6
.LBB21_5:                               # %while.cond
                                        #   in Loop: Header=BB21_6 Depth=1
	movl	204(%rsp), %edi         # 4-byte Reload
	callq	spec_getc
	cmpl	$-1, %eax
	movl	%eax, 124(%rsp)         # 4-byte Spill
	je	.LBB21_9
.LBB21_6:                               # %if.end7
                                        # =>This Inner Loop Header: Depth=1
	movl	124(%rsp), %eax         # 4-byte Reload
	movb	%al, %cl
	movzbl	%cl, %edi
	movl	204(%rsp), %esi         # 4-byte Reload
	callq	spec_ungetc
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	movq	168(%rsp), %rdi         # 8-byte Reload
	movl	204(%rsp), %ecx         # 4-byte Reload
	movl	%eax, 120(%rsp)         # 4-byte Spill
	callq	spec_fread
	cmpl	$0, %eax
	movl	%eax, 116(%rsp)         # 4-byte Spill
	jle	.LBB21_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB21_6 Depth=1
	leaq	300(%rsp), %rdi
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movl	116(%rsp), %ecx         # 4-byte Reload
	callq	BZ2_bzWrite
.LBB21_8:                               # %if.end12
                                        #   in Loop: Header=BB21_6 Depth=1
	movl	300(%rsp), %eax
	movl	$5029, 5332(%rsp)       # imm = 0x13A5
	cmpl	$0, %eax
	je	.LBB21_5
	jmp	.LBB21_16
.LBB21_9:                               # %while.end
	leaq	300(%rsp), %rdi
	xorl	%edx, %edx
	leaq	316(%rsp), %rcx
	leaq	312(%rsp), %r8
	leaq	308(%rsp), %r9
	leaq	304(%rsp), %rax
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	movl	300(%rsp), %edx
	movl	$5034, 5332(%rsp)       # imm = 0x13AA
	cmpl	$0, %edx
	jne	.LBB21_16
# %bb.10:                               # %if.end21
	movl	200(%rsp), %eax         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB21_12
# %bb.11:                               # %if.then23
	movl	$0, outputHandleJustInCase
	movl	$5036, 5332(%rsp)       # imm = 0x13AC
.LBB21_12:                              # %if.end27
	movl	$0, outputHandleJustInCase
	movl	$5037, 5332(%rsp)       # imm = 0x13AD
	movl	verbosity, %eax
	movl	$5040, 5332(%rsp)       # imm = 0x13B0
	cmpl	$0, %eax
	jle	.LBB21_21
# %bb.13:                               # %if.then32
	movl	316(%rsp), %eax
	movl	$5041, 5332(%rsp)       # imm = 0x13B1
	movl	312(%rsp), %ecx
	movl	$5045, 5332(%rsp)       # imm = 0x13B5
	movl	%ecx, %edx
	orl	%eax, %edx
	cmpl	$0, %edx
	movl	%eax, 112(%rsp)         # 4-byte Spill
	movl	%ecx, 108(%rsp)         # 4-byte Spill
	jne	.LBB21_15
# %bb.14:                               # %if.then35
	movl	$21, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.1.16, %rdi
	movq	stderr, %rcx
	movl	$5063, 5332(%rsp)       # imm = 0x13C7
	callq	fwrite
	movq	%rax, 96(%rsp)          # 8-byte Spill
	jmp	.LBB21_21
.LBB21_15:                              # %if.else
	leaq	216(%rsp), %rsi
	movsd	.LCPI21_3(%rip), %xmm0  # xmm0 = mem[0],zero
	leaq	256(%rsp), %rax
	leaq	224(%rsp), %rcx
	movl	108(%rsp), %edx         # 4-byte Reload
	shrl	$24, %edx
	movb	%dl, %dil
	movb	%dil, 223(%rsp)
	movl	$5067, 5332(%rsp)       # imm = 0x13CB
	movl	108(%rsp), %r8d         # 4-byte Reload
	shrl	$16, %r8d
	movb	%r8b, %dil
	movb	%dil, 222(%rsp)
	movl	$5071, 5332(%rsp)       # imm = 0x13CF
	movl	108(%rsp), %r8d         # 4-byte Reload
	shrl	$8, %r8d
	movb	%r8b, %r9b
	movb	%r9b, 221(%rsp)
	movl	$5074, 5332(%rsp)       # imm = 0x13D2
	movl	108(%rsp), %r8d         # 4-byte Reload
	movb	%r8b, %r10b
	movb	%r10b, 220(%rsp)
	movl	$5078, 5332(%rsp)       # imm = 0x13D6
	movl	112(%rsp), %r11d        # 4-byte Reload
	shrl	$24, %r11d
	movb	%r11b, %bl
	movb	%bl, 219(%rsp)
	movl	$5082, 5332(%rsp)       # imm = 0x13DA
	movl	112(%rsp), %ebp         # 4-byte Reload
	shrl	$16, %ebp
	movb	%bpl, %bl
	movb	%bl, 218(%rsp)
	movl	$5086, 5332(%rsp)       # imm = 0x13DE
	movl	112(%rsp), %ebp         # 4-byte Reload
	shrl	$8, %ebp
	movb	%bpl, %r14b
	movb	%r14b, 217(%rsp)
	movl	$5088, 5332(%rsp)       # imm = 0x13E0
	movl	112(%rsp), %ebp         # 4-byte Reload
	movb	%bpl, %r15b
	movb	%r15b, 216(%rsp)
	movl	$5089, 5332(%rsp)       # imm = 0x13E1
	movl	308(%rsp), %r12d
	movl	$5090, 5332(%rsp)       # imm = 0x13E2
	movl	304(%rsp), %r13d
	movl	$5094, 5332(%rsp)       # imm = 0x13E6
	movl	%r13d, %r8d
	shrl	$24, %r8d
	movb	%r8b, %bpl
	movb	%bpl, 215(%rsp)
	movl	$5098, 5332(%rsp)       # imm = 0x13EA
	movl	%r13d, %ebp
	shrl	$16, %ebp
                                        # kill: def %bpl killed %bpl killed %ebp
	movb	%bpl, 214(%rsp)
	movl	$5102, 5332(%rsp)       # imm = 0x13EE
	movl	%edx, 92(%rsp)          # 4-byte Spill
	movl	%r13d, %edx
	shrl	$8, %edx
                                        # kill: def %dl killed %dl killed %edx
	movb	%dl, 213(%rsp)
	movl	$5105, 5332(%rsp)       # imm = 0x13F1
                                        # kill: def %r13b killed %r13b killed %r13d
	movb	%r13b, 212(%rsp)
	movl	$5109, 5332(%rsp)       # imm = 0x13F5
	movb	%dl, 91(%rsp)           # 1-byte Spill
	movl	%r12d, %edx
	shrl	$24, %edx
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movb	%dl, %al
	movb	%al, 211(%rsp)
	movl	$5113, 5332(%rsp)       # imm = 0x13F9
	movl	%r12d, %eax
	shrl	$16, %eax
                                        # kill: def %al killed %al killed %eax
	movb	%al, 210(%rsp)
	movl	$5117, 5332(%rsp)       # imm = 0x13FD
	movb	%al, 79(%rsp)           # 1-byte Spill
	movl	%r12d, %eax
	shrl	$8, %eax
                                        # kill: def %al killed %al killed %eax
	movb	%al, 209(%rsp)
	movl	$5119, 5332(%rsp)       # imm = 0x13FF
                                        # kill: def %r12b killed %r12b killed %r12d
	movb	%r12b, 208(%rsp)
	movl	$5168, 5332(%rsp)       # imm = 0x1430
	movzbl	%r15b, %r15d
	cvtsi2sdl	%r15d, %xmm1
	movzbl	%r14b, %r15d
	cvtsi2sdl	%r15d, %xmm2
	movsd	.LCPI21_4(%rip), %xmm3  # xmm3 = mem[0],zero
	mulsd	%xmm3, %xmm2
	addsd	%xmm1, %xmm2
	movzbl	%bl, %r15d
	cvtsi2sdl	%r15d, %xmm1
	movsd	.LCPI21_5(%rip), %xmm4  # xmm4 = mem[0],zero
	mulsd	%xmm4, %xmm1
	addsd	%xmm2, %xmm1
	cvtsi2sdl	%r11d, %xmm2
	movsd	.LCPI21_6(%rip), %xmm5  # xmm5 = mem[0],zero
	mulsd	%xmm5, %xmm2
	addsd	%xmm1, %xmm2
	movzbl	%r10b, %r11d
	cvtsi2sdl	%r11d, %xmm1
	movsd	.LCPI21_7(%rip), %xmm6  # xmm6 = mem[0],zero
	mulsd	%xmm6, %xmm1
	addsd	%xmm2, %xmm1
	movzbl	%r9b, %r11d
	cvtsi2sdl	%r11d, %xmm2
	movsd	.LCPI21_8(%rip), %xmm7  # xmm7 = mem[0],zero
	mulsd	%xmm7, %xmm2
	addsd	%xmm1, %xmm2
	movzbl	%dil, %r11d
	cvtsi2sdl	%r11d, %xmm1
	movsd	.LCPI21_9(%rip), %xmm8  # xmm8 = mem[0],zero
	mulsd	%xmm8, %xmm1
	addsd	%xmm2, %xmm1
	movl	92(%rsp), %r11d         # 4-byte Reload
	cvtsi2sdl	%r11d, %xmm2
	movsd	.LCPI21_3(%rip), %xmm9  # xmm9 = mem[0],zero
	mulsd	%xmm9, %xmm2
	addsd	%xmm1, %xmm2
	movzbl	%r12b, %r15d
	cvtsi2sdl	%r15d, %xmm1
	movzbl	%al, %r15d
	cvtsi2sdl	%r15d, %xmm9
	mulsd	%xmm3, %xmm9
	addsd	%xmm1, %xmm9
	movb	79(%rsp), %al           # 1-byte Reload
	movzbl	%al, %r15d
	cvtsi2sdl	%r15d, %xmm1
	mulsd	%xmm4, %xmm1
	addsd	%xmm9, %xmm1
	cvtsi2sdl	%edx, %xmm3
	mulsd	%xmm5, %xmm3
	addsd	%xmm1, %xmm3
	movzbl	%r13b, %edx
	cvtsi2sdl	%edx, %xmm1
	mulsd	%xmm6, %xmm1
	addsd	%xmm3, %xmm1
	movb	91(%rsp), %dil          # 1-byte Reload
	movzbl	%dil, %edx
	cvtsi2sdl	%edx, %xmm3
	mulsd	%xmm7, %xmm3
	addsd	%xmm1, %xmm3
	movzbl	%bpl, %edx
	cvtsi2sdl	%edx, %xmm1
	mulsd	%xmm8, %xmm1
	addsd	%xmm3, %xmm1
	cvtsi2sdl	%r8d, %xmm3
	mulsd	%xmm0, %xmm3
	addsd	%xmm1, %xmm3
	movq	80(%rsp), %rdi          # 8-byte Reload
	movsd	%xmm2, 64(%rsp)         # 8-byte Spill
	movsd	%xmm3, 56(%rsp)         # 8-byte Spill
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	callq	uInt64_toAscii
	leaq	208(%rsp), %rsi
	movq	48(%rsp), %rdi          # 8-byte Reload
	callq	uInt64_toAscii
	movabsq	$.L.str.2.17, %rsi
	movsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movsd	.LCPI21_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movsd	.LCPI21_2(%rip), %xmm2  # xmm2 = mem[0],zero
	movq	stderr, %rdi
	movl	$5183, 5332(%rsp)       # imm = 0x143F
	movsd	64(%rsp), %xmm3         # 8-byte Reload
                                        # xmm3 = mem[0],zero
	movsd	56(%rsp), %xmm4         # 8-byte Reload
                                        # xmm4 = mem[0],zero
	divsd	%xmm4, %xmm3
	mulsd	%xmm2, %xmm4
	movsd	64(%rsp), %xmm2         # 8-byte Reload
                                        # xmm2 = mem[0],zero
	divsd	%xmm2, %xmm4
	movsd	56(%rsp), %xmm5         # 8-byte Reload
                                        # xmm5 = mem[0],zero
	divsd	%xmm2, %xmm5
	subsd	%xmm5, %xmm1
	mulsd	%xmm0, %xmm1
	movaps	%xmm3, %xmm0
	movsd	%xmm1, 40(%rsp)         # 8-byte Spill
	movaps	%xmm4, %xmm1
	movsd	40(%rsp), %xmm2         # 8-byte Reload
                                        # xmm2 = mem[0],zero
	movq	80(%rsp), %rdx          # 8-byte Reload
	movq	48(%rsp), %rcx          # 8-byte Reload
	movb	$3, %al
	callq	fprintf
	movl	%eax, 36(%rsp)          # 4-byte Spill
	jmp	.LBB21_21
.LBB21_16:                              # %errhandler
	movq	%rsp, %rax
	leaq	304(%rsp), %rcx
	movq	%rcx, (%rax)
	leaq	296(%rsp), %rdi
	movl	$1, %edx
	leaq	316(%rsp), %rcx
	leaq	312(%rsp), %r8
	leaq	308(%rsp), %r9
	movq	136(%rsp), %rsi         # 8-byte Reload
	callq	BZ2_bzWriteClose64
	movl	300(%rsp), %edx
	movl	$5222, 5332(%rsp)       # imm = 0x1466
	movl	%edx, %r10d
	subl	$-9, %r10d
	movl	%edx, 32(%rsp)          # 4-byte Spill
	movl	%r10d, 28(%rsp)         # 4-byte Spill
	je	.LBB21_17
	jmp	.LBB21_23
.LBB21_23:                              # %errhandler
	movl	32(%rsp), %eax          # 4-byte Reload
	subl	$-6, %eax
	movl	%eax, 24(%rsp)          # 4-byte Spill
	je	.LBB21_19
	jmp	.LBB21_24
.LBB21_24:                              # %errhandler
	movl	32(%rsp), %eax          # 4-byte Reload
	subl	$-3, %eax
	movl	%eax, 20(%rsp)          # 4-byte Spill
	je	.LBB21_18
	jmp	.LBB21_20
.LBB21_17:                              # %sw.bb
	callq	configError
	jmp	.LBB21_22
.LBB21_18:                              # %sw.bb49
	callq	outOfMemory
	jmp	.LBB21_22
.LBB21_19:                              # %errhandler_io
	callq	ioError
	jmp	.LBB21_22
.LBB21_20:                              # %sw.default
	movabsq	$.L.str.3.18, %rdi
	callq	panic
	jmp	.LBB21_22
.LBB21_21:                              # %cleanup
	addq	$5336, %rsp             # imm = 0x14D8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB21_22:                              # %UnifiedUnreachableBlock
.Lfunc_end21:
	.size	compressStream, .Lfunc_end21-compressStream
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii
	.type	uInt64_toAscii,@function
uInt64_toAscii:                         # @uInt64_toAscii
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$136, %rsp
	.cfi_def_cfa_offset 192
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	xorl	%eax, %eax
	movl	%eax, %ecx
	leaq	96(%rsp), %rdx
	movl	$9999, 132(%rsp)        # imm = 0x270F
	movq	(%rsi), %rsi
	movl	$5290, 132(%rsp)        # imm = 0x14AA
	movl	%esi, %eax
	movq	%rsi, %r8
	shrq	$8, %r8
	movl	%r8d, %r9d
	movq	%rsi, %r8
	shrq	$16, %r8
	movl	%r8d, %r10d
	movq	%rsi, %r8
	shrq	$24, %r8
	movl	%r8d, %r11d
	movq	%rsi, %r8
	shrq	$32, %r8
	movl	%r8d, %ebx
	movq	%rsi, %r8
	shrq	$40, %r8
	movl	%r8d, %ebp
	movq	%rsi, %r8
	shrq	$48, %r8
	movl	%r8d, %r14d
	shrq	$56, %rsi
	movb	%sil, %r15b
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%rdi, 80(%rsp)          # 8-byte Spill
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movb	%r15b, 71(%rsp)         # 1-byte Spill
	movl	%r9d, 64(%rsp)          # 4-byte Spill
	movl	%r10d, 60(%rsp)         # 4-byte Spill
	movl	%r11d, 56(%rsp)         # 4-byte Spill
	movl	%ebx, 52(%rsp)          # 4-byte Spill
	movl	%ebp, 48(%rsp)          # 4-byte Spill
	movl	%r14d, 44(%rsp)         # 4-byte Spill
	movl	%eax, 40(%rsp)          # 4-byte Spill
.LBB22_1:                               # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	40(%rsp), %eax          # 4-byte Reload
	movl	64(%rsp), %ecx          # 4-byte Reload
	movl	60(%rsp), %edx          # 4-byte Reload
	movl	56(%rsp), %esi          # 4-byte Reload
	movl	52(%rsp), %edi          # 4-byte Reload
	movl	48(%rsp), %r8d          # 4-byte Reload
	movl	44(%rsp), %r9d          # 4-byte Reload
	movb	71(%rsp), %r10b         # 1-byte Reload
	movq	72(%rsp), %r11          # 8-byte Reload
	movl	$10, %ebx
	movb	$10, %bpl
	movl	%eax, 36(%rsp)          # 4-byte Spill
	movzbw	%r10b, %ax
	divb	%bpl
	movb	%al, 35(%rsp)           # 1-byte Spill
	movzbw	%r10b, %ax
	divb	%bpl
	shrw	$8, %ax
	movb	%al, %bpl
	movzbl	%bpl, %r14d
	shll	$8, %r14d
	andl	$255, %r9d
	orl	%r9d, %r14d
	movl	%r14d, %eax
	xorl	%r9d, %r9d
	movl	%edx, 28(%rsp)          # 4-byte Spill
	movl	%r9d, %edx
	divl	%ebx
	movl	%eax, 24(%rsp)          # 4-byte Spill
	movl	%r14d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	divl	%ebx
	shll	$8, %edx
	andl	$255, %r8d
	orl	%r8d, %edx
	movl	%edx, %eax
	xorl	%r8d, %r8d
	movl	%edx, 20(%rsp)          # 4-byte Spill
	movl	%r8d, %edx
	divl	%ebx
	movl	20(%rsp), %r8d          # 4-byte Reload
	movl	%eax, 16(%rsp)          # 4-byte Spill
	movl	%r8d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	divl	%ebx
	shll	$8, %edx
	andl	$255, %edi
	orl	%edi, %edx
	movl	%edx, %eax
	xorl	%edi, %edi
	movl	%edx, 12(%rsp)          # 4-byte Spill
	movl	%edi, %edx
	divl	%ebx
	movl	12(%rsp), %edi          # 4-byte Reload
	movl	%eax, 8(%rsp)           # 4-byte Spill
	movl	%edi, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	divl	%ebx
	shll	$8, %edx
	andl	$255, %esi
	orl	%esi, %edx
	movl	%edx, %eax
	xorl	%esi, %esi
	movl	%edx, 4(%rsp)           # 4-byte Spill
	movl	%esi, %edx
	divl	%ebx
	movl	4(%rsp), %esi           # 4-byte Reload
	movl	%eax, (%rsp)            # 4-byte Spill
	movl	%esi, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	divl	%ebx
	shll	$8, %edx
	movl	28(%rsp), %r9d          # 4-byte Reload
	andl	$255, %r9d
	orl	%r9d, %edx
	movl	%edx, %eax
	xorl	%r9d, %r9d
	movl	%edx, -4(%rsp)          # 4-byte Spill
	movl	%r9d, %edx
	divl	%ebx
	movl	-4(%rsp), %r9d          # 4-byte Reload
	movl	%eax, -8(%rsp)          # 4-byte Spill
	movl	%r9d, %eax
	xorl	%r14d, %r14d
	movl	%r14d, %edx
	divl	%ebx
	shll	$8, %edx
	andl	$255, %ecx
	orl	%ecx, %edx
	movl	%edx, %eax
	xorl	%ecx, %ecx
	movl	%edx, -12(%rsp)         # 4-byte Spill
	movl	%ecx, %edx
	divl	%ebx
	movl	-12(%rsp), %ecx         # 4-byte Reload
	movl	%eax, -16(%rsp)         # 4-byte Spill
	movl	%ecx, %eax
	xorl	%r14d, %r14d
	movl	%r14d, %edx
	divl	%ebx
	shll	$8, %edx
	movl	36(%rsp), %r14d         # 4-byte Reload
	andl	$255, %r14d
	orl	%r14d, %edx
	movl	%edx, %eax
	xorl	%r14d, %r14d
	movl	%edx, -20(%rsp)         # 4-byte Spill
	movl	%r14d, %edx
	divl	%ebx
	movl	-20(%rsp), %r14d        # 4-byte Reload
	movl	%eax, -24(%rsp)         # 4-byte Spill
	movl	%r14d, %eax
	xorl	%r15d, %r15d
	movl	%r15d, %edx
	divl	%ebx
	movb	%dl, %bpl
	orb	$48, %bpl
	movb	%bpl, 96(%rsp,%r11)
	movl	$5304, 132(%rsp)        # imm = 0x14B8
	movq	%r11, %r12
	addq	$1, %r12
	movl	16(%rsp), %edx          # 4-byte Reload
	movl	24(%rsp), %ebx          # 4-byte Reload
	orl	%ebx, %edx
	movl	8(%rsp), %r15d          # 4-byte Reload
	orl	%r15d, %edx
	movl	(%rsp), %r13d           # 4-byte Reload
	orl	%r13d, %edx
	movl	-8(%rsp), %ecx          # 4-byte Reload
	orl	%ecx, %edx
	movl	-16(%rsp), %ecx         # 4-byte Reload
	orl	%ecx, %edx
	movl	-24(%rsp), %ecx         # 4-byte Reload
	orl	%ecx, %edx
	movb	%dl, %bpl
	cmpb	$0, %bpl
	setne	%bpl
	cmpb	$9, %r10b
	seta	%r10b
	orb	%bpl, %r10b
	testb	$1, %r10b
	movq	%r12, %rsi
	movb	35(%rsp), %r10b         # 1-byte Reload
	movl	16(%rsp), %edx          # 4-byte Reload
	movl	-8(%rsp), %ecx          # 4-byte Reload
	movl	-16(%rsp), %edi         # 4-byte Reload
	movl	-24(%rsp), %r8d         # 4-byte Reload
	movq	%r11, -32(%rsp)         # 8-byte Spill
	movl	%edi, 64(%rsp)          # 4-byte Spill
	movl	%r8d, 40(%rsp)          # 4-byte Spill
	movl	%r13d, 56(%rsp)         # 4-byte Spill
	movq	%rsi, 72(%rsp)          # 8-byte Spill
	movl	%ecx, 60(%rsp)          # 4-byte Spill
	movq	%r12, -40(%rsp)         # 8-byte Spill
	movl	%ebx, 44(%rsp)          # 4-byte Spill
	movl	%r15d, 52(%rsp)         # 4-byte Spill
	movb	%r10b, 71(%rsp)         # 1-byte Spill
	movl	%edx, 48(%rsp)          # 4-byte Spill
	jne	.LBB22_1
# %bb.2:                                # %do.end
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %edx
	movq	-40(%rsp), %rsi         # 8-byte Reload
	andq	%rdx, %rsi
	movq	80(%rsp), %rdi          # 8-byte Reload
	movb	$0, (%rdi,%rsi)
	movl	$5328, 132(%rsp)        # imm = 0x14D0
	movq	-32(%rsp), %rsi         # 8-byte Reload
	addq	$1, %rsi
	movq	%rsi, %r8
	andq	%rdx, %r8
	cmpq	$32, %r8
	movq	%rsi, -48(%rsp)         # 8-byte Spill
	movq	%r8, -56(%rsp)          # 8-byte Spill
	movq	%rcx, -64(%rsp)         # 8-byte Spill
	jb	.LBB22_7
# %bb.3:                                # %vector.scevcheck
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %edx
	movq	-56(%rsp), %rsi         # 8-byte Reload
	addq	$-1, %rsi
	movq	-32(%rsp), %rdi         # 8-byte Reload
	movl	%edi, %eax
	movl	%esi, %r8d
	movl	%eax, %r9d
	subl	%r8d, %r9d
	cmpl	%eax, %r9d
	setg	%r10b
	cmpq	%rdx, %rsi
	seta	%r11b
	orb	%r11b, %r10b
	testb	$1, %r10b
	movq	%rcx, -64(%rsp)         # 8-byte Spill
	jne	.LBB22_7
# %bb.4:                                # %vector.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-48(%rsp), %rdx         # 8-byte Reload
	andq	$31, %rdx
	movq	-56(%rsp), %rsi         # 8-byte Reload
	subq	%rdx, %rsi
	movq	%rsi, -72(%rsp)         # 8-byte Spill
	movq	%rdx, -80(%rsp)         # 8-byte Spill
	movq	%rcx, -88(%rsp)         # 8-byte Spill
.LBB22_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-88(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movq	-32(%rsp), %rdx         # 8-byte Reload
	movl	%edx, %esi
	subl	%ecx, %esi
	movslq	%esi, %rdi
	movups	81(%rsp,%rdi), %xmm0
	movl	$5329, 132(%rsp)        # imm = 0x14D1
	xorps	%xmm1, %xmm1
	movaps	%xmm0, %xmm2
	punpcklbw	%xmm1, %xmm2    # xmm2 = xmm2[0],xmm1[0],xmm2[1],xmm1[1],xmm2[2],xmm1[2],xmm2[3],xmm1[3],xmm2[4],xmm1[4],xmm2[5],xmm1[5],xmm2[6],xmm1[6],xmm2[7],xmm1[7]
	pshufd	$78, %xmm2, %xmm2       # xmm2 = xmm2[2,3,0,1]
	pshuflw	$27, %xmm2, %xmm2       # xmm2 = xmm2[3,2,1,0,4,5,6,7]
	pshufhw	$27, %xmm2, %xmm2       # xmm2 = xmm2[0,1,2,3,7,6,5,4]
	punpckhbw	%xmm1, %xmm0    # xmm0 = xmm0[8],xmm1[8],xmm0[9],xmm1[9],xmm0[10],xmm1[10],xmm0[11],xmm1[11],xmm0[12],xmm1[12],xmm0[13],xmm1[13],xmm0[14],xmm1[14],xmm0[15],xmm1[15]
	pshufd	$78, %xmm0, %xmm0       # xmm0 = xmm0[2,3,0,1]
	pshuflw	$27, %xmm0, %xmm0       # xmm0 = xmm0[3,2,1,0,4,5,6,7]
	pshufhw	$27, %xmm0, %xmm0       # xmm0 = xmm0[0,1,2,3,7,6,5,4]
	packuswb	%xmm2, %xmm0
	movups	65(%rsp,%rdi), %xmm2
	movl	$5333, 132(%rsp)        # imm = 0x14D5
	movaps	%xmm2, %xmm3
	punpcklbw	%xmm1, %xmm3    # xmm3 = xmm3[0],xmm1[0],xmm3[1],xmm1[1],xmm3[2],xmm1[2],xmm3[3],xmm1[3],xmm3[4],xmm1[4],xmm3[5],xmm1[5],xmm3[6],xmm1[6],xmm3[7],xmm1[7]
	pshufd	$78, %xmm3, %xmm3       # xmm3 = xmm3[2,3,0,1]
	pshuflw	$27, %xmm3, %xmm3       # xmm3 = xmm3[3,2,1,0,4,5,6,7]
	pshufhw	$27, %xmm3, %xmm3       # xmm3 = xmm3[0,1,2,3,7,6,5,4]
	punpckhbw	%xmm1, %xmm2    # xmm2 = xmm2[8],xmm1[8],xmm2[9],xmm1[9],xmm2[10],xmm1[10],xmm2[11],xmm1[11],xmm2[12],xmm1[12],xmm2[13],xmm1[13],xmm2[14],xmm1[14],xmm2[15],xmm1[15]
	pshufd	$78, %xmm2, %xmm1       # xmm1 = xmm2[2,3,0,1]
	pshuflw	$27, %xmm1, %xmm1       # xmm1 = xmm1[3,2,1,0,4,5,6,7]
	pshufhw	$27, %xmm1, %xmm1       # xmm1 = xmm1[0,1,2,3,7,6,5,4]
	packuswb	%xmm3, %xmm1
	movq	80(%rsp), %rdi          # 8-byte Reload
	movdqu	%xmm0, (%rdi,%rax)
	movl	$5339, 132(%rsp)        # imm = 0x14DB
	movdqu	%xmm1, 16(%rdi,%rax)
	movl	$5354, 132(%rsp)        # imm = 0x14EA
	addq	$32, %rax
	movq	-72(%rsp), %r8          # 8-byte Reload
	cmpq	%r8, %rax
	movq	%rax, -88(%rsp)         # 8-byte Spill
	jne	.LBB22_5
# %bb.6:                                # %middle.block
	movq	-80(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	movq	-72(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, -64(%rsp)         # 8-byte Spill
	je	.LBB22_12
.LBB22_7:                               # %for.body.preheader
	movq	-64(%rsp), %rax         # 8-byte Reload
	movq	-48(%rsp), %rcx         # 8-byte Reload
	subq	%rax, %rcx
	movq	-56(%rsp), %rdx         # 8-byte Reload
	addq	$-1, %rdx
	andq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, %rcx
	movq	%rax, -96(%rsp)         # 8-byte Spill
	movq	%rdx, -104(%rsp)        # 8-byte Spill
	movq	%rcx, -112(%rsp)        # 8-byte Spill
	je	.LBB22_9
# %bb.8:                                # %for.body.prol
	movq	-32(%rsp), %rax         # 8-byte Reload
	movq	-96(%rsp), %rcx         # 8-byte Reload
	subq	%rcx, %rax
	shlq	$32, %rax
	sarq	$32, %rax
	movb	96(%rsp,%rax), %dl
	movl	$5356, 132(%rsp)        # imm = 0x14EC
	movq	80(%rsp), %rax          # 8-byte Reload
	movb	%dl, (%rax,%rcx)
	movl	$5369, 132(%rsp)        # imm = 0x14F9
	addq	$1, %rcx
	movq	%rcx, -112(%rsp)        # 8-byte Spill
.LBB22_9:                               # %for.body.prol.loopexit
	movq	-112(%rsp), %rax        # 8-byte Reload
	movq	-104(%rsp), %rcx        # 8-byte Reload
	movq	-96(%rsp), %rdx         # 8-byte Reload
	cmpq	%rdx, %rcx
	movq	%rax, -120(%rsp)        # 8-byte Spill
	je	.LBB22_12
# %bb.10:                               # %for.body.preheader.new
	movq	-120(%rsp), %rax        # 8-byte Reload
	movq	%rax, -128(%rsp)        # 8-byte Spill
	jmp	.LBB22_11
.LBB22_11:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-128(%rsp), %rax        # 8-byte Reload
	movq	-32(%rsp), %rcx         # 8-byte Reload
	subq	%rax, %rcx
	shlq	$32, %rcx
	sarq	$32, %rcx
	movb	96(%rsp,%rcx), %dl
	movl	$5371, 132(%rsp)        # imm = 0x14FB
	movq	80(%rsp), %rcx          # 8-byte Reload
	movb	%dl, (%rcx,%rax)
	movl	$5377, 132(%rsp)        # imm = 0x1501
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	-32(%rsp), %rdi         # 8-byte Reload
	subq	%rsi, %rdi
	shlq	$32, %rdi
	sarq	$32, %rdi
	movb	96(%rsp,%rdi), %dl
	movl	$5379, 132(%rsp)        # imm = 0x1503
	movb	%dl, 1(%rcx,%rax)
	movl	$5385, 132(%rsp)        # imm = 0x1509
	addq	$2, %rax
	movq	-56(%rsp), %rsi         # 8-byte Reload
	cmpq	%rsi, %rax
	movq	%rax, -128(%rsp)        # 8-byte Spill
	jne	.LBB22_11
.LBB22_12:                              # %for.end
	addq	$136, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end22:
	.size	uInt64_toAscii, .Lfunc_end22-uInt64_toAscii
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function configError
	.type	configError,@function
configError:                            # @configError
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$24, %rsp
	.cfi_def_cfa_offset 32
	movl	$235, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.17.22, %rdi
	movl	$9999, 20(%rsp)         # imm = 0x270F
	movq	stderr, %rcx
	movl	$5389, 20(%rsp)         # imm = 0x150D
	callq	fwrite
	xorl	%edi, %edi
	movl	$0, exitValue
	movl	$5393, 20(%rsp)         # imm = 0x1511
	movq	%rax, 8(%rsp)           # 8-byte Spill
	callq	exit
.Lfunc_end23:
	.size	configError, .Lfunc_end23-configError
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function outOfMemory
	.type	outOfMemory,@function
outOfMemory:                            # @outOfMemory
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rax
	.cfi_def_cfa_offset 16
	movabsq	$.L.str.16.21, %rsi
	movl	$9999, 4(%rsp)          # imm = 0x270F
	movq	stderr, %rdi
	movl	$5394, 4(%rsp)          # imm = 0x1512
	movq	progName, %rdx
	movl	$5405, 4(%rsp)          # imm = 0x151D
	movb	$0, %al
	callq	fprintf
	movl	%eax, (%rsp)            # 4-byte Spill
	callq	showFileNames
	callq	cleanUpAndFail
.Lfunc_end24:
	.size	outOfMemory, .Lfunc_end24-outOfMemory
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ioError
	.type	ioError,@function
ioError:                                # @ioError
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rax
	.cfi_def_cfa_offset 16
	movabsq	$.L.str.15.20, %rsi
	movl	$9999, 4(%rsp)          # imm = 0x270F
	movq	stderr, %rdi
	movl	$5406, 4(%rsp)          # imm = 0x151E
	movq	progName, %rdx
	movl	$5409, 4(%rsp)          # imm = 0x1521
	movb	$0, %al
	callq	fprintf
	movq	progName, %rdi
	movl	$5418, 4(%rsp)          # imm = 0x152A
	movl	%eax, (%rsp)            # 4-byte Spill
	callq	perror
	callq	showFileNames
	callq	cleanUpAndFail
.Lfunc_end25:
	.size	ioError, .Lfunc_end25-ioError
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function panic
	.type	panic,@function
panic:                                  # @panic
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$24, %rsp
	.cfi_def_cfa_offset 32
	movabsq	$.L.str.10, %rsi
	movl	$9999, 20(%rsp)         # imm = 0x270F
	movq	stderr, %rax
	movl	$5419, 20(%rsp)         # imm = 0x152B
	movq	progName, %rdx
	movl	$5426, 20(%rsp)         # imm = 0x1532
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movq	%rax, %rdi
	movq	8(%rsp), %rcx           # 8-byte Reload
	movb	$0, %al
	callq	fprintf
	movl	%eax, 4(%rsp)           # 4-byte Spill
	callq	showFileNames
	callq	cleanUpAndFail
.Lfunc_end26:
	.size	panic, .Lfunc_end26-panic
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function showFileNames
	.type	showFileNames,@function
showFileNames:                          # @showFileNames
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rax
	.cfi_def_cfa_offset 16
	movl	$9999, 4(%rsp)          # imm = 0x270F
	movb	noisy, %al
	movl	$5429, 4(%rsp)          # imm = 0x1535
	cmpb	$0, %al
	je	.LBB27_2
# %bb.1:                                # %if.then
	movabsq	$outName, %rcx
	movabsq	$inName, %rdx
	movabsq	$.L.str.11.19, %rsi
	movq	stderr, %rdi
	movl	$5437, 4(%rsp)          # imm = 0x153D
	movb	$0, %al
	callq	fprintf
	movl	%eax, (%rsp)            # 4-byte Spill
.LBB27_2:                               # %if.end
	popq	%rax
	retq
.Lfunc_end27:
	.size	showFileNames, .Lfunc_end27-showFileNames
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail
	.type	cleanUpAndFail,@function
cleanUpAndFail:                         # @cleanUpAndFail
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rax
	.cfi_def_cfa_offset 16
	xorl	%edi, %edi
	movl	$9999, 4(%rsp)          # imm = 0x270F
	movl	$0, exitValue
	movl	$5470, 4(%rsp)          # imm = 0x155E
	callq	exit
.Lfunc_end28:
	.size	cleanUpAndFail, .Lfunc_end28-cleanUpAndFail
	.cfi_endproc
                                        # -- End function
	.globl	uncompressStream        # -- Begin function uncompressStream
	.p2align	4, 0x90
	.type	uncompressStream,@function
uncompressStream:                       # @uncompressStream
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$10360, %rsp            # imm = 0x2878
	.cfi_def_cfa_offset 10416
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	leaq	10352(%rsp), %rax
	xorl	%r9d, %r9d
	leaq	320(%rsp), %rcx
	leaq	332(%rsp), %rdx
	leaq	336(%rsp), %r8
	leaq	5344(%rsp), %r10
	leaq	10348(%rsp), %r11
	movl	$9999, 10356(%rsp)      # imm = 0x270F
	movq	%rax, %rbx
	movl	$0, 332(%rsp)
	movl	$5471, 10356(%rsp)      # imm = 0x155F
	movl	verbosity, %ebp
	movl	$5472, 10356(%rsp)      # imm = 0x1560
	movb	smallMode, %r14b
	movl	$5478, 10356(%rsp)      # imm = 0x1566
	movzbl	%r14b, %r15d
	movl	%edi, 316(%rsp)         # 4-byte Spill
	movq	%rax, %rdi
	movl	316(%rsp), %r12d        # 4-byte Reload
	movl	%esi, 312(%rsp)         # 4-byte Spill
	movl	%r12d, %esi
	movq	%rdx, 304(%rsp)         # 8-byte Spill
	movl	%ebp, %edx
	movq	%rcx, 296(%rsp)         # 8-byte Spill
	movl	%r15d, %ecx
	movq	%r8, 288(%rsp)          # 8-byte Spill
	movq	%r11, 280(%rsp)         # 8-byte Spill
	movq	%r10, 272(%rsp)         # 8-byte Spill
	movq	%rbx, 264(%rsp)         # 8-byte Spill
	callq	BZ2_bzReadOpen
	xorl	%ecx, %ecx
	cmpq	$0, %rax
	sete	%r14b
	movl	10352(%rsp), %edx
	movl	$5494, 10356(%rsp)      # imm = 0x1576
	cmpl	$0, %edx
	setne	%r13b
	orb	%r13b, %r14b
	testb	$1, %r14b
	movq	%rax, %rdi
	movq	%rax, 256(%rsp)         # 8-byte Spill
	movq	%rdi, 248(%rsp)         # 8-byte Spill
	movl	%ecx, 244(%rsp)         # 4-byte Spill
	jne	.LBB29_38
# %bb.1:                                # %if.end.preheader
	xorl	%eax, %eax
	movq	256(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 232(%rsp)         # 8-byte Spill
	movl	%eax, 228(%rsp)         # 4-byte Spill
	jmp	.LBB29_2
.LBB29_2:                               # %if.end
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_3 Depth 2
                                        #     Child Loop BB29_15 Depth 2
                                        #     Child Loop BB29_18 Depth 2
                                        #     Child Loop BB29_21 Depth 2
	movl	228(%rsp), %eax         # 4-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	xorl	%edx, %edx
	addl	$1, %eax
	movl	%eax, 224(%rsp)         # 4-byte Spill
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	movl	%edx, 212(%rsp)         # 4-byte Spill
.LBB29_3:                               # %while.cond4
                                        #   Parent Loop BB29_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	212(%rsp), %eax         # 4-byte Reload
	testl	%eax, %eax
	movl	%eax, 208(%rsp)         # 4-byte Spill
	je	.LBB29_4
	jmp	.LBB29_50
.LBB29_50:                              # %while.cond4
                                        #   in Loop: Header=BB29_2 Depth=1
	movl	208(%rsp), %eax         # 4-byte Reload
	subl	$4, %eax
	movq	216(%rsp), %rcx         # 8-byte Reload
	movl	224(%rsp), %edx         # 4-byte Reload
	movl	%eax, 204(%rsp)         # 4-byte Spill
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	movl	%edx, 244(%rsp)         # 4-byte Spill
	je	.LBB29_8
	jmp	.LBB29_38
.LBB29_4:                               # %while.body7
                                        #   in Loop: Header=BB29_3 Depth=2
	leaq	10352(%rsp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	movq	216(%rsp), %rsi         # 8-byte Reload
	movq	272(%rsp), %rdx         # 8-byte Reload
	callq	BZ2_bzRead
	movl	10352(%rsp), %ecx
	movl	$5502, 10356(%rsp)      # imm = 0x157E
	cmpl	$-5, %ecx
	movl	%eax, 200(%rsp)         # 4-byte Spill
	movl	%ecx, 196(%rsp)         # 4-byte Spill
	je	.LBB29_32
# %bb.5:                                # %if.end13
                                        #   in Loop: Header=BB29_3 Depth=2
	movl	196(%rsp), %eax         # 4-byte Reload
	orl	$4, %eax
	cmpl	$4, %eax
	sete	%cl
	movl	200(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%dl
	andb	%cl, %dl
	testb	$1, %dl
	movl	196(%rsp), %esi         # 4-byte Reload
	movl	%esi, 192(%rsp)         # 4-byte Spill
	jne	.LBB29_7
.LBB29_6:                               # %while.cond4.backedge
                                        #   in Loop: Header=BB29_3 Depth=2
	movl	192(%rsp), %eax         # 4-byte Reload
	movl	%eax, 212(%rsp)         # 4-byte Spill
	jmp	.LBB29_3
.LBB29_7:                               # %if.then21
                                        #   in Loop: Header=BB29_3 Depth=2
	movl	$1, %esi
	movq	272(%rsp), %rdi         # 8-byte Reload
	movl	200(%rsp), %edx         # 4-byte Reload
	movl	312(%rsp), %ecx         # 4-byte Reload
	callq	spec_fwrite
	movl	10352(%rsp), %ecx
	movl	$5509, 10356(%rsp)      # imm = 0x1585
	movl	%eax, 188(%rsp)         # 4-byte Spill
	movl	%ecx, 192(%rsp)         # 4-byte Spill
	jmp	.LBB29_6
.LBB29_8:                               # %if.end28
                                        #   in Loop: Header=BB29_2 Depth=1
	leaq	10352(%rsp), %rdi
	leaq	320(%rsp), %rdx
	leaq	332(%rsp), %rcx
	movq	216(%rsp), %rsi         # 8-byte Reload
	callq	BZ2_bzReadGetUnused
	movl	10352(%rsp), %eax
	movl	$5515, 10356(%rsp)      # imm = 0x158B
	cmpl	$0, %eax
	je	.LBB29_10
# %bb.9:                                # %if.then31
	movabsq	$.L.str.5.25, %rdi
	callq	panic
	jmp	.LBB29_49
.LBB29_10:                              # %if.end32
                                        #   in Loop: Header=BB29_2 Depth=1
	movq	320(%rsp), %rax
	movl	$5516, 10356(%rsp)      # imm = 0x158C
	movl	332(%rsp), %ecx
	movl	$5543, 10356(%rsp)      # imm = 0x15A7
	cmpl	$0, %ecx
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movl	%ecx, 172(%rsp)         # 4-byte Spill
	jle	.LBB29_22
# %bb.11:                               # %for.body.lr.ph
                                        #   in Loop: Header=BB29_2 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	172(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rdx
	cmpl	$32, %eax
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	jb	.LBB29_20
# %bb.12:                               # %vector.memcheck
                                        #   in Loop: Header=BB29_2 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	leaq	336(%rsp), %rdx
	movq	160(%rsp), %rsi         # 8-byte Reload
	addq	%rsi, %rdx
	movq	176(%rsp), %rdi         # 8-byte Reload
	addq	%rsi, %rdi
	movq	288(%rsp), %r8          # 8-byte Reload
	cmpq	%rdi, %r8
	setb	%r9b
	movq	176(%rsp), %rdi         # 8-byte Reload
	cmpq	%rdx, %rdi
	setb	%r10b
	andb	%r10b, %r9b
	testb	$1, %r9b
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	jne	.LBB29_20
# %bb.13:                               # %vector.ph
                                        #   in Loop: Header=BB29_2 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	160(%rsp), %rdx         # 8-byte Reload
	andq	$-32, %rdx
	movq	%rdx, %rsi
	addq	$-32, %rsi
	movq	%rsi, %rdi
	shrq	$5, %rdi
	addq	$1, %rdi
	movq	%rdi, %r8
	andq	$3, %r8
	cmpq	$96, %rsi
	movq	%rdi, 144(%rsp)         # 8-byte Spill
	movq	%rdx, 136(%rsp)         # 8-byte Spill
	movq	%r8, 128(%rsp)          # 8-byte Spill
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	jb	.LBB29_16
# %bb.14:                               # %vector.ph.new
                                        #   in Loop: Header=BB29_2 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	128(%rsp), %rsi         # 8-byte Reload
	subq	%rsi, %rdx
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	movq	%rdx, 104(%rsp)         # 8-byte Spill
.LBB29_15:                              # %vector.body
                                        #   Parent Loop BB29_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movdqu	(%rdx,%rcx), %xmm0
	movl	$5546, 10356(%rsp)      # imm = 0x15AA
	movdqu	16(%rdx,%rcx), %xmm1
	movl	$5549, 10356(%rsp)      # imm = 0x15AD
	movdqa	%xmm0, 336(%rsp,%rcx)
	movl	$5552, 10356(%rsp)      # imm = 0x15B0
	movdqa	%xmm1, 352(%rsp,%rcx)
	movl	$5556, 10356(%rsp)      # imm = 0x15B4
	movq	%rcx, %rsi
	orq	$32, %rsi
	movdqu	(%rdx,%rsi), %xmm0
	movl	$5559, 10356(%rsp)      # imm = 0x15B7
	movdqu	16(%rdx,%rsi), %xmm1
	movl	$5562, 10356(%rsp)      # imm = 0x15BA
	movdqa	%xmm0, 336(%rsp,%rsi)
	movl	$5565, 10356(%rsp)      # imm = 0x15BD
	movdqa	%xmm1, 352(%rsp,%rsi)
	movl	$5569, 10356(%rsp)      # imm = 0x15C1
	movq	%rcx, %rsi
	orq	$64, %rsi
	movdqu	(%rdx,%rsi), %xmm0
	movl	$5572, 10356(%rsp)      # imm = 0x15C4
	movdqu	16(%rdx,%rsi), %xmm1
	movl	$5575, 10356(%rsp)      # imm = 0x15C7
	movdqa	%xmm0, 336(%rsp,%rsi)
	movl	$5578, 10356(%rsp)      # imm = 0x15CA
	movdqa	%xmm1, 352(%rsp,%rsi)
	movl	$5582, 10356(%rsp)      # imm = 0x15CE
	movq	%rcx, %rsi
	orq	$96, %rsi
	movdqu	(%rdx,%rsi), %xmm0
	movl	$5585, 10356(%rsp)      # imm = 0x15D1
	movdqu	16(%rdx,%rsi), %xmm1
	movl	$5588, 10356(%rsp)      # imm = 0x15D4
	movdqa	%xmm0, 336(%rsp,%rsi)
	movl	$5591, 10356(%rsp)      # imm = 0x15D7
	movdqa	%xmm1, 352(%rsp,%rsi)
	movl	$5604, 10356(%rsp)      # imm = 0x15E4
	addq	$128, %rcx
	addq	$-4, %rax
	cmpq	$0, %rax
	movq	%rcx, %rsi
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movq	%rsi, 112(%rsp)         # 8-byte Spill
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	jne	.LBB29_15
.LBB29_16:                              # %middle.block.unr-lcssa
                                        #   in Loop: Header=BB29_2 Depth=1
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	128(%rsp), %rcx         # 8-byte Reload
	cmpq	$0, %rcx
	movq	%rax, 96(%rsp)          # 8-byte Spill
	je	.LBB29_19
# %bb.17:                               # %vector.body.epil.preheader
                                        #   in Loop: Header=BB29_2 Depth=1
	movq	96(%rsp), %rax          # 8-byte Reload
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	%rax, 88(%rsp)          # 8-byte Spill
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	jmp	.LBB29_18
.LBB29_18:                              # %vector.body.epil
                                        #   Parent Loop BB29_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	88(%rsp), %rcx          # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movdqu	(%rdx,%rcx), %xmm0
	movl	$5607, 10356(%rsp)      # imm = 0x15E7
	movdqu	16(%rdx,%rcx), %xmm1
	movl	$5610, 10356(%rsp)      # imm = 0x15EA
	movdqa	%xmm0, 336(%rsp,%rcx)
	movl	$5613, 10356(%rsp)      # imm = 0x15ED
	movdqa	%xmm1, 352(%rsp,%rcx)
	movl	$5623, 10356(%rsp)      # imm = 0x15F7
	addq	$32, %rcx
	addq	$-1, %rax
	cmpq	$0, %rax
	movq	%rcx, 88(%rsp)          # 8-byte Spill
	movq	%rax, 80(%rsp)          # 8-byte Spill
	jne	.LBB29_18
.LBB29_19:                              # %middle.block
                                        #   in Loop: Header=BB29_2 Depth=1
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	je	.LBB29_22
.LBB29_20:                              # %for.body.preheader
                                        #   in Loop: Header=BB29_2 Depth=1
	movq	152(%rsp), %rax         # 8-byte Reload
	movq	%rax, 72(%rsp)          # 8-byte Spill
.LBB29_21:                              # %for.body
                                        #   Parent Loop BB29_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	176(%rsp), %rcx         # 8-byte Reload
	movb	(%rcx,%rax), %dl
	movl	$5625, 10356(%rsp)      # imm = 0x15F9
	movb	%dl, 336(%rsp,%rax)
	movl	$5631, 10356(%rsp)      # imm = 0x15FF
	addq	$1, %rax
	movq	160(%rsp), %rsi         # 8-byte Reload
	cmpq	%rsi, %rax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	jl	.LBB29_21
.LBB29_22:                              # %for.end
                                        #   in Loop: Header=BB29_2 Depth=1
	leaq	10352(%rsp), %rdi
	movq	216(%rsp), %rsi         # 8-byte Reload
	callq	BZ2_bzReadClose
	movl	10352(%rsp), %eax
	movl	$5637, 10356(%rsp)      # imm = 0x1605
	cmpl	$0, %eax
	je	.LBB29_24
# %bb.23:                               # %if.then40
	movabsq	$.L.str.5.25, %rdi
	callq	panic
	jmp	.LBB29_49
.LBB29_24:                              # %if.end41
                                        #   in Loop: Header=BB29_2 Depth=1
	movl	332(%rsp), %eax
	movl	$5645, 10356(%rsp)      # imm = 0x160D
	cmpl	$0, %eax
	movl	%eax, 68(%rsp)          # 4-byte Spill
	jne	.LBB29_27
# %bb.25:                               # %land.lhs.true44
                                        #   in Loop: Header=BB29_2 Depth=1
	movl	316(%rsp), %edi         # 4-byte Reload
	callq	spec_getc
	cmpl	$-1, %eax
	movl	%eax, 64(%rsp)          # 4-byte Spill
	je	.LBB29_28
# %bb.26:                               # %myfeof.exit.thread
                                        #   in Loop: Header=BB29_2 Depth=1
	movl	64(%rsp), %eax          # 4-byte Reload
	movb	%al, %cl
	movzbl	%cl, %edi
	movl	316(%rsp), %esi         # 4-byte Reload
	callq	spec_ungetc
	movl	332(%rsp), %esi
	movl	$5648, 10356(%rsp)      # imm = 0x1610
	movl	%eax, 60(%rsp)          # 4-byte Spill
	movl	%esi, 68(%rsp)          # 4-byte Spill
.LBB29_27:                              # %if.end48
                                        #   in Loop: Header=BB29_2 Depth=1
	movl	68(%rsp), %eax          # 4-byte Reload
	leaq	10352(%rsp), %rdi
	movl	verbosity, %edx
	movl	$5649, 10356(%rsp)      # imm = 0x1611
	movb	smallMode, %cl
	movl	$5652, 10356(%rsp)      # imm = 0x1614
	movzbl	%cl, %ecx
	movl	316(%rsp), %esi         # 4-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movl	%eax, %r9d
	callq	BZ2_bzReadOpen
	cmpq	$0, %rax
	sete	%r10b
	movl	10352(%rsp), %ecx
	movl	$5658, 10356(%rsp)      # imm = 0x161A
	cmpl	$0, %ecx
	setne	%r11b
	orb	%r11b, %r10b
	testb	$1, %r10b
	movq	%rax, %rdi
	movl	224(%rsp), %ecx         # 4-byte Reload
	movl	224(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 228(%rsp)         # 4-byte Spill
	movq	%rdi, 232(%rsp)         # 8-byte Spill
	movq	%rax, 248(%rsp)         # 8-byte Spill
	movl	%edx, 244(%rsp)         # 4-byte Spill
	jne	.LBB29_38
	jmp	.LBB29_2
.LBB29_28:                              # %if.end57
	movl	312(%rsp), %eax         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB29_30
# %bb.29:                               # %if.then60
	movl	$0, outputHandleJustInCase
	movl	$5660, 10356(%rsp)      # imm = 0x161C
.LBB29_30:                              # %if.end65
	movb	$1, %al
	movl	$0, outputHandleJustInCase
	movl	$5661, 10356(%rsp)      # imm = 0x161D
	movl	verbosity, %ecx
	movl	$5664, 10356(%rsp)      # imm = 0x1620
	cmpl	$1, %ecx
	movb	%al, 59(%rsp)           # 1-byte Spill
	jle	.LBB29_48
# %bb.31:                               # %if.then68
	movl	$5, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.6.26, %rdi
	movq	stderr, %rcx
	movl	$5669, 10356(%rsp)      # imm = 0x1625
	callq	fwrite
	movb	$1, %r8b
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movb	%r8b, 59(%rsp)          # 1-byte Spill
	jmp	.LBB29_48
.LBB29_32:                              # %trycat
	movb	forceOverwrite, %al
	movl	$5691, 10356(%rsp)      # imm = 0x163B
	cmpb	$0, %al
	movq	216(%rsp), %rcx         # 8-byte Reload
	movl	224(%rsp), %edx         # 4-byte Reload
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	movl	%edx, 244(%rsp)         # 4-byte Spill
	je	.LBB29_38
# %bb.33:                               # %if.then72
	movl	316(%rsp), %edi         # 4-byte Reload
	callq	spec_rewind
	movl	316(%rsp), %edi         # 4-byte Reload
	movl	%eax, 44(%rsp)          # 4-byte Spill
	callq	spec_getc
	cmpl	$-1, %eax
	movl	%eax, 40(%rsp)          # 4-byte Spill
	je	.LBB29_28
# %bb.34:                               # %if.end79.preheader
	movl	40(%rsp), %eax          # 4-byte Reload
	movl	%eax, 36(%rsp)          # 4-byte Spill
	jmp	.LBB29_35
.LBB29_35:                              # %if.end79
                                        # =>This Inner Loop Header: Depth=1
	movl	36(%rsp), %eax          # 4-byte Reload
	movb	%al, %cl
	movzbl	%cl, %edi
	movl	316(%rsp), %esi         # 4-byte Reload
	callq	spec_ungetc
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	movq	272(%rsp), %rdi         # 8-byte Reload
	movl	316(%rsp), %ecx         # 4-byte Reload
	movl	%eax, 32(%rsp)          # 4-byte Spill
	callq	spec_fread
	cmpl	$0, %eax
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jle	.LBB29_37
# %bb.36:                               # %if.then84
                                        #   in Loop: Header=BB29_35 Depth=1
	movl	$1, %esi
	movq	272(%rsp), %rdi         # 8-byte Reload
	movl	28(%rsp), %edx          # 4-byte Reload
	movl	312(%rsp), %ecx         # 4-byte Reload
	callq	spec_fwrite
	movl	%eax, 24(%rsp)          # 4-byte Spill
.LBB29_37:                              # %if.end87
                                        #   in Loop: Header=BB29_35 Depth=1
	movl	316(%rsp), %edi         # 4-byte Reload
	callq	spec_getc
	cmpl	$-1, %eax
	movl	%eax, 36(%rsp)          # 4-byte Spill
	je	.LBB29_28
	jmp	.LBB29_35
.LBB29_38:                              # %errhandler
	movl	244(%rsp), %eax         # 4-byte Reload
	movq	248(%rsp), %rcx         # 8-byte Reload
	leaq	10348(%rsp), %rdi
	movq	%rcx, %rsi
	movl	%eax, 20(%rsp)          # 4-byte Spill
	callq	BZ2_bzReadClose
	movl	10352(%rsp), %eax
	movl	$5709, 10356(%rsp)      # imm = 0x164D
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %eax
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	movl	%eax, 4(%rsp)           # 4-byte Spill
	ja	.LBB29_47
# %bb.51:                               # %errhandler
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	.LJTI29_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB29_39:                              # %sw.bb
	callq	configError
	jmp	.LBB29_49
.LBB29_40:                              # %errhandler_io
	callq	ioError
	jmp	.LBB29_49
.LBB29_41:                              # %sw.bb91
	callq	crcError
	jmp	.LBB29_49
.LBB29_42:                              # %sw.bb92
	callq	outOfMemory
	jmp	.LBB29_49
.LBB29_43:                              # %sw.bb93
	callq	compressedStreamEOF
	jmp	.LBB29_49
.LBB29_44:                              # %sw.bb94
	xorl	%eax, %eax
	movb	%al, %cl
	movl	20(%rsp), %eax          # 4-byte Reload
	cmpl	$1, %eax
	movb	%cl, 59(%rsp)           # 1-byte Spill
	je	.LBB29_48
# %bb.45:                               # %if.else
	movb	$1, %al
	movb	noisy, %cl
	movl	$5712, 10356(%rsp)      # imm = 0x1650
	cmpb	$0, %cl
	movb	%al, 59(%rsp)           # 1-byte Spill
	je	.LBB29_48
# %bb.46:                               # %if.then107
	movabsq	$inName, %rcx
	movabsq	$.L.str.7.27, %rsi
	movq	stderr, %rdi
	movl	$5713, 10356(%rsp)      # imm = 0x1651
	movq	progName, %rdx
	movl	$5731, 10356(%rsp)      # imm = 0x1663
	movb	$0, %al
	callq	fprintf
	movb	$1, %r8b
	movl	%eax, (%rsp)            # 4-byte Spill
	movb	%r8b, 59(%rsp)          # 1-byte Spill
	jmp	.LBB29_48
.LBB29_47:                              # %sw.default
	movabsq	$.L.str.8.28, %rdi
	callq	panic
	jmp	.LBB29_49
.LBB29_48:                              # %cleanup
	movb	59(%rsp), %al           # 1-byte Reload
	movzbl	%al, %eax
	addq	$10360, %rsp            # imm = 0x2878
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB29_49:                              # %UnifiedUnreachableBlock
.Lfunc_end29:
	.size	uncompressStream, .Lfunc_end29-uncompressStream
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI29_0:
	.quad	.LBB29_39
	.quad	.LBB29_47
	.quad	.LBB29_43
	.quad	.LBB29_40
	.quad	.LBB29_44
	.quad	.LBB29_41
	.quad	.LBB29_42
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function crcError
	.type	crcError,@function
crcError:                               # @crcError
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rax
	.cfi_def_cfa_offset 16
	movabsq	$.L.str.12.31, %rsi
	movl	$9999, 4(%rsp)          # imm = 0x270F
	movq	stderr, %rdi
	movl	$5732, 4(%rsp)          # imm = 0x1664
	movq	progName, %rdx
	movl	$5742, 4(%rsp)          # imm = 0x166E
	movb	$0, %al
	callq	fprintf
	movl	%eax, (%rsp)            # 4-byte Spill
	callq	showFileNames
	callq	cadvise
	callq	cleanUpAndFail
.Lfunc_end30:
	.size	crcError, .Lfunc_end30-crcError
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compressedStreamEOF
	.type	compressedStreamEOF,@function
compressedStreamEOF:                    # @compressedStreamEOF
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$24, %rsp
	.cfi_def_cfa_offset 32
	movl	$9999, 20(%rsp)         # imm = 0x270F
	movb	noisy, %al
	movl	$5745, 20(%rsp)         # imm = 0x1671
	cmpb	$0, %al
	je	.LBB31_4
# %bb.1:                                # %if.then
	movabsq	$.L.str.14.29, %rsi
	movq	stderr, %rdi
	movl	$5746, 20(%rsp)         # imm = 0x1672
	movq	progName, %rdx
	movl	$5749, 20(%rsp)         # imm = 0x1675
	movb	$0, %al
	callq	fprintf
	movq	progName, %rdi
	movl	$5751, 20(%rsp)         # imm = 0x1677
	movl	%eax, 16(%rsp)          # 4-byte Spill
	callq	perror
	movb	noisy, %cl
	movl	$5754, 20(%rsp)         # imm = 0x167A
	cmpb	$0, %cl
	je	.LBB31_4
# %bb.2:                                # %showFileNames.exit
	movabsq	$outName, %rcx
	movabsq	$inName, %rdx
	movabsq	$.L.str.11.19, %rsi
	movq	stderr, %rdi
	movl	$5759, 20(%rsp)         # imm = 0x167F
	movb	$0, %al
	callq	fprintf
	movb	noisy, %r8b
	movl	$5762, 20(%rsp)         # imm = 0x1682
	cmpb	$0, %r8b
	movl	%eax, 12(%rsp)          # 4-byte Spill
	je	.LBB31_4
# %bb.3:                                # %if.then.i2
	movl	$240, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.13.30, %rdi
	movq	stderr, %rcx
	movl	$5770, 20(%rsp)         # imm = 0x168A
	callq	fwrite
	movq	%rax, (%rsp)            # 8-byte Spill
.LBB31_4:                               # %if.end
	callq	cleanUpAndFail
.Lfunc_end31:
	.size	compressedStreamEOF, .Lfunc_end31-compressedStreamEOF
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cadvise
	.type	cadvise,@function
cadvise:                                # @cadvise
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$24, %rsp
	.cfi_def_cfa_offset 32
	movl	$9999, 20(%rsp)         # imm = 0x270F
	movb	noisy, %al
	movl	$5773, 20(%rsp)         # imm = 0x168D
	cmpb	$0, %al
	je	.LBB32_2
# %bb.1:                                # %if.then
	movl	$240, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.13.30, %rdi
	movq	stderr, %rcx
	movl	$5780, 20(%rsp)         # imm = 0x1694
	callq	fwrite
	movq	%rax, 8(%rsp)           # 8-byte Spill
.LBB32_2:                               # %if.end
	addq	$24, %rsp
	retq
.Lfunc_end32:
	.size	cadvise, .Lfunc_end32-cadvise
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bz__AssertH__fail   # -- Begin function BZ2_bz__AssertH__fail
	.p2align	4, 0x90
	.type	BZ2_bz__AssertH__fail,@function
BZ2_bz__AssertH__fail:                  # @BZ2_bz__AssertH__fail
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$24, %rsp
	.cfi_def_cfa_offset 32
	movabsq	$.L.str.5.35, %rcx
	movabsq	$.L.str.34, %rsi
	movl	$9999, 20(%rsp)         # imm = 0x270F
	movq	stderr, %rax
	movl	$5786, 20(%rsp)         # imm = 0x169A
	movl	%edi, 16(%rsp)          # 4-byte Spill
	movq	%rax, %rdi
	movl	16(%rsp), %edx          # 4-byte Reload
	movb	$0, %al
	callq	fprintf
	movl	16(%rsp), %edx          # 4-byte Reload
	cmpl	$1007, %edx             # imm = 0x3EF
	movl	%eax, 12(%rsp)          # 4-byte Spill
	jne	.LBB33_2
# %bb.1:                                # %if.then
	movl	$1056, %eax             # imm = 0x420
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.1.36, %rdi
	movq	stderr, %rcx
	movl	$5815, 20(%rsp)         # imm = 0x16B7
	callq	fwrite
	movq	%rax, (%rsp)            # 8-byte Spill
.LBB33_2:                               # %if.end
	xorl	%edi, %edi
	callq	exit
.Lfunc_end33:
	.size	BZ2_bz__AssertH__fail, .Lfunc_end33-BZ2_bz__AssertH__fail
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzlibVersion        # -- Begin function BZ2_bzlibVersion
	.p2align	4, 0x90
	.type	BZ2_bzlibVersion,@function
BZ2_bzlibVersion:                       # @BZ2_bzlibVersion
	.cfi_startproc
# %bb.0:                                # %entry
	movabsq	$.L.str.5.35, %rax
	movl	$9999, -4(%rsp)         # imm = 0x270F
	retq
.Lfunc_end34:
	.size	BZ2_bzlibVersion, .Lfunc_end34-BZ2_bzlibVersion
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit      # -- Begin function BZ2_bzCompressInit
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit,@function
BZ2_bzCompressInit:                     # @BZ2_bzCompressInit
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$200, %rsp
	.cfi_def_cfa_offset 208
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	$9999, 196(%rsp)        # imm = 0x270F
	cmpq	$0, %rdi
	sete	%r8b
	movl	%esi, %r9d
	addl	$-1, %r9d
	cmpl	$8, %r9d
	seta	%r10b
	orb	%r10b, %r8b
	cmpl	$250, %ecx
	seta	%r10b
	orb	%r8b, %r10b
	testb	$1, %r10b
	movl	%edx, 192(%rsp)         # 4-byte Spill
	movl	%esi, 188(%rsp)         # 4-byte Spill
	movq	%rdi, 176(%rsp)         # 8-byte Spill
	movl	%ecx, 172(%rsp)         # 4-byte Spill
	movl	%eax, 168(%rsp)         # 4-byte Spill
	jne	.LBB35_15
# %bb.1:                                # %if.end9
	movl	$30, %eax
	movl	172(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	cmovel	%eax, %ecx
	movq	176(%rsp), %rdx         # 8-byte Reload
	addq	$56, %rdx
	movq	176(%rsp), %rsi         # 8-byte Reload
	movq	56(%rsi), %rdi
	movl	$5818, 196(%rsp)        # imm = 0x16BA
	cmpq	$0, %rdi
	movl	%ecx, 164(%rsp)         # 4-byte Spill
	movq	%rdx, 152(%rsp)         # 8-byte Spill
	movq	%rdi, 144(%rsp)         # 8-byte Spill
	jne	.LBB35_3
# %bb.2:                                # %if.then14
	movabsq	$default_bzalloc, %rax
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movl	$5824, 196(%rsp)        # imm = 0x16C0
	movq	%rax, 144(%rsp)         # 8-byte Spill
.LBB35_3:                               # %if.end16
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	176(%rsp), %rcx         # 8-byte Reload
	addq	$64, %rcx
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	64(%rdx), %rsi
	movl	$5827, 196(%rsp)        # imm = 0x16C3
	cmpq	$0, %rsi
	movq	%rax, 136(%rsp)         # 8-byte Spill
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	jne	.LBB35_5
# %bb.4:                                # %if.then18
	movabsq	$default_bzfree, %rax
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movl	$5832, 196(%rsp)        # imm = 0x16C8
.LBB35_5:                               # %if.end20
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	movq	176(%rsp), %rax         # 8-byte Reload
	addq	$72, %rax
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	72(%rcx), %rdi
	movl	$5838, 196(%rsp)        # imm = 0x16CE
	movq	136(%rsp), %r8          # 8-byte Reload
	movq	%rax, 120(%rsp)         # 8-byte Spill
	callq	*%r8
	movl	$4294967293, %edx       # imm = 0xFFFFFFFD
	cmpq	$0, %rax
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movl	%edx, 168(%rsp)         # 4-byte Spill
	je	.LBB35_15
# %bb.6:                                # %if.end25
	movl	$1, %edx
	xorl	%esi, %esi
	movl	$24, %eax
	movl	%eax, %ecx
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %r8          # 8-byte Reload
	movq	%r8, (%rdi)
	movl	$5848, 196(%rsp)        # imm = 0x16D8
	addq	$24, %rdi
	movq	112(%rsp), %r9          # 8-byte Reload
	addq	$32, %r9
	movq	112(%rsp), %r10         # 8-byte Reload
	addq	$40, %r10
	movl	188(%rsp), %eax         # 4-byte Reload
	imull	$100000, %eax, %r11d    # imm = 0x186A0
	movl	%edx, 108(%rsp)         # 4-byte Spill
	movq	%rcx, %rdx
	movq	%r9, 96(%rsp)           # 8-byte Spill
	movq	%r10, 88(%rsp)          # 8-byte Spill
	movl	%r11d, 84(%rsp)         # 4-byte Spill
	callq	memset
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$5849, 196(%rsp)        # imm = 0x16D9
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	(%rdi), %rdi
	movl	$5853, 196(%rsp)        # imm = 0x16DD
	movl	188(%rsp), %eax         # 4-byte Reload
	imull	$400000, %eax, %esi     # imm = 0x61A80
	movl	%esi, 80(%rsp)          # 4-byte Spill
	movl	108(%rsp), %r11d        # 4-byte Reload
	movq	%rdx, 72(%rsp)          # 8-byte Spill
	movl	%r11d, %edx
	movq	72(%rsp), %r8           # 8-byte Reload
	callq	*%r8
	movl	$1, %edx
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	%rax, 24(%rcx)
	movl	$5854, 196(%rsp)        # imm = 0x16DE
	movq	152(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movl	$5855, 196(%rsp)        # imm = 0x16DF
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	(%r8), %r9
	movl	$5859, 196(%rsp)        # imm = 0x16E3
	movl	80(%rsp), %esi          # 4-byte Reload
	addl	$136, %esi
	movq	%rdi, 64(%rsp)          # 8-byte Spill
	movq	%r9, %rdi
	movq	64(%rsp), %r9           # 8-byte Reload
	callq	*%r9
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	%rax, 32(%rcx)
	movl	$5860, 196(%rsp)        # imm = 0x16E4
	movq	152(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movl	$5861, 196(%rsp)        # imm = 0x16E5
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	(%r8), %r9
	movl	$5865, 196(%rsp)        # imm = 0x16E9
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	%r9, %rdi
	movq	56(%rsp), %r9           # 8-byte Reload
	callq	*%r9
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	%rax, 40(%rcx)
	movl	$5866, 196(%rsp)        # imm = 0x16EA
	movq	24(%rcx), %rdi
	movl	$5870, 196(%rsp)        # imm = 0x16EE
	cmpq	$0, %rdi
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movq	%rdi, 40(%rsp)          # 8-byte Spill
	je	.LBB35_9
# %bb.7:                                # %lor.lhs.false47
	movq	96(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rcx
	movl	$5875, 196(%rsp)        # imm = 0x16F3
	cmpq	$0, %rcx
	sete	%dl
	movq	48(%rsp), %rsi          # 8-byte Reload
	cmpq	$0, %rsi
	sete	%dil
	orb	%dl, %dil
	testb	$1, %dil
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	jne	.LBB35_8
	jmp	.LBB35_14
.LBB35_8:                               # %if.then59
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$5876, 196(%rsp)        # imm = 0x16F4
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$5880, 196(%rsp)        # imm = 0x16F8
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB35_9:                               # %if.end63
	movq	96(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rcx
	movl	$5883, 196(%rsp)        # imm = 0x16FB
	cmpq	$0, %rcx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	je	.LBB35_11
# %bb.10:                               # %if.then67
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$5884, 196(%rsp)        # imm = 0x16FC
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$5888, 196(%rsp)        # imm = 0x1700
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB35_11:                              # %if.end71
	movq	88(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rcx
	movl	$5891, 196(%rsp)        # imm = 0x1703
	cmpq	$0, %rcx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	je	.LBB35_13
# %bb.12:                               # %if.then75
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$5892, 196(%rsp)        # imm = 0x1704
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$5896, 196(%rsp)        # imm = 0x1708
	movq	16(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB35_13:                              # %if.then82
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$5897, 196(%rsp)        # imm = 0x1709
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$5905, 196(%rsp)        # imm = 0x1711
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	*%rcx
	movl	$4294967293, %r8d       # imm = 0xFFFFFFFD
	movl	%r8d, 168(%rsp)         # 4-byte Spill
	jmp	.LBB35_15
.LBB35_14:                              # %if.end86
	xorl	%eax, %eax
	movl	$256, %ecx              # imm = 0x100
	movl	%ecx, %edx
	movq	112(%rsp), %rsi         # 8-byte Reload
	movl	$2, 12(%rsi)
	movl	$5908, 196(%rsp)        # imm = 0x1714
	movl	$2, 8(%rsi)
	movl	$5911, 196(%rsp)        # imm = 0x1717
	movl	$0, 652(%rsi)
	movl	$5914, 196(%rsp)        # imm = 0x171A
	movl	188(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, 664(%rsi)
	movl	$5918, 196(%rsp)        # imm = 0x171E
	movl	84(%rsp), %edi          # 4-byte Reload
	addl	$-19, %edi
	movl	%edi, 112(%rsi)
	movl	$5921, 196(%rsp)        # imm = 0x1721
	movl	192(%rsp), %edi         # 4-byte Reload
	movl	%edi, 656(%rsi)
	movl	$5924, 196(%rsp)        # imm = 0x1724
	movl	164(%rsp), %r8d         # 4-byte Reload
	movl	%r8d, 88(%rsi)
	movl	$5927, 196(%rsp)        # imm = 0x1727
	movq	32(%rsp), %r9           # 8-byte Reload
	movq	%r9, 64(%rsi)
	movl	$5930, 196(%rsp)        # imm = 0x172A
	movq	40(%rsp), %r10          # 8-byte Reload
	movq	%r10, 72(%rsi)
	movl	$5933, 196(%rsp)        # imm = 0x172D
	movq	$0, 80(%rsi)
	movl	$5936, 196(%rsp)        # imm = 0x1730
	movq	%r10, 56(%rsi)
	movl	$5938, 196(%rsp)        # imm = 0x1732
	movq	176(%rsp), %r11         # 8-byte Reload
	movq	%rsi, 48(%r11)
	movl	$5940, 196(%rsp)        # imm = 0x1734
	movl	$0, 12(%r11)
	movl	$5942, 196(%rsp)        # imm = 0x1736
	movl	$0, 16(%r11)
	movl	$5944, 196(%rsp)        # imm = 0x1738
	movl	$0, 36(%r11)
	movl	$5946, 196(%rsp)        # imm = 0x173A
	movl	$0, 40(%r11)
	movl	$5949, 196(%rsp)        # imm = 0x173D
	movl	$256, 92(%rsi)          # imm = 0x100
	movl	$5953, 196(%rsp)        # imm = 0x1741
	movl	$0, 96(%rsi)
	movl	$5956, 196(%rsp)        # imm = 0x1744
	movl	$0, 108(%rsi)
	movl	$5959, 196(%rsp)        # imm = 0x1747
	movl	$0, 116(%rsi)
	movl	$5962, 196(%rsp)        # imm = 0x174A
	movl	$0, 120(%rsi)
	movl	$5965, 196(%rsp)        # imm = 0x174D
	movl	$-1, 648(%rsi)
	movl	$5968, 196(%rsp)        # imm = 0x1750
	addq	$128, %rsi
	movq	%rsi, %rdi
	movl	%eax, %esi
	movl	%eax, 12(%rsp)          # 4-byte Spill
	callq	memset
	movq	112(%rsp), %rdx         # 8-byte Reload
	movl	$1, 660(%rdx)
	movl	$6003, 196(%rsp)        # imm = 0x1773
	movl	12(%rsp), %eax          # 4-byte Reload
	movl	%eax, 168(%rsp)         # 4-byte Spill
.LBB35_15:                              # %cleanup
	movl	168(%rsp), %eax         # 4-byte Reload
	addq	$200, %rsp
	retq
.Lfunc_end35:
	.size	BZ2_bzCompressInit, .Lfunc_end35-BZ2_bzCompressInit
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc
	.type	default_bzalloc,@function
default_bzalloc:                        # @default_bzalloc
	.cfi_startproc
# %bb.0:                                # %entry
	movl	$9999, -4(%rsp)         # imm = 0x270F
	imull	%esi, %edx
	movslq	%edx, %rax
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	jmp	malloc                  # TAILCALL
.Lfunc_end36:
	.size	default_bzalloc, .Lfunc_end36-default_bzalloc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzfree
	.type	default_bzfree,@function
default_bzfree:                         # @default_bzfree
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$24, %rsp
	.cfi_def_cfa_offset 32
	movl	$9999, 20(%rsp)         # imm = 0x270F
	cmpq	$0, %rsi
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movq	%rsi, (%rsp)            # 8-byte Spill
	je	.LBB37_2
# %bb.1:                                # %if.then
	movq	(%rsp), %rdi            # 8-byte Reload
	callq	free
.LBB37_2:                               # %if.end
	addq	$24, %rsp
	retq
.Lfunc_end37:
	.size	default_bzfree, .Lfunc_end37-default_bzfree
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress          # -- Begin function BZ2_bzCompress
	.p2align	4, 0x90
	.type	BZ2_bzCompress,@function
BZ2_bzCompress:                         # @BZ2_bzCompress
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$152, %rsp
	.cfi_def_cfa_offset 160
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	$9999, 148(%rsp)        # imm = 0x270F
	cmpq	$0, %rdi
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movl	%esi, 132(%rsp)         # 4-byte Spill
	movl	%eax, 128(%rsp)         # 4-byte Spill
	je	.LBB38_32
# %bb.1:                                # %if.end
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	136(%rsp), %rcx         # 8-byte Reload
	movq	48(%rcx), %rdx
	movl	$6007, 148(%rsp)        # imm = 0x1777
	cmpq	$0, %rdx
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movl	%eax, 128(%rsp)         # 4-byte Spill
	je	.LBB38_32
# %bb.2:                                # %if.end3
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$6014, 148(%rsp)        # imm = 0x177E
	movq	136(%rsp), %rsi         # 8-byte Reload
	cmpq	%rsi, %rdx
	movl	%eax, 128(%rsp)         # 4-byte Spill
	jne	.LBB38_32
# %bb.3:                                # %if.end7
	movq	120(%rsp), %rax         # 8-byte Reload
	addq	$8, %rax
	movq	136(%rsp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	movq	120(%rsp), %rdx         # 8-byte Reload
	addq	$16, %rdx
	movl	132(%rsp), %esi         # 4-byte Reload
	testl	%esi, %esi
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	je	.LBB38_4
	jmp	.LBB38_33
.LBB38_33:                              # %if.end7
	movl	132(%rsp), %eax         # 4-byte Reload
	subl	$1, %eax
	movl	%eax, 92(%rsp)          # 4-byte Spill
	je	.LBB38_5
	jmp	.LBB38_34
.LBB38_34:                              # %if.end7
	movl	132(%rsp), %eax         # 4-byte Reload
	subl	$2, %eax
	movl	%eax, 88(%rsp)          # 4-byte Spill
	je	.LBB38_8
	jmp	.LBB38_11
.LBB38_4:                               # %preswitch.us
	movq	112(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6016, 148(%rsp)        # imm = 0x1780
	movl	$-1, %edx
	xorl	%esi, %esi
	addl	$-1, %ecx
	movl	%ecx, %edi
	subl	$3, %ecx
	movl	%ecx, 84(%rsp)          # 4-byte Spill
	movl	%edx, 80(%rsp)          # 4-byte Spill
	movq	%rdi, 72(%rsp)          # 8-byte Spill
	movl	%esi, 128(%rsp)         # 4-byte Spill
	ja	.LBB38_32
# %bb.37:                               # %preswitch.us
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	.LJTI38_2(,%rax,8), %rcx
	movl	80(%rsp), %edx          # 4-byte Reload
	movl	%edx, 68(%rsp)          # 4-byte Spill
	jmpq	*%rcx
.LBB38_5:                               # %if.end7.split.split.us
	movq	112(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6021, 148(%rsp)        # imm = 0x1785
	movl	%ecx, 64(%rsp)          # 4-byte Spill
.LBB38_6:                               # %preswitch.us125
                                        # =>This Inner Loop Header: Depth=1
	movl	64(%rsp), %eax          # 4-byte Reload
	movl	$-1, %ecx
	xorl	%edx, %edx
	addl	$-1, %eax
	movl	%eax, %esi
	subl	$3, %eax
	movl	%eax, 60(%rsp)          # 4-byte Spill
	movl	%ecx, 56(%rsp)          # 4-byte Spill
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movl	%edx, 128(%rsp)         # 4-byte Spill
	ja	.LBB38_32
# %bb.36:                               # %preswitch.us125
                                        #   in Loop: Header=BB38_6 Depth=1
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	.LJTI38_1(,%rax,8), %rcx
	movl	56(%rsp), %edx          # 4-byte Reload
	movl	%edx, 68(%rsp)          # 4-byte Spill
	jmpq	*%rcx
.LBB38_7:                               # %if.then13.us128
                                        #   in Loop: Header=BB38_6 Depth=1
	movl	$3, %eax
	movq	104(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$6022, 148(%rsp)        # imm = 0x1786
	movq	96(%rsp), %rsi          # 8-byte Reload
	movl	%edx, (%rsi)
	movl	$6023, 148(%rsp)        # imm = 0x1787
	movq	112(%rsp), %rdi         # 8-byte Reload
	movl	$3, (%rdi)
	movl	$6025, 148(%rsp)        # imm = 0x1789
	movl	%eax, 64(%rsp)          # 4-byte Spill
	jmp	.LBB38_6
.LBB38_8:                               # %if.end7.split.split.split.us
	movq	112(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6029, 148(%rsp)        # imm = 0x178D
	movl	%ecx, 44(%rsp)          # 4-byte Spill
.LBB38_9:                               # %preswitch.us131
                                        # =>This Inner Loop Header: Depth=1
	movl	44(%rsp), %eax          # 4-byte Reload
	movl	$-1, %ecx
	xorl	%edx, %edx
	addl	$-1, %eax
	movl	%eax, %esi
	subl	$3, %eax
	movl	%eax, 40(%rsp)          # 4-byte Spill
	movl	%ecx, 36(%rsp)          # 4-byte Spill
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	movl	%edx, 128(%rsp)         # 4-byte Spill
	ja	.LBB38_32
# %bb.35:                               # %preswitch.us131
                                        #   in Loop: Header=BB38_9 Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	.LJTI38_0(,%rax,8), %rcx
	movl	36(%rsp), %edx          # 4-byte Reload
	movl	%edx, 68(%rsp)          # 4-byte Spill
	jmpq	*%rcx
.LBB38_10:                              # %if.then18.us133
                                        #   in Loop: Header=BB38_9 Depth=1
	movl	$4, %eax
	movq	104(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$6030, 148(%rsp)        # imm = 0x178E
	movq	96(%rsp), %rsi          # 8-byte Reload
	movl	%edx, (%rsi)
	movl	$6031, 148(%rsp)        # imm = 0x178F
	movq	112(%rsp), %rdi         # 8-byte Reload
	movl	$4, (%rdi)
	movl	$6033, 148(%rsp)        # imm = 0x1791
	movl	%eax, 44(%rsp)          # 4-byte Spill
	jmp	.LBB38_9
.LBB38_11:                              # %preswitch
	movq	112(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6045, 148(%rsp)        # imm = 0x179D
	movl	$-1, %edx
	xorl	%esi, %esi
	addl	$-1, %ecx
	movl	%ecx, %edi
	subl	$3, %ecx
	movl	%ecx, 20(%rsp)          # 4-byte Spill
	movl	%edx, 16(%rsp)          # 4-byte Spill
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movl	%esi, 128(%rsp)         # 4-byte Spill
	ja	.LBB38_32
# %bb.38:                               # %preswitch
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	.LJTI38_3(,%rax,8), %rcx
	movl	16(%rsp), %edx          # 4-byte Reload
	movl	%edx, 68(%rsp)          # 4-byte Spill
	jmpq	*%rcx
.LBB38_12:                              # %sw.bb8
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	%eax, 68(%rsp)          # 4-byte Spill
	jmp	.LBB38_31
.LBB38_13:                              # %if.then10
	movq	136(%rsp), %rdi         # 8-byte Reload
	callq	handle_compress
	movl	$1, %ecx
	movl	$4294967294, %edx       # imm = 0xFFFFFFFE
	cmpb	$0, %al
	cmovel	%edx, %ecx
	movl	%ecx, 128(%rsp)         # 4-byte Spill
	jmp	.LBB38_32
.LBB38_14:                              # %sw.bb23.thread
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, 128(%rsp)         # 4-byte Spill
	jmp	.LBB38_32
.LBB38_15:                              # %sw.bb23
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	132(%rsp), %ecx         # 4-byte Reload
	cmpl	$1, %ecx
	movl	%eax, 128(%rsp)         # 4-byte Spill
	jne	.LBB38_32
# %bb.16:                               # %if.end27
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movq	96(%rsp), %rcx          # 8-byte Reload
	movl	(%rcx), %edx
	movl	$6046, 148(%rsp)        # imm = 0x179E
	movq	104(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %edi
	movl	$6050, 148(%rsp)        # imm = 0x17A2
	cmpl	%edi, %edx
	movl	%eax, 128(%rsp)         # 4-byte Spill
	jne	.LBB38_32
# %bb.17:                               # %if.end34
	movq	136(%rsp), %rdi         # 8-byte Reload
	callq	handle_compress
	movl	$2, %ecx
	movq	96(%rsp), %rdi          # 8-byte Reload
	movl	(%rdi), %edx
	movl	$6054, 148(%rsp)        # imm = 0x17A6
	cmpl	$0, %edx
	movb	%al, 7(%rsp)            # 1-byte Spill
	movl	%ecx, 128(%rsp)         # 4-byte Spill
	jne	.LBB38_32
# %bb.18:                               # %lor.lhs.false
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	92(%rax), %ecx
	movl	$6058, 148(%rsp)        # imm = 0x17AA
	cmpl	$256, %ecx              # imm = 0x100
	jae	.LBB38_20
# %bb.19:                               # %land.lhs.true.i
	movl	$2, %eax
	movq	120(%rsp), %rcx         # 8-byte Reload
	movl	96(%rcx), %edx
	movl	$6062, 148(%rsp)        # imm = 0x17AE
	cmpl	$0, %edx
	movl	%eax, 128(%rsp)         # 4-byte Spill
	jg	.LBB38_32
.LBB38_20:                              # %lor.lhs.false41
	movl	$2, %eax
	movq	120(%rsp), %rcx         # 8-byte Reload
	movl	120(%rcx), %edx
	movl	$6064, 148(%rsp)        # imm = 0x17B0
	movl	116(%rcx), %esi
	movl	$6067, 148(%rsp)        # imm = 0x17B3
	cmpl	%esi, %edx
	movl	%eax, 128(%rsp)         # 4-byte Spill
	jl	.LBB38_32
# %bb.21:                               # %if.end45
	movl	$1, %eax
	movq	112(%rsp), %rcx         # 8-byte Reload
	movl	$2, (%rcx)
	movl	$6072, 148(%rsp)        # imm = 0x17B8
	movl	%eax, 128(%rsp)         # 4-byte Spill
	jmp	.LBB38_32
.LBB38_22:                              # %sw.bb47.thread
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, 128(%rsp)         # 4-byte Spill
	jmp	.LBB38_32
.LBB38_23:                              # %sw.bb47
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	132(%rsp), %ecx         # 4-byte Reload
	cmpl	$2, %ecx
	movl	%eax, 128(%rsp)         # 4-byte Spill
	jne	.LBB38_32
# %bb.24:                               # %if.end51
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movq	96(%rsp), %rcx          # 8-byte Reload
	movl	(%rcx), %edx
	movl	$6073, 148(%rsp)        # imm = 0x17B9
	movq	104(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %edi
	movl	$6079, 148(%rsp)        # imm = 0x17BF
	cmpl	%edi, %edx
	movl	%eax, 128(%rsp)         # 4-byte Spill
	jne	.LBB38_32
# %bb.25:                               # %if.end58
	movq	136(%rsp), %rdi         # 8-byte Reload
	callq	handle_compress
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmpb	$0, %al
	movl	%ecx, 128(%rsp)         # 4-byte Spill
	je	.LBB38_32
# %bb.26:                               # %if.end62
	movl	$3, %eax
	movq	96(%rsp), %rcx          # 8-byte Reload
	movl	(%rcx), %edx
	movl	$6083, 148(%rsp)        # imm = 0x17C3
	cmpl	$0, %edx
	movl	%eax, 128(%rsp)         # 4-byte Spill
	jne	.LBB38_32
# %bb.27:                               # %lor.lhs.false66
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	92(%rax), %ecx
	movl	$6087, 148(%rsp)        # imm = 0x17C7
	cmpl	$256, %ecx              # imm = 0x100
	jae	.LBB38_29
# %bb.28:                               # %land.lhs.true.i115
	movl	$3, %eax
	movq	120(%rsp), %rcx         # 8-byte Reload
	movl	96(%rcx), %edx
	movl	$6091, 148(%rsp)        # imm = 0x17CB
	cmpl	$0, %edx
	movl	%eax, 128(%rsp)         # 4-byte Spill
	jg	.LBB38_32
.LBB38_29:                              # %lor.lhs.false69
	movl	$3, %eax
	movq	120(%rsp), %rcx         # 8-byte Reload
	movl	120(%rcx), %edx
	movl	$6093, 148(%rsp)        # imm = 0x17CD
	movl	116(%rcx), %esi
	movl	$6096, 148(%rsp)        # imm = 0x17D0
	cmpl	%esi, %edx
	movl	%eax, 128(%rsp)         # 4-byte Spill
	jl	.LBB38_32
# %bb.30:                               # %if.end75
	movl	$4, %eax
	movq	112(%rsp), %rcx         # 8-byte Reload
	movl	$1, (%rcx)
	movl	$6106, 148(%rsp)        # imm = 0x17DA
	movl	%eax, 128(%rsp)         # 4-byte Spill
	jmp	.LBB38_32
.LBB38_31:                              # %cleanup.loopexit
	movl	68(%rsp), %eax          # 4-byte Reload
	movl	%eax, 128(%rsp)         # 4-byte Spill
.LBB38_32:                              # %cleanup
	movl	128(%rsp), %eax         # 4-byte Reload
	addq	$152, %rsp
	retq
.Lfunc_end38:
	.size	BZ2_bzCompress, .Lfunc_end38-BZ2_bzCompress
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI38_0:
	.quad	.LBB38_31
	.quad	.LBB38_10
	.quad	.LBB38_15
	.quad	.LBB38_23
.LJTI38_1:
	.quad	.LBB38_31
	.quad	.LBB38_7
	.quad	.LBB38_15
	.quad	.LBB38_23
.LJTI38_2:
	.quad	.LBB38_31
	.quad	.LBB38_13
	.quad	.LBB38_14
	.quad	.LBB38_22
.LJTI38_3:
	.quad	.LBB38_31
	.quad	.LBB38_12
	.quad	.LBB38_14
	.quad	.LBB38_22
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function handle_compress
	.type	handle_compress,@function
handle_compress:                        # @handle_compress
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$408, %rsp              # imm = 0x198
	.cfi_def_cfa_offset 464
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	xorl	%eax, %eax
	movb	%al, %cl
	movl	$9999, 404(%rsp)        # imm = 0x270F
	movq	48(%rdi), %rdi
	movl	$6127, 404(%rsp)        # imm = 0x17EF
	movq	%rdi, %rdx
	addq	$92, %rdx
	movq	%rdi, %rsi
	addq	$96, %rsi
	movq	%rdi, %r8
	addq	$12, %r8
	movq	%rdi, %r9
	addq	$120, %r9
	movq	%rdi, %r10
	addq	$8, %r10
	movq	%rdi, %r11
	addq	$116, %r11
	movq	%rdi, %rbx
	addq	$80, %rbx
	movq	%rdi, %r14
	addq	$108, %r14
	movq	%rdi, %r15
	addq	$112, %r15
	movq	%rdi, %r12
	addq	$16, %r12
	movq	%rdi, %r13
	addq	$648, %r13              # imm = 0x288
	movq	%rdi, %rbp
	addq	$64, %rbp
	movq	%rdi, %rax
	addq	$128, %rax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movq	%rdi, %rax
	addq	$660, %rax              # imm = 0x294
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movb	%cl, %al
	movb	%al, 383(%rsp)          # 1-byte Spill
	movq	%rdi, 368(%rsp)         # 8-byte Spill
	movq	%rdx, 360(%rsp)         # 8-byte Spill
	movq	%rsi, 352(%rsp)         # 8-byte Spill
	movq	%r8, 344(%rsp)          # 8-byte Spill
	movq	%r9, 336(%rsp)          # 8-byte Spill
	movq	%r10, 328(%rsp)         # 8-byte Spill
	movq	%r11, 320(%rsp)         # 8-byte Spill
	movq	%rbx, 312(%rsp)         # 8-byte Spill
	movq	%r14, 304(%rsp)         # 8-byte Spill
	movq	%r15, 296(%rsp)         # 8-byte Spill
	movq	%r12, 288(%rsp)         # 8-byte Spill
	movq	%r13, 280(%rsp)         # 8-byte Spill
	movq	%rbp, 272(%rsp)         # 8-byte Spill
	movb	%cl, 271(%rsp)          # 1-byte Spill
.LBB39_1:                               # %while.cond.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_2 Depth 2
                                        #     Child Loop BB39_5 Depth 2
                                        #     Child Loop BB39_22 Depth 2
                                        #     Child Loop BB39_36 Depth 2
	movb	271(%rsp), %al          # 1-byte Reload
	movb	383(%rsp), %cl          # 1-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movl	(%rdx), %esi
	movl	$6130, 404(%rsp)        # imm = 0x17F2
	movb	%al, 270(%rsp)          # 1-byte Spill
	movb	%cl, 269(%rsp)          # 1-byte Spill
	movl	%esi, 264(%rsp)         # 4-byte Spill
.LBB39_2:                               # %while.cond
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	264(%rsp), %eax         # 4-byte Reload
	subl	$1, %eax
	movl	%eax, 260(%rsp)         # 4-byte Spill
	je	.LBB39_3
	jmp	.LBB39_59
.LBB39_59:                              # %while.cond
                                        #   in Loop: Header=BB39_2 Depth=2
	movl	264(%rsp), %eax         # 4-byte Reload
	subl	$2, %eax
	movb	269(%rsp), %cl          # 1-byte Reload
	movl	%eax, 256(%rsp)         # 4-byte Spill
	movb	%cl, 255(%rsp)          # 1-byte Spill
	je	.LBB39_18
	jmp	.LBB39_2
.LBB39_3:                               # %if.then
                                        #   in Loop: Header=BB39_1 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$6132, 404(%rsp)        # imm = 0x17F4
	movl	32(%rsi), %eax
	movl	$6134, 404(%rsp)        # imm = 0x17F6
	movq	336(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %r8d
	movl	$6142, 404(%rsp)        # imm = 0x17FE
	cmpl	$0, %eax
	movl	%r8d, %eax
	movl	%eax, 248(%rsp)         # 4-byte Spill
	movq	%rsi, 240(%rsp)         # 8-byte Spill
	movl	%r8d, 236(%rsp)         # 4-byte Spill
	movb	%cl, 235(%rsp)          # 1-byte Spill
	je	.LBB39_9
# %bb.4:                                # %if.end.i.preheader
                                        #   in Loop: Header=BB39_1 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movl	236(%rsp), %eax         # 4-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	%rdx, 224(%rsp)         # 8-byte Spill
	movl	%eax, 220(%rsp)         # 4-byte Spill
	movb	%cl, 219(%rsp)          # 1-byte Spill
	jmp	.LBB39_5
.LBB39_5:                               # %if.end.i
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	219(%rsp), %al          # 1-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movl	220(%rsp), %edx         # 4-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %edi
	movl	$6145, 404(%rsp)        # imm = 0x1801
	cmpl	%edi, %edx
	movl	%edx, %edi
	movl	%edi, 248(%rsp)         # 4-byte Spill
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	movl	%edx, 204(%rsp)         # 4-byte Spill
	movb	%al, 235(%rsp)          # 1-byte Spill
	jge	.LBB39_9
# %bb.6:                                # %if.end3.i
                                        #   in Loop: Header=BB39_5 Depth=2
	movq	312(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$6148, 404(%rsp)        # imm = 0x1804
	movl	204(%rsp), %edx         # 4-byte Reload
	movslq	%edx, %rsi
	movb	(%rcx,%rsi), %dil
	movl	$6150, 404(%rsp)        # imm = 0x1806
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	24(%rcx), %rsi
	movl	$6151, 404(%rsp)        # imm = 0x1807
	movb	%dil, (%rsi)
	movl	$6152, 404(%rsp)        # imm = 0x1808
	movq	336(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %r8d
	movl	$6153, 404(%rsp)        # imm = 0x1809
	addl	$1, %r8d
	movl	%r8d, (%rsi)
	movl	$6140, 404(%rsp)        # imm = 0x17FC
	movq	368(%rsp), %r9          # 8-byte Reload
	movq	(%r9), %r10
	movl	$6155, 404(%rsp)        # imm = 0x180B
	movl	32(%r10), %r11d
	movl	$6157, 404(%rsp)        # imm = 0x180D
	addl	$-1, %r11d
	movl	%r11d, 32(%r10)
	movl	$6159, 404(%rsp)        # imm = 0x180F
	movq	24(%r10), %rbx
	movl	$6161, 404(%rsp)        # imm = 0x1811
	addq	$1, %rbx
	movq	%rbx, 24(%r10)
	movl	$6163, 404(%rsp)        # imm = 0x1813
	movl	36(%r10), %ebp
	movl	$6165, 404(%rsp)        # imm = 0x1815
	addl	$1, %ebp
	movl	%ebp, 36(%r10)
	movl	$6169, 404(%rsp)        # imm = 0x1819
	cmpl	$0, %ebp
	movl	%r8d, 200(%rsp)         # 4-byte Spill
	movq	%r10, 192(%rsp)         # 8-byte Spill
	movl	%r11d, 188(%rsp)        # 4-byte Spill
	jne	.LBB39_8
# %bb.7:                                # %if.then16.i
                                        #   in Loop: Header=BB39_5 Depth=2
	movq	192(%rsp), %rax         # 8-byte Reload
	movl	40(%rax), %ecx
	movl	$6171, 404(%rsp)        # imm = 0x181B
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
	movl	$6178, 404(%rsp)        # imm = 0x1822
.LBB39_8:                               # %if.end19.i
                                        #   in Loop: Header=BB39_5 Depth=2
	movb	$1, %al
	movl	188(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movl	200(%rsp), %edx         # 4-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movb	%al, %dil
	movl	200(%rsp), %r8d         # 4-byte Reload
	movl	%r8d, 248(%rsp)         # 4-byte Spill
	movl	%edx, 220(%rsp)         # 4-byte Spill
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	movb	%dil, 219(%rsp)         # 1-byte Spill
	movb	%al, 235(%rsp)          # 1-byte Spill
	jne	.LBB39_5
.LBB39_9:                               # %copy_output_until_stop.exit
                                        #   in Loop: Header=BB39_1 Depth=1
	movb	235(%rsp), %al          # 1-byte Reload
	movl	248(%rsp), %ecx         # 4-byte Reload
	movb	269(%rsp), %dl          # 1-byte Reload
	orb	%dl, %al
	movq	320(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %edi
	movl	$6181, 404(%rsp)        # imm = 0x1825
	cmpl	%edi, %ecx
	movb	%al, %r8b
	movb	270(%rsp), %r9b         # 1-byte Reload
	movb	%al, 187(%rsp)          # 1-byte Spill
	movb	%r8b, 186(%rsp)         # 1-byte Spill
	movb	%r9b, 185(%rsp)         # 1-byte Spill
	jl	.LBB39_58
# %bb.10:                               # %if.end
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	328(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6184, 404(%rsp)        # imm = 0x1828
	cmpl	$4, %ecx
	movl	%ecx, 180(%rsp)         # 4-byte Spill
	jne	.LBB39_14
# %bb.11:                               # %land.lhs.true
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	288(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6187, 404(%rsp)        # imm = 0x182B
	cmpl	$0, %ecx
	jne	.LBB39_14
# %bb.12:                               # %land.lhs.true11
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	360(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6190, 404(%rsp)        # imm = 0x182E
	cmpl	$256, %ecx              # imm = 0x100
	movb	187(%rsp), %dl          # 1-byte Reload
	movb	270(%rsp), %sil         # 1-byte Reload
	movb	%dl, 186(%rsp)          # 1-byte Spill
	movb	%sil, 185(%rsp)         # 1-byte Spill
	jae	.LBB39_58
# %bb.13:                               # %land.lhs.true.i
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	352(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6193, 404(%rsp)        # imm = 0x1831
	cmpl	$0, %ecx
	movb	187(%rsp), %dl          # 1-byte Reload
	movb	270(%rsp), %sil         # 1-byte Reload
	movb	%dl, 186(%rsp)          # 1-byte Spill
	movb	%sil, 185(%rsp)         # 1-byte Spill
	jle	.LBB39_58
.LBB39_14:                              # %if.end15
                                        #   in Loop: Header=BB39_1 Depth=1
	xorl	%esi, %esi
	movl	$256, %eax              # imm = 0x100
	movl	%eax, %edx
	movq	304(%rsp), %rcx         # 8-byte Reload
	movl	$0, (%rcx)
	movl	$6194, 404(%rsp)        # imm = 0x1832
	movq	320(%rsp), %rdi         # 8-byte Reload
	movl	$0, (%rdi)
	movl	$6195, 404(%rsp)        # imm = 0x1833
	movq	336(%rsp), %r8          # 8-byte Reload
	movl	$0, (%r8)
	movl	$6196, 404(%rsp)        # imm = 0x1834
	movq	280(%rsp), %r9          # 8-byte Reload
	movl	$-1, (%r9)
	movl	$6198, 404(%rsp)        # imm = 0x1836
	movq	392(%rsp), %rdi         # 8-byte Reload
	callq	memset
	movq	384(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	movl	$6200, 404(%rsp)        # imm = 0x1838
	addl	$1, %eax
	movl	%eax, (%rcx)
	movl	$6201, 404(%rsp)        # imm = 0x1839
	movq	344(%rsp), %rdx         # 8-byte Reload
	movl	$2, (%rdx)
	movl	$6204, 404(%rsp)        # imm = 0x183C
	movl	180(%rsp), %eax         # 4-byte Reload
	cmpl	$3, %eax
	movb	187(%rsp), %r10b        # 1-byte Reload
	movl	%eax, 176(%rsp)         # 4-byte Spill
	movb	%r10b, 175(%rsp)        # 1-byte Spill
	jne	.LBB39_19
# %bb.15:                               # %land.lhs.true20
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	288(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6207, 404(%rsp)        # imm = 0x183F
	cmpl	$0, %ecx
	movb	187(%rsp), %dl          # 1-byte Reload
	movb	%dl, 255(%rsp)          # 1-byte Spill
	jne	.LBB39_18
# %bb.16:                               # %land.lhs.true24
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	360(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6210, 404(%rsp)        # imm = 0x1842
	cmpl	$256, %ecx              # imm = 0x100
	movb	187(%rsp), %dl          # 1-byte Reload
	movb	270(%rsp), %sil         # 1-byte Reload
	movb	%dl, 186(%rsp)          # 1-byte Spill
	movb	%sil, 185(%rsp)         # 1-byte Spill
	jae	.LBB39_58
# %bb.17:                               # %land.lhs.true.i126
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	352(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6214, 404(%rsp)        # imm = 0x1846
	cmpl	$0, %ecx
	movb	187(%rsp), %dl          # 1-byte Reload
	movb	187(%rsp), %sil         # 1-byte Reload
	movb	270(%rsp), %dil         # 1-byte Reload
	movb	%dl, 255(%rsp)          # 1-byte Spill
	movb	%sil, 186(%rsp)         # 1-byte Spill
	movb	%dil, 185(%rsp)         # 1-byte Spill
	jle	.LBB39_58
.LBB39_18:                              # %if.end30.if.then34_crit_edge
                                        #   in Loop: Header=BB39_1 Depth=1
	movb	255(%rsp), %al          # 1-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$6218, 404(%rsp)        # imm = 0x184A
	movl	%edx, 176(%rsp)         # 4-byte Spill
	movb	%al, 175(%rsp)          # 1-byte Spill
.LBB39_19:                              # %if.then34
                                        #   in Loop: Header=BB39_1 Depth=1
	movb	175(%rsp), %al          # 1-byte Reload
	movl	176(%rsp), %ecx         # 4-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movl	(%rdx), %esi
	movl	$6219, 404(%rsp)        # imm = 0x184B
	movq	296(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %r8d
	movl	$6223, 404(%rsp)        # imm = 0x184F
	cmpl	%r8d, %esi
	setl	%r9b
	cmpl	$2, %ecx
	movb	%al, 174(%rsp)          # 1-byte Spill
	movb	%r9b, 173(%rsp)         # 1-byte Spill
	movl	%esi, 168(%rsp)         # 4-byte Spill
	movl	%r8d, 164(%rsp)         # 4-byte Spill
	jne	.LBB39_34
# %bb.20:                               # %if.then.i106
                                        #   in Loop: Header=BB39_1 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movb	173(%rsp), %dl          # 1-byte Reload
	testb	$1, %dl
	movl	164(%rsp), %eax         # 4-byte Reload
	movl	168(%rsp), %esi         # 4-byte Reload
	movl	%esi, 160(%rsp)         # 4-byte Spill
	movl	%eax, 156(%rsp)         # 4-byte Spill
	movb	%cl, 155(%rsp)          # 1-byte Spill
	jne	.LBB39_21
	jmp	.LBB39_49
.LBB39_21:                              # %if.end.lr.ph.i108
                                        #   in Loop: Header=BB39_1 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$6225, 404(%rsp)        # imm = 0x1851
	movl	8(%rsi), %eax
	movl	$6239, 404(%rsp)        # imm = 0x185F
	movl	164(%rsp), %edi         # 4-byte Reload
	movl	168(%rsp), %r8d         # 4-byte Reload
	movl	%r8d, 148(%rsp)         # 4-byte Spill
	movl	%eax, 144(%rsp)         # 4-byte Spill
	movl	%edi, 140(%rsp)         # 4-byte Spill
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	movb	%cl, 127(%rsp)          # 1-byte Spill
.LBB39_22:                              # %if.end.i109
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	127(%rsp), %al          # 1-byte Reload
	movl	148(%rsp), %ecx         # 4-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movl	144(%rsp), %esi         # 4-byte Reload
	movl	140(%rsp), %edi         # 4-byte Reload
	cmpl	$0, %esi
	movl	%ecx, %esi
	movl	%esi, 160(%rsp)         # 4-byte Spill
	movl	%ecx, 120(%rsp)         # 4-byte Spill
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movl	%edi, 156(%rsp)         # 4-byte Spill
	movb	%al, 155(%rsp)          # 1-byte Spill
	je	.LBB39_49
# %bb.23:                               # %if.end5.i
                                        #   in Loop: Header=BB39_22 Depth=2
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$6240, 404(%rsp)        # imm = 0x1860
	movb	(%rcx), %dl
	movl	$6242, 404(%rsp)        # imm = 0x1862
	movzbl	%dl, %esi
	movq	360(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edi
	movl	$6244, 404(%rsp)        # imm = 0x1864
	movq	352(%rsp), %r8          # 8-byte Reload
	movl	(%r8), %r9d
	movl	$6249, 404(%rsp)        # imm = 0x1869
	cmpl	%esi, %edi
	movl	%esi, 108(%rsp)         # 4-byte Spill
	movl	%edi, 104(%rsp)         # 4-byte Spill
	movl	%r9d, 100(%rsp)         # 4-byte Spill
	je	.LBB39_26
# %bb.24:                               # %land.lhs.true.i110
                                        #   in Loop: Header=BB39_22 Depth=2
	movl	100(%rsp), %eax         # 4-byte Reload
	cmpl	$1, %eax
	jne	.LBB39_27
# %bb.25:                               # %if.then11.i
                                        #   in Loop: Header=BB39_22 Depth=2
	movl	104(%rsp), %eax         # 4-byte Reload
	movb	%al, %cl
	movq	280(%rsp), %rdx         # 8-byte Reload
	movl	(%rdx), %esi
	movl	$6256, 404(%rsp)        # imm = 0x1870
	movl	%esi, %edi
	shll	$8, %edi
	shrl	$24, %esi
	andl	$255, %eax
	xorl	%eax, %esi
	movl	%esi, %eax
	movl	%eax, %r8d
	movl	BZ2_crc32Table(,%r8,4), %eax
	movl	$6258, 404(%rsp)        # imm = 0x1872
	xorl	%eax, %edi
	movl	%edi, (%rdx)
	movl	$6261, 404(%rsp)        # imm = 0x1875
	movl	104(%rsp), %eax         # 4-byte Reload
	movl	%eax, %esi
	movl	%esi, %r8d
	movq	368(%rsp), %r9          # 8-byte Reload
	movb	$1, 128(%r9,%r8)
	movl	$6262, 404(%rsp)        # imm = 0x1876
	movq	272(%rsp), %r8          # 8-byte Reload
	movq	(%r8), %r10
	movl	$6265, 404(%rsp)        # imm = 0x1879
	movl	120(%rsp), %esi         # 4-byte Reload
	movslq	%esi, %r11
	movb	%cl, (%r10,%r11)
	movl	$6266, 404(%rsp)        # imm = 0x187A
	movq	304(%rsp), %r10         # 8-byte Reload
	movl	(%r10), %edi
	movl	$6268, 404(%rsp)        # imm = 0x187C
	addl	$1, %edi
	movl	%edi, (%r10)
	movl	$6269, 404(%rsp)        # imm = 0x187D
	movq	360(%rsp), %r11         # 8-byte Reload
	movl	108(%rsp), %edi         # 4-byte Reload
	movl	%edi, (%r11)
	movl	$6279, 404(%rsp)        # imm = 0x1887
	jmp	.LBB39_31
.LBB39_26:                              # %lor.lhs.false.i
                                        #   in Loop: Header=BB39_22 Depth=2
	movl	100(%rsp), %eax         # 4-byte Reload
	cmpl	$255, %eax
	jne	.LBB39_30
.LBB39_27:                              # %if.then32.i
                                        #   in Loop: Header=BB39_22 Depth=2
	movl	104(%rsp), %eax         # 4-byte Reload
	cmpl	$256, %eax              # imm = 0x100
	jae	.LBB39_29
# %bb.28:                               # %if.then36.i
                                        #   in Loop: Header=BB39_22 Depth=2
	movq	368(%rsp), %rdi         # 8-byte Reload
	callq	add_pair_to_block
.LBB39_29:                              # %if.end37.i
                                        #   in Loop: Header=BB39_22 Depth=2
	movq	360(%rsp), %rax         # 8-byte Reload
	movl	108(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$6280, 404(%rsp)        # imm = 0x1888
	movq	352(%rsp), %rdx         # 8-byte Reload
	movl	$1, (%rdx)
	movl	$6283, 404(%rsp)        # imm = 0x188B
	jmp	.LBB39_31
.LBB39_30:                              # %if.else40.i
                                        #   in Loop: Header=BB39_22 Depth=2
	movl	100(%rsp), %eax         # 4-byte Reload
	addl	$1, %eax
	movq	352(%rsp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	$6232, 404(%rsp)        # imm = 0x1858
.LBB39_31:                              # %if.end44.i
                                        #   in Loop: Header=BB39_22 Depth=2
	movq	368(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$6286, 404(%rsp)        # imm = 0x188E
	movq	(%rcx), %rdx
	movl	$6288, 404(%rsp)        # imm = 0x1890
	addq	$1, %rdx
	movq	%rdx, (%rcx)
	movl	$6290, 404(%rsp)        # imm = 0x1892
	movl	8(%rcx), %esi
	movl	$6291, 404(%rsp)        # imm = 0x1893
	addl	$-1, %esi
	movl	%esi, 8(%rcx)
	movl	$6293, 404(%rsp)        # imm = 0x1895
	movl	12(%rcx), %edi
	movl	$6295, 404(%rsp)        # imm = 0x1897
	addl	$1, %edi
	movl	%edi, 12(%rcx)
	movl	$6299, 404(%rsp)        # imm = 0x189B
	cmpl	$0, %edi
	movq	%rcx, 88(%rsp)          # 8-byte Spill
	movl	%esi, 84(%rsp)          # 4-byte Spill
	jne	.LBB39_33
# %bb.32:                               # %if.then55.i
                                        #   in Loop: Header=BB39_22 Depth=2
	movq	88(%rsp), %rax          # 8-byte Reload
	movl	16(%rax), %ecx
	movl	$6301, 404(%rsp)        # imm = 0x189D
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movl	$6234, 404(%rsp)        # imm = 0x185A
.LBB39_33:                              # %if.end58.i
                                        #   in Loop: Header=BB39_22 Depth=2
	movb	$1, %al
	movq	304(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$6228, 404(%rsp)        # imm = 0x1854
	movq	296(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %edi
	movl	$6306, 404(%rsp)        # imm = 0x18A2
	cmpl	%edi, %edx
	movl	%edi, %r8d
	movl	84(%rsp), %r9d          # 4-byte Reload
	movq	88(%rsp), %r10          # 8-byte Reload
	movl	%edx, %r11d
	movb	%al, %bl
	movl	%edx, 160(%rsp)         # 4-byte Spill
	movl	%edi, 156(%rsp)         # 4-byte Spill
	movb	%bl, 127(%rsp)          # 1-byte Spill
	movl	%r8d, 140(%rsp)         # 4-byte Spill
	movl	%r9d, 144(%rsp)         # 4-byte Spill
	movq	%r10, 128(%rsp)         # 8-byte Spill
	movl	%r11d, 148(%rsp)        # 4-byte Spill
	movb	%al, 155(%rsp)          # 1-byte Spill
	jl	.LBB39_22
	jmp	.LBB39_49
.LBB39_34:                              # %if.else59.i
                                        #   in Loop: Header=BB39_1 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movb	173(%rsp), %dl          # 1-byte Reload
	testb	$1, %dl
	movl	164(%rsp), %eax         # 4-byte Reload
	movl	168(%rsp), %esi         # 4-byte Reload
	movl	%esi, 160(%rsp)         # 4-byte Spill
	movl	%eax, 156(%rsp)         # 4-byte Spill
	movb	%cl, 155(%rsp)          # 1-byte Spill
	jne	.LBB39_35
	jmp	.LBB39_49
.LBB39_35:                              # %if.end67.lr.ph.i
                                        #   in Loop: Header=BB39_1 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$6308, 404(%rsp)        # imm = 0x18A4
	movl	8(%rsi), %eax
	movl	$6321, 404(%rsp)        # imm = 0x18B1
	movl	164(%rsp), %edi         # 4-byte Reload
	movl	168(%rsp), %r8d         # 4-byte Reload
	movl	%r8d, 80(%rsp)          # 4-byte Spill
	movl	%eax, 76(%rsp)          # 4-byte Spill
	movl	%edi, 72(%rsp)          # 4-byte Spill
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movb	%cl, 63(%rsp)           # 1-byte Spill
.LBB39_36:                              # %if.end67.i
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	63(%rsp), %al           # 1-byte Reload
	movl	80(%rsp), %ecx          # 4-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movl	76(%rsp), %esi          # 4-byte Reload
	movl	72(%rsp), %edi          # 4-byte Reload
	cmpl	$0, %esi
	movl	%edi, %esi
	movl	%ecx, %r8d
	movb	%al, %r9b
	movb	%al, 62(%rsp)           # 1-byte Spill
	movl	%ecx, 56(%rsp)          # 4-byte Spill
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	movl	%edi, 44(%rsp)          # 4-byte Spill
	movl	%esi, 156(%rsp)         # 4-byte Spill
	movl	%r8d, 160(%rsp)         # 4-byte Spill
	movb	%r9b, 155(%rsp)         # 1-byte Spill
	je	.LBB39_49
# %bb.37:                               # %if.end73.i
                                        #   in Loop: Header=BB39_36 Depth=2
	movq	288(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6325, 404(%rsp)        # imm = 0x18B5
	cmpl	$0, %ecx
	movl	44(%rsp), %ecx          # 4-byte Reload
	movl	56(%rsp), %edx          # 4-byte Reload
	movb	62(%rsp), %sil          # 1-byte Reload
	movl	%ecx, 156(%rsp)         # 4-byte Spill
	movl	%edx, 160(%rsp)         # 4-byte Spill
	movb	%sil, 155(%rsp)         # 1-byte Spill
	je	.LBB39_49
# %bb.38:                               # %if.end77.i
                                        #   in Loop: Header=BB39_36 Depth=2
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rcx
	movl	$6326, 404(%rsp)        # imm = 0x18B6
	movb	(%rcx), %dl
	movl	$6328, 404(%rsp)        # imm = 0x18B8
	movzbl	%dl, %esi
	movq	360(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edi
	movl	$6330, 404(%rsp)        # imm = 0x18BA
	movq	352(%rsp), %r8          # 8-byte Reload
	movl	(%r8), %r9d
	movl	$6335, 404(%rsp)        # imm = 0x18BF
	cmpl	%esi, %edi
	movl	%esi, 40(%rsp)          # 4-byte Spill
	movl	%edi, 36(%rsp)          # 4-byte Spill
	movl	%r9d, 32(%rsp)          # 4-byte Spill
	je	.LBB39_41
# %bb.39:                               # %land.lhs.true85.i
                                        #   in Loop: Header=BB39_36 Depth=2
	movl	32(%rsp), %eax          # 4-byte Reload
	cmpl	$1, %eax
	jne	.LBB39_42
# %bb.40:                               # %if.then89.i
                                        #   in Loop: Header=BB39_36 Depth=2
	movl	36(%rsp), %eax          # 4-byte Reload
	movb	%al, %cl
	movq	280(%rsp), %rdx         # 8-byte Reload
	movl	(%rdx), %esi
	movl	$6342, 404(%rsp)        # imm = 0x18C6
	movl	%esi, %edi
	shll	$8, %edi
	shrl	$24, %esi
	andl	$255, %eax
	xorl	%eax, %esi
	movl	%esi, %eax
	movl	%eax, %r8d
	movl	BZ2_crc32Table(,%r8,4), %eax
	movl	$6344, 404(%rsp)        # imm = 0x18C8
	xorl	%eax, %edi
	movl	%edi, (%rdx)
	movl	$6347, 404(%rsp)        # imm = 0x18CB
	movl	36(%rsp), %eax          # 4-byte Reload
	movl	%eax, %esi
	movl	%esi, %r8d
	movq	368(%rsp), %r9          # 8-byte Reload
	movb	$1, 128(%r9,%r8)
	movl	$6348, 404(%rsp)        # imm = 0x18CC
	movq	272(%rsp), %r8          # 8-byte Reload
	movq	(%r8), %r10
	movl	$6351, 404(%rsp)        # imm = 0x18CF
	movl	56(%rsp), %esi          # 4-byte Reload
	movslq	%esi, %r11
	movb	%cl, (%r10,%r11)
	movl	$6352, 404(%rsp)        # imm = 0x18D0
	movq	304(%rsp), %r10         # 8-byte Reload
	movl	(%r10), %edi
	movl	$6354, 404(%rsp)        # imm = 0x18D2
	addl	$1, %edi
	movl	%edi, (%r10)
	movl	$6355, 404(%rsp)        # imm = 0x18D3
	movq	360(%rsp), %r11         # 8-byte Reload
	movl	40(%rsp), %edi          # 4-byte Reload
	movl	%edi, (%r11)
	movl	$6363, 404(%rsp)        # imm = 0x18DB
	jmp	.LBB39_46
.LBB39_41:                              # %lor.lhs.false118.i
                                        #   in Loop: Header=BB39_36 Depth=2
	movl	32(%rsp), %eax          # 4-byte Reload
	cmpl	$255, %eax
	jne	.LBB39_45
.LBB39_42:                              # %if.then122.i
                                        #   in Loop: Header=BB39_36 Depth=2
	movl	36(%rsp), %eax          # 4-byte Reload
	cmpl	$256, %eax              # imm = 0x100
	jae	.LBB39_44
# %bb.43:                               # %if.then126.i
                                        #   in Loop: Header=BB39_36 Depth=2
	movq	368(%rsp), %rdi         # 8-byte Reload
	callq	add_pair_to_block
.LBB39_44:                              # %if.end127.i
                                        #   in Loop: Header=BB39_36 Depth=2
	movq	360(%rsp), %rax         # 8-byte Reload
	movl	40(%rsp), %ecx          # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$6364, 404(%rsp)        # imm = 0x18DC
	movq	352(%rsp), %rdx         # 8-byte Reload
	movl	$1, (%rdx)
	movl	$6367, 404(%rsp)        # imm = 0x18DF
	jmp	.LBB39_46
.LBB39_45:                              # %if.else130.i
                                        #   in Loop: Header=BB39_36 Depth=2
	movl	32(%rsp), %eax          # 4-byte Reload
	addl	$1, %eax
	movq	352(%rsp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	$6315, 404(%rsp)        # imm = 0x18AB
.LBB39_46:                              # %if.end134.i
                                        #   in Loop: Header=BB39_36 Depth=2
	movq	368(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$6370, 404(%rsp)        # imm = 0x18E2
	movq	(%rcx), %rdx
	movl	$6372, 404(%rsp)        # imm = 0x18E4
	addq	$1, %rdx
	movq	%rdx, (%rcx)
	movl	$6374, 404(%rsp)        # imm = 0x18E6
	movl	8(%rcx), %esi
	movl	$6375, 404(%rsp)        # imm = 0x18E7
	addl	$-1, %esi
	movl	%esi, 8(%rcx)
	movl	$6377, 404(%rsp)        # imm = 0x18E9
	movl	12(%rcx), %edi
	movl	$6379, 404(%rsp)        # imm = 0x18EB
	addl	$1, %edi
	movl	%edi, 12(%rcx)
	movl	$6383, 404(%rsp)        # imm = 0x18EF
	cmpl	$0, %edi
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movl	%esi, 20(%rsp)          # 4-byte Spill
	jne	.LBB39_48
# %bb.47:                               # %if.then148.i
                                        #   in Loop: Header=BB39_36 Depth=2
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	16(%rax), %ecx
	movl	$6385, 404(%rsp)        # imm = 0x18F1
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movl	$6387, 404(%rsp)        # imm = 0x18F3
.LBB39_48:                              # %if.end152.i
                                        #   in Loop: Header=BB39_36 Depth=2
	movb	$1, %al
	movq	288(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$6389, 404(%rsp)        # imm = 0x18F5
	addl	$-1, %edx
	movl	%edx, (%rcx)
	movl	$6317, 404(%rsp)        # imm = 0x18AD
	movq	304(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %edx
	movl	$6311, 404(%rsp)        # imm = 0x18A7
	movq	296(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %r8d
	movl	$6395, 404(%rsp)        # imm = 0x18FB
	cmpl	%r8d, %edx
	movl	%r8d, %r9d
	movl	20(%rsp), %r10d         # 4-byte Reload
	movq	24(%rsp), %r11          # 8-byte Reload
	movl	%edx, %ebx
	movb	%al, %bpl
	movl	%edx, 160(%rsp)         # 4-byte Spill
	movl	%r8d, 156(%rsp)         # 4-byte Spill
	movb	%bpl, 63(%rsp)          # 1-byte Spill
	movl	%r9d, 72(%rsp)          # 4-byte Spill
	movl	%r10d, 76(%rsp)         # 4-byte Spill
	movq	%r11, 64(%rsp)          # 8-byte Spill
	movl	%ebx, 80(%rsp)          # 4-byte Spill
	movb	%al, 155(%rsp)          # 1-byte Spill
	jl	.LBB39_36
.LBB39_49:                              # %copy_input_until_stop.exit
                                        #   in Loop: Header=BB39_1 Depth=1
	movb	155(%rsp), %al          # 1-byte Reload
	movl	160(%rsp), %ecx         # 4-byte Reload
	movl	156(%rsp), %edx         # 4-byte Reload
	movb	270(%rsp), %sil         # 1-byte Reload
	orb	%sil, %al
	movq	328(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %r8d
	movl	$6398, 404(%rsp)        # imm = 0x18FE
	cmpl	$2, %r8d
	movl	%edx, 16(%rsp)          # 4-byte Spill
	movl	%ecx, 12(%rsp)          # 4-byte Spill
	movb	%al, 11(%rsp)           # 1-byte Spill
	movl	%r8d, 4(%rsp)           # 4-byte Spill
	je	.LBB39_55
# %bb.50:                               # %land.lhs.true43
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	288(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6401, 404(%rsp)        # imm = 0x1901
	cmpl	$0, %ecx
	jne	.LBB39_55
# %bb.51:                               # %if.then47
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	360(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6405, 404(%rsp)        # imm = 0x1905
	cmpl	$256, %ecx              # imm = 0x100
	movl	4(%rsp), %ecx           # 4-byte Reload
	movl	%ecx, (%rsp)            # 4-byte Spill
	jae	.LBB39_53
# %bb.52:                               # %if.then.i
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	368(%rsp), %rdi         # 8-byte Reload
	callq	add_pair_to_block
	movq	328(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movl	$6408, 404(%rsp)        # imm = 0x1908
	movl	%eax, (%rsp)            # 4-byte Spill
.LBB39_53:                              # %flush_RL.exit
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	(%rsp), %eax            # 4-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movl	$256, (%rcx)            # imm = 0x100
	movl	$6409, 404(%rsp)        # imm = 0x1909
	movq	352(%rsp), %rdx         # 8-byte Reload
	movl	$0, (%rdx)
	movl	$6415, 404(%rsp)        # imm = 0x190F
	cmpl	$4, %eax
	sete	%sil
	andb	$1, %sil
	movq	368(%rsp), %rdi         # 8-byte Reload
	movzbl	%sil, %esi
	callq	BZ2_compressBlock
	movq	344(%rsp), %rcx         # 8-byte Reload
	movl	$1, (%rcx)
	movl	$6421, 404(%rsp)        # imm = 0x1915
.LBB39_54:                              # %while.cond.outer.backedge
                                        #   in Loop: Header=BB39_1 Depth=1
	movb	174(%rsp), %al          # 1-byte Reload
	movb	11(%rsp), %cl           # 1-byte Reload
	movb	%al, 383(%rsp)          # 1-byte Spill
	movb	%cl, 271(%rsp)          # 1-byte Spill
	jmp	.LBB39_1
.LBB39_55:                              # %if.else
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	12(%rsp), %eax          # 4-byte Reload
	movl	16(%rsp), %ecx          # 4-byte Reload
	cmpl	%ecx, %eax
	jl	.LBB39_57
# %bb.56:                               # %if.then55
                                        #   in Loop: Header=BB39_1 Depth=1
	xorl	%esi, %esi
	movq	368(%rsp), %rdi         # 8-byte Reload
	callq	BZ2_compressBlock
	movq	344(%rsp), %rdi         # 8-byte Reload
	movl	$1, (%rdi)
	movl	$6423, 404(%rsp)        # imm = 0x1917
	jmp	.LBB39_54
.LBB39_57:                              # %if.else57
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	368(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$6425, 404(%rsp)        # imm = 0x1919
	movl	8(%rcx), %edx
	movl	$6437, 404(%rsp)        # imm = 0x1925
	cmpl	$0, %edx
	movb	174(%rsp), %sil         # 1-byte Reload
	movb	11(%rsp), %dil          # 1-byte Reload
	movb	%sil, 186(%rsp)         # 1-byte Spill
	movb	%dil, 185(%rsp)         # 1-byte Spill
	jne	.LBB39_54
.LBB39_58:                              # %while.end
	movb	185(%rsp), %al          # 1-byte Reload
	movb	186(%rsp), %cl          # 1-byte Reload
	orb	%cl, %al
	cmpb	$0, %al
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$408, %rsp              # imm = 0x198
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end39:
	.size	handle_compress, .Lfunc_end39-handle_compress
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function add_pair_to_block
	.type	add_pair_to_block,@function
add_pair_to_block:                      # @add_pair_to_block
	.cfi_startproc
# %bb.0:                                # %entry
	movl	$9999, -4(%rsp)         # imm = 0x270F
	movl	92(%rdi), %eax
	movl	$6440, -4(%rsp)         # imm = 0x1928
	movb	%al, %cl
	movq	%rdi, %rdx
	addq	$96, %rdx
	movl	96(%rdi), %esi
	movl	$6445, -4(%rsp)         # imm = 0x192D
	cmpl	$0, %esi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	movl	%eax, -20(%rsp)         # 4-byte Spill
	movb	%cl, -21(%rsp)          # 1-byte Spill
	movq	%rdx, -32(%rsp)         # 8-byte Spill
	movl	%esi, -36(%rsp)         # 4-byte Spill
	jle	.LBB40_6
# %bb.1:                                # %for.body.lr.ph
	movq	-16(%rsp), %rax         # 8-byte Reload
	addq	$648, %rax              # imm = 0x288
	movl	-20(%rsp), %ecx         # 4-byte Reload
	andl	$255, %ecx
	movq	-16(%rsp), %rdx         # 8-byte Reload
	movl	648(%rdx), %esi
	movl	$6460, -4(%rsp)         # imm = 0x193C
	movl	-36(%rsp), %edi         # 4-byte Reload
	andl	$1, %edi
	movl	-36(%rsp), %r8d         # 4-byte Reload
	cmpl	$1, %r8d
	movl	%esi, %r9d
	movq	%rax, -48(%rsp)         # 8-byte Spill
	movl	%ecx, -52(%rsp)         # 4-byte Spill
	movl	%esi, -56(%rsp)         # 4-byte Spill
	movl	%edi, -60(%rsp)         # 4-byte Spill
	movl	%r9d, -64(%rsp)         # 4-byte Spill
	je	.LBB40_4
# %bb.2:                                # %for.body.lr.ph.new
	movl	-36(%rsp), %eax         # 4-byte Reload
	movl	-60(%rsp), %ecx         # 4-byte Reload
	subl	%ecx, %eax
	movl	-56(%rsp), %edx         # 4-byte Reload
	movl	%edx, -68(%rsp)         # 4-byte Spill
	movl	%eax, -72(%rsp)         # 4-byte Spill
.LBB40_3:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-72(%rsp), %eax         # 4-byte Reload
	movl	-68(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, %edx
	shll	$8, %edx
	shrl	$24, %ecx
	movl	-52(%rsp), %esi         # 4-byte Reload
	xorl	%esi, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edi
	movl	BZ2_crc32Table(,%rdi,4), %ecx
	movl	$6462, -4(%rsp)         # imm = 0x193E
	xorl	%ecx, %edx
	movq	-48(%rsp), %rdi         # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$6468, -4(%rsp)         # imm = 0x1944
	movl	%edx, %ecx
	shll	$8, %ecx
	shrl	$24, %edx
	xorl	%esi, %edx
	movl	%edx, %edx
	movl	%edx, %r8d
	movl	BZ2_crc32Table(,%r8,4), %edx
	movl	$6469, -4(%rsp)         # imm = 0x1945
	xorl	%edx, %ecx
	movl	%ecx, (%rdi)
	movl	$6480, -4(%rsp)         # imm = 0x1950
	addl	$-2, %eax
	cmpl	$0, %eax
	movl	%ecx, %edx
	movl	%eax, -72(%rsp)         # 4-byte Spill
	movl	%edx, -68(%rsp)         # 4-byte Spill
	movl	%ecx, -64(%rsp)         # 4-byte Spill
	jne	.LBB40_3
.LBB40_4:                               # %for.end.loopexit.unr-lcssa
	movl	-64(%rsp), %eax         # 4-byte Reload
	movl	-60(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movl	%eax, -76(%rsp)         # 4-byte Spill
	je	.LBB40_6
# %bb.5:                                # %for.body.epil
	movl	-76(%rsp), %eax         # 4-byte Reload
	shll	$8, %eax
	movl	-76(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %ecx
	movl	-52(%rsp), %edx         # 4-byte Reload
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movl	BZ2_crc32Table(,%rsi,4), %ecx
	movl	$6482, -4(%rsp)         # imm = 0x1952
	xorl	%ecx, %eax
	movq	-48(%rsp), %rsi         # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$6486, -4(%rsp)         # imm = 0x1956
.LBB40_6:                               # %for.end
	movl	-20(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ecx
	movl	%ecx, %edx
	movq	-16(%rsp), %rsi         # 8-byte Reload
	movb	$1, 128(%rsi,%rdx)
	movl	$6490, -4(%rsp)         # imm = 0x195A
	movl	-36(%rsp), %ecx         # 4-byte Reload
	subl	$1, %ecx
	movl	%ecx, -80(%rsp)         # 4-byte Spill
	je	.LBB40_7
	jmp	.LBB40_12
.LBB40_12:                              # %for.end
	movl	-36(%rsp), %eax         # 4-byte Reload
	subl	$2, %eax
	movl	%eax, -84(%rsp)         # 4-byte Spill
	je	.LBB40_8
	jmp	.LBB40_13
.LBB40_13:                              # %for.end
	movl	-36(%rsp), %eax         # 4-byte Reload
	subl	$3, %eax
	movl	%eax, -88(%rsp)         # 4-byte Spill
	je	.LBB40_9
	jmp	.LBB40_10
.LBB40_7:                               # %sw.bb
	movq	-16(%rsp), %rax         # 8-byte Reload
	addq	$64, %rax
	movq	-16(%rsp), %rcx         # 8-byte Reload
	addq	$108, %rcx
	movq	-16(%rsp), %rdx         # 8-byte Reload
	movl	108(%rdx), %esi
	movl	$6493, -4(%rsp)         # imm = 0x195D
	movb	-21(%rsp), %dil         # 1-byte Reload
	movl	%esi, -92(%rsp)         # 4-byte Spill
	movb	%dil, -93(%rsp)         # 1-byte Spill
	movq	%rax, -104(%rsp)        # 8-byte Spill
	movq	%rcx, -112(%rsp)        # 8-byte Spill
	jmp	.LBB40_11
.LBB40_8:                               # %sw.bb14
	movq	-16(%rsp), %rax         # 8-byte Reload
	addq	$64, %rax
	movq	-16(%rsp), %rcx         # 8-byte Reload
	movq	64(%rcx), %rdx
	movl	$6495, -4(%rsp)         # imm = 0x195F
	addq	$108, %rcx
	movq	-16(%rsp), %rsi         # 8-byte Reload
	movl	108(%rsi), %edi
	movl	$6498, -4(%rsp)         # imm = 0x1962
	movslq	%edi, %r8
	movb	-21(%rsp), %r9b         # 1-byte Reload
	movb	%r9b, (%rdx,%r8)
	movl	$6499, -4(%rsp)         # imm = 0x1963
	movl	108(%rsi), %edi
	movl	$6501, -4(%rsp)         # imm = 0x1965
	addl	$1, %edi
	movl	%edi, 108(%rsi)
	movl	$6504, -4(%rsp)         # imm = 0x1968
	movl	%edi, -92(%rsp)         # 4-byte Spill
	movq	%rax, -104(%rsp)        # 8-byte Spill
	movb	%r9b, -93(%rsp)         # 1-byte Spill
	movq	%rcx, -112(%rsp)        # 8-byte Spill
	jmp	.LBB40_11
.LBB40_9:                               # %sw.bb27
	movq	-16(%rsp), %rax         # 8-byte Reload
	addq	$64, %rax
	movq	-16(%rsp), %rcx         # 8-byte Reload
	movq	64(%rcx), %rdx
	movl	$6506, -4(%rsp)         # imm = 0x196A
	addq	$108, %rcx
	movq	-16(%rsp), %rsi         # 8-byte Reload
	movl	108(%rsi), %edi
	movl	$6509, -4(%rsp)         # imm = 0x196D
	movslq	%edi, %r8
	movb	-21(%rsp), %r9b         # 1-byte Reload
	movb	%r9b, (%rdx,%r8)
	movl	$6510, -4(%rsp)         # imm = 0x196E
	movl	108(%rsi), %edi
	movl	$6512, -4(%rsp)         # imm = 0x1970
	addl	$1, %edi
	movl	%edi, 108(%rsi)
	movl	$6513, -4(%rsp)         # imm = 0x1971
	movq	64(%rsi), %rdx
	movl	$6516, -4(%rsp)         # imm = 0x1974
	movslq	%edi, %r8
	movb	%r9b, (%rdx,%r8)
	movl	$6517, -4(%rsp)         # imm = 0x1975
	movl	108(%rsi), %edi
	movl	$6519, -4(%rsp)         # imm = 0x1977
	addl	$1, %edi
	movl	%edi, 108(%rsi)
	movl	$6524, -4(%rsp)         # imm = 0x197C
	movl	%edi, -92(%rsp)         # 4-byte Spill
	movq	%rax, -104(%rsp)        # 8-byte Spill
	movb	%r9b, -93(%rsp)         # 1-byte Spill
	movq	%rcx, -112(%rsp)        # 8-byte Spill
	jmp	.LBB40_11
.LBB40_10:                              # %sw.default
	movl	-36(%rsp), %eax         # 4-byte Reload
	addl	$-4, %eax
	movslq	%eax, %rcx
	movq	-16(%rsp), %rdx         # 8-byte Reload
	movb	$1, 128(%rdx,%rcx)
	movl	$6526, -4(%rsp)         # imm = 0x197E
	addq	$64, %rdx
	movq	-16(%rsp), %rcx         # 8-byte Reload
	movq	64(%rcx), %rsi
	movl	$6528, -4(%rsp)         # imm = 0x1980
	addq	$108, %rcx
	movq	-16(%rsp), %rdi         # 8-byte Reload
	movl	108(%rdi), %eax
	movl	$6531, -4(%rsp)         # imm = 0x1983
	movslq	%eax, %r8
	movb	-21(%rsp), %r9b         # 1-byte Reload
	movb	%r9b, (%rsi,%r8)
	movl	$6532, -4(%rsp)         # imm = 0x1984
	movl	108(%rdi), %eax
	movl	$6534, -4(%rsp)         # imm = 0x1986
	addl	$1, %eax
	movl	%eax, 108(%rdi)
	movl	$6535, -4(%rsp)         # imm = 0x1987
	movq	64(%rdi), %rsi
	movl	$6538, -4(%rsp)         # imm = 0x198A
	movslq	%eax, %r8
	movb	%r9b, (%rsi,%r8)
	movl	$6539, -4(%rsp)         # imm = 0x198B
	movl	108(%rdi), %eax
	movl	$6541, -4(%rsp)         # imm = 0x198D
	addl	$1, %eax
	movl	%eax, 108(%rdi)
	movl	$6542, -4(%rsp)         # imm = 0x198E
	movq	64(%rdi), %rsi
	movl	$6545, -4(%rsp)         # imm = 0x1991
	movslq	%eax, %r8
	movb	%r9b, (%rsi,%r8)
	movl	$6546, -4(%rsp)         # imm = 0x1992
	movl	108(%rdi), %eax
	movl	$6548, -4(%rsp)         # imm = 0x1994
	addl	$1, %eax
	movl	%eax, 108(%rdi)
	movl	$6549, -4(%rsp)         # imm = 0x1995
	movq	64(%rdi), %rsi
	movl	$6552, -4(%rsp)         # imm = 0x1998
	movslq	%eax, %r8
	movb	%r9b, (%rsi,%r8)
	movl	$6553, -4(%rsp)         # imm = 0x1999
	movl	108(%rdi), %eax
	movl	$6555, -4(%rsp)         # imm = 0x199B
	addl	$1, %eax
	movl	%eax, 108(%rdi)
	movl	$6556, -4(%rsp)         # imm = 0x199C
	movq	-32(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %r10d
	movl	$6564, -4(%rsp)         # imm = 0x19A4
	movb	%r10b, %r11b
	addb	$-4, %r11b
	movl	%eax, -92(%rsp)         # 4-byte Spill
	movb	%r11b, -93(%rsp)        # 1-byte Spill
	movq	%rdx, -104(%rsp)        # 8-byte Spill
	movq	%rcx, -112(%rsp)        # 8-byte Spill
.LBB40_11:                              # %sw.epilog
	movq	-112(%rsp), %rax        # 8-byte Reload
	movb	-93(%rsp), %cl          # 1-byte Reload
	movq	-104(%rsp), %rdx        # 8-byte Reload
	movl	-92(%rsp), %esi         # 4-byte Reload
	movq	(%rdx), %rdx
	movl	$6567, -4(%rsp)         # imm = 0x19A7
	movslq	%esi, %rdi
	movb	%cl, (%rdx,%rdi)
	movl	$6568, -4(%rsp)         # imm = 0x19A8
	movl	(%rax), %esi
	movl	$6570, -4(%rsp)         # imm = 0x19AA
	addl	$1, %esi
	movl	%esi, (%rax)
	movl	$6580, -4(%rsp)         # imm = 0x19B4
	retq
.Lfunc_end40:
	.size	add_pair_to_block, .Lfunc_end40-add_pair_to_block
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressEnd       # -- Begin function BZ2_bzCompressEnd
	.p2align	4, 0x90
	.type	BZ2_bzCompressEnd,@function
BZ2_bzCompressEnd:                      # @BZ2_bzCompressEnd
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$88, %rsp
	.cfi_def_cfa_offset 96
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	$9999, 84(%rsp)         # imm = 0x270F
	cmpq	$0, %rdi
	movq	%rdi, 72(%rsp)          # 8-byte Spill
	movl	%eax, 68(%rsp)          # 4-byte Spill
	je	.LBB41_11
# %bb.1:                                # %if.end
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	72(%rsp), %rcx          # 8-byte Reload
	addq	$48, %rcx
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	48(%rdx), %rsi
	movl	$6584, 84(%rsp)         # imm = 0x19B8
	cmpq	$0, %rsi
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movl	%eax, 68(%rsp)          # 4-byte Spill
	je	.LBB41_11
# %bb.2:                                # %if.end3
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$6588, 84(%rsp)         # imm = 0x19BC
	movq	72(%rsp), %rsi          # 8-byte Reload
	cmpq	%rsi, %rdx
	movl	%eax, 68(%rsp)          # 4-byte Spill
	jne	.LBB41_11
# %bb.3:                                # %if.end7
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	24(%rax), %rcx
	movl	$6592, 84(%rsp)         # imm = 0x19C0
	cmpq	$0, %rcx
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	je	.LBB41_5
# %bb.4:                                # %if.then9
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	64(%rax), %rcx
	movl	$6594, 84(%rsp)         # imm = 0x19C2
	movq	72(%rax), %rdi
	movl	$6599, 84(%rsp)         # imm = 0x19C7
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	%rdx, %rsi
	callq	*%rcx
.LBB41_5:                               # %if.end11
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	32(%rax), %rcx
	movl	$6603, 84(%rsp)         # imm = 0x19CB
	cmpq	$0, %rcx
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	je	.LBB41_7
# %bb.6:                                # %if.then13
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	64(%rax), %rcx
	movl	$6605, 84(%rsp)         # imm = 0x19CD
	movq	72(%rax), %rdi
	movl	$6610, 84(%rsp)         # imm = 0x19D2
	movq	32(%rsp), %rdx          # 8-byte Reload
	movq	%rdx, %rsi
	callq	*%rcx
.LBB41_7:                               # %if.end17
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	40(%rax), %rcx
	movl	$6616, 84(%rsp)         # imm = 0x19D8
	movq	72(%rsp), %rdx          # 8-byte Reload
	addq	$64, %rdx
	cmpq	$0, %rcx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%rdx, 16(%rsp)          # 8-byte Spill
	jne	.LBB41_9
# %bb.8:                                # %if.end17.if.end23_crit_edge
	movq	72(%rsp), %rax          # 8-byte Reload
	addq	$72, %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	jmp	.LBB41_10
.LBB41_9:                               # %if.then19
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rcx
	movl	$6618, 84(%rsp)         # imm = 0x19DA
	movq	72(%rsp), %rdx          # 8-byte Reload
	addq	$72, %rdx
	movq	72(%rsp), %rsi          # 8-byte Reload
	movq	72(%rsi), %rdi
	movl	$6623, 84(%rsp)         # imm = 0x19DF
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	%r8, %rsi
	movq	%rdx, (%rsp)            # 8-byte Spill
	callq	*%rcx
	movq	(%rsp), %rax            # 8-byte Reload
	movq	%rax, 8(%rsp)           # 8-byte Spill
.LBB41_10:                              # %if.end23
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$6624, 84(%rsp)         # imm = 0x19E0
	movq	(%rax), %rdi
	movl	$6625, 84(%rsp)         # imm = 0x19E1
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rsi
	movl	$6627, 84(%rsp)         # imm = 0x19E3
	callq	*%rdx
	xorl	%r8d, %r8d
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	$0, (%rax)
	movl	$6644, 84(%rsp)         # imm = 0x19F4
	movl	%r8d, 68(%rsp)          # 4-byte Spill
.LBB41_11:                              # %cleanup
	movl	68(%rsp), %eax          # 4-byte Reload
	addq	$88, %rsp
	retq
.Lfunc_end41:
	.size	BZ2_bzCompressEnd, .Lfunc_end41-BZ2_bzCompressEnd
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit    # -- Begin function BZ2_bzDecompressInit
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit,@function
BZ2_bzDecompressInit:                   # @BZ2_bzDecompressInit
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$72, %rsp
	.cfi_def_cfa_offset 80
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	$9999, 68(%rsp)         # imm = 0x270F
	cmpq	$0, %rdi
	sete	%cl
	cmpl	$1, %edx
	seta	%r8b
	orb	%r8b, %cl
	cmpl	$4, %esi
	seta	%r8b
	orb	%cl, %r8b
	testb	$1, %r8b
	movl	%esi, 64(%rsp)          # 4-byte Spill
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movl	%edx, 52(%rsp)          # 4-byte Spill
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jne	.LBB42_7
# %bb.1:                                # %if.end10
	movq	56(%rsp), %rax          # 8-byte Reload
	addq	$56, %rax
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	56(%rcx), %rdx
	movl	$6647, 68(%rsp)         # imm = 0x19F7
	cmpq	$0, %rdx
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	jne	.LBB42_3
# %bb.2:                                # %if.then12
	movabsq	$default_bzalloc, %rax
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	movl	$6651, 68(%rsp)         # imm = 0x19FB
	movq	%rax, 32(%rsp)          # 8-byte Spill
.LBB42_3:                               # %if.end14
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	addq	$64, %rcx
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	64(%rdx), %rsi
	movl	$6654, 68(%rsp)         # imm = 0x19FE
	cmpq	$0, %rsi
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	jne	.LBB42_5
# %bb.4:                                # %if.then16
	movabsq	$default_bzfree, %rax
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	movl	$6657, 68(%rsp)         # imm = 0x1A01
.LBB42_5:                               # %if.end18
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	72(%rax), %rdi
	movl	$6663, 68(%rsp)         # imm = 0x1A07
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	*%rcx
	movl	$4294967293, %edx       # imm = 0xFFFFFFFD
	cmpq	$0, %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movl	%edx, 48(%rsp)          # 4-byte Spill
	je	.LBB42_7
# %bb.6:                                # %if.end23
	xorl	%eax, %eax
	movl	$24, %ecx
	movl	%ecx, %edx
	movq	8(%rsp), %rsi           # 8-byte Reload
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	%rdi, (%rsi)
	movl	$6665, 68(%rsp)         # imm = 0x1A09
	movq	%rsi, 48(%rdi)
	movl	$6668, 68(%rsp)         # imm = 0x1A0C
	movl	$10, 8(%rsi)
	movl	$6671, 68(%rsp)         # imm = 0x1A0F
	movl	$0, 36(%rsi)
	movl	$6674, 68(%rsp)         # imm = 0x1A12
	movl	$0, 32(%rsi)
	movl	$6677, 68(%rsp)         # imm = 0x1A15
	movl	$0, 3188(%rsi)
	movl	$6679, 68(%rsp)         # imm = 0x1A17
	movl	$0, 12(%rdi)
	movl	$6681, 68(%rsp)         # imm = 0x1A19
	movl	$0, 16(%rdi)
	movl	$6683, 68(%rsp)         # imm = 0x1A1B
	movl	$0, 36(%rdi)
	movl	$6685, 68(%rsp)         # imm = 0x1A1D
	movl	$0, 40(%rdi)
	movl	$6688, 68(%rsp)         # imm = 0x1A20
	movl	52(%rsp), %ecx          # 4-byte Reload
	movb	%cl, %r8b
	movb	%r8b, 44(%rsi)
	movl	$6692, 68(%rsp)         # imm = 0x1A24
	addq	$3152, %rsi             # imm = 0xC50
	movq	8(%rsp), %r9            # 8-byte Reload
	movl	$0, 48(%r9)
	movl	$6696, 68(%rsp)         # imm = 0x1A28
	movq	%rsi, %rdi
	movl	%eax, %esi
	movl	%eax, 4(%rsp)           # 4-byte Spill
	callq	memset
	movq	8(%rsp), %rdx           # 8-byte Reload
	movl	64(%rsp), %eax          # 4-byte Reload
	movl	%eax, 52(%rdx)
	movl	$6714, 68(%rsp)         # imm = 0x1A3A
	movl	4(%rsp), %ecx           # 4-byte Reload
	movl	%ecx, 48(%rsp)          # 4-byte Spill
.LBB42_7:                               # %cleanup
	movl	48(%rsp), %eax          # 4-byte Reload
	addq	$72, %rsp
	retq
.Lfunc_end42:
	.size	BZ2_bzDecompressInit, .Lfunc_end42-BZ2_bzDecompressInit
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF          # -- Begin function BZ2_indexIntoF
	.p2align	4, 0x90
	.type	BZ2_indexIntoF,@function
BZ2_indexIntoF:                         # @BZ2_indexIntoF
	.cfi_startproc
# %bb.0:                                # %entry
	movl	$256, %eax              # imm = 0x100
	xorl	%ecx, %ecx
	movl	$9999, -4(%rsp)         # imm = 0x270F
	movl	%edi, -8(%rsp)          # 4-byte Spill
	movq	%rsi, -16(%rsp)         # 8-byte Spill
	movl	%eax, -20(%rsp)         # 4-byte Spill
	movl	%ecx, -24(%rsp)         # 4-byte Spill
.LBB43_1:                               # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rsp), %eax         # 4-byte Reload
	movl	-20(%rsp), %ecx         # 4-byte Reload
	movl	%eax, %edx
	addl	%ecx, %edx
	sarl	$1, %edx
	movslq	%edx, %rsi
	movq	-16(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi,%rsi,4), %r8d
	movl	$6728, -4(%rsp)         # imm = 0x1A48
	movl	-8(%rsp), %r9d          # 4-byte Reload
	cmpl	%r9d, %r8d
	cmovgl	%edx, %ecx
	cmpl	%r9d, %r8d
	cmovgl	%eax, %edx
	movl	%ecx, %eax
	subl	%edx, %eax
	cmpl	$1, %eax
	movl	%edx, %eax
	movl	%edx, -28(%rsp)         # 4-byte Spill
	movl	%ecx, -20(%rsp)         # 4-byte Spill
	movl	%eax, -24(%rsp)         # 4-byte Spill
	jne	.LBB43_1
# %bb.2:                                # %do.end
	movl	-28(%rsp), %eax         # 4-byte Reload
	retq
.Lfunc_end43:
	.size	BZ2_indexIntoF, .Lfunc_end43-BZ2_indexIntoF
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress        # -- Begin function BZ2_bzDecompress
	.p2align	4, 0x90
	.type	BZ2_bzDecompress,@function
BZ2_bzDecompress:                       # @BZ2_bzDecompress
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$1320, %rsp             # imm = 0x528
	.cfi_def_cfa_offset 1376
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	$9999, 1316(%rsp)       # imm = 0x270F
	cmpq	$0, %rdi
	movq	%rdi, 1304(%rsp)        # 8-byte Spill
	movl	%eax, 1300(%rsp)        # 4-byte Spill
	je	.LBB44_146
# %bb.1:                                # %if.end
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movq	48(%rcx), %rdx
	movl	$6732, 1316(%rsp)       # imm = 0x1A4C
	cmpq	$0, %rdx
	movq	%rdx, 1288(%rsp)        # 8-byte Spill
	movl	%eax, 1300(%rsp)        # 4-byte Spill
	je	.LBB44_146
# %bb.2:                                # %if.end3
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$6751, 1316(%rsp)       # imm = 0x1A5F
	movq	1304(%rsp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rdx
	movl	%eax, 1300(%rsp)        # 4-byte Spill
	jne	.LBB44_146
# %bb.3:                                # %if.end7
	movq	1288(%rsp), %rax        # 8-byte Reload
	addq	$8, %rax
	movq	1288(%rsp), %rcx        # 8-byte Reload
	addq	$44, %rcx
	movq	1288(%rsp), %rdx        # 8-byte Reload
	addq	$20, %rdx
	movq	1288(%rsp), %rsi        # 8-byte Reload
	addq	$1092, %rsi             # imm = 0x444
	movq	1288(%rsp), %rdi        # 8-byte Reload
	addq	$64080, %rdi            # imm = 0xFA50
	movq	1288(%rsp), %r8         # 8-byte Reload
	addq	$3184, %r8              # imm = 0xC70
	movq	1288(%rsp), %r9         # 8-byte Reload
	addq	$12, %r9
	movq	1288(%rsp), %r10        # 8-byte Reload
	addq	$16, %r10
	movq	1288(%rsp), %r11        # 8-byte Reload
	addq	$64, %r11
	movq	1288(%rsp), %rbx        # 8-byte Reload
	addq	$3152, %rbx             # imm = 0xC50
	movq	1288(%rsp), %r14        # 8-byte Reload
	addq	$60, %r14
	movq	1288(%rsp), %r15        # 8-byte Reload
	addq	$24, %r15
	movq	1288(%rsp), %r12        # 8-byte Reload
	addq	$28, %r12
	movq	1288(%rsp), %r13        # 8-byte Reload
	addq	$52, %r13
	movq	1288(%rsp), %rbp        # 8-byte Reload
	addq	$3160, %rbp             # imm = 0xC58
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movq	1288(%rsp), %rax        # 8-byte Reload
	addq	$3168, %rax             # imm = 0xC60
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	movq	1288(%rsp), %rax        # 8-byte Reload
	addq	$3176, %rax             # imm = 0xC68
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	movq	1288(%rsp), %rax        # 8-byte Reload
	addq	$3188, %rax             # imm = 0xC74
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	movq	1288(%rsp), %rax        # 8-byte Reload
	movl	8(%rax), %eax
	movl	$6759, 1316(%rsp)       # imm = 0x1A67
	movq	%rbp, 1248(%rsp)        # 8-byte Spill
	movq	%rcx, 1240(%rsp)        # 8-byte Spill
	movq	%rdx, 1232(%rsp)        # 8-byte Spill
	movq	%rsi, 1224(%rsp)        # 8-byte Spill
	movq	%rdi, 1216(%rsp)        # 8-byte Spill
	movq	%r8, 1208(%rsp)         # 8-byte Spill
	movq	%r9, 1200(%rsp)         # 8-byte Spill
	movq	%r10, 1192(%rsp)        # 8-byte Spill
	movq	%r11, 1184(%rsp)        # 8-byte Spill
	movq	%rbx, 1176(%rsp)        # 8-byte Spill
	movq	%r14, 1168(%rsp)        # 8-byte Spill
	movq	%r15, 1160(%rsp)        # 8-byte Spill
	movq	%r12, 1152(%rsp)        # 8-byte Spill
	movq	%r13, 1144(%rsp)        # 8-byte Spill
	movl	%eax, 1140(%rsp)        # 4-byte Spill
.LBB44_4:                               # %while.cond.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_5 Depth 2
                                        #     Child Loop BB44_10 Depth 2
                                        #       Child Loop BB44_11 Depth 3
                                        #         Child Loop BB44_18 Depth 4
                                        #         Child Loop BB44_26 Depth 4
                                        #         Child Loop BB44_33 Depth 4
                                        #         Child Loop BB44_40 Depth 4
                                        #         Child Loop BB44_44 Depth 4
                                        #     Child Loop BB44_50 Depth 2
                                        #       Child Loop BB44_51 Depth 3
                                        #         Child Loop BB44_58 Depth 4
                                        #         Child Loop BB44_64 Depth 4
                                        #         Child Loop BB44_69 Depth 4
                                        #         Child Loop BB44_74 Depth 4
                                        #         Child Loop BB44_76 Depth 4
                                        #     Child Loop BB44_81 Depth 2
                                        #       Child Loop BB44_82 Depth 3
                                        #     Child Loop BB44_110 Depth 2
                                        #       Child Loop BB44_113 Depth 3
	movl	1140(%rsp), %eax        # 4-byte Reload
	cmpl	$9, %eax
	setg	%cl
	movl	%eax, 1136(%rsp)        # 4-byte Spill
	movb	%cl, 1135(%rsp)         # 1-byte Spill
.LBB44_5:                               # %while.cond
                                        #   Parent Loop BB44_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	$-1, %eax
	movl	1136(%rsp), %ecx        # 4-byte Reload
	subl	$1, %ecx
	movl	%ecx, 1128(%rsp)        # 4-byte Spill
	movl	%eax, 1300(%rsp)        # 4-byte Spill
	je	.LBB44_146
	jmp	.LBB44_147
.LBB44_147:                             # %while.cond
                                        #   in Loop: Header=BB44_5 Depth=2
	movl	1136(%rsp), %eax        # 4-byte Reload
	subl	$2, %eax
	movl	%eax, 1124(%rsp)        # 4-byte Spill
	jne	.LBB44_139
	jmp	.LBB44_6
.LBB44_6:                               # %if.then14
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	1240(%rsp), %rax        # 8-byte Reload
	movb	(%rax), %cl
	movl	$6761, 1316(%rsp)       # imm = 0x1A69
	movq	1232(%rsp), %rdx        # 8-byte Reload
	movb	(%rdx), %sil
	movl	$6764, 1316(%rsp)       # imm = 0x1A6C
	cmpb	$0, %sil
	sete	%sil
	cmpb	$0, %cl
	movb	%sil, 1123(%rsp)        # 1-byte Spill
	je	.LBB44_78
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	1288(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movl	$6766, 1316(%rsp)       # imm = 0x1A6E
	movl	32(%rcx), %edx
	movl	$6770, 1316(%rsp)       # imm = 0x1A72
	cmpl	$0, %edx
	sete	%sil
	movb	1123(%rsp), %dil        # 1-byte Reload
	testb	$1, %dil
	movq	%rcx, 1112(%rsp)        # 8-byte Spill
	movb	%sil, 1111(%rsp)        # 1-byte Spill
	jne	.LBB44_48
# %bb.8:                                # %if.then.i
                                        #   in Loop: Header=BB44_4 Depth=1
	movb	1111(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB44_131
	jmp	.LBB44_9
.LBB44_9:                               # %if.end.lr.ph.lr.ph.i
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	1192(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6782, 1316(%rsp)       # imm = 0x1A7E
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movl	%ecx, 1104(%rsp)        # 4-byte Spill
	movq	%rdx, 1096(%rsp)        # 8-byte Spill
.LBB44_10:                              # %if.end.i.outer
                                        #   Parent Loop BB44_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_11 Depth 3
                                        #         Child Loop BB44_18 Depth 4
                                        #         Child Loop BB44_26 Depth 4
                                        #         Child Loop BB44_33 Depth 4
                                        #         Child Loop BB44_40 Depth 4
                                        #         Child Loop BB44_44 Depth 4
	movq	1096(%rsp), %rax        # 8-byte Reload
	movl	1104(%rsp), %ecx        # 4-byte Reload
	movq	%rax, %rdx
	addq	$32, %rdx
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	movq	%rdx, 1080(%rsp)        # 8-byte Spill
	movl	%ecx, 1076(%rsp)        # 4-byte Spill
.LBB44_11:                              # %if.end.i
                                        #   Parent Loop BB44_4 Depth=1
                                        #     Parent Loop BB44_10 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_18 Depth 4
                                        #         Child Loop BB44_26 Depth 4
                                        #         Child Loop BB44_33 Depth 4
                                        #         Child Loop BB44_40 Depth 4
                                        #         Child Loop BB44_44 Depth 4
	movl	1076(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB44_15
# %bb.12:                               # %if.end6.i
                                        #   in Loop: Header=BB44_10 Depth=2
	movq	1200(%rsp), %rax        # 8-byte Reload
	movb	(%rax), %cl
	movl	$6784, 1316(%rsp)       # imm = 0x1A80
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	24(%rdx), %rsi
	movl	$6785, 1316(%rsp)       # imm = 0x1A81
	movb	%cl, (%rsi)
	movl	$6786, 1316(%rsp)       # imm = 0x1A82
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %edi
	movl	$6789, 1316(%rsp)       # imm = 0x1A85
	movl	%edi, %r8d
	shll	$8, %r8d
	shrl	$24, %edi
	movb	(%rax), %cl
	movl	$6794, 1316(%rsp)       # imm = 0x1A8A
	movzbl	%cl, %r9d
	xorl	%r9d, %edi
	movl	%edi, %edi
	movl	%edi, %r10d
	movl	BZ2_crc32Table(,%r10,4), %edi
	movl	$6796, 1316(%rsp)       # imm = 0x1A8C
	xorl	%r8d, %edi
	movl	%edi, (%rsi)
	movl	$6797, 1316(%rsp)       # imm = 0x1A8D
	movq	1192(%rsp), %r10        # 8-byte Reload
	movl	(%r10), %edi
	movl	$6798, 1316(%rsp)       # imm = 0x1A8E
	addl	$-1, %edi
	movl	%edi, (%r10)
	movl	$6775, 1316(%rsp)       # imm = 0x1A77
	movq	1288(%rsp), %r11        # 8-byte Reload
	movq	(%r11), %rbx
	movl	$6800, 1316(%rsp)       # imm = 0x1A90
	movq	24(%rbx), %r14
	movl	$6802, 1316(%rsp)       # imm = 0x1A92
	addq	$1, %r14
	movq	%r14, 24(%rbx)
	movl	$6804, 1316(%rsp)       # imm = 0x1A94
	movl	32(%rbx), %r8d
	movl	$6806, 1316(%rsp)       # imm = 0x1A96
	addl	$-1, %r8d
	movl	%r8d, 32(%rbx)
	movl	$6808, 1316(%rsp)       # imm = 0x1A98
	movl	36(%rbx), %r9d
	movl	$6810, 1316(%rsp)       # imm = 0x1A9A
	addl	$1, %r9d
	movl	%r9d, 36(%rbx)
	movl	$6814, 1316(%rsp)       # imm = 0x1A9E
	cmpl	$0, %r9d
	movl	%edi, 1072(%rsp)        # 4-byte Spill
	movq	%rbx, 1064(%rsp)        # 8-byte Spill
	movl	%r8d, 1060(%rsp)        # 4-byte Spill
	jne	.LBB44_14
# %bb.13:                               # %if.then23.i
                                        #   in Loop: Header=BB44_10 Depth=2
	movq	1064(%rsp), %rax        # 8-byte Reload
	movl	40(%rax), %ecx
	movl	$6816, 1316(%rsp)       # imm = 0x1AA0
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
	movl	$6820, 1316(%rsp)       # imm = 0x1AA4
.LBB44_14:                              # %if.end26.i
                                        #   in Loop: Header=BB44_10 Depth=2
	movl	1060(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	movl	1072(%rsp), %ecx        # 4-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movl	%ecx, 1104(%rsp)        # 4-byte Spill
	movq	%rdx, 1096(%rsp)        # 8-byte Spill
	je	.LBB44_131
	jmp	.LBB44_10
.LBB44_15:                              # %while.end.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movq	1224(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$6821, 1316(%rsp)       # imm = 0x1AA5
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %esi
	movl	$6827, 1316(%rsp)       # imm = 0x1AAB
	movl	%esi, %edi
	addl	$1, %edi
	cmpl	%edi, %ecx
	movl	%ecx, 1056(%rsp)        # 4-byte Spill
	movl	%esi, 1052(%rsp)        # 4-byte Spill
	movl	%edi, 1048(%rsp)        # 4-byte Spill
	je	.LBB44_131
# %bb.16:                               # %if.end30.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movl	1056(%rsp), %ecx        # 4-byte Reload
	movl	1048(%rsp), %edx        # 4-byte Reload
	cmpl	%edx, %ecx
	movl	%eax, 1300(%rsp)        # 4-byte Spill
	jg	.LBB44_146
# %bb.17:                               # %if.end37.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	$256, %eax              # imm = 0x100
	xorl	%ecx, %ecx
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movl	$1, (%rdx)
	movl	$6828, 1316(%rsp)       # imm = 0x1AAC
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %edi
	movl	$6830, 1316(%rsp)       # imm = 0x1AAE
	movb	%dil, %r8b
	movq	1200(%rsp), %r9         # 8-byte Reload
	movb	%r8b, (%r9)
	movl	$6831, 1316(%rsp)       # imm = 0x1AAF
	movq	1168(%rsp), %r10        # 8-byte Reload
	movl	(%r10), %r11d
	movl	$6841, 1316(%rsp)       # imm = 0x1AB9
	movl	%r11d, 1044(%rsp)       # 4-byte Spill
	movl	%eax, 1040(%rsp)        # 4-byte Spill
	movl	%edi, 1036(%rsp)        # 4-byte Spill
	movl	%ecx, 1032(%rsp)        # 4-byte Spill
.LBB44_18:                              # %do.body.i.i
                                        #   Parent Loop BB44_4 Depth=1
                                        #     Parent Loop BB44_10 Depth=2
                                        #       Parent Loop BB44_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	1032(%rsp), %eax        # 4-byte Reload
	movl	1040(%rsp), %ecx        # 4-byte Reload
	movl	%eax, %edx
	addl	%ecx, %edx
	sarl	$1, %edx
	movslq	%edx, %rsi
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movl	1096(%rdi,%rsi,4), %r8d
	movl	$6846, 1316(%rsp)       # imm = 0x1ABE
	movl	1044(%rsp), %r9d        # 4-byte Reload
	cmpl	%r9d, %r8d
	cmovgl	%edx, %ecx
	cmpl	%r9d, %r8d
	cmovgl	%eax, %edx
	movl	%ecx, %eax
	subl	%edx, %eax
	cmpl	$1, %eax
	movl	%edx, %eax
	movl	%edx, 1028(%rsp)        # 4-byte Spill
	movl	%ecx, 1040(%rsp)        # 4-byte Spill
	movl	%eax, 1032(%rsp)        # 4-byte Spill
	jne	.LBB44_18
# %bb.19:                               # %BZ2_indexIntoF.exit.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movq	1248(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movl	$6849, 1316(%rsp)       # imm = 0x1AC1
	movl	1044(%rsp), %edx        # 4-byte Reload
	movl	%edx, %esi
	movl	%esi, %edi
	movw	(%rcx,%rdi,2), %r8w
	movl	$6851, 1316(%rsp)       # imm = 0x1AC3
	movzwl	%r8w, %esi
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	(%rdi), %r9
	movl	$6855, 1316(%rsp)       # imm = 0x1AC7
	shrl	$1, %edx
	movl	%edx, %edx
	movl	%edx, %r10d
	movb	(%r9,%r10), %r11b
	movl	$6863, 1316(%rsp)       # imm = 0x1ACF
	movzbl	%r11b, %edx
	movl	1044(%rsp), %ebx        # 4-byte Reload
	shll	$2, %ebx
	andl	$4, %ebx
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	movl	%ebx, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	shll	$16, %edx
	andl	$983040, %edx           # imm = 0xF0000
	orl	%esi, %edx
	movq	1168(%rsp), %r10        # 8-byte Reload
	movl	%edx, (%r10)
	movl	$6864, 1316(%rsp)       # imm = 0x1AD0
	movq	1160(%rsp), %r14        # 8-byte Reload
	movl	(%r14), %ebx
	movl	$6867, 1316(%rsp)       # imm = 0x1AD3
	cmpl	$0, %ebx
	movq	%r9, 1008(%rsp)         # 8-byte Spill
	movl	%esi, 1004(%rsp)        # 4-byte Spill
	movl	%edx, 1000(%rsp)        # 4-byte Spill
	movl	%ebx, 996(%rsp)         # 4-byte Spill
	jne	.LBB44_21
# %bb.20:                               # %if.then59.i
                                        #   in Loop: Header=BB44_11 Depth=3
	xorl	%eax, %eax
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$6870, 1316(%rsp)       # imm = 0x1AD6
	movslq	%edx, %rsi
	movl	BZ2_rNums(,%rsi,4), %edi
	movl	$6871, 1316(%rsp)       # imm = 0x1AD7
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movl	%edi, (%rsi)
	movl	$6874, 1316(%rsp)       # imm = 0x1ADA
	addl	$1, %edx
	cmpl	$512, %edx              # imm = 0x200
	cmovel	%eax, %edx
	movl	%edx, (%rcx)
	movl	$6879, 1316(%rsp)       # imm = 0x1ADF
	movl	%edi, 996(%rsp)         # 4-byte Spill
.LBB44_21:                              # %if.end71.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	996(%rsp), %eax         # 4-byte Reload
	movl	$1, %ecx
	addl	$-1, %eax
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	$6881, 1316(%rsp)       # imm = 0x1AE1
	movl	1056(%rsp), %esi        # 4-byte Reload
	addl	$1, %esi
	movq	1224(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi)
	movl	$6885, 1316(%rsp)       # imm = 0x1AE5
	movl	1056(%rsp), %r8d        # 4-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	cmpl	%r9d, %r8d
	movl	%eax, 992(%rsp)         # 4-byte Spill
	movl	%esi, 988(%rsp)         # 4-byte Spill
	movl	%ecx, 984(%rsp)         # 4-byte Spill
	jne	.LBB44_23
.LBB44_22:                              # %while.cond.backedge.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	984(%rsp), %eax         # 4-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$6894, 1316(%rsp)       # imm = 0x1AEE
	cmpl	$0, %edx
	movl	%eax, 1076(%rsp)        # 4-byte Spill
	je	.LBB44_131
	jmp	.LBB44_11
.LBB44_23:                              # %if.end88.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	992(%rsp), %eax         # 4-byte Reload
	cmpl	$1, %eax
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	1028(%rsp), %esi        # 4-byte Reload
	andl	$255, %esi
	xorl	%edx, %esi
	movl	1036(%rsp), %edx        # 4-byte Reload
	cmpl	%edx, %esi
	movl	%esi, 980(%rsp)         # 4-byte Spill
	je	.LBB44_25
# %bb.24:                               # %if.then93.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	$1, %eax
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movl	980(%rsp), %edx         # 4-byte Reload
	movl	%edx, (%rcx)
	movl	$6896, 1316(%rsp)       # imm = 0x1AF0
	movl	%eax, 984(%rsp)         # 4-byte Spill
	jmp	.LBB44_22
.LBB44_25:                              # %if.end96.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	$256, %eax              # imm = 0x100
	xorl	%ecx, %ecx
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movl	$2, (%rdx)
	movl	$6906, 1316(%rsp)       # imm = 0x1AFA
	movl	%eax, 976(%rsp)         # 4-byte Spill
	movl	%ecx, 972(%rsp)         # 4-byte Spill
.LBB44_26:                              # %do.body.i926.i
                                        #   Parent Loop BB44_4 Depth=1
                                        #     Parent Loop BB44_10 Depth=2
                                        #       Parent Loop BB44_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	972(%rsp), %eax         # 4-byte Reload
	movl	976(%rsp), %ecx         # 4-byte Reload
	movl	%eax, %edx
	addl	%ecx, %edx
	sarl	$1, %edx
	movslq	%edx, %rsi
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movl	1096(%rdi,%rsi,4), %r8d
	movl	$6913, 1316(%rsp)       # imm = 0x1B01
	movl	1000(%rsp), %r9d        # 4-byte Reload
	cmpl	%r9d, %r8d
	cmovgl	%edx, %ecx
	cmpl	%r9d, %r8d
	cmovgl	%eax, %edx
	movl	%ecx, %eax
	subl	%edx, %eax
	cmpl	$1, %eax
	movl	%edx, %eax
	movl	%edx, 968(%rsp)         # 4-byte Spill
	movl	%ecx, 976(%rsp)         # 4-byte Spill
	movl	%eax, 972(%rsp)         # 4-byte Spill
	jne	.LBB44_26
# %bb.27:                               # %BZ2_indexIntoF.exit927.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	1000(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ecx
	movl	%ecx, %edx
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movw	(%rsi,%rdx,2), %di
	movl	$6918, 1316(%rsp)       # imm = 0x1B06
	movzwl	%di, %ecx
	shrl	$1, %eax
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1008(%rsp), %r8         # 8-byte Reload
	movb	(%r8,%rdx), %r9b
	movl	$6926, 1316(%rsp)       # imm = 0x1B0E
	movzbl	%r9b, %eax
	movl	1004(%rsp), %r10d       # 4-byte Reload
	shll	$2, %r10d
	andl	$4, %r10d
	movl	%ecx, 964(%rsp)         # 4-byte Spill
	movl	%r10d, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	shll	$16, %eax
	andl	$983040, %eax           # imm = 0xF0000
	movl	964(%rsp), %r10d        # 4-byte Reload
	orl	%r10d, %eax
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	$6929, 1316(%rsp)       # imm = 0x1B11
	movl	992(%rsp), %r11d        # 4-byte Reload
	cmpl	$0, %r11d
	movl	%eax, 960(%rsp)         # 4-byte Spill
	movl	%r11d, 956(%rsp)        # 4-byte Spill
	jne	.LBB44_29
# %bb.28:                               # %if.then125.i
                                        #   in Loop: Header=BB44_11 Depth=3
	xorl	%eax, %eax
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$6932, 1316(%rsp)       # imm = 0x1B14
	movslq	%edx, %rsi
	movl	BZ2_rNums(,%rsi,4), %edi
	movl	$6933, 1316(%rsp)       # imm = 0x1B15
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movl	%edi, (%rsi)
	movl	$6936, 1316(%rsp)       # imm = 0x1B18
	addl	$1, %edx
	cmpl	$512, %edx              # imm = 0x200
	cmovel	%eax, %edx
	movl	%edx, (%rcx)
	movl	$6941, 1316(%rsp)       # imm = 0x1B1D
	movl	%edi, 956(%rsp)         # 4-byte Spill
.LBB44_29:                              # %if.end138.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	956(%rsp), %eax         # 4-byte Reload
	movl	$2, %ecx
	addl	$-1, %eax
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	$6943, 1316(%rsp)       # imm = 0x1B1F
	movl	1056(%rsp), %esi        # 4-byte Reload
	addl	$2, %esi
	movq	1224(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi)
	movl	$6952, 1316(%rsp)       # imm = 0x1B28
	movl	988(%rsp), %r8d         # 4-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	cmpl	%r9d, %r8d
	movl	%eax, 952(%rsp)         # 4-byte Spill
	movl	%esi, 948(%rsp)         # 4-byte Spill
	movl	%ecx, 984(%rsp)         # 4-byte Spill
	je	.LBB44_22
# %bb.30:                               # %if.end156.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	952(%rsp), %eax         # 4-byte Reload
	cmpl	$1, %eax
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	968(%rsp), %esi         # 4-byte Reload
	andl	$255, %esi
	xorl	%edx, %esi
	movl	1036(%rsp), %edx        # 4-byte Reload
	cmpl	%edx, %esi
	movl	%esi, 944(%rsp)         # 4-byte Spill
	je	.LBB44_32
# %bb.31:                               # %if.then161.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	$2, %eax
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movl	944(%rsp), %edx         # 4-byte Reload
	movl	%edx, (%rcx)
	movl	$6954, 1316(%rsp)       # imm = 0x1B2A
	movl	%eax, 984(%rsp)         # 4-byte Spill
	jmp	.LBB44_22
.LBB44_32:                              # %if.end164.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	$256, %eax              # imm = 0x100
	xorl	%ecx, %ecx
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movl	$3, (%rdx)
	movl	$6964, 1316(%rsp)       # imm = 0x1B34
	movl	%eax, 940(%rsp)         # 4-byte Spill
	movl	%ecx, 936(%rsp)         # 4-byte Spill
.LBB44_33:                              # %do.body.i913.i
                                        #   Parent Loop BB44_4 Depth=1
                                        #     Parent Loop BB44_10 Depth=2
                                        #       Parent Loop BB44_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	936(%rsp), %eax         # 4-byte Reload
	movl	940(%rsp), %ecx         # 4-byte Reload
	movl	%eax, %edx
	addl	%ecx, %edx
	sarl	$1, %edx
	movslq	%edx, %rsi
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movl	1096(%rdi,%rsi,4), %r8d
	movl	$6971, 1316(%rsp)       # imm = 0x1B3B
	movl	960(%rsp), %r9d         # 4-byte Reload
	cmpl	%r9d, %r8d
	cmovgl	%edx, %ecx
	cmpl	%r9d, %r8d
	cmovgl	%eax, %edx
	movl	%ecx, %eax
	subl	%edx, %eax
	cmpl	$1, %eax
	movl	%edx, %eax
	movl	%edx, 932(%rsp)         # 4-byte Spill
	movl	%ecx, 940(%rsp)         # 4-byte Spill
	movl	%eax, 936(%rsp)         # 4-byte Spill
	jne	.LBB44_33
# %bb.34:                               # %BZ2_indexIntoF.exit914.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	960(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ecx
	movl	%ecx, %edx
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movw	(%rsi,%rdx,2), %di
	movl	$6976, 1316(%rsp)       # imm = 0x1B40
	movzwl	%di, %ecx
	shrl	$1, %eax
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1008(%rsp), %r8         # 8-byte Reload
	movb	(%r8,%rdx), %r9b
	movl	$6984, 1316(%rsp)       # imm = 0x1B48
	movzbl	%r9b, %eax
	movl	964(%rsp), %r10d        # 4-byte Reload
	shll	$2, %r10d
	andl	$4, %r10d
	movl	%ecx, 928(%rsp)         # 4-byte Spill
	movl	%r10d, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	shll	$16, %eax
	andl	$983040, %eax           # imm = 0xF0000
	movl	928(%rsp), %r10d        # 4-byte Reload
	orl	%r10d, %eax
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	$6987, 1316(%rsp)       # imm = 0x1B4B
	movl	952(%rsp), %r11d        # 4-byte Reload
	cmpl	$0, %r11d
	movl	%eax, 924(%rsp)         # 4-byte Spill
	movl	%r11d, 920(%rsp)        # 4-byte Spill
	jne	.LBB44_36
# %bb.35:                               # %if.then193.i
                                        #   in Loop: Header=BB44_11 Depth=3
	xorl	%eax, %eax
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$6990, 1316(%rsp)       # imm = 0x1B4E
	movslq	%edx, %rsi
	movl	BZ2_rNums(,%rsi,4), %edi
	movl	$6991, 1316(%rsp)       # imm = 0x1B4F
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movl	%edi, (%rsi)
	movl	$6994, 1316(%rsp)       # imm = 0x1B52
	addl	$1, %edx
	cmpl	$512, %edx              # imm = 0x200
	cmovel	%eax, %edx
	movl	%edx, (%rcx)
	movl	$6999, 1316(%rsp)       # imm = 0x1B57
	movl	%edi, 920(%rsp)         # 4-byte Spill
.LBB44_36:                              # %if.end206.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	920(%rsp), %eax         # 4-byte Reload
	movl	$3, %ecx
	addl	$-1, %eax
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	$7001, 1316(%rsp)       # imm = 0x1B59
	movl	1056(%rsp), %esi        # 4-byte Reload
	addl	$3, %esi
	movq	1224(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi)
	movl	$7011, 1316(%rsp)       # imm = 0x1B63
	movl	948(%rsp), %esi         # 4-byte Reload
	movl	1052(%rsp), %r8d        # 4-byte Reload
	cmpl	%r8d, %esi
	movl	%eax, 916(%rsp)         # 4-byte Spill
	movl	%ecx, 984(%rsp)         # 4-byte Spill
	je	.LBB44_22
# %bb.37:                               # %if.end224.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	916(%rsp), %eax         # 4-byte Reload
	cmpl	$1, %eax
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	932(%rsp), %esi         # 4-byte Reload
	andl	$255, %esi
	xorl	%edx, %esi
	movl	1036(%rsp), %edx        # 4-byte Reload
	cmpl	%edx, %esi
	movl	%esi, 912(%rsp)         # 4-byte Spill
	jne	.LBB44_39
# %bb.38:                               # %do.body.i900.i.preheader
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	$256, %eax              # imm = 0x100
	xorl	%ecx, %ecx
	movl	%eax, 908(%rsp)         # 4-byte Spill
	movl	%ecx, 904(%rsp)         # 4-byte Spill
	jmp	.LBB44_40
.LBB44_39:                              # %if.then229.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	$3, %eax
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movl	912(%rsp), %edx         # 4-byte Reload
	movl	%edx, (%rcx)
	movl	$7021, 1316(%rsp)       # imm = 0x1B6D
	movl	%eax, 984(%rsp)         # 4-byte Spill
	jmp	.LBB44_22
.LBB44_40:                              # %do.body.i900.i
                                        #   Parent Loop BB44_4 Depth=1
                                        #     Parent Loop BB44_10 Depth=2
                                        #       Parent Loop BB44_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	904(%rsp), %eax         # 4-byte Reload
	movl	908(%rsp), %ecx         # 4-byte Reload
	movl	%eax, %edx
	addl	%ecx, %edx
	sarl	$1, %edx
	movslq	%edx, %rsi
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movl	1096(%rdi,%rsi,4), %r8d
	movl	$7028, 1316(%rsp)       # imm = 0x1B74
	movl	924(%rsp), %r9d         # 4-byte Reload
	cmpl	%r9d, %r8d
	cmovgl	%edx, %ecx
	cmpl	%r9d, %r8d
	cmovgl	%eax, %edx
	movl	%ecx, %eax
	subl	%edx, %eax
	cmpl	$1, %eax
	movl	%edx, %eax
	movl	%edx, 900(%rsp)         # 4-byte Spill
	movl	%ecx, 908(%rsp)         # 4-byte Spill
	movl	%eax, 904(%rsp)         # 4-byte Spill
	jne	.LBB44_40
# %bb.41:                               # %BZ2_indexIntoF.exit901.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	924(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ecx
	movl	%ecx, %edx
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movw	(%rsi,%rdx,2), %di
	movl	$7033, 1316(%rsp)       # imm = 0x1B79
	movzwl	%di, %ecx
	shrl	$1, %eax
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1008(%rsp), %r8         # 8-byte Reload
	movb	(%r8,%rdx), %r9b
	movl	$7041, 1316(%rsp)       # imm = 0x1B81
	movzbl	%r9b, %eax
	movl	928(%rsp), %r10d        # 4-byte Reload
	shll	$2, %r10d
	andl	$4, %r10d
	movl	%ecx, 896(%rsp)         # 4-byte Spill
	movl	%r10d, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	shll	$16, %eax
	andl	$983040, %eax           # imm = 0xF0000
	movl	896(%rsp), %r10d        # 4-byte Reload
	orl	%r10d, %eax
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	$7044, 1316(%rsp)       # imm = 0x1B84
	movl	916(%rsp), %r11d        # 4-byte Reload
	cmpl	$0, %r11d
	movl	%eax, 892(%rsp)         # 4-byte Spill
	movl	%r11d, 888(%rsp)        # 4-byte Spill
	jne	.LBB44_43
# %bb.42:                               # %if.then260.i
                                        #   in Loop: Header=BB44_11 Depth=3
	xorl	%eax, %eax
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$7047, 1316(%rsp)       # imm = 0x1B87
	movslq	%edx, %rsi
	movl	BZ2_rNums(,%rsi,4), %edi
	movl	$7048, 1316(%rsp)       # imm = 0x1B88
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movl	%edi, (%rsi)
	movl	$7051, 1316(%rsp)       # imm = 0x1B8B
	addl	$1, %edx
	cmpl	$512, %edx              # imm = 0x200
	cmovel	%eax, %edx
	movl	%edx, (%rcx)
	movl	$7056, 1316(%rsp)       # imm = 0x1B90
	movl	%edi, 888(%rsp)         # 4-byte Spill
.LBB44_43:                              # %if.end273.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	888(%rsp), %eax         # 4-byte Reload
	movl	$256, %ecx              # imm = 0x100
	xorl	%edx, %edx
	addl	$-1, %eax
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$7060, 1316(%rsp)       # imm = 0x1B94
	cmpl	$1, %eax
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	movl	1056(%rsp), %r9d        # 4-byte Reload
	addl	$4, %r9d
	movq	1224(%rsp), %r10        # 8-byte Reload
	movl	%r9d, (%r10)
	movl	$7063, 1316(%rsp)       # imm = 0x1B97
	movl	900(%rsp), %r9d         # 4-byte Reload
	andl	$255, %r9d
	xorl	%r8d, %r9d
	addl	$4, %r9d
	movq	1192(%rsp), %r11        # 8-byte Reload
	movl	%r9d, (%r11)
	movl	$7073, 1316(%rsp)       # imm = 0x1BA1
	movl	%ecx, 884(%rsp)         # 4-byte Spill
	movl	%eax, 880(%rsp)         # 4-byte Spill
	movl	%r9d, 876(%rsp)         # 4-byte Spill
	movl	%edx, 872(%rsp)         # 4-byte Spill
.LBB44_44:                              # %do.body.i887.i
                                        #   Parent Loop BB44_4 Depth=1
                                        #     Parent Loop BB44_10 Depth=2
                                        #       Parent Loop BB44_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	872(%rsp), %eax         # 4-byte Reload
	movl	884(%rsp), %ecx         # 4-byte Reload
	movl	%eax, %edx
	addl	%ecx, %edx
	sarl	$1, %edx
	movslq	%edx, %rsi
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movl	1096(%rdi,%rsi,4), %r8d
	movl	$7078, 1316(%rsp)       # imm = 0x1BA6
	movl	892(%rsp), %r9d         # 4-byte Reload
	cmpl	%r9d, %r8d
	cmovgl	%edx, %ecx
	cmpl	%r9d, %r8d
	cmovgl	%eax, %edx
	movl	%ecx, %eax
	subl	%edx, %eax
	cmpl	$1, %eax
	movl	%edx, %eax
	movl	%edx, 868(%rsp)         # 4-byte Spill
	movl	%ecx, 884(%rsp)         # 4-byte Spill
	movl	%eax, 872(%rsp)         # 4-byte Spill
	jne	.LBB44_44
# %bb.45:                               # %BZ2_indexIntoF.exit888.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movq	1184(%rsp), %rax        # 8-byte Reload
	movl	868(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$7081, 1316(%rsp)       # imm = 0x1BA9
	movl	892(%rsp), %edx         # 4-byte Reload
	movl	%edx, %esi
	movl	%esi, %edi
	movq	1016(%rsp), %r8         # 8-byte Reload
	movw	(%r8,%rdi,2), %r9w
	movl	$7086, 1316(%rsp)       # imm = 0x1BAE
	movzwl	%r9w, %esi
	shrl	$1, %edx
	movl	%edx, %edx
	movl	%edx, %edi
	movq	1008(%rsp), %r10        # 8-byte Reload
	movb	(%r10,%rdi), %r11b
	movl	$7094, 1316(%rsp)       # imm = 0x1BB6
	movzbl	%r11b, %edx
	movl	896(%rsp), %ebx         # 4-byte Reload
	shll	$2, %ebx
	andl	$4, %ebx
	movl	%ebx, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	shll	$16, %edx
	andl	$983040, %edx           # imm = 0xF0000
	orl	%esi, %edx
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$7097, 1316(%rsp)       # imm = 0x1BB9
	movl	880(%rsp), %edx         # 4-byte Reload
	cmpl	$0, %edx
	movl	%edx, 864(%rsp)         # 4-byte Spill
	jne	.LBB44_47
# %bb.46:                               # %if.then315.i
                                        #   in Loop: Header=BB44_11 Depth=3
	xorl	%eax, %eax
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$7100, 1316(%rsp)       # imm = 0x1BBC
	movslq	%edx, %rsi
	movl	BZ2_rNums(,%rsi,4), %edi
	movl	$7101, 1316(%rsp)       # imm = 0x1BBD
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movl	%edi, (%rsi)
	movl	$7104, 1316(%rsp)       # imm = 0x1BC0
	addl	$1, %edx
	cmpl	$512, %edx              # imm = 0x200
	cmovel	%eax, %edx
	movl	%edx, (%rcx)
	movl	$7109, 1316(%rsp)       # imm = 0x1BC5
	movl	%edi, 864(%rsp)         # 4-byte Spill
.LBB44_47:                              # %if.end328.i
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	864(%rsp), %eax         # 4-byte Reload
	addl	$-1, %eax
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	$7113, 1316(%rsp)       # imm = 0x1BC9
	cmpl	$1, %eax
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %eax
	movl	868(%rsp), %esi         # 4-byte Reload
	xorl	%eax, %esi
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi)
	movl	$7115, 1316(%rsp)       # imm = 0x1BCB
	movl	1056(%rsp), %eax        # 4-byte Reload
	addl	$5, %eax
	movq	1224(%rsp), %r8         # 8-byte Reload
	movl	%eax, (%r8)
	movl	$7118, 1316(%rsp)       # imm = 0x1BCE
	movl	876(%rsp), %eax         # 4-byte Reload
	movl	%eax, 984(%rsp)         # 4-byte Spill
	jmp	.LBB44_22
.LBB44_48:                              # %if.else.i
                                        #   in Loop: Header=BB44_4 Depth=1
	movb	1111(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB44_131
	jmp	.LBB44_49
.LBB44_49:                              # %if.end348.lr.ph.lr.ph.i
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	1192(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$7130, 1316(%rsp)       # imm = 0x1BDA
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movl	%ecx, 860(%rsp)         # 4-byte Spill
	movq	%rdx, 848(%rsp)         # 8-byte Spill
.LBB44_50:                              # %if.end348.i.outer
                                        #   Parent Loop BB44_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_51 Depth 3
                                        #         Child Loop BB44_58 Depth 4
                                        #         Child Loop BB44_64 Depth 4
                                        #         Child Loop BB44_69 Depth 4
                                        #         Child Loop BB44_74 Depth 4
                                        #         Child Loop BB44_76 Depth 4
	movq	848(%rsp), %rax         # 8-byte Reload
	movl	860(%rsp), %ecx         # 4-byte Reload
	movq	%rax, %rdx
	addq	$32, %rdx
	movq	%rax, 840(%rsp)         # 8-byte Spill
	movq	%rdx, 832(%rsp)         # 8-byte Spill
	movl	%ecx, 828(%rsp)         # 4-byte Spill
.LBB44_51:                              # %if.end348.i
                                        #   Parent Loop BB44_4 Depth=1
                                        #     Parent Loop BB44_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_58 Depth 4
                                        #         Child Loop BB44_64 Depth 4
                                        #         Child Loop BB44_69 Depth 4
                                        #         Child Loop BB44_74 Depth 4
                                        #         Child Loop BB44_76 Depth 4
	movl	828(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB44_55
# %bb.52:                               # %if.end353.i
                                        #   in Loop: Header=BB44_50 Depth=2
	movq	1200(%rsp), %rax        # 8-byte Reload
	movb	(%rax), %cl
	movl	$7132, 1316(%rsp)       # imm = 0x1BDC
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	24(%rdx), %rsi
	movl	$7133, 1316(%rsp)       # imm = 0x1BDD
	movb	%cl, (%rsi)
	movl	$7134, 1316(%rsp)       # imm = 0x1BDE
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %edi
	movl	$7137, 1316(%rsp)       # imm = 0x1BE1
	movl	%edi, %r8d
	shll	$8, %r8d
	shrl	$24, %edi
	movb	(%rax), %cl
	movl	$7142, 1316(%rsp)       # imm = 0x1BE6
	movzbl	%cl, %r9d
	xorl	%r9d, %edi
	movl	%edi, %edi
	movl	%edi, %r10d
	movl	BZ2_crc32Table(,%r10,4), %edi
	movl	$7144, 1316(%rsp)       # imm = 0x1BE8
	xorl	%r8d, %edi
	movl	%edi, (%rsi)
	movl	$7145, 1316(%rsp)       # imm = 0x1BE9
	movq	1192(%rsp), %r10        # 8-byte Reload
	movl	(%r10), %edi
	movl	$7146, 1316(%rsp)       # imm = 0x1BEA
	addl	$-1, %edi
	movl	%edi, (%r10)
	movl	$7123, 1316(%rsp)       # imm = 0x1BD3
	movq	1288(%rsp), %r11        # 8-byte Reload
	movq	(%r11), %rbx
	movl	$7148, 1316(%rsp)       # imm = 0x1BEC
	movq	24(%rbx), %r14
	movl	$7150, 1316(%rsp)       # imm = 0x1BEE
	addq	$1, %r14
	movq	%r14, 24(%rbx)
	movl	$7152, 1316(%rsp)       # imm = 0x1BF0
	movl	32(%rbx), %r8d
	movl	$7154, 1316(%rsp)       # imm = 0x1BF2
	addl	$-1, %r8d
	movl	%r8d, 32(%rbx)
	movl	$7156, 1316(%rsp)       # imm = 0x1BF4
	movl	36(%rbx), %r9d
	movl	$7158, 1316(%rsp)       # imm = 0x1BF6
	addl	$1, %r9d
	movl	%r9d, 36(%rbx)
	movl	$7162, 1316(%rsp)       # imm = 0x1BFA
	cmpl	$0, %r9d
	movl	%edi, 824(%rsp)         # 4-byte Spill
	movq	%rbx, 816(%rsp)         # 8-byte Spill
	movl	%r8d, 812(%rsp)         # 4-byte Spill
	jne	.LBB44_54
# %bb.53:                               # %if.then383.i
                                        #   in Loop: Header=BB44_50 Depth=2
	movq	816(%rsp), %rax         # 8-byte Reload
	movl	40(%rax), %ecx
	movl	$7164, 1316(%rsp)       # imm = 0x1BFC
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
	movl	$7168, 1316(%rsp)       # imm = 0x1C00
.LBB44_54:                              # %if.end387.i
                                        #   in Loop: Header=BB44_50 Depth=2
	movl	812(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	movl	824(%rsp), %ecx         # 4-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movl	%ecx, 860(%rsp)         # 4-byte Spill
	movq	%rdx, 848(%rsp)         # 8-byte Spill
	je	.LBB44_131
	jmp	.LBB44_50
.LBB44_55:                              # %while.end388.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movq	1224(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$7169, 1316(%rsp)       # imm = 0x1C01
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %esi
	movl	$7175, 1316(%rsp)       # imm = 0x1C07
	movl	%esi, %edi
	addl	$1, %edi
	cmpl	%edi, %ecx
	movl	%ecx, 808(%rsp)         # 4-byte Spill
	movl	%esi, 804(%rsp)         # 4-byte Spill
	movl	%edi, 800(%rsp)         # 4-byte Spill
	je	.LBB44_131
# %bb.56:                               # %if.end395.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movl	808(%rsp), %ecx         # 4-byte Reload
	movl	800(%rsp), %edx         # 4-byte Reload
	cmpl	%edx, %ecx
	movl	%eax, 1300(%rsp)        # 4-byte Spill
	jg	.LBB44_146
# %bb.57:                               # %if.end402.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	$256, %eax              # imm = 0x100
	xorl	%ecx, %ecx
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movl	$1, (%rdx)
	movl	$7176, 1316(%rsp)       # imm = 0x1C08
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %edi
	movl	$7178, 1316(%rsp)       # imm = 0x1C0A
	movb	%dil, %r8b
	movq	1200(%rsp), %r9         # 8-byte Reload
	movb	%r8b, (%r9)
	movl	$7179, 1316(%rsp)       # imm = 0x1C0B
	movq	1168(%rsp), %r10        # 8-byte Reload
	movl	(%r10), %r11d
	movl	$7189, 1316(%rsp)       # imm = 0x1C15
	movl	%r11d, 796(%rsp)        # 4-byte Spill
	movl	%eax, 792(%rsp)         # 4-byte Spill
	movl	%edi, 788(%rsp)         # 4-byte Spill
	movl	%ecx, 784(%rsp)         # 4-byte Spill
.LBB44_58:                              # %do.body.i874.i
                                        #   Parent Loop BB44_4 Depth=1
                                        #     Parent Loop BB44_50 Depth=2
                                        #       Parent Loop BB44_51 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	784(%rsp), %eax         # 4-byte Reload
	movl	792(%rsp), %ecx         # 4-byte Reload
	movl	%eax, %edx
	addl	%ecx, %edx
	sarl	$1, %edx
	movslq	%edx, %rsi
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movl	1096(%rdi,%rsi,4), %r8d
	movl	$7194, 1316(%rsp)       # imm = 0x1C1A
	movl	796(%rsp), %r9d         # 4-byte Reload
	cmpl	%r9d, %r8d
	cmovgl	%edx, %ecx
	cmpl	%r9d, %r8d
	cmovgl	%eax, %edx
	movl	%ecx, %eax
	subl	%edx, %eax
	cmpl	$1, %eax
	movl	%edx, %eax
	movl	%edx, 780(%rsp)         # 4-byte Spill
	movl	%ecx, 792(%rsp)         # 4-byte Spill
	movl	%eax, 784(%rsp)         # 4-byte Spill
	jne	.LBB44_58
# %bb.59:                               # %BZ2_indexIntoF.exit875.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	$1, %eax
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$7197, 1316(%rsp)       # imm = 0x1C1D
	movl	796(%rsp), %esi         # 4-byte Reload
	movl	%esi, %edi
	movl	%edi, %r8d
	movw	(%rdx,%r8,2), %r9w
	movl	$7199, 1316(%rsp)       # imm = 0x1C1F
	movzwl	%r9w, %edi
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	(%r8), %r10
	movl	$7203, 1316(%rsp)       # imm = 0x1C23
	shrl	$1, %esi
	movl	%esi, %esi
	movl	%esi, %r11d
	movb	(%r10,%r11), %bl
	movl	$7211, 1316(%rsp)       # imm = 0x1C2B
	movzbl	%bl, %esi
	movl	796(%rsp), %ebp         # 4-byte Reload
	shll	$2, %ebp
	andl	$4, %ebp
	movl	%ebp, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %esi
	shll	$16, %esi
	andl	$983040, %esi           # imm = 0xF0000
	orl	%edi, %esi
	movq	1168(%rsp), %r11        # 8-byte Reload
	movl	%esi, (%r11)
	movl	$7213, 1316(%rsp)       # imm = 0x1C2D
	movl	808(%rsp), %ebp         # 4-byte Reload
	addl	$1, %ebp
	movq	1224(%rsp), %r14        # 8-byte Reload
	movl	%ebp, (%r14)
	movl	$7217, 1316(%rsp)       # imm = 0x1C31
	movl	808(%rsp), %r15d        # 4-byte Reload
	movl	804(%rsp), %r12d        # 4-byte Reload
	cmpl	%r12d, %r15d
	movq	%rdx, 768(%rsp)         # 8-byte Spill
	movq	%r10, 760(%rsp)         # 8-byte Spill
	movl	%edi, 756(%rsp)         # 4-byte Spill
	movl	%esi, 752(%rsp)         # 4-byte Spill
	movl	%ebp, 748(%rsp)         # 4-byte Spill
	movl	%eax, 744(%rsp)         # 4-byte Spill
	jne	.LBB44_61
.LBB44_60:                              # %while.cond339.backedge.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	744(%rsp), %eax         # 4-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$7223, 1316(%rsp)       # imm = 0x1C37
	cmpl	$0, %edx
	movl	%eax, 828(%rsp)         # 4-byte Spill
	je	.LBB44_131
	jmp	.LBB44_51
.LBB44_61:                              # %if.end439.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	780(%rsp), %eax         # 4-byte Reload
	andl	$255, %eax
	movl	788(%rsp), %ecx         # 4-byte Reload
	cmpl	%ecx, %eax
	movl	%eax, 740(%rsp)         # 4-byte Spill
	je	.LBB44_63
# %bb.62:                               # %if.then444.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	$1, %eax
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movl	740(%rsp), %edx         # 4-byte Reload
	movl	%edx, (%rcx)
	movl	$7225, 1316(%rsp)       # imm = 0x1C39
	movl	%eax, 744(%rsp)         # 4-byte Spill
	jmp	.LBB44_60
.LBB44_63:                              # %if.end447.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	$256, %eax              # imm = 0x100
	xorl	%ecx, %ecx
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movl	$2, (%rdx)
	movl	$7235, 1316(%rsp)       # imm = 0x1C43
	movl	%eax, 736(%rsp)         # 4-byte Spill
	movl	%ecx, 732(%rsp)         # 4-byte Spill
.LBB44_64:                              # %do.body.i861.i
                                        #   Parent Loop BB44_4 Depth=1
                                        #     Parent Loop BB44_50 Depth=2
                                        #       Parent Loop BB44_51 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	732(%rsp), %eax         # 4-byte Reload
	movl	736(%rsp), %ecx         # 4-byte Reload
	movl	%eax, %edx
	addl	%ecx, %edx
	sarl	$1, %edx
	movslq	%edx, %rsi
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movl	1096(%rdi,%rsi,4), %r8d
	movl	$7242, 1316(%rsp)       # imm = 0x1C4A
	movl	752(%rsp), %r9d         # 4-byte Reload
	cmpl	%r9d, %r8d
	cmovgl	%edx, %ecx
	cmpl	%r9d, %r8d
	cmovgl	%eax, %edx
	movl	%ecx, %eax
	subl	%edx, %eax
	cmpl	$1, %eax
	movl	%edx, %eax
	movl	%edx, 728(%rsp)         # 4-byte Spill
	movl	%ecx, 736(%rsp)         # 4-byte Spill
	movl	%eax, 732(%rsp)         # 4-byte Spill
	jne	.LBB44_64
# %bb.65:                               # %BZ2_indexIntoF.exit862.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	$2, %eax
	movl	752(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, %edx
	movl	%edx, %esi
	movq	768(%rsp), %rdi         # 8-byte Reload
	movw	(%rdi,%rsi,2), %r8w
	movl	$7247, 1316(%rsp)       # imm = 0x1C4F
	movzwl	%r8w, %edx
	shrl	$1, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movq	760(%rsp), %r9          # 8-byte Reload
	movb	(%r9,%rsi), %r10b
	movl	$7255, 1316(%rsp)       # imm = 0x1C57
	movzbl	%r10b, %ecx
	movl	756(%rsp), %r11d        # 4-byte Reload
	shll	$2, %r11d
	andl	$4, %r11d
	movl	%ecx, 724(%rsp)         # 4-byte Spill
	movl	%r11d, %ecx
                                        # kill: def %cl killed %ecx
	movl	724(%rsp), %r11d        # 4-byte Reload
	shrl	%cl, %r11d
	shll	$16, %r11d
	andl	$983040, %r11d          # imm = 0xF0000
	orl	%edx, %r11d
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movl	%r11d, (%rsi)
	movl	$7257, 1316(%rsp)       # imm = 0x1C59
	movl	808(%rsp), %ebx         # 4-byte Reload
	addl	$2, %ebx
	movq	1224(%rsp), %r14        # 8-byte Reload
	movl	%ebx, (%r14)
	movl	$7263, 1316(%rsp)       # imm = 0x1C5F
	movl	748(%rsp), %ebp         # 4-byte Reload
	movl	804(%rsp), %r15d        # 4-byte Reload
	cmpl	%r15d, %ebp
	movl	%edx, 720(%rsp)         # 4-byte Spill
	movl	%r11d, 716(%rsp)        # 4-byte Spill
	movl	%ebx, 712(%rsp)         # 4-byte Spill
	movl	%eax, 744(%rsp)         # 4-byte Spill
	je	.LBB44_60
# %bb.66:                               # %if.end481.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	728(%rsp), %eax         # 4-byte Reload
	andl	$255, %eax
	movl	788(%rsp), %ecx         # 4-byte Reload
	cmpl	%ecx, %eax
	movl	%eax, 708(%rsp)         # 4-byte Spill
	je	.LBB44_68
# %bb.67:                               # %if.then486.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	$2, %eax
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movl	708(%rsp), %edx         # 4-byte Reload
	movl	%edx, (%rcx)
	movl	$7265, 1316(%rsp)       # imm = 0x1C61
	movl	%eax, 744(%rsp)         # 4-byte Spill
	jmp	.LBB44_60
.LBB44_68:                              # %if.end489.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	$256, %eax              # imm = 0x100
	xorl	%ecx, %ecx
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movl	$3, (%rdx)
	movl	$7275, 1316(%rsp)       # imm = 0x1C6B
	movl	%eax, 704(%rsp)         # 4-byte Spill
	movl	%ecx, 700(%rsp)         # 4-byte Spill
.LBB44_69:                              # %do.body.i848.i
                                        #   Parent Loop BB44_4 Depth=1
                                        #     Parent Loop BB44_50 Depth=2
                                        #       Parent Loop BB44_51 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	700(%rsp), %eax         # 4-byte Reload
	movl	704(%rsp), %ecx         # 4-byte Reload
	movl	%eax, %edx
	addl	%ecx, %edx
	sarl	$1, %edx
	movslq	%edx, %rsi
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movl	1096(%rdi,%rsi,4), %r8d
	movl	$7282, 1316(%rsp)       # imm = 0x1C72
	movl	716(%rsp), %r9d         # 4-byte Reload
	cmpl	%r9d, %r8d
	cmovgl	%edx, %ecx
	cmpl	%r9d, %r8d
	cmovgl	%eax, %edx
	movl	%ecx, %eax
	subl	%edx, %eax
	cmpl	$1, %eax
	movl	%edx, %eax
	movl	%edx, 696(%rsp)         # 4-byte Spill
	movl	%ecx, 704(%rsp)         # 4-byte Spill
	movl	%eax, 700(%rsp)         # 4-byte Spill
	jne	.LBB44_69
# %bb.70:                               # %BZ2_indexIntoF.exit849.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	$3, %eax
	movl	716(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, %edx
	movl	%edx, %esi
	movq	768(%rsp), %rdi         # 8-byte Reload
	movw	(%rdi,%rsi,2), %r8w
	movl	$7287, 1316(%rsp)       # imm = 0x1C77
	movzwl	%r8w, %edx
	shrl	$1, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movq	760(%rsp), %r9          # 8-byte Reload
	movb	(%r9,%rsi), %r10b
	movl	$7295, 1316(%rsp)       # imm = 0x1C7F
	movzbl	%r10b, %ecx
	movl	720(%rsp), %r11d        # 4-byte Reload
	shll	$2, %r11d
	andl	$4, %r11d
	movl	%ecx, 692(%rsp)         # 4-byte Spill
	movl	%r11d, %ecx
                                        # kill: def %cl killed %ecx
	movl	692(%rsp), %r11d        # 4-byte Reload
	shrl	%cl, %r11d
	shll	$16, %r11d
	andl	$983040, %r11d          # imm = 0xF0000
	orl	%edx, %r11d
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movl	%r11d, (%rsi)
	movl	$7297, 1316(%rsp)       # imm = 0x1C81
	movl	808(%rsp), %ebx         # 4-byte Reload
	addl	$3, %ebx
	movq	1224(%rsp), %r14        # 8-byte Reload
	movl	%ebx, (%r14)
	movl	$7304, 1316(%rsp)       # imm = 0x1C88
	movl	712(%rsp), %ebx         # 4-byte Reload
	movl	804(%rsp), %ebp         # 4-byte Reload
	cmpl	%ebp, %ebx
	movl	%edx, 688(%rsp)         # 4-byte Spill
	movl	%r11d, 684(%rsp)        # 4-byte Spill
	movl	%eax, 744(%rsp)         # 4-byte Spill
	je	.LBB44_60
# %bb.71:                               # %if.end523.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	696(%rsp), %eax         # 4-byte Reload
	andl	$255, %eax
	movl	788(%rsp), %ecx         # 4-byte Reload
	cmpl	%ecx, %eax
	movl	%eax, 680(%rsp)         # 4-byte Spill
	jne	.LBB44_73
# %bb.72:                               # %do.body.i835.i.preheader
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	$256, %eax              # imm = 0x100
	xorl	%ecx, %ecx
	movl	%eax, 676(%rsp)         # 4-byte Spill
	movl	%ecx, 672(%rsp)         # 4-byte Spill
	jmp	.LBB44_74
.LBB44_73:                              # %if.then528.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	$3, %eax
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movl	680(%rsp), %edx         # 4-byte Reload
	movl	%edx, (%rcx)
	movl	$7314, 1316(%rsp)       # imm = 0x1C92
	movl	%eax, 744(%rsp)         # 4-byte Spill
	jmp	.LBB44_60
.LBB44_74:                              # %do.body.i835.i
                                        #   Parent Loop BB44_4 Depth=1
                                        #     Parent Loop BB44_50 Depth=2
                                        #       Parent Loop BB44_51 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	672(%rsp), %eax         # 4-byte Reload
	movl	676(%rsp), %ecx         # 4-byte Reload
	movl	%eax, %edx
	addl	%ecx, %edx
	sarl	$1, %edx
	movslq	%edx, %rsi
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movl	1096(%rdi,%rsi,4), %r8d
	movl	$7321, 1316(%rsp)       # imm = 0x1C99
	movl	684(%rsp), %r9d         # 4-byte Reload
	cmpl	%r9d, %r8d
	cmovgl	%edx, %ecx
	cmpl	%r9d, %r8d
	cmovgl	%eax, %edx
	movl	%ecx, %eax
	subl	%edx, %eax
	cmpl	$1, %eax
	movl	%edx, %eax
	movl	%edx, 668(%rsp)         # 4-byte Spill
	movl	%ecx, 676(%rsp)         # 4-byte Spill
	movl	%eax, 672(%rsp)         # 4-byte Spill
	jne	.LBB44_74
# %bb.75:                               # %BZ2_indexIntoF.exit836.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movl	$256, %eax              # imm = 0x100
	xorl	%ecx, %ecx
	movl	684(%rsp), %edx         # 4-byte Reload
	movl	%edx, %esi
	movl	%esi, %edi
	movq	768(%rsp), %r8          # 8-byte Reload
	movw	(%r8,%rdi,2), %r9w
	movl	$7326, 1316(%rsp)       # imm = 0x1C9E
	movzwl	%r9w, %esi
	shrl	$1, %edx
	movl	%edx, %edx
	movl	%edx, %edi
	movq	760(%rsp), %r10         # 8-byte Reload
	movb	(%r10,%rdi), %r11b
	movl	$7334, 1316(%rsp)       # imm = 0x1CA6
	movzbl	%r11b, %edx
	movl	688(%rsp), %ebx         # 4-byte Reload
	shll	$2, %ebx
	andl	$4, %ebx
	movl	%ecx, 664(%rsp)         # 4-byte Spill
	movl	%ebx, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	shll	$16, %edx
	andl	$983040, %edx           # imm = 0xF0000
	orl	%esi, %edx
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$7336, 1316(%rsp)       # imm = 0x1CA8
	movl	808(%rsp), %ebx         # 4-byte Reload
	addl	$4, %ebx
	movq	1224(%rsp), %r14        # 8-byte Reload
	movl	%ebx, (%r14)
	movl	$7338, 1316(%rsp)       # imm = 0x1CAA
	movl	668(%rsp), %ebx         # 4-byte Reload
	andl	$255, %ebx
	addl	$4, %ebx
	movq	1192(%rsp), %r15        # 8-byte Reload
	movl	%ebx, (%r15)
	movl	$7348, 1316(%rsp)       # imm = 0x1CB4
	movl	664(%rsp), %ebp         # 4-byte Reload
	movl	%esi, 660(%rsp)         # 4-byte Spill
	movl	%edx, 656(%rsp)         # 4-byte Spill
	movl	%ebx, 652(%rsp)         # 4-byte Spill
	movl	%eax, 648(%rsp)         # 4-byte Spill
	movl	%ebp, 644(%rsp)         # 4-byte Spill
.LBB44_76:                              # %do.body.i822.i
                                        #   Parent Loop BB44_4 Depth=1
                                        #     Parent Loop BB44_50 Depth=2
                                        #       Parent Loop BB44_51 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	644(%rsp), %eax         # 4-byte Reload
	movl	648(%rsp), %ecx         # 4-byte Reload
	movl	%eax, %edx
	addl	%ecx, %edx
	sarl	$1, %edx
	movslq	%edx, %rsi
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movl	1096(%rdi,%rsi,4), %r8d
	movl	$7353, 1316(%rsp)       # imm = 0x1CB9
	movl	656(%rsp), %r9d         # 4-byte Reload
	cmpl	%r9d, %r8d
	cmovgl	%edx, %ecx
	cmpl	%r9d, %r8d
	cmovgl	%eax, %edx
	movl	%ecx, %eax
	subl	%edx, %eax
	cmpl	$1, %eax
	movl	%edx, %eax
	movl	%edx, 640(%rsp)         # 4-byte Spill
	movl	%ecx, 648(%rsp)         # 4-byte Spill
	movl	%eax, 644(%rsp)         # 4-byte Spill
	jne	.LBB44_76
# %bb.77:                               # %BZ2_indexIntoF.exit823.i
                                        #   in Loop: Header=BB44_51 Depth=3
	movq	1184(%rsp), %rax        # 8-byte Reload
	movl	640(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$7356, 1316(%rsp)       # imm = 0x1CBC
	movl	656(%rsp), %edx         # 4-byte Reload
	movl	%edx, %esi
	movl	%esi, %edi
	movq	768(%rsp), %r8          # 8-byte Reload
	movw	(%r8,%rdi,2), %r9w
	movl	$7361, 1316(%rsp)       # imm = 0x1CC1
	movzwl	%r9w, %esi
	shrl	$1, %edx
	movl	%edx, %edx
	movl	%edx, %edi
	movq	760(%rsp), %r10         # 8-byte Reload
	movb	(%r10,%rdi), %r11b
	movl	$7369, 1316(%rsp)       # imm = 0x1CC9
	movzbl	%r11b, %edx
	movl	660(%rsp), %ebx         # 4-byte Reload
	shll	$2, %ebx
	andl	$4, %ebx
	movl	%ebx, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	shll	$16, %edx
	andl	$983040, %edx           # imm = 0xF0000
	orl	%esi, %edx
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$7371, 1316(%rsp)       # imm = 0x1CCB
	movl	808(%rsp), %edx         # 4-byte Reload
	addl	$5, %edx
	movq	1224(%rsp), %r14        # 8-byte Reload
	movl	%edx, (%r14)
	movl	$7374, 1316(%rsp)       # imm = 0x1CCE
	movl	652(%rsp), %edx         # 4-byte Reload
	movl	%edx, 744(%rsp)         # 4-byte Spill
	jmp	.LBB44_60
.LBB44_78:                              # %if.else
                                        #   in Loop: Header=BB44_4 Depth=1
	movb	1123(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB44_109
	jmp	.LBB44_79
.LBB44_79:                              # %if.then.i110
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	1288(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movl	$7376, 1316(%rsp)       # imm = 0x1CD0
	movl	32(%rcx), %edx
	movl	$7379, 1316(%rsp)       # imm = 0x1CD3
	cmpl	$0, %edx
	movq	%rcx, 632(%rsp)         # 8-byte Spill
	je	.LBB44_131
# %bb.80:                               # %if.end.lr.ph.lr.ph.i121
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	1192(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$7391, 1316(%rsp)       # imm = 0x1CDF
	movq	632(%rsp), %rdx         # 8-byte Reload
	movl	%ecx, 628(%rsp)         # 4-byte Spill
	movq	%rdx, 616(%rsp)         # 8-byte Spill
.LBB44_81:                              # %if.end.i125.outer
                                        #   Parent Loop BB44_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_82 Depth 3
	movq	616(%rsp), %rax         # 8-byte Reload
	movl	628(%rsp), %ecx         # 4-byte Reload
	movq	%rax, %rdx
	addq	$32, %rdx
	movq	%rax, 608(%rsp)         # 8-byte Spill
	movq	%rdx, 600(%rsp)         # 8-byte Spill
	movl	%ecx, 596(%rsp)         # 4-byte Spill
.LBB44_82:                              # %if.end.i125
                                        #   Parent Loop BB44_4 Depth=1
                                        #     Parent Loop BB44_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	596(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB44_86
# %bb.83:                               # %if.end6.i142
                                        #   in Loop: Header=BB44_81 Depth=2
	movq	1200(%rsp), %rax        # 8-byte Reload
	movb	(%rax), %cl
	movl	$7393, 1316(%rsp)       # imm = 0x1CE1
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	24(%rdx), %rsi
	movl	$7394, 1316(%rsp)       # imm = 0x1CE2
	movb	%cl, (%rsi)
	movl	$7395, 1316(%rsp)       # imm = 0x1CE3
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %edi
	movl	$7398, 1316(%rsp)       # imm = 0x1CE6
	movl	%edi, %r8d
	shll	$8, %r8d
	shrl	$24, %edi
	movb	(%rax), %cl
	movl	$7403, 1316(%rsp)       # imm = 0x1CEB
	movzbl	%cl, %r9d
	xorl	%r9d, %edi
	movl	%edi, %edi
	movl	%edi, %r10d
	movl	BZ2_crc32Table(,%r10,4), %edi
	movl	$7405, 1316(%rsp)       # imm = 0x1CED
	xorl	%r8d, %edi
	movl	%edi, (%rsi)
	movl	$7406, 1316(%rsp)       # imm = 0x1CEE
	movq	1192(%rsp), %r10        # 8-byte Reload
	movl	(%r10), %edi
	movl	$7407, 1316(%rsp)       # imm = 0x1CEF
	addl	$-1, %edi
	movl	%edi, (%r10)
	movl	$7384, 1316(%rsp)       # imm = 0x1CD8
	movq	1288(%rsp), %r11        # 8-byte Reload
	movq	(%r11), %rbx
	movl	$7409, 1316(%rsp)       # imm = 0x1CF1
	movq	24(%rbx), %r14
	movl	$7411, 1316(%rsp)       # imm = 0x1CF3
	addq	$1, %r14
	movq	%r14, 24(%rbx)
	movl	$7413, 1316(%rsp)       # imm = 0x1CF5
	movl	32(%rbx), %r8d
	movl	$7415, 1316(%rsp)       # imm = 0x1CF7
	addl	$-1, %r8d
	movl	%r8d, 32(%rbx)
	movl	$7417, 1316(%rsp)       # imm = 0x1CF9
	movl	36(%rbx), %r9d
	movl	$7419, 1316(%rsp)       # imm = 0x1CFB
	addl	$1, %r9d
	movl	%r9d, 36(%rbx)
	movl	$7423, 1316(%rsp)       # imm = 0x1CFF
	cmpl	$0, %r9d
	movl	%edi, 592(%rsp)         # 4-byte Spill
	movq	%rbx, 584(%rsp)         # 8-byte Spill
	movl	%r8d, 580(%rsp)         # 4-byte Spill
	jne	.LBB44_85
# %bb.84:                               # %if.then23.i145
                                        #   in Loop: Header=BB44_81 Depth=2
	movq	584(%rsp), %rax         # 8-byte Reload
	movl	40(%rax), %ecx
	movl	$7425, 1316(%rsp)       # imm = 0x1D01
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
	movl	$7429, 1316(%rsp)       # imm = 0x1D05
.LBB44_85:                              # %if.end26.i147
                                        #   in Loop: Header=BB44_81 Depth=2
	movl	580(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	movl	592(%rsp), %ecx         # 4-byte Reload
	movq	584(%rsp), %rdx         # 8-byte Reload
	movl	%ecx, 628(%rsp)         # 4-byte Spill
	movq	%rdx, 616(%rsp)         # 8-byte Spill
	je	.LBB44_131
	jmp	.LBB44_81
.LBB44_86:                              # %while.end.i150
                                        #   in Loop: Header=BB44_82 Depth=3
	movq	1224(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$7430, 1316(%rsp)       # imm = 0x1D06
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %esi
	movl	$7436, 1316(%rsp)       # imm = 0x1D0C
	movl	%esi, %edi
	addl	$1, %edi
	cmpl	%edi, %ecx
	movl	%ecx, 576(%rsp)         # 4-byte Spill
	movl	%esi, 572(%rsp)         # 4-byte Spill
	movl	%edi, 568(%rsp)         # 4-byte Spill
	je	.LBB44_131
# %bb.87:                               # %if.end30.i152
                                        #   in Loop: Header=BB44_82 Depth=3
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movl	576(%rsp), %ecx         # 4-byte Reload
	movl	568(%rsp), %edx         # 4-byte Reload
	cmpl	%edx, %ecx
	movl	%eax, 1300(%rsp)        # 4-byte Spill
	jg	.LBB44_146
# %bb.88:                               # %if.end37.i155
                                        #   in Loop: Header=BB44_82 Depth=3
	movq	1192(%rsp), %rax        # 8-byte Reload
	movl	$1, (%rax)
	movl	$7437, 1316(%rsp)       # imm = 0x1D0D
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$7439, 1316(%rsp)       # imm = 0x1D0F
	movb	%dl, %sil
	movq	1200(%rsp), %rdi        # 8-byte Reload
	movb	%sil, (%rdi)
	movl	$7440, 1316(%rsp)       # imm = 0x1D10
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	(%r8), %r9
	movl	$7441, 1316(%rsp)       # imm = 0x1D11
	movq	1168(%rsp), %r10        # 8-byte Reload
	movl	(%r10), %r11d
	movl	$7444, 1316(%rsp)       # imm = 0x1D14
	movl	%r11d, %r11d
	movl	%r11d, %ebx
	movl	(%r9,%rbx,4), %r11d
	movl	$7446, 1316(%rsp)       # imm = 0x1D16
	movl	%r11d, %ebp
	shrl	$8, %ebp
	movl	%ebp, (%r10)
	movl	$7447, 1316(%rsp)       # imm = 0x1D17
	movq	1160(%rsp), %rbx        # 8-byte Reload
	movl	(%rbx), %r14d
	movl	$7450, 1316(%rsp)       # imm = 0x1D1A
	cmpl	$0, %r14d
	movl	%edx, 564(%rsp)         # 4-byte Spill
	movq	%r9, 552(%rsp)          # 8-byte Spill
	movl	%r11d, 548(%rsp)        # 4-byte Spill
	movl	%ebp, 544(%rsp)         # 4-byte Spill
	movl	%r14d, 540(%rsp)        # 4-byte Spill
	jne	.LBB44_90
# %bb.89:                               # %if.then50.i
                                        #   in Loop: Header=BB44_82 Depth=3
	xorl	%eax, %eax
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$7453, 1316(%rsp)       # imm = 0x1D1D
	movslq	%edx, %rsi
	movl	BZ2_rNums(,%rsi,4), %edi
	movl	$7454, 1316(%rsp)       # imm = 0x1D1E
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movl	%edi, (%rsi)
	movl	$7457, 1316(%rsp)       # imm = 0x1D21
	addl	$1, %edx
	cmpl	$512, %edx              # imm = 0x200
	cmovel	%eax, %edx
	movl	%edx, (%rcx)
	movl	$7462, 1316(%rsp)       # imm = 0x1D26
	movl	%edi, 540(%rsp)         # 4-byte Spill
.LBB44_90:                              # %if.end62.i
                                        #   in Loop: Header=BB44_82 Depth=3
	movl	540(%rsp), %eax         # 4-byte Reload
	movl	$1, %ecx
	addl	$-1, %eax
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	$7464, 1316(%rsp)       # imm = 0x1D28
	movl	576(%rsp), %esi         # 4-byte Reload
	addl	$1, %esi
	movq	1224(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi)
	movl	$7468, 1316(%rsp)       # imm = 0x1D2C
	movl	576(%rsp), %r8d         # 4-byte Reload
	movl	572(%rsp), %r9d         # 4-byte Reload
	cmpl	%r9d, %r8d
	movl	%eax, 536(%rsp)         # 4-byte Spill
	movl	%esi, 532(%rsp)         # 4-byte Spill
	movl	%ecx, 528(%rsp)         # 4-byte Spill
	jne	.LBB44_92
.LBB44_91:                              # %while.cond.backedge.i158
                                        #   in Loop: Header=BB44_82 Depth=3
	movl	528(%rsp), %eax         # 4-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$7477, 1316(%rsp)       # imm = 0x1D35
	cmpl	$0, %edx
	movl	%eax, 596(%rsp)         # 4-byte Spill
	je	.LBB44_131
	jmp	.LBB44_82
.LBB44_92:                              # %if.end79.i
                                        #   in Loop: Header=BB44_82 Depth=3
	movl	536(%rsp), %eax         # 4-byte Reload
	cmpl	$1, %eax
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	548(%rsp), %esi         # 4-byte Reload
	andl	$255, %esi
	xorl	%edx, %esi
	movl	564(%rsp), %edx         # 4-byte Reload
	cmpl	%edx, %esi
	movl	%esi, 524(%rsp)         # 4-byte Spill
	je	.LBB44_94
# %bb.93:                               # %if.then84.i
                                        #   in Loop: Header=BB44_82 Depth=3
	movl	$1, %eax
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movl	524(%rsp), %edx         # 4-byte Reload
	movl	%edx, (%rcx)
	movl	$7479, 1316(%rsp)       # imm = 0x1D37
	movl	%eax, 528(%rsp)         # 4-byte Spill
	jmp	.LBB44_91
.LBB44_94:                              # %if.end87.i
                                        #   in Loop: Header=BB44_82 Depth=3
	movq	1192(%rsp), %rax        # 8-byte Reload
	movl	$2, (%rax)
	movl	$7482, 1316(%rsp)       # imm = 0x1D3A
	movl	544(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, %edx
	movl	%edx, %esi
	movq	552(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi,%rsi,4), %edx
	movl	$7484, 1316(%rsp)       # imm = 0x1D3C
	movl	%edx, %r8d
	shrl	$8, %r8d
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movl	%r8d, (%rsi)
	movl	$7487, 1316(%rsp)       # imm = 0x1D3F
	movl	536(%rsp), %r9d         # 4-byte Reload
	cmpl	$0, %r9d
	movl	%edx, 520(%rsp)         # 4-byte Spill
	movl	%r8d, 516(%rsp)         # 4-byte Spill
	movl	%r9d, 512(%rsp)         # 4-byte Spill
	jne	.LBB44_96
# %bb.95:                               # %if.then102.i
                                        #   in Loop: Header=BB44_82 Depth=3
	xorl	%eax, %eax
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$7490, 1316(%rsp)       # imm = 0x1D42
	movslq	%edx, %rsi
	movl	BZ2_rNums(,%rsi,4), %edi
	movl	$7491, 1316(%rsp)       # imm = 0x1D43
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movl	%edi, (%rsi)
	movl	$7494, 1316(%rsp)       # imm = 0x1D46
	addl	$1, %edx
	cmpl	$512, %edx              # imm = 0x200
	cmovel	%eax, %edx
	movl	%edx, (%rcx)
	movl	$7499, 1316(%rsp)       # imm = 0x1D4B
	movl	%edi, 512(%rsp)         # 4-byte Spill
.LBB44_96:                              # %if.end115.i
                                        #   in Loop: Header=BB44_82 Depth=3
	movl	512(%rsp), %eax         # 4-byte Reload
	movl	$2, %ecx
	addl	$-1, %eax
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	$7501, 1316(%rsp)       # imm = 0x1D4D
	movl	576(%rsp), %esi         # 4-byte Reload
	addl	$2, %esi
	movq	1224(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi)
	movl	$7510, 1316(%rsp)       # imm = 0x1D56
	movl	532(%rsp), %r8d         # 4-byte Reload
	movl	572(%rsp), %r9d         # 4-byte Reload
	cmpl	%r9d, %r8d
	movl	%eax, 508(%rsp)         # 4-byte Spill
	movl	%esi, 504(%rsp)         # 4-byte Spill
	movl	%ecx, 528(%rsp)         # 4-byte Spill
	je	.LBB44_91
# %bb.97:                               # %if.end133.i
                                        #   in Loop: Header=BB44_82 Depth=3
	movl	508(%rsp), %eax         # 4-byte Reload
	cmpl	$1, %eax
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	520(%rsp), %esi         # 4-byte Reload
	andl	$255, %esi
	xorl	%edx, %esi
	movl	564(%rsp), %edx         # 4-byte Reload
	cmpl	%edx, %esi
	movl	%esi, 500(%rsp)         # 4-byte Spill
	je	.LBB44_99
# %bb.98:                               # %if.then138.i
                                        #   in Loop: Header=BB44_82 Depth=3
	movl	$2, %eax
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movl	500(%rsp), %edx         # 4-byte Reload
	movl	%edx, (%rcx)
	movl	$7512, 1316(%rsp)       # imm = 0x1D58
	movl	%eax, 528(%rsp)         # 4-byte Spill
	jmp	.LBB44_91
.LBB44_99:                              # %if.end141.i
                                        #   in Loop: Header=BB44_82 Depth=3
	movq	1192(%rsp), %rax        # 8-byte Reload
	movl	$3, (%rax)
	movl	$7515, 1316(%rsp)       # imm = 0x1D5B
	movl	516(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, %edx
	movl	%edx, %esi
	movq	552(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi,%rsi,4), %edx
	movl	$7517, 1316(%rsp)       # imm = 0x1D5D
	movl	%edx, %r8d
	shrl	$8, %r8d
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movl	%r8d, (%rsi)
	movl	$7520, 1316(%rsp)       # imm = 0x1D60
	movl	508(%rsp), %r9d         # 4-byte Reload
	cmpl	$0, %r9d
	movl	%edx, 496(%rsp)         # 4-byte Spill
	movl	%r8d, 492(%rsp)         # 4-byte Spill
	movl	%r9d, 488(%rsp)         # 4-byte Spill
	jne	.LBB44_101
# %bb.100:                              # %if.then156.i
                                        #   in Loop: Header=BB44_82 Depth=3
	xorl	%eax, %eax
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$7523, 1316(%rsp)       # imm = 0x1D63
	movslq	%edx, %rsi
	movl	BZ2_rNums(,%rsi,4), %edi
	movl	$7524, 1316(%rsp)       # imm = 0x1D64
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movl	%edi, (%rsi)
	movl	$7527, 1316(%rsp)       # imm = 0x1D67
	addl	$1, %edx
	cmpl	$512, %edx              # imm = 0x200
	cmovel	%eax, %edx
	movl	%edx, (%rcx)
	movl	$7532, 1316(%rsp)       # imm = 0x1D6C
	movl	%edi, 488(%rsp)         # 4-byte Spill
.LBB44_101:                             # %if.end169.i
                                        #   in Loop: Header=BB44_82 Depth=3
	movl	488(%rsp), %eax         # 4-byte Reload
	movl	$3, %ecx
	addl	$-1, %eax
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	$7534, 1316(%rsp)       # imm = 0x1D6E
	movl	576(%rsp), %esi         # 4-byte Reload
	addl	$3, %esi
	movq	1224(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi)
	movl	$7543, 1316(%rsp)       # imm = 0x1D77
	movl	504(%rsp), %esi         # 4-byte Reload
	movl	572(%rsp), %r8d         # 4-byte Reload
	cmpl	%r8d, %esi
	movl	%eax, 484(%rsp)         # 4-byte Spill
	movl	%ecx, 528(%rsp)         # 4-byte Spill
	je	.LBB44_91
# %bb.102:                              # %if.end187.i
                                        #   in Loop: Header=BB44_82 Depth=3
	movl	484(%rsp), %eax         # 4-byte Reload
	cmpl	$1, %eax
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	496(%rsp), %esi         # 4-byte Reload
	andl	$255, %esi
	xorl	%edx, %esi
	movl	564(%rsp), %edx         # 4-byte Reload
	cmpl	%edx, %esi
	movl	%esi, 480(%rsp)         # 4-byte Spill
	je	.LBB44_104
# %bb.103:                              # %if.then192.i
                                        #   in Loop: Header=BB44_82 Depth=3
	movl	$3, %eax
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movl	480(%rsp), %edx         # 4-byte Reload
	movl	%edx, (%rcx)
	movl	$7547, 1316(%rsp)       # imm = 0x1D7B
	movl	%eax, 528(%rsp)         # 4-byte Spill
	jmp	.LBB44_91
.LBB44_104:                             # %if.end195.i
                                        #   in Loop: Header=BB44_82 Depth=3
	movl	492(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ecx
	movl	%ecx, %edx
	movq	552(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi,%rdx,4), %ecx
	movl	$7549, 1316(%rsp)       # imm = 0x1D7D
	movl	%ecx, %edi
	shrl	$8, %edi
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movl	%edi, (%rdx)
	movl	$7552, 1316(%rsp)       # imm = 0x1D80
	movl	484(%rsp), %r8d         # 4-byte Reload
	cmpl	$0, %r8d
	movl	%ecx, 476(%rsp)         # 4-byte Spill
	movl	%edi, 472(%rsp)         # 4-byte Spill
	movl	%r8d, 468(%rsp)         # 4-byte Spill
	jne	.LBB44_106
# %bb.105:                              # %if.then209.i
                                        #   in Loop: Header=BB44_82 Depth=3
	xorl	%eax, %eax
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$7555, 1316(%rsp)       # imm = 0x1D83
	movslq	%edx, %rsi
	movl	BZ2_rNums(,%rsi,4), %edi
	movl	$7556, 1316(%rsp)       # imm = 0x1D84
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movl	%edi, (%rsi)
	movl	$7559, 1316(%rsp)       # imm = 0x1D87
	addl	$1, %edx
	cmpl	$512, %edx              # imm = 0x200
	cmovel	%eax, %edx
	movl	%edx, (%rcx)
	movl	$7564, 1316(%rsp)       # imm = 0x1D8C
	movl	%edi, 468(%rsp)         # 4-byte Spill
.LBB44_106:                             # %if.end222.i
                                        #   in Loop: Header=BB44_82 Depth=3
	movl	468(%rsp), %eax         # 4-byte Reload
	addl	$-1, %eax
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	$7568, 1316(%rsp)       # imm = 0x1D90
	cmpl	$1, %eax
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	576(%rsp), %edi         # 4-byte Reload
	addl	$4, %edi
	movq	1224(%rsp), %r8         # 8-byte Reload
	movl	%edi, (%r8)
	movl	$7571, 1316(%rsp)       # imm = 0x1D93
	movl	476(%rsp), %edi         # 4-byte Reload
	andl	$255, %edi
	xorl	%esi, %edi
	addl	$4, %edi
	movq	1192(%rsp), %r9         # 8-byte Reload
	movl	%edi, (%r9)
	movl	$7574, 1316(%rsp)       # imm = 0x1D96
	movl	472(%rsp), %esi         # 4-byte Reload
	movl	%esi, %r10d
	movl	%r10d, %r11d
	movq	552(%rsp), %rbx         # 8-byte Reload
	movl	(%rbx,%r11,4), %r10d
	movl	$7576, 1316(%rsp)       # imm = 0x1D98
	movl	%r10d, %ebp
	andl	$255, %ebp
	movq	1184(%rsp), %r11        # 8-byte Reload
	movl	%ebp, (%r11)
	movl	$7578, 1316(%rsp)       # imm = 0x1D9A
	shrl	$8, %r10d
	movq	1168(%rsp), %r14        # 8-byte Reload
	movl	%r10d, (%r14)
	movl	$7581, 1316(%rsp)       # imm = 0x1D9D
	cmpl	$0, %eax
	movl	%edi, 464(%rsp)         # 4-byte Spill
	movl	%ebp, 460(%rsp)         # 4-byte Spill
	movl	%eax, 456(%rsp)         # 4-byte Spill
	jne	.LBB44_108
# %bb.107:                              # %if.then252.i
                                        #   in Loop: Header=BB44_82 Depth=3
	xorl	%eax, %eax
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$7584, 1316(%rsp)       # imm = 0x1DA0
	movslq	%edx, %rsi
	movl	BZ2_rNums(,%rsi,4), %edi
	movl	$7585, 1316(%rsp)       # imm = 0x1DA1
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movl	%edi, (%rsi)
	movl	$7588, 1316(%rsp)       # imm = 0x1DA4
	addl	$1, %edx
	cmpl	$512, %edx              # imm = 0x200
	cmovel	%eax, %edx
	movl	%edx, (%rcx)
	movl	$7593, 1316(%rsp)       # imm = 0x1DA9
	movl	%edi, 456(%rsp)         # 4-byte Spill
.LBB44_108:                             # %if.end265.i
                                        #   in Loop: Header=BB44_82 Depth=3
	movl	456(%rsp), %eax         # 4-byte Reload
	addl	$-1, %eax
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	$7597, 1316(%rsp)       # imm = 0x1DAD
	cmpl	$1, %eax
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %eax
	movl	460(%rsp), %esi         # 4-byte Reload
	xorl	%eax, %esi
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi)
	movl	$7599, 1316(%rsp)       # imm = 0x1DAF
	movl	576(%rsp), %eax         # 4-byte Reload
	addl	$5, %eax
	movq	1224(%rsp), %r8         # 8-byte Reload
	movl	%eax, (%r8)
	movl	$7601, 1316(%rsp)       # imm = 0x1DB1
	movl	464(%rsp), %eax         # 4-byte Reload
	movl	%eax, 528(%rsp)         # 4-byte Spill
	jmp	.LBB44_91
.LBB44_109:                             # %if.else.i161
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	1208(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$7602, 1316(%rsp)       # imm = 0x1DB2
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movb	(%rdx), %sil
	movl	$7603, 1316(%rsp)       # imm = 0x1DB3
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %r8d
	movl	$7604, 1316(%rsp)       # imm = 0x1DB4
	movq	1224(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$7605, 1316(%rsp)       # imm = 0x1DB5
	movq	1184(%rsp), %r11        # 8-byte Reload
	movl	(%r11), %ebx
	movl	$7606, 1316(%rsp)       # imm = 0x1DB6
	movq	1176(%rsp), %r14        # 8-byte Reload
	movq	(%r14), %r15
	movl	$7607, 1316(%rsp)       # imm = 0x1DB7
	movq	1168(%rsp), %r12        # 8-byte Reload
	movl	(%r12), %ebp
	movl	$7608, 1316(%rsp)       # imm = 0x1DB8
	movq	1288(%rsp), %r13        # 8-byte Reload
	movq	(%r13), %rax
	movl	$7610, 1316(%rsp)       # imm = 0x1DBA
	movq	24(%rax), %rdx
	movl	$7612, 1316(%rsp)       # imm = 0x1DBC
	movl	32(%rax), %edi
	movl	$7613, 1316(%rsp)       # imm = 0x1DBD
	movq	1216(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %r9d
	movl	$7648, 1316(%rsp)       # imm = 0x1DE0
	addl	$1, %r9d
	movl	%edi, %r11d
	movl	%ebx, 452(%rsp)         # 4-byte Spill
	movl	%ebp, 448(%rsp)         # 4-byte Spill
	movl	%r9d, 444(%rsp)         # 4-byte Spill
	movl	%edi, 440(%rsp)         # 4-byte Spill
	movb	%sil, 439(%rsp)         # 1-byte Spill
	movl	%r8d, 432(%rsp)         # 4-byte Spill
	movl	%r11d, 428(%rsp)        # 4-byte Spill
	movl	%r10d, 424(%rsp)        # 4-byte Spill
	movq	%r15, 416(%rsp)         # 8-byte Spill
	movl	%ecx, 412(%rsp)         # 4-byte Spill
	movq	%rdx, 400(%rsp)         # 8-byte Spill
.LBB44_110:                             # %while.cond289.i
                                        #   Parent Loop BB44_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_113 Depth 3
	movl	428(%rsp), %eax         # 4-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movl	448(%rsp), %edx         # 4-byte Reload
	movl	412(%rsp), %esi         # 4-byte Reload
	movl	452(%rsp), %edi         # 4-byte Reload
	movl	424(%rsp), %r8d         # 4-byte Reload
	movl	432(%rsp), %r9d         # 4-byte Reload
	movb	439(%rsp), %r10b        # 1-byte Reload
	cmpl	$0, %r9d
	movb	%r10b, %r11b
	movl	%r8d, %ebx
	movl	%edi, %ebp
	movl	%esi, %r14d
	movl	%edx, %r15d
	movq	%rcx, %r12
	movl	%eax, %r13d
	movl	%eax, 396(%rsp)         # 4-byte Spill
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	movl	%edx, 380(%rsp)         # 4-byte Spill
	movl	%esi, 376(%rsp)         # 4-byte Spill
	movl	%edi, 372(%rsp)         # 4-byte Spill
	movl	%r8d, 368(%rsp)         # 4-byte Spill
	movl	%r9d, 364(%rsp)         # 4-byte Spill
	movb	%r10b, 363(%rsp)        # 1-byte Spill
	movb	%r11b, 362(%rsp)        # 1-byte Spill
	movl	%ebx, 356(%rsp)         # 4-byte Spill
	movl	%ebp, 352(%rsp)         # 4-byte Spill
	movl	%r14d, 348(%rsp)        # 4-byte Spill
	movl	%r15d, 344(%rsp)        # 4-byte Spill
	movq	%r12, 336(%rsp)         # 8-byte Spill
	movl	%r13d, 332(%rsp)        # 4-byte Spill
	jle	.LBB44_118
# %bb.111:                              # %if.then293.i
                                        #   in Loop: Header=BB44_110 Depth=2
	xorl	%eax, %eax
	movl	396(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movb	363(%rsp), %dl          # 1-byte Reload
	movl	364(%rsp), %esi         # 4-byte Reload
	movl	368(%rsp), %edi         # 4-byte Reload
	movl	372(%rsp), %r8d         # 4-byte Reload
	movl	376(%rsp), %r9d         # 4-byte Reload
	movl	380(%rsp), %r10d        # 4-byte Reload
	movq	384(%rsp), %r11         # 8-byte Reload
	movq	%r11, 320(%rsp)         # 8-byte Spill
	movb	%dl, 319(%rsp)          # 1-byte Spill
	movl	%esi, 312(%rsp)         # 4-byte Spill
	movl	%edi, 308(%rsp)         # 4-byte Spill
	movl	%r8d, 304(%rsp)         # 4-byte Spill
	movl	%r9d, 300(%rsp)         # 4-byte Spill
	movl	%r10d, 296(%rsp)        # 4-byte Spill
	movl	%eax, 292(%rsp)         # 4-byte Spill
	je	.LBB44_128
# %bb.112:                              # %if.end299.lr.ph.i
                                        #   in Loop: Header=BB44_110 Depth=2
	movb	363(%rsp), %al          # 1-byte Reload
	movzbl	%al, %ecx
	movl	396(%rsp), %edx         # 4-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movl	376(%rsp), %edi         # 4-byte Reload
	movl	364(%rsp), %r8d         # 4-byte Reload
	movl	%ecx, 288(%rsp)         # 4-byte Spill
	movl	%edx, 284(%rsp)         # 4-byte Spill
	movq	%rsi, 272(%rsp)         # 8-byte Spill
	movl	%edi, 268(%rsp)         # 4-byte Spill
	movl	%r8d, 264(%rsp)         # 4-byte Spill
.LBB44_113:                             # %if.end299.i
                                        #   Parent Loop BB44_4 Depth=1
                                        #     Parent Loop BB44_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	264(%rsp), %eax         # 4-byte Reload
	movl	268(%rsp), %ecx         # 4-byte Reload
	movq	272(%rsp), %rdx         # 8-byte Reload
	movl	284(%rsp), %esi         # 4-byte Reload
	cmpl	$1, %eax
	movl	%eax, 260(%rsp)         # 4-byte Spill
	movl	%ecx, 256(%rsp)         # 4-byte Spill
	movq	%rdx, 248(%rsp)         # 8-byte Spill
	movl	%esi, 244(%rsp)         # 4-byte Spill
	je	.LBB44_115
# %bb.114:                              # %if.end303.i
                                        #   in Loop: Header=BB44_113 Depth=3
	xorl	%eax, %eax
	movq	248(%rsp), %rcx         # 8-byte Reload
	movb	363(%rsp), %dl          # 1-byte Reload
	movb	%dl, (%rcx)
	movl	$7654, 1316(%rsp)       # imm = 0x1DE6
	movl	256(%rsp), %esi         # 4-byte Reload
	shll	$8, %esi
	movl	256(%rsp), %edi         # 4-byte Reload
	shrl	$24, %edi
	movl	288(%rsp), %r8d         # 4-byte Reload
	xorl	%r8d, %edi
	movl	%edi, %edi
	movl	%edi, %r9d
	movl	BZ2_crc32Table(,%r9,4), %edi
	movl	$7671, 1316(%rsp)       # imm = 0x1DF7
	xorl	%esi, %edi
	movl	260(%rsp), %esi         # 4-byte Reload
	addl	$-1, %esi
	addq	$1, %rcx
	movl	244(%rsp), %r10d        # 4-byte Reload
	addl	$-1, %r10d
	cmpl	$0, %r10d
	movq	%rcx, %r9
	movl	%edi, %r11d
	movl	%esi, %ebx
	movl	368(%rsp), %ebp         # 4-byte Reload
	movl	372(%rsp), %r14d        # 4-byte Reload
	movl	380(%rsp), %r15d        # 4-byte Reload
	movq	%rcx, 320(%rsp)         # 8-byte Spill
	movl	%r15d, 296(%rsp)        # 4-byte Spill
	movb	%dl, 319(%rsp)          # 1-byte Spill
	movl	%r14d, 304(%rsp)        # 4-byte Spill
	movl	%ebx, 264(%rsp)         # 4-byte Spill
	movl	%r10d, 284(%rsp)        # 4-byte Spill
	movq	%r9, 272(%rsp)          # 8-byte Spill
	movl	%r11d, 268(%rsp)        # 4-byte Spill
	movl	%esi, 312(%rsp)         # 4-byte Spill
	movl	%ebp, 308(%rsp)         # 4-byte Spill
	movl	%edi, 300(%rsp)         # 4-byte Spill
	movl	%eax, 292(%rsp)         # 4-byte Spill
	je	.LBB44_128
	jmp	.LBB44_113
.LBB44_115:                             # %s_state_out_len_eq_one.i.loopexit
                                        #   in Loop: Header=BB44_110 Depth=2
	movb	363(%rsp), %al          # 1-byte Reload
	movl	368(%rsp), %ecx         # 4-byte Reload
	movl	372(%rsp), %edx         # 4-byte Reload
	movl	256(%rsp), %esi         # 4-byte Reload
	movl	380(%rsp), %edi         # 4-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	244(%rsp), %r9d         # 4-byte Reload
	movb	%al, 243(%rsp)          # 1-byte Spill
	movl	%ecx, 236(%rsp)         # 4-byte Spill
	movl	%edx, 232(%rsp)         # 4-byte Spill
	movl	%esi, 228(%rsp)         # 4-byte Spill
	movl	%edi, 224(%rsp)         # 4-byte Spill
	movq	%r8, 216(%rsp)          # 8-byte Spill
	movl	%r9d, 212(%rsp)         # 4-byte Spill
	jmp	.LBB44_116
.LBB44_116:                             # %s_state_out_len_eq_one.i
                                        #   in Loop: Header=BB44_110 Depth=2
	movl	212(%rsp), %eax         # 4-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movl	224(%rsp), %edx         # 4-byte Reload
	movl	228(%rsp), %esi         # 4-byte Reload
	movl	232(%rsp), %edi         # 4-byte Reload
	movl	236(%rsp), %r8d         # 4-byte Reload
	movb	243(%rsp), %r9b         # 1-byte Reload
	movl	$1, %r10d
	xorl	%r11d, %r11d
	cmpl	$0, %eax
	movb	%r9b, %bl
	movl	%r8d, %ebp
	movl	%edi, %r14d
	movl	%esi, %r15d
	movl	%edx, %r12d
	movq	%rcx, %r13
	movl	%eax, 208(%rsp)         # 4-byte Spill
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movl	%edx, 196(%rsp)         # 4-byte Spill
	movl	%esi, 192(%rsp)         # 4-byte Spill
	movl	%edi, 188(%rsp)         # 4-byte Spill
	movl	%r8d, 184(%rsp)         # 4-byte Spill
	movb	%r9b, 183(%rsp)         # 1-byte Spill
	movb	%bl, 319(%rsp)          # 1-byte Spill
	movq	%r13, 320(%rsp)         # 8-byte Spill
	movl	%r10d, 312(%rsp)        # 4-byte Spill
	movl	%ebp, 308(%rsp)         # 4-byte Spill
	movl	%r14d, 304(%rsp)        # 4-byte Spill
	movl	%r15d, 300(%rsp)        # 4-byte Spill
	movl	%r12d, 296(%rsp)        # 4-byte Spill
	movl	%r11d, 292(%rsp)        # 4-byte Spill
	je	.LBB44_128
# %bb.117:                              # %if.end318.i
                                        #   in Loop: Header=BB44_110 Depth=2
	movq	200(%rsp), %rax         # 8-byte Reload
	movb	183(%rsp), %cl          # 1-byte Reload
	movb	%cl, (%rax)
	movl	$7678, 1316(%rsp)       # imm = 0x1DFE
	movl	192(%rsp), %edx         # 4-byte Reload
	shll	$8, %edx
	movl	192(%rsp), %esi         # 4-byte Reload
	shrl	$24, %esi
	movzbl	%cl, %edi
	xorl	%edi, %esi
	movl	%esi, %esi
	movl	%esi, %r8d
	movl	BZ2_crc32Table(,%r8,4), %esi
	movl	$7692, 1316(%rsp)       # imm = 0x1E0C
	xorl	%edx, %esi
	addq	$1, %rax
	movl	208(%rsp), %edx         # 4-byte Reload
	addl	$-1, %edx
	movl	184(%rsp), %edi         # 4-byte Reload
	movl	188(%rsp), %r9d         # 4-byte Reload
	movl	196(%rsp), %r10d        # 4-byte Reload
	movl	%r10d, 344(%rsp)        # 4-byte Spill
	movb	%cl, 362(%rsp)          # 1-byte Spill
	movl	%r9d, 352(%rsp)         # 4-byte Spill
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movl	%edi, 356(%rsp)         # 4-byte Spill
	movl	%esi, 348(%rsp)         # 4-byte Spill
	movl	%edx, 332(%rsp)         # 4-byte Spill
.LBB44_118:                             # %if.end328.i162
                                        #   in Loop: Header=BB44_110 Depth=2
	movl	332(%rsp), %eax         # 4-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movl	344(%rsp), %edx         # 4-byte Reload
	movl	348(%rsp), %esi         # 4-byte Reload
	movl	352(%rsp), %edi         # 4-byte Reload
	movl	356(%rsp), %r8d         # 4-byte Reload
	movb	362(%rsp), %r9b         # 1-byte Reload
	movl	$4294967292, %r10d      # imm = 0xFFFFFFFC
	movl	444(%rsp), %r11d        # 4-byte Reload
	cmpl	%r11d, %r8d
	movl	%eax, 176(%rsp)         # 4-byte Spill
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	movl	%edx, 164(%rsp)         # 4-byte Spill
	movl	%esi, 160(%rsp)         # 4-byte Spill
	movl	%edi, 156(%rsp)         # 4-byte Spill
	movl	%r8d, 152(%rsp)         # 4-byte Spill
	movb	%r9b, 151(%rsp)         # 1-byte Spill
	movl	%r10d, 1300(%rsp)       # 4-byte Spill
	jg	.LBB44_146
# %bb.119:                              # %if.end332.i
                                        #   in Loop: Header=BB44_110 Depth=2
	xorl	%eax, %eax
	movl	152(%rsp), %ecx         # 4-byte Reload
	movl	444(%rsp), %edx         # 4-byte Reload
	cmpl	%edx, %ecx
	movb	151(%rsp), %sil         # 1-byte Reload
	movl	156(%rsp), %edi         # 4-byte Reload
	movl	160(%rsp), %r8d         # 4-byte Reload
	movl	164(%rsp), %r9d         # 4-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movl	176(%rsp), %r11d        # 4-byte Reload
	movb	%sil, 319(%rsp)         # 1-byte Spill
	movl	%edx, 308(%rsp)         # 4-byte Spill
	movl	%eax, 312(%rsp)         # 4-byte Spill
	movl	%edi, 304(%rsp)         # 4-byte Spill
	movl	%r8d, 300(%rsp)         # 4-byte Spill
	movl	%r9d, 296(%rsp)         # 4-byte Spill
	movq	%r10, 320(%rsp)         # 8-byte Spill
	movl	%r11d, 292(%rsp)        # 4-byte Spill
	je	.LBB44_128
# %bb.120:                              # %if.end336.i
                                        #   in Loop: Header=BB44_110 Depth=2
	movl	156(%rsp), %eax         # 4-byte Reload
	movb	%al, %cl
	movl	164(%rsp), %edx         # 4-byte Reload
	movl	%edx, %esi
	movl	%esi, %edi
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	(%r8,%rdi,4), %esi
	movl	$7699, 1316(%rsp)       # imm = 0x1E13
	movl	%esi, %r9d
	shrl	$8, %r9d
	movl	152(%rsp), %r10d        # 4-byte Reload
	addl	$1, %r10d
	andl	$255, %esi
	cmpl	%eax, %esi
	movb	%cl, %r11b
	movl	%r10d, %ebx
	movl	160(%rsp), %ebp         # 4-byte Reload
	movl	%r9d, %r14d
	movq	168(%rsp), %rdi         # 8-byte Reload
	movl	176(%rsp), %r15d        # 4-byte Reload
	movb	%cl, 150(%rsp)          # 1-byte Spill
	movl	%r10d, 144(%rsp)        # 4-byte Spill
	movl	%r9d, 140(%rsp)         # 4-byte Spill
	movl	%ebx, 236(%rsp)         # 4-byte Spill
	movb	%r11b, 243(%rsp)        # 1-byte Spill
	movl	%esi, 232(%rsp)         # 4-byte Spill
	movl	%ebp, 228(%rsp)         # 4-byte Spill
	movl	%r14d, 224(%rsp)        # 4-byte Spill
	movq	%rdi, 216(%rsp)         # 8-byte Spill
	movl	%r15d, 212(%rsp)        # 4-byte Spill
	jne	.LBB44_116
# %bb.121:                              # %if.end349.i
                                        #   in Loop: Header=BB44_110 Depth=2
	movl	144(%rsp), %eax         # 4-byte Reload
	movl	444(%rsp), %ecx         # 4-byte Reload
	cmpl	%ecx, %eax
	movb	150(%rsp), %dl          # 1-byte Reload
	movl	156(%rsp), %esi         # 4-byte Reload
	movl	160(%rsp), %edi         # 4-byte Reload
	movl	140(%rsp), %r8d         # 4-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movl	176(%rsp), %r10d        # 4-byte Reload
	movl	%ecx, 236(%rsp)         # 4-byte Spill
	movb	%dl, 243(%rsp)          # 1-byte Spill
	movl	%esi, 232(%rsp)         # 4-byte Spill
	movl	%edi, 228(%rsp)         # 4-byte Spill
	movl	%r8d, 224(%rsp)         # 4-byte Spill
	movq	%r9, 216(%rsp)          # 8-byte Spill
	movl	%r10d, 212(%rsp)        # 4-byte Spill
	je	.LBB44_116
# %bb.122:                              # %if.end353.i165
                                        #   in Loop: Header=BB44_110 Depth=2
	movl	$2, %eax
	movl	140(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, %edx
	movl	%edx, %esi
	movq	416(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi,%rsi,4), %edx
	movl	$7709, 1316(%rsp)       # imm = 0x1E1D
	movl	%edx, %r8d
	shrl	$8, %r8d
	movl	152(%rsp), %r9d         # 4-byte Reload
	addl	$2, %r9d
	movl	444(%rsp), %r10d        # 4-byte Reload
	cmpl	%r10d, %r9d
	movl	156(%rsp), %r11d        # 4-byte Reload
	movl	%r8d, %ebx
	movl	%r10d, 136(%rsp)        # 4-byte Spill
	movl	%edx, 132(%rsp)         # 4-byte Spill
	movl	%r8d, 128(%rsp)         # 4-byte Spill
	movl	%r9d, 124(%rsp)         # 4-byte Spill
	movl	%eax, 120(%rsp)         # 4-byte Spill
	movl	%r11d, 116(%rsp)        # 4-byte Spill
	movl	%ebx, 112(%rsp)         # 4-byte Spill
	je	.LBB44_127
# %bb.123:                              # %if.end363.i
                                        #   in Loop: Header=BB44_110 Depth=2
	movl	$2, %eax
	movl	132(%rsp), %ecx         # 4-byte Reload
	andl	$255, %ecx
	movl	156(%rsp), %edx         # 4-byte Reload
	cmpl	%edx, %ecx
	movl	124(%rsp), %esi         # 4-byte Reload
	movl	128(%rsp), %edi         # 4-byte Reload
	movl	%esi, 136(%rsp)         # 4-byte Spill
	movl	%eax, 120(%rsp)         # 4-byte Spill
	movl	%ecx, 116(%rsp)         # 4-byte Spill
	movl	%edi, 112(%rsp)         # 4-byte Spill
	jne	.LBB44_127
# %bb.124:                              # %if.end369.i
                                        #   in Loop: Header=BB44_110 Depth=2
	movl	$3, %eax
	movl	128(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, %edx
	movl	%edx, %esi
	movq	416(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi,%rsi,4), %edx
	movl	$7719, 1316(%rsp)       # imm = 0x1E27
	movl	%edx, %r8d
	shrl	$8, %r8d
	movl	152(%rsp), %r9d         # 4-byte Reload
	addl	$3, %r9d
	movl	444(%rsp), %r10d        # 4-byte Reload
	cmpl	%r10d, %r9d
	movl	156(%rsp), %r11d        # 4-byte Reload
	movl	%r8d, %ebx
	movl	%r10d, 136(%rsp)        # 4-byte Spill
	movl	%edx, 108(%rsp)         # 4-byte Spill
	movl	%r8d, 104(%rsp)         # 4-byte Spill
	movl	%r9d, 100(%rsp)         # 4-byte Spill
	movl	%eax, 120(%rsp)         # 4-byte Spill
	movl	%r11d, 116(%rsp)        # 4-byte Spill
	movl	%ebx, 112(%rsp)         # 4-byte Spill
	je	.LBB44_127
# %bb.125:                              # %if.end379.i
                                        #   in Loop: Header=BB44_110 Depth=2
	movl	$3, %eax
	movl	108(%rsp), %ecx         # 4-byte Reload
	andl	$255, %ecx
	movl	156(%rsp), %edx         # 4-byte Reload
	cmpl	%edx, %ecx
	movl	100(%rsp), %esi         # 4-byte Reload
	movl	104(%rsp), %edi         # 4-byte Reload
	movl	%esi, 136(%rsp)         # 4-byte Spill
	movl	%eax, 120(%rsp)         # 4-byte Spill
	movl	%ecx, 116(%rsp)         # 4-byte Spill
	movl	%edi, 112(%rsp)         # 4-byte Spill
	jne	.LBB44_127
# %bb.126:                              # %if.end385.i
                                        #   in Loop: Header=BB44_110 Depth=2
	movl	104(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ecx
	movl	%ecx, %edx
	movq	416(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi,%rdx,4), %ecx
	movl	$7725, 1316(%rsp)       # imm = 0x1E2D
	movl	%ecx, %edi
	shrl	$8, %edi
	andl	$255, %ecx
	addl	$4, %ecx
	movl	%edi, %edi
	movl	%edi, %edx
	movl	(%rsi,%rdx,4), %edi
	movl	$7739, 1316(%rsp)       # imm = 0x1E3B
	movl	%edi, %r8d
	andl	$255, %r8d
	shrl	$8, %edi
	movl	152(%rsp), %r9d         # 4-byte Reload
	addl	$5, %r9d
	movl	%ecx, 120(%rsp)         # 4-byte Spill
	movl	%r9d, 136(%rsp)         # 4-byte Spill
	movl	%r8d, 116(%rsp)         # 4-byte Spill
	movl	%edi, 112(%rsp)         # 4-byte Spill
.LBB44_127:                             # %while.cond289.i.backedge
                                        #   in Loop: Header=BB44_110 Depth=2
	movl	112(%rsp), %eax         # 4-byte Reload
	movl	116(%rsp), %ecx         # 4-byte Reload
	movl	136(%rsp), %edx         # 4-byte Reload
	movl	120(%rsp), %esi         # 4-byte Reload
	movb	150(%rsp), %dil         # 1-byte Reload
	movl	160(%rsp), %r8d         # 4-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movl	176(%rsp), %r10d        # 4-byte Reload
	movl	%r8d, 412(%rsp)         # 4-byte Spill
	movl	%edx, 424(%rsp)         # 4-byte Spill
	movl	%esi, 432(%rsp)         # 4-byte Spill
	movb	%dil, 439(%rsp)         # 1-byte Spill
	movl	%ecx, 452(%rsp)         # 4-byte Spill
	movl	%eax, 448(%rsp)         # 4-byte Spill
	movq	%r9, 400(%rsp)          # 8-byte Spill
	movl	%r10d, 428(%rsp)        # 4-byte Spill
	jmp	.LBB44_110
.LBB44_128:                             # %return_notr.i
                                        #   in Loop: Header=BB44_4 Depth=1
	movl	292(%rsp), %eax         # 4-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movl	296(%rsp), %edx         # 4-byte Reload
	movl	300(%rsp), %esi         # 4-byte Reload
	movl	304(%rsp), %edi         # 4-byte Reload
	movl	308(%rsp), %r8d         # 4-byte Reload
	movl	312(%rsp), %r9d         # 4-byte Reload
	movb	319(%rsp), %r10b        # 1-byte Reload
	movq	1288(%rsp), %r11        # 8-byte Reload
	movq	(%r11), %rbx
	movl	$7741, 1316(%rsp)       # imm = 0x1E3D
	movl	36(%rbx), %ebp
	movl	$7744, 1316(%rsp)       # imm = 0x1E40
	movl	440(%rsp), %r14d        # 4-byte Reload
	subl	%eax, %r14d
	movl	%ebp, %r15d
	addl	%r14d, %r15d
	movl	%r15d, 36(%rbx)
	movl	$7748, 1316(%rsp)       # imm = 0x1E44
	cmpl	%ebp, %r15d
	movl	%eax, 96(%rsp)          # 4-byte Spill
	movq	%rcx, 88(%rsp)          # 8-byte Spill
	movl	%edx, 84(%rsp)          # 4-byte Spill
	movl	%esi, 80(%rsp)          # 4-byte Spill
	movl	%edi, 76(%rsp)          # 4-byte Spill
	movl	%r8d, 72(%rsp)          # 4-byte Spill
	movl	%r9d, 68(%rsp)          # 4-byte Spill
	movb	%r10b, 67(%rsp)         # 1-byte Spill
	movq	%rbx, 56(%rsp)          # 8-byte Spill
	jae	.LBB44_130
# %bb.129:                              # %if.then410.i
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	56(%rsp), %rax          # 8-byte Reload
	movl	40(%rax), %ecx
	movl	$7750, 1316(%rsp)       # imm = 0x1E46
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
	movl	$7752, 1316(%rsp)       # imm = 0x1E48
.LBB44_130:                             #   in Loop: Header=BB44_4 Depth=1
	movq	1208(%rsp), %rax        # 8-byte Reload
	movl	80(%rsp), %ecx          # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$7753, 1316(%rsp)       # imm = 0x1E49
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movb	67(%rsp), %sil          # 1-byte Reload
	movb	%sil, (%rdx)
	movl	$7754, 1316(%rsp)       # imm = 0x1E4A
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movl	68(%rsp), %r8d          # 4-byte Reload
	movl	%r8d, (%rdi)
	movl	$7755, 1316(%rsp)       # imm = 0x1E4B
	movq	1224(%rsp), %r9         # 8-byte Reload
	movl	72(%rsp), %r10d         # 4-byte Reload
	movl	%r10d, (%r9)
	movl	$7756, 1316(%rsp)       # imm = 0x1E4C
	movq	1184(%rsp), %r11        # 8-byte Reload
	movl	76(%rsp), %ebx          # 4-byte Reload
	movl	%ebx, (%r11)
	movl	$7757, 1316(%rsp)       # imm = 0x1E4D
	movq	1176(%rsp), %r14        # 8-byte Reload
	movq	416(%rsp), %r15         # 8-byte Reload
	movq	%r15, (%r14)
	movl	$7758, 1316(%rsp)       # imm = 0x1E4E
	movq	1168(%rsp), %r12        # 8-byte Reload
	movl	84(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, (%r12)
	movl	$7760, 1316(%rsp)       # imm = 0x1E50
	movq	56(%rsp), %r13          # 8-byte Reload
	movq	88(%rsp), %rax          # 8-byte Reload
	movq	%rax, 24(%r13)
	movl	$7762, 1316(%rsp)       # imm = 0x1E52
	movl	96(%rsp), %ecx          # 4-byte Reload
	movl	%ecx, 32(%r13)
	movl	$7764, 1316(%rsp)       # imm = 0x1E54
.LBB44_131:                             # %if.end20
                                        #   in Loop: Header=BB44_4 Depth=1
	xorl	%eax, %eax
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$7765, 1316(%rsp)       # imm = 0x1E55
	movq	1216(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %edi
	movl	$7769, 1316(%rsp)       # imm = 0x1E59
	addl	$1, %edi
	cmpl	%edi, %edx
	movl	%eax, 1300(%rsp)        # 4-byte Spill
	jne	.LBB44_146
# %bb.132:                              # %land.lhs.true
                                        #   in Loop: Header=BB44_4 Depth=1
	xorl	%eax, %eax
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$7772, 1316(%rsp)       # imm = 0x1E5C
	cmpl	$0, %edx
	movl	%eax, 1300(%rsp)        # 4-byte Spill
	jne	.LBB44_146
# %bb.133:                              # %if.then23
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	1208(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$7774, 1316(%rsp)       # imm = 0x1E5E
	xorl	$-1, %ecx
	movl	%ecx, (%rax)
	movl	$7775, 1316(%rsp)       # imm = 0x1E5F
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %esi
	movl	$7778, 1316(%rsp)       # imm = 0x1E62
	cmpl	$2, %esi
	movl	%ecx, 52(%rsp)          # 4-byte Spill
	movl	%esi, 48(%rsp)          # 4-byte Spill
	jle	.LBB44_135
# %bb.134:                              # %if.then26
                                        #   in Loop: Header=BB44_4 Depth=1
	movabsq	$.L.str.2.37, %rsi
	movq	stderr, %rdi
	movl	$7779, 1316(%rsp)       # imm = 0x1E63
	movq	1264(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %edx
	movl	$7782, 1316(%rsp)       # imm = 0x1E66
	movl	52(%rsp), %ecx          # 4-byte Reload
	movb	$0, %al
	callq	fprintf
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %ecx
	movl	$7787, 1316(%rsp)       # imm = 0x1E6B
	movl	%eax, 44(%rsp)          # 4-byte Spill
	movl	%ecx, 48(%rsp)          # 4-byte Spill
.LBB44_135:                             # %if.end29
                                        #   in Loop: Header=BB44_4 Depth=1
	movl	48(%rsp), %eax          # 4-byte Reload
	cmpl	$1, %eax
	jle	.LBB44_137
# %bb.136:                              # %if.then32
                                        #   in Loop: Header=BB44_4 Depth=1
	movl	$93, %edi
	movq	stderr, %rsi
	movl	$7791, 1316(%rsp)       # imm = 0x1E6F
	callq	fputc
	movl	%eax, 40(%rsp)          # 4-byte Spill
.LBB44_137:                             # %if.end34
                                        #   in Loop: Header=BB44_4 Depth=1
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$7792, 1316(%rsp)       # imm = 0x1E70
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %edi
	movl	$7795, 1316(%rsp)       # imm = 0x1E73
	cmpl	%edi, %edx
	movl	%edx, 36(%rsp)          # 4-byte Spill
	movl	%eax, 1300(%rsp)        # 4-byte Spill
	jne	.LBB44_146
# %bb.138:                              # %if.end47.thread
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	1256(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$7800, 1316(%rsp)       # imm = 0x1E78
	movl	%ecx, %edx
	shll	$1, %edx
	shrl	$31, %ecx
	orl	%ecx, %edx
	movl	36(%rsp), %ecx          # 4-byte Reload
	xorl	%ecx, %edx
	movl	%edx, (%rax)
	movl	$7801, 1316(%rsp)       # imm = 0x1E79
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movl	$14, (%rsi)
	movl	$7810, 1316(%rsp)       # imm = 0x1E82
	jmp	.LBB44_140
.LBB44_139:                             # %if.end47
                                        #   in Loop: Header=BB44_5 Depth=2
	movb	1135(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB44_140
	jmp	.LBB44_5
.LBB44_140:                             # %if.then50
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	1288(%rsp), %rdi        # 8-byte Reload
	callq	BZ2_decompress
	cmpl	$4, %eax
	movl	%eax, 32(%rsp)          # 4-byte Spill
	jne	.LBB44_145
# %bb.141:                              # %if.then53
	movq	1144(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$7815, 1316(%rsp)       # imm = 0x1E87
	cmpl	$2, %ecx
	jg	.LBB44_143
# %bb.142:                              # %if.then53.cleanup.thread_crit_edge
	movq	1288(%rsp), %rax        # 8-byte Reload
	addq	$3180, %rax             # imm = 0xC6C
	movq	%rax, 24(%rsp)          # 8-byte Spill
	jmp	.LBB44_144
.LBB44_143:                             # %if.then56
	movabsq	$.L.str.4.38, %rsi
	movq	stderr, %rdi
	movl	$7816, 1316(%rsp)       # imm = 0x1E88
	movq	1288(%rsp), %rax        # 8-byte Reload
	addq	$3180, %rax             # imm = 0xC6C
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movl	3180(%rcx), %edx
	movl	$7818, 1316(%rsp)       # imm = 0x1E8A
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$7822, 1316(%rsp)       # imm = 0x1E8E
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movb	$0, %al
	callq	fprintf
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	%eax, 12(%rsp)          # 4-byte Spill
	movq	%rsi, 24(%rsp)          # 8-byte Spill
.LBB44_144:                             # %cleanup.thread
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	$4294967292, %ecx       # imm = 0xFFFFFFFC
	movl	$4, %edx
	movq	1256(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %edi
	movl	$7824, 1316(%rsp)       # imm = 0x1E90
	movl	(%rax), %r8d
	movl	$7829, 1316(%rsp)       # imm = 0x1E95
	cmpl	%r8d, %edi
	cmovel	%edx, %ecx
	movl	%ecx, 1300(%rsp)        # 4-byte Spill
	jmp	.LBB44_146
.LBB44_145:                             # %cleanup
                                        #   in Loop: Header=BB44_4 Depth=1
	movl	$2, %eax
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$7842, 1316(%rsp)       # imm = 0x1EA2
	cmpl	$2, %edx
	movl	32(%rsp), %edx          # 4-byte Reload
	movl	%eax, 1140(%rsp)        # 4-byte Spill
	movl	%edx, 1300(%rsp)        # 4-byte Spill
	je	.LBB44_4
.LBB44_146:                             # %cleanup71
	movl	1300(%rsp), %eax        # 4-byte Reload
	addq	$1320, %rsp             # imm = 0x528
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end44:
	.size	BZ2_bzDecompress, .Lfunc_end44-BZ2_bzDecompress
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressEnd     # -- Begin function BZ2_bzDecompressEnd
	.p2align	4, 0x90
	.type	BZ2_bzDecompressEnd,@function
BZ2_bzDecompressEnd:                    # @BZ2_bzDecompressEnd
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$88, %rsp
	.cfi_def_cfa_offset 96
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	$9999, 84(%rsp)         # imm = 0x270F
	cmpq	$0, %rdi
	movq	%rdi, 72(%rsp)          # 8-byte Spill
	movl	%eax, 68(%rsp)          # 4-byte Spill
	je	.LBB45_11
# %bb.1:                                # %if.end
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	72(%rsp), %rcx          # 8-byte Reload
	addq	$48, %rcx
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	48(%rdx), %rsi
	movl	$7846, 84(%rsp)         # imm = 0x1EA6
	cmpq	$0, %rsi
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movl	%eax, 68(%rsp)          # 4-byte Spill
	je	.LBB45_11
# %bb.2:                                # %if.end3
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$7850, 84(%rsp)         # imm = 0x1EAA
	movq	72(%rsp), %rsi          # 8-byte Reload
	cmpq	%rsi, %rdx
	movl	%eax, 68(%rsp)          # 4-byte Spill
	jne	.LBB45_11
# %bb.3:                                # %if.end7
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	3152(%rax), %rcx
	movl	$7854, 84(%rsp)         # imm = 0x1EAE
	cmpq	$0, %rcx
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	je	.LBB45_5
# %bb.4:                                # %if.then9
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	64(%rax), %rcx
	movl	$7856, 84(%rsp)         # imm = 0x1EB0
	movq	72(%rax), %rdi
	movl	$7861, 84(%rsp)         # imm = 0x1EB5
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	%rdx, %rsi
	callq	*%rcx
.LBB45_5:                               # %if.end11
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	3160(%rax), %rcx
	movl	$7865, 84(%rsp)         # imm = 0x1EB9
	cmpq	$0, %rcx
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	je	.LBB45_7
# %bb.6:                                # %if.then13
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	64(%rax), %rcx
	movl	$7867, 84(%rsp)         # imm = 0x1EBB
	movq	72(%rax), %rdi
	movl	$7872, 84(%rsp)         # imm = 0x1EC0
	movq	32(%rsp), %rdx          # 8-byte Reload
	movq	%rdx, %rsi
	callq	*%rcx
.LBB45_7:                               # %if.end17
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	3168(%rax), %rcx
	movl	$7878, 84(%rsp)         # imm = 0x1EC6
	movq	72(%rsp), %rdx          # 8-byte Reload
	addq	$64, %rdx
	cmpq	$0, %rcx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%rdx, 16(%rsp)          # 8-byte Spill
	jne	.LBB45_9
# %bb.8:                                # %if.end17.if.end23_crit_edge
	movq	72(%rsp), %rax          # 8-byte Reload
	addq	$72, %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	jmp	.LBB45_10
.LBB45_9:                               # %if.then19
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rcx
	movl	$7880, 84(%rsp)         # imm = 0x1EC8
	movq	72(%rsp), %rdx          # 8-byte Reload
	addq	$72, %rdx
	movq	72(%rsp), %rsi          # 8-byte Reload
	movq	72(%rsi), %rdi
	movl	$7884, 84(%rsp)         # imm = 0x1ECC
	movq	24(%rsp), %rsi          # 8-byte Reload
	movq	%rdx, (%rsp)            # 8-byte Spill
	callq	*%rcx
	movq	(%rsp), %rax            # 8-byte Reload
	movq	%rax, 8(%rsp)           # 8-byte Spill
.LBB45_10:                              # %if.end23
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$7885, 84(%rsp)         # imm = 0x1ECD
	movq	(%rax), %rdi
	movl	$7886, 84(%rsp)         # imm = 0x1ECE
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rsi
	movl	$7888, 84(%rsp)         # imm = 0x1ED0
	callq	*%rdx
	xorl	%r8d, %r8d
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	$0, (%rax)
	movl	$7900, 84(%rsp)         # imm = 0x1EDC
	movl	%r8d, 68(%rsp)          # 4-byte Spill
.LBB45_11:                              # %cleanup
	movl	68(%rsp), %eax          # 4-byte Reload
	addq	$88, %rsp
	retq
.Lfunc_end45:
	.size	BZ2_bzDecompressEnd, .Lfunc_end45-BZ2_bzDecompressEnd
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen         # -- Begin function BZ2_bzWriteOpen
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen,@function
BZ2_bzWriteOpen:                        # @BZ2_bzWriteOpen
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$72, %rsp
	.cfi_def_cfa_offset 80
	movl	$9999, 68(%rsp)         # imm = 0x270F
	cmpq	$0, %rdi
	setne	%al
	testb	$1, %al
	movl	%ecx, 64(%rsp)          # 4-byte Spill
	movl	%edx, 60(%rsp)          # 4-byte Spill
	movl	%esi, 56(%rsp)          # 4-byte Spill
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movl	%r8d, 44(%rsp)          # 4-byte Spill
	movb	%al, 43(%rsp)           # 1-byte Spill
	jne	.LBB46_1
	jmp	.LBB46_2
.LBB46_1:                               # %if.then
	movq	48(%rsp), %rax          # 8-byte Reload
	movl	$0, (%rax)
	movl	$7912, 68(%rsp)         # imm = 0x1EE8
.LBB46_2:                               # %if.end3
	movl	56(%rsp), %eax          # 4-byte Reload
	cmpl	$0, %eax
	sete	%cl
	movl	60(%rsp), %edx          # 4-byte Reload
	addl	$-1, %edx
	cmpl	$8, %edx
	seta	%sil
	orb	%sil, %cl
	movl	44(%rsp), %edx          # 4-byte Reload
	cmpl	$250, %edx
	seta	%sil
	orb	%cl, %sil
	movl	64(%rsp), %edi          # 4-byte Reload
	cmpl	$4, %edi
	seta	%cl
	orb	%sil, %cl
	testb	$1, %cl
	jne	.LBB46_3
	jmp	.LBB46_5
.LBB46_3:                               # %if.then16
	xorl	%eax, %eax
	movl	%eax, %ecx
	movb	43(%rsp), %dl           # 1-byte Reload
	testb	$1, %dl
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	jne	.LBB46_4
	jmp	.LBB46_15
.LBB46_4:                               # %if.then18
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	48(%rsp), %rdx          # 8-byte Reload
	movl	$-2, (%rdx)
	movl	$7920, 68(%rsp)         # imm = 0x1EF0
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	jmp	.LBB46_15
.LBB46_5:                               # %if.end24
	movl	$5104, %eax             # imm = 0x13F0
	movl	%eax, %edi
	callq	malloc
	cmpq	$0, %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	jne	.LBB46_8
# %bb.6:                                # %if.then26
	xorl	%eax, %eax
	movl	%eax, %ecx
	movb	43(%rsp), %dl           # 1-byte Reload
	testb	$1, %dl
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	jne	.LBB46_7
	jmp	.LBB46_15
.LBB46_7:                               # %if.then28
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	48(%rsp), %rdx          # 8-byte Reload
	movl	$-3, (%rdx)
	movl	$7923, 68(%rsp)         # imm = 0x1EF3
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	jmp	.LBB46_15
.LBB46_8:                               # %if.end34
	movb	43(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	jne	.LBB46_9
	jmp	.LBB46_10
.LBB46_9:                               # %if.then36
	movq	48(%rsp), %rax          # 8-byte Reload
	movl	$0, (%rax)
	movl	$7927, 68(%rsp)         # imm = 0x1EF7
.LBB46_10:                              # %if.then39
	xorl	%esi, %esi
	movl	$24, %eax
	movl	%eax, %edx
	movl	$30, %eax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	$0, 5096(%rcx)
	movl	$7929, 68(%rsp)         # imm = 0x1EF9
	addq	$5100, %rcx             # imm = 0x13EC
	movq	24(%rsp), %rdi          # 8-byte Reload
	movb	$0, 5100(%rdi)
	movl	$7932, 68(%rsp)         # imm = 0x1EFC
	movl	$0, 5004(%rdi)
	movl	$7934, 68(%rsp)         # imm = 0x1EFE
	movl	56(%rsp), %r8d          # 4-byte Reload
	movl	%r8d, (%rdi)
	movl	$7936, 68(%rsp)         # imm = 0x1F00
	movb	$1, 5008(%rdi)
	movl	$7947, 68(%rsp)         # imm = 0x1F0B
	addq	$5016, %rdi             # imm = 0x1398
	movq	24(%rsp), %r9           # 8-byte Reload
	addq	$5072, %r9              # imm = 0x13D0
	movl	44(%rsp), %r10d         # 4-byte Reload
	cmpl	$0, %r10d
	cmovel	%eax, %r10d
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movq	%r9, %rdi
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	movl	%r10d, 4(%rsp)          # 4-byte Spill
	callq	memset
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	60(%rsp), %esi          # 4-byte Reload
	movl	64(%rsp), %edx          # 4-byte Reload
	movl	4(%rsp), %ecx           # 4-byte Reload
	callq	BZ2_bzCompressInit
	cmpl	$0, %eax
	movl	%eax, (%rsp)            # 4-byte Spill
	je	.LBB46_14
# %bb.11:                               # %if.then50
	movb	43(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	jne	.LBB46_12
	jmp	.LBB46_13
.LBB46_12:                              # %if.then52
	movq	48(%rsp), %rax          # 8-byte Reload
	movl	(%rsp), %ecx            # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$7953, 68(%rsp)         # imm = 0x1F11
.LBB46_13:                              # %if.then55
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	free
	xorl	%eax, %eax
	movl	%eax, %edi
	movq	%rdi, 32(%rsp)          # 8-byte Spill
	jmp	.LBB46_15
.LBB46_14:                              # %if.end58
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	$0, 5024(%rax)
	movl	$7954, 68(%rsp)         # imm = 0x1F12
	movq	8(%rsp), %rcx           # 8-byte Reload
	movb	$1, (%rcx)
	movl	$7965, 68(%rsp)         # imm = 0x1F1D
	movq	%rax, 32(%rsp)          # 8-byte Spill
.LBB46_15:                              # %cleanup
	movq	32(%rsp), %rax          # 8-byte Reload
	addq	$72, %rsp
	retq
.Lfunc_end46:
	.size	BZ2_bzWriteOpen, .Lfunc_end46-BZ2_bzWriteOpen
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite             # -- Begin function BZ2_bzWrite
	.p2align	4, 0x90
	.type	BZ2_bzWrite,@function
BZ2_bzWrite:                            # @BZ2_bzWrite
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	subq	$184, %rsp
	.cfi_def_cfa_offset 208
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	movl	$9999, 180(%rsp)        # imm = 0x270F
	cmpq	$0, %rdi
	setne	%al
	testb	$1, %al
	movq	%rdx, 168(%rsp)         # 8-byte Spill
	movq	%rsi, 160(%rsp)         # 8-byte Spill
	movq	%rdi, 152(%rsp)         # 8-byte Spill
	movl	%ecx, 148(%rsp)         # 4-byte Spill
	movb	%al, 147(%rsp)          # 1-byte Spill
	jne	.LBB47_1
	jmp	.LBB47_2
.LBB47_1:                               # %if.then
	movq	152(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$7971, 180(%rsp)        # imm = 0x1F23
.LBB47_2:                               # %if.end
	movq	160(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	setne	%cl
	testb	$1, %cl
	movb	%cl, 146(%rsp)          # 1-byte Spill
	jne	.LBB47_3
	jmp	.LBB47_4
.LBB47_3:                               # %if.end3
	movq	160(%rsp), %rax         # 8-byte Reload
	addq	$5096, %rax             # imm = 0x13E8
	movq	160(%rsp), %rcx         # 8-byte Reload
	movl	$0, 5096(%rcx)
	movl	$7977, 180(%rsp)        # imm = 0x1F29
	movq	168(%rsp), %rdx         # 8-byte Reload
	cmpq	$0, %rdx
	sete	%sil
	movl	148(%rsp), %edi         # 4-byte Reload
	cmpl	$0, %edi
	setl	%r8b
	orb	%r8b, %sil
	testb	$1, %sil
	movq	%rax, 136(%rsp)         # 8-byte Spill
	jne	.LBB47_4
	jmp	.LBB47_8
.LBB47_4:                               # %if.then8
	movb	147(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB47_5
	jmp	.LBB47_6
.LBB47_5:                               # %if.then10
	movq	152(%rsp), %rax         # 8-byte Reload
	movl	$-2, (%rax)
	movl	$7982, 180(%rsp)        # imm = 0x1F2E
.LBB47_6:                               # %if.end11
	movb	146(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB47_7
	jmp	.LBB47_35
.LBB47_7:                               # %if.then13
	movq	160(%rsp), %rax         # 8-byte Reload
	movl	$-2, 5096(%rax)
	movl	$7985, 180(%rsp)        # imm = 0x1F31
	jmp	.LBB47_35
.LBB47_8:                               # %if.end16
	movq	160(%rsp), %rax         # 8-byte Reload
	movb	5008(%rax), %cl
	movl	$7989, 180(%rsp)        # imm = 0x1F35
	cmpb	$0, %cl
	jne	.LBB47_12
# %bb.9:                                # %if.then17
	movb	147(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB47_10
	jmp	.LBB47_11
.LBB47_10:                              # %if.then19
	movq	152(%rsp), %rax         # 8-byte Reload
	movl	$-1, (%rax)
	movl	$7991, 180(%rsp)        # imm = 0x1F37
.LBB47_11:                              # %if.then22
	movq	136(%rsp), %rax         # 8-byte Reload
	movl	$-1, (%rax)
	movl	$7996, 180(%rsp)        # imm = 0x1F3C
	jmp	.LBB47_35
.LBB47_12:                              # %if.end25
	movl	148(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB47_16
# %bb.13:                               # %if.then27
	movb	147(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB47_14
	jmp	.LBB47_15
.LBB47_14:                              # %if.then29
	movq	152(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$7998, 180(%rsp)        # imm = 0x1F3E
.LBB47_15:                              # %if.then32
	movq	136(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8004, 180(%rsp)        # imm = 0x1F44
	jmp	.LBB47_35
.LBB47_16:                              # %if.end35
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	160(%rsp), %rcx         # 8-byte Reload
	addq	$5016, %rcx             # imm = 0x1398
	movq	160(%rsp), %rdx         # 8-byte Reload
	addq	$5024, %rdx             # imm = 0x13A0
	movq	160(%rsp), %rsi         # 8-byte Reload
	movl	148(%rsp), %edi         # 4-byte Reload
	movl	%edi, 5024(%rsi)
	movl	$8006, 180(%rsp)        # imm = 0x1F46
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	%r8, 5016(%rsi)
	movl	$8009, 180(%rsp)        # imm = 0x1F49
	addq	$5048, %rsi             # imm = 0x13B8
	movq	160(%rsp), %r9          # 8-byte Reload
	movl	$5000, 5048(%r9)        # imm = 0x1388
	movl	$8013, 180(%rsp)        # imm = 0x1F4D
	addq	$4, %r9
	movq	160(%rsp), %r10         # 8-byte Reload
	addq	$5040, %r10             # imm = 0x13B0
	movq	160(%rsp), %r11         # 8-byte Reload
	movq	%r9, 5040(%r11)
	movl	$8016, 180(%rsp)        # imm = 0x1F50
	addq	$5064, %r11             # imm = 0x13C8
	movq	160(%rsp), %rbx         # 8-byte Reload
	movq	5064(%rbx), %r14
	movl	$8021, 180(%rsp)        # imm = 0x1F55
	cmpq	$0, %r14
	movq	%r14, 128(%rsp)         # 8-byte Spill
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movq	%rsi, 104(%rsp)         # 8-byte Spill
	movq	%r9, 96(%rsp)           # 8-byte Spill
	movq	%r10, 88(%rsp)          # 8-byte Spill
	movq	%r11, 80(%rsp)          # 8-byte Spill
	movl	%eax, 76(%rsp)          # 4-byte Spill
	je	.LBB47_23
# %bb.17:                               # %if.end3.i.lr.ph
	movq	160(%rsp), %rax         # 8-byte Reload
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	jmp	.LBB47_19
.LBB47_18:                              # %while.cond
                                        #   in Loop: Header=BB47_19 Depth=1
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	104(%rsp), %rcx         # 8-byte Reload
	movl	$5000, (%rcx)           # imm = 0x1388
	movl	$8022, 180(%rsp)        # imm = 0x1F56
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	%rsi, (%rdx)
	movl	$8023, 180(%rsp)        # imm = 0x1F57
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	(%rdi), %r8
	movl	$8028, 180(%rsp)        # imm = 0x1F5C
	cmpq	$0, %r8
	movq	%r8, 56(%rsp)           # 8-byte Spill
	movl	%eax, 52(%rsp)          # 4-byte Spill
	je	.LBB47_22
.LBB47_19:                              # %if.end3.i
                                        # =>This Inner Loop Header: Depth=1
	movq	56(%rsp), %rax          # 8-byte Reload
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	movq	(%rax), %rdx
	movl	$8032, 180(%rsp)        # imm = 0x1F60
	movq	120(%rsp), %rsi         # 8-byte Reload
	cmpq	%rsi, %rdx
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movl	%ecx, 52(%rsp)          # 4-byte Spill
	jne	.LBB47_22
# %bb.20:                               # %if.end7.i
                                        #   in Loop: Header=BB47_19 Depth=1
	movq	40(%rsp), %rax          # 8-byte Reload
	movl	8(%rax), %ecx
	movl	$8041, 180(%rsp)        # imm = 0x1F69
	movl	$-1, %edx
	xorl	%esi, %esi
	movl	%ecx, %edi
	subl	$1, %edi
	movl	%edx, %r8d
	movl	%ecx, 36(%rsp)          # 4-byte Spill
	movl	%edx, 32(%rsp)          # 4-byte Spill
	movl	%esi, 28(%rsp)          # 4-byte Spill
	movl	%edi, 24(%rsp)          # 4-byte Spill
	movl	%r8d, 76(%rsp)          # 4-byte Spill
	je	.LBB47_23
	jmp	.LBB47_36
.LBB47_36:                              # %if.end7.i
                                        #   in Loop: Header=BB47_19 Depth=1
	movl	36(%rsp), %eax          # 4-byte Reload
	subl	$2, %eax
	movl	%eax, 20(%rsp)          # 4-byte Spill
	je	.LBB47_21
	jmp	.LBB47_37
.LBB47_37:                              # %if.end7.i
	movl	36(%rsp), %eax          # 4-byte Reload
	addl	$-3, %eax
	subl	$2, %eax
	movl	28(%rsp), %ecx          # 4-byte Reload
	movl	32(%rsp), %edx          # 4-byte Reload
	movl	%eax, 16(%rsp)          # 4-byte Spill
	movl	%ecx, 52(%rsp)          # 4-byte Spill
	movl	%edx, 76(%rsp)          # 4-byte Spill
	jb	.LBB47_23
	jmp	.LBB47_22
.LBB47_21:                              # %if.then10.i
                                        #   in Loop: Header=BB47_19 Depth=1
	movq	120(%rsp), %rdi         # 8-byte Reload
	callq	handle_compress
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmpb	$0, %al
	movl	%ecx, 52(%rsp)          # 4-byte Spill
	jne	.LBB47_26
.LBB47_22:                              # %if.then42.loopexit
	movl	52(%rsp), %eax          # 4-byte Reload
	movl	%eax, 76(%rsp)          # 4-byte Spill
.LBB47_23:                              # %if.then42
	movl	76(%rsp), %eax          # 4-byte Reload
	movb	147(%rsp), %cl          # 1-byte Reload
	testb	$1, %cl
	movl	%eax, 12(%rsp)          # 4-byte Spill
	jne	.LBB47_24
	jmp	.LBB47_25
.LBB47_24:                              # %if.then44
	movq	152(%rsp), %rax         # 8-byte Reload
	movl	12(%rsp), %ecx          # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$8043, 180(%rsp)        # imm = 0x1F6B
.LBB47_25:                              # %if.then47
	movq	136(%rsp), %rax         # 8-byte Reload
	movl	12(%rsp), %ecx          # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$8045, 180(%rsp)        # imm = 0x1F6D
	jmp	.LBB47_35
.LBB47_26:                              # %if.end50
                                        #   in Loop: Header=BB47_19 Depth=1
	movq	104(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$8049, 180(%rsp)        # imm = 0x1F71
	cmpl	$5000, %ecx             # imm = 0x1388
	movl	%ecx, 8(%rsp)           # 4-byte Spill
	jae	.LBB47_31
# %bb.27:                               # %if.then54
                                        #   in Loop: Header=BB47_19 Depth=1
	movl	$1, %esi
	movl	$5000, %eax             # imm = 0x1388
	movl	8(%rsp), %ecx           # 4-byte Reload
	subl	%ecx, %eax
	movq	64(%rsp), %rdx          # 8-byte Reload
	movl	(%rdx), %ecx
	movl	$8054, 180(%rsp)        # imm = 0x1F76
	movq	96(%rsp), %rdi          # 8-byte Reload
	movl	%eax, %edx
	movl	%eax, 4(%rsp)           # 4-byte Spill
	callq	spec_fwrite
	movl	4(%rsp), %ecx           # 4-byte Reload
	cmpl	%eax, %ecx
	je	.LBB47_31
# %bb.28:                               # %if.then61
	movb	147(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB47_29
	jmp	.LBB47_30
.LBB47_29:                              # %if.then63
	movq	152(%rsp), %rax         # 8-byte Reload
	movl	$-6, (%rax)
	movl	$8057, 180(%rsp)        # imm = 0x1F79
.LBB47_30:                              # %if.then66
	movq	136(%rsp), %rax         # 8-byte Reload
	movl	$-6, (%rax)
	movl	$8059, 180(%rsp)        # imm = 0x1F7B
	jmp	.LBB47_35
.LBB47_31:                              # %if.end70
                                        #   in Loop: Header=BB47_19 Depth=1
	movq	112(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$8063, 180(%rsp)        # imm = 0x1F7F
	cmpl	$0, %ecx
	jne	.LBB47_18
# %bb.32:                               # %if.then74
	movb	147(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB47_33
	jmp	.LBB47_34
.LBB47_33:                              # %if.then76
	movq	152(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8065, 180(%rsp)        # imm = 0x1F81
.LBB47_34:                              # %if.then79
	movq	136(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8090, 180(%rsp)        # imm = 0x1F9A
.LBB47_35:                              # %cleanup
	addq	$184, %rsp
	popq	%rbx
	popq	%r14
	retq
.Lfunc_end47:
	.size	BZ2_bzWrite, .Lfunc_end47-BZ2_bzWrite
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose        # -- Begin function BZ2_bzWriteClose
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose,@function
BZ2_bzWriteClose:                       # @BZ2_bzWriteClose
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$24, %rsp
	.cfi_def_cfa_offset 32
	movl	$9999, 20(%rsp)         # imm = 0x270F
	movq	%rsp, %rax
	movq	$0, (%rax)
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movq	%r8, 8(%rsp)            # 8-byte Spill
	movq	%rax, %r8
	movq	8(%rsp), %r9            # 8-byte Reload
	callq	BZ2_bzWriteClose64
	addq	$24, %rsp
	retq
.Lfunc_end48:
	.size	BZ2_bzWriteClose, .Lfunc_end48-BZ2_bzWriteClose
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64      # -- Begin function BZ2_bzWriteClose64
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64,@function
BZ2_bzWriteClose64:                     # @BZ2_bzWriteClose64
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$296, %rsp              # imm = 0x128
	.cfi_def_cfa_offset 304
	movq	304(%rsp), %rax
	movl	$9999, 292(%rsp)        # imm = 0x270F
	cmpq	$0, %rsi
	movq	%rax, 280(%rsp)         # 8-byte Spill
	movq	%r9, 272(%rsp)          # 8-byte Spill
	movq	%r8, 264(%rsp)          # 8-byte Spill
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	movl	%edx, 252(%rsp)         # 4-byte Spill
	movq	%rsi, 240(%rsp)         # 8-byte Spill
	movq	%rdi, 232(%rsp)         # 8-byte Spill
	jne	.LBB49_3
# %bb.1:                                # %if.then
	movq	232(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	je	.LBB49_62
# %bb.2:                                # %if.then2
	movq	232(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8093, 292(%rsp)        # imm = 0x1F9D
	jmp	.LBB49_62
.LBB49_3:                               # %if.end6
	movq	240(%rsp), %rax         # 8-byte Reload
	movb	5008(%rax), %cl
	movl	$8098, 292(%rsp)        # imm = 0x1FA2
	cmpb	$0, %cl
	jne	.LBB49_7
# %bb.4:                                # %if.then7
	movq	232(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	je	.LBB49_6
# %bb.5:                                # %if.then9
	movq	232(%rsp), %rax         # 8-byte Reload
	movl	$-1, (%rax)
	movl	$8102, 292(%rsp)        # imm = 0x1FA6
.LBB49_6:                               # %if.then12
	movq	240(%rsp), %rax         # 8-byte Reload
	movl	$-1, 5096(%rax)
	movl	$8106, 292(%rsp)        # imm = 0x1FAA
	jmp	.LBB49_62
.LBB49_7:                               # %if.end15
	movq	256(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	setne	%cl
	testb	$1, %cl
	movb	%cl, 231(%rsp)          # 1-byte Spill
	jne	.LBB49_8
	jmp	.LBB49_9
.LBB49_8:                               # %if.then17
	movq	256(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8110, 292(%rsp)        # imm = 0x1FAE
.LBB49_9:                               # %if.end18
	movq	264(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	setne	%cl
	testb	$1, %cl
	movb	%cl, 230(%rsp)          # 1-byte Spill
	jne	.LBB49_10
	jmp	.LBB49_11
.LBB49_10:                              # %if.then20
	movq	264(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8114, 292(%rsp)        # imm = 0x1FB2
.LBB49_11:                              # %if.end21
	movq	272(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	setne	%cl
	testb	$1, %cl
	movb	%cl, 229(%rsp)          # 1-byte Spill
	jne	.LBB49_12
	jmp	.LBB49_13
.LBB49_12:                              # %if.then23
	movq	272(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8118, 292(%rsp)        # imm = 0x1FB6
.LBB49_13:                              # %if.end24
	movq	280(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	setne	%cl
	testb	$1, %cl
	movb	%cl, 228(%rsp)          # 1-byte Spill
	jne	.LBB49_14
	jmp	.LBB49_15
.LBB49_14:                              # %if.then26
	movq	280(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8124, 292(%rsp)        # imm = 0x1FBC
.LBB49_15:                              # %if.end27
	movl	252(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB49_41
# %bb.16:                               # %land.lhs.true
	movq	240(%rsp), %rax         # 8-byte Reload
	addq	$5096, %rax             # imm = 0x13E8
	movq	240(%rsp), %rcx         # 8-byte Reload
	movl	5096(%rcx), %edx
	movl	$8131, 292(%rsp)        # imm = 0x1FC3
	cmpl	$0, %edx
	movq	%rax, 216(%rsp)         # 8-byte Spill
	jne	.LBB49_41
# %bb.17:                               # %if.then31
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	240(%rsp), %rcx         # 8-byte Reload
	addq	$5016, %rcx             # imm = 0x1398
	movq	240(%rsp), %rdx         # 8-byte Reload
	addq	$5048, %rdx             # imm = 0x13B8
	movq	240(%rsp), %rsi         # 8-byte Reload
	movl	$5000, 5048(%rsi)       # imm = 0x1388
	movl	$8135, 292(%rsp)        # imm = 0x1FC7
	addq	$4, %rsi
	movq	240(%rsp), %rdi         # 8-byte Reload
	addq	$5040, %rdi             # imm = 0x13B0
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	%rsi, 5040(%r8)
	movl	$8138, 292(%rsp)        # imm = 0x1FCA
	addq	$5064, %r8              # imm = 0x13C8
	movq	240(%rsp), %r9          # 8-byte Reload
	movq	5064(%r9), %r10
	movl	$8145, 292(%rsp)        # imm = 0x1FD1
	cmpq	$0, %r10
	movq	%r10, 208(%rsp)         # 8-byte Spill
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movq	%rdx, 192(%rsp)         # 8-byte Spill
	movq	%rsi, 184(%rsp)         # 8-byte Spill
	movq	%rdi, 176(%rsp)         # 8-byte Spill
	movq	%r8, 168(%rsp)          # 8-byte Spill
	movl	%eax, 164(%rsp)         # 4-byte Spill
	je	.LBB49_32
# %bb.18:                               # %if.end3.i.lr.ph
	movq	240(%rsp), %rax         # 8-byte Reload
	addq	$5024, %rax             # imm = 0x13A0
	movq	240(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	movq	%rdx, 136(%rsp)         # 8-byte Spill
	jmp	.LBB49_20
.LBB49_19:                              # %while.cond
                                        #   in Loop: Header=BB49_20 Depth=1
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movq	192(%rsp), %rcx         # 8-byte Reload
	movl	$5000, (%rcx)           # imm = 0x1388
	movl	$8146, 292(%rsp)        # imm = 0x1FD2
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, (%rdx)
	movl	$8147, 292(%rsp)        # imm = 0x1FD3
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	(%rdi), %r8
	movl	$8152, 292(%rsp)        # imm = 0x1FD8
	cmpq	$0, %r8
	movq	%r8, 136(%rsp)          # 8-byte Spill
	movl	%eax, 164(%rsp)         # 4-byte Spill
	je	.LBB49_32
.LBB49_20:                              # %if.end3.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_22 Depth 2
	movq	136(%rsp), %rax         # 8-byte Reload
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	movq	(%rax), %rdx
	movl	$8157, 292(%rsp)        # imm = 0x1FDD
	movq	200(%rsp), %rsi         # 8-byte Reload
	cmpq	%rsi, %rdx
	movq	%rax, 128(%rsp)         # 8-byte Spill
	movl	%ecx, 164(%rsp)         # 4-byte Spill
	jne	.LBB49_32
# %bb.21:                               # %if.end7.i
                                        #   in Loop: Header=BB49_20 Depth=1
	movq	128(%rsp), %rax         # 8-byte Reload
	addq	$8, %rax
	movq	128(%rsp), %rcx         # 8-byte Reload
	addq	$16, %rcx
	movq	128(%rsp), %rdx         # 8-byte Reload
	movl	8(%rdx), %esi
	movl	$8161, 292(%rsp)        # imm = 0x1FE1
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	movl	%esi, 108(%rsp)         # 4-byte Spill
.LBB49_22:                              # %preswitch.us131.i
                                        #   Parent Loop BB49_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	108(%rsp), %eax         # 4-byte Reload
	movl	$-1, %ecx
	addl	$-1, %eax
	movl	%eax, %edx
	subl	$3, %eax
	movl	%ecx, 104(%rsp)         # 4-byte Spill
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	movl	%eax, 92(%rsp)          # 4-byte Spill
	ja	.LBB49_31
# %bb.63:                               # %preswitch.us131.i
                                        #   in Loop: Header=BB49_22 Depth=2
	movq	96(%rsp), %rax          # 8-byte Reload
	movq	.LJTI49_0(,%rax,8), %rcx
	movl	104(%rsp), %edx         # 4-byte Reload
	movl	%edx, 164(%rsp)         # 4-byte Spill
	jmpq	*%rcx
.LBB49_23:                              # %if.then18.us133.i
                                        #   in Loop: Header=BB49_22 Depth=2
	movl	$4, %eax
	movq	152(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$8162, 292(%rsp)        # imm = 0x1FE2
	movq	112(%rsp), %rsi         # 8-byte Reload
	movl	%edx, (%rsi)
	movl	$8163, 292(%rsp)        # imm = 0x1FE3
	movq	120(%rsp), %rdi         # 8-byte Reload
	movl	$4, (%rdi)
	movl	$8165, 292(%rsp)        # imm = 0x1FE5
	movl	%eax, 108(%rsp)         # 4-byte Spill
	jmp	.LBB49_22
.LBB49_24:                              # %sw.bb47.i
                                        #   in Loop: Header=BB49_20 Depth=1
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movq	112(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$8166, 292(%rsp)        # imm = 0x1FE6
	movq	152(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %edi
	movl	$8172, 292(%rsp)        # imm = 0x1FEC
	cmpl	%edi, %edx
	movl	%eax, 164(%rsp)         # 4-byte Spill
	jne	.LBB49_32
# %bb.25:                               # %if.end58.i
                                        #   in Loop: Header=BB49_20 Depth=1
	movq	200(%rsp), %rdi         # 8-byte Reload
	callq	handle_compress
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmpb	$0, %al
	movl	%ecx, 164(%rsp)         # 4-byte Spill
	je	.LBB49_32
# %bb.26:                               # %if.end62.i
                                        #   in Loop: Header=BB49_20 Depth=1
	movl	$3, %eax
	movq	112(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$8176, 292(%rsp)        # imm = 0x1FF0
	cmpl	$0, %edx
	movl	%eax, 88(%rsp)          # 4-byte Spill
	jne	.LBB49_35
# %bb.27:                               # %lor.lhs.false66.i
                                        #   in Loop: Header=BB49_20 Depth=1
	movq	128(%rsp), %rax         # 8-byte Reload
	movl	92(%rax), %ecx
	movl	$8180, 292(%rsp)        # imm = 0x1FF4
	cmpl	$256, %ecx              # imm = 0x100
	jae	.LBB49_29
# %bb.28:                               # %land.lhs.true.i115.i
                                        #   in Loop: Header=BB49_20 Depth=1
	movl	$3, %eax
	movq	128(%rsp), %rcx         # 8-byte Reload
	movl	96(%rcx), %edx
	movl	$8184, 292(%rsp)        # imm = 0x1FF8
	cmpl	$0, %edx
	movl	%eax, 88(%rsp)          # 4-byte Spill
	jg	.LBB49_35
.LBB49_29:                              # %lor.lhs.false69.i
                                        #   in Loop: Header=BB49_20 Depth=1
	movl	$3, %eax
	movq	128(%rsp), %rcx         # 8-byte Reload
	movl	120(%rcx), %edx
	movl	$8186, 292(%rsp)        # imm = 0x1FFA
	movl	116(%rcx), %esi
	movl	$8189, 292(%rsp)        # imm = 0x1FFD
	cmpl	%esi, %edx
	movl	%eax, 88(%rsp)          # 4-byte Spill
	jl	.LBB49_35
# %bb.30:                               # %if.end75.i
                                        #   in Loop: Header=BB49_20 Depth=1
	movl	$4, %eax
	movq	120(%rsp), %rcx         # 8-byte Reload
	movl	$1, (%rcx)
	movl	$8195, 292(%rsp)        # imm = 0x2003
	movl	%eax, 88(%rsp)          # 4-byte Spill
	jmp	.LBB49_35
.LBB49_31:                              # %if.then37.loopexit
	xorl	%eax, %eax
	movl	%eax, 164(%rsp)         # 4-byte Spill
	jmp	.LBB49_32
.LBB49_32:                              # %if.then37
	movl	164(%rsp), %eax         # 4-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	cmpq	$0, %rcx
	movl	%eax, 84(%rsp)          # 4-byte Spill
	je	.LBB49_34
# %bb.33:                               # %if.then39
	movq	232(%rsp), %rax         # 8-byte Reload
	movl	84(%rsp), %ecx          # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$8197, 292(%rsp)        # imm = 0x2005
.LBB49_34:                              # %if.then42
	movq	216(%rsp), %rax         # 8-byte Reload
	movl	84(%rsp), %ecx          # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$8200, 292(%rsp)        # imm = 0x2008
	jmp	.LBB49_62
.LBB49_35:                              # %if.end45
                                        #   in Loop: Header=BB49_20 Depth=1
	movl	88(%rsp), %eax          # 4-byte Reload
	movq	192(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$8204, 292(%rsp)        # imm = 0x200C
	cmpl	$5000, %edx             # imm = 0x1388
	movl	%eax, 80(%rsp)          # 4-byte Spill
	movl	%edx, 76(%rsp)          # 4-byte Spill
	jae	.LBB49_40
# %bb.36:                               # %if.then49
                                        #   in Loop: Header=BB49_20 Depth=1
	movl	$1, %esi
	movl	$5000, %eax             # imm = 0x1388
	movl	76(%rsp), %ecx          # 4-byte Reload
	subl	%ecx, %eax
	movq	144(%rsp), %rdx         # 8-byte Reload
	movl	(%rdx), %ecx
	movl	$8210, 292(%rsp)        # imm = 0x2012
	movq	184(%rsp), %rdi         # 8-byte Reload
	movl	%eax, %edx
	movl	%eax, 72(%rsp)          # 4-byte Spill
	callq	spec_fwrite
	movl	72(%rsp), %ecx          # 4-byte Reload
	cmpl	%eax, %ecx
	je	.LBB49_40
# %bb.37:                               # %if.then56
	movq	232(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	je	.LBB49_39
# %bb.38:                               # %if.then58
	movq	232(%rsp), %rax         # 8-byte Reload
	movl	$-6, (%rax)
	movl	$8212, 292(%rsp)        # imm = 0x2014
.LBB49_39:                              # %if.then61
	movq	216(%rsp), %rax         # 8-byte Reload
	movl	$-6, (%rax)
	movl	$8219, 292(%rsp)        # imm = 0x201B
	jmp	.LBB49_62
.LBB49_40:                              # %if.end65
                                        #   in Loop: Header=BB49_20 Depth=1
	movl	80(%rsp), %eax          # 4-byte Reload
	cmpl	$4, %eax
	jne	.LBB49_19
.LBB49_41:                              # %if.end69
	movb	231(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB49_42
	jmp	.LBB49_43
.LBB49_42:                              # %if.then74
	movq	240(%rsp), %rax         # 8-byte Reload
	movl	5028(%rax), %ecx
	movl	$8220, 292(%rsp)        # imm = 0x201C
	movq	256(%rsp), %rdx         # 8-byte Reload
	movl	%ecx, (%rdx)
	movl	$8225, 292(%rsp)        # imm = 0x2021
.LBB49_43:                              # %if.end76
	movb	230(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB49_44
	jmp	.LBB49_45
.LBB49_44:                              # %if.then78
	movq	240(%rsp), %rax         # 8-byte Reload
	movl	5032(%rax), %ecx
	movl	$8226, 292(%rsp)        # imm = 0x2022
	movq	264(%rsp), %rdx         # 8-byte Reload
	movl	%ecx, (%rdx)
	movl	$8231, 292(%rsp)        # imm = 0x2027
.LBB49_45:                              # %if.end80
	movb	229(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB49_46
	jmp	.LBB49_47
.LBB49_46:                              # %if.then82
	movq	240(%rsp), %rax         # 8-byte Reload
	movl	5052(%rax), %ecx
	movl	$8232, 292(%rsp)        # imm = 0x2028
	movq	272(%rsp), %rdx         # 8-byte Reload
	movl	%ecx, (%rdx)
	movl	$8237, 292(%rsp)        # imm = 0x202D
.LBB49_47:                              # %if.end84
	movb	228(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB49_48
	jmp	.LBB49_49
.LBB49_48:                              # %if.then86
	movq	240(%rsp), %rax         # 8-byte Reload
	movl	5056(%rax), %ecx
	movl	$8238, 292(%rsp)        # imm = 0x202E
	movq	280(%rsp), %rdx         # 8-byte Reload
	movl	%ecx, (%rdx)
	movl	$8242, 292(%rsp)        # imm = 0x2032
.LBB49_49:                              # %if.end88
	movq	232(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	je	.LBB49_51
# %bb.50:                               # %if.then90
	movq	232(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8246, 292(%rsp)        # imm = 0x2036
.LBB49_51:                              # %if.then93
	movq	240(%rsp), %rax         # 8-byte Reload
	movl	$0, 5096(%rax)
	movl	$8250, 292(%rsp)        # imm = 0x203A
	addq	$5064, %rax             # imm = 0x13C8
	movq	240(%rsp), %rcx         # 8-byte Reload
	movq	5064(%rcx), %rdx
	movl	$8256, 292(%rsp)        # imm = 0x2040
	cmpq	$0, %rdx
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	je	.LBB49_61
# %bb.52:                               # %if.end3.i162
	movq	240(%rsp), %rax         # 8-byte Reload
	addq	$5016, %rax             # imm = 0x1398
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$8260, 292(%rsp)        # imm = 0x2044
	cmpq	%rax, %rdx
	jne	.LBB49_61
# %bb.53:                               # %if.end7.i163
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	24(%rax), %rcx
	movl	$8265, 292(%rsp)        # imm = 0x2049
	cmpq	$0, %rcx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	je	.LBB49_55
# %bb.54:                               # %if.then9.i
	movq	240(%rsp), %rax         # 8-byte Reload
	movq	5080(%rax), %rcx
	movl	$8268, 292(%rsp)        # imm = 0x204C
	movq	5088(%rax), %rdi
	movl	$8273, 292(%rsp)        # imm = 0x2051
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	%rdx, %rsi
	callq	*%rcx
.LBB49_55:                              # %if.end11.i
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	32(%rax), %rcx
	movl	$8278, 292(%rsp)        # imm = 0x2056
	movq	240(%rsp), %rdx         # 8-byte Reload
	addq	$5080, %rdx             # imm = 0x13D8
	cmpq	$0, %rcx
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	je	.LBB49_57
# %bb.56:                               # %if.then13.i
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8281, 292(%rsp)        # imm = 0x2059
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	5088(%rdx), %rdi
	movl	$8286, 292(%rsp)        # imm = 0x205E
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB49_57:                              # %if.end17.i
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	40(%rax), %rcx
	movl	$8292, 292(%rsp)        # imm = 0x2064
	cmpq	$0, %rcx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	jne	.LBB49_59
# %bb.58:                               # %if.end17.if.end23_crit_edge.i
	movq	240(%rsp), %rax         # 8-byte Reload
	addq	$5088, %rax             # imm = 0x13E0
	movq	%rax, 16(%rsp)          # 8-byte Spill
	jmp	.LBB49_60
.LBB49_59:                              # %if.then19.i
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8295, 292(%rsp)        # imm = 0x2067
	movq	240(%rsp), %rdx         # 8-byte Reload
	addq	$5088, %rdx             # imm = 0x13E0
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	5088(%rsi), %rdi
	movl	$8300, 292(%rsp)        # imm = 0x206C
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	%r8, %rsi
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	callq	*%rcx
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, 16(%rsp)          # 8-byte Spill
.LBB49_60:                              # %if.end23.i
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$8301, 292(%rsp)        # imm = 0x206D
	movq	(%rax), %rdi
	movl	$8302, 292(%rsp)        # imm = 0x206E
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rsi
	movl	$8317, 292(%rsp)        # imm = 0x207D
	callq	*%rdx
.LBB49_61:                              # %BZ2_bzCompressEnd.exit
	movq	240(%rsp), %rdi         # 8-byte Reload
	callq	free
.LBB49_62:                              # %cleanup
	addq	$296, %rsp              # imm = 0x128
	retq
.Lfunc_end49:
	.size	BZ2_bzWriteClose64, .Lfunc_end49-BZ2_bzWriteClose64
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI49_0:
	.quad	.LBB49_32
	.quad	.LBB49_23
	.quad	.LBB49_32
	.quad	.LBB49_24
                                        # -- End function
	.text
	.globl	BZ2_bzReadOpen          # -- Begin function BZ2_bzReadOpen
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen,@function
BZ2_bzReadOpen:                         # @BZ2_bzReadOpen
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbx
	.cfi_def_cfa_offset 16
	subq	$160, %rsp
	.cfi_def_cfa_offset 176
	.cfi_offset %rbx, -16
	movl	$9999, 156(%rsp)        # imm = 0x270F
	cmpq	$0, %rdi
	setne	%al
	testb	$1, %al
	movq	%r8, 144(%rsp)          # 8-byte Spill
	movl	%ecx, 140(%rsp)         # 4-byte Spill
	movl	%edx, 136(%rsp)         # 4-byte Spill
	movl	%esi, 132(%rsp)         # 4-byte Spill
	movq	%rdi, 120(%rsp)         # 8-byte Spill
	movl	%r9d, 116(%rsp)         # 4-byte Spill
	movb	%al, 115(%rsp)          # 1-byte Spill
	jne	.LBB50_1
	jmp	.LBB50_2
.LBB50_1:                               # %if.then
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8334, 156(%rsp)        # imm = 0x208E
.LBB50_2:                               # %if.end3
	movl	132(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB50_6
# %bb.3:                                # %lor.lhs.false
	movl	140(%rsp), %eax         # 4-byte Reload
	cmpl	$1, %eax
	seta	%cl
	movl	136(%rsp), %edx         # 4-byte Reload
	cmpl	$4, %edx
	seta	%sil
	orb	%cl, %sil
	testb	$1, %sil
	jne	.LBB50_6
# %bb.4:                                # %lor.lhs.false11
	movq	144(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	sete	%cl
	movl	116(%rsp), %edx         # 4-byte Reload
	cmpl	$0, %edx
	setne	%sil
	andb	%sil, %cl
	testb	$1, %cl
	jne	.LBB50_6
# %bb.5:                                # %lor.lhs.false15
	movq	144(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	setne	%cl
	movl	116(%rsp), %edx         # 4-byte Reload
	cmpl	$5000, %edx             # imm = 0x1388
	seta	%sil
	andb	%sil, %cl
	testb	$1, %cl
	jne	.LBB50_6
	jmp	.LBB50_8
.LBB50_6:                               # %if.then21
	xorl	%eax, %eax
	movl	%eax, %ecx
	movb	115(%rsp), %dl          # 1-byte Reload
	testb	$1, %dl
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	jne	.LBB50_7
	jmp	.LBB50_25
.LBB50_7:                               # %if.then23
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	120(%rsp), %rdx         # 8-byte Reload
	movl	$-2, (%rdx)
	movl	$8341, 156(%rsp)        # imm = 0x2095
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	jmp	.LBB50_25
.LBB50_8:                               # %if.end29
	movl	$5104, %eax             # imm = 0x13F0
	movl	%eax, %edi
	callq	malloc
	cmpq	$0, %rax
	movq	%rax, 96(%rsp)          # 8-byte Spill
	jne	.LBB50_11
# %bb.9:                                # %if.then31
	xorl	%eax, %eax
	movl	%eax, %ecx
	movb	115(%rsp), %dl          # 1-byte Reload
	testb	$1, %dl
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	jne	.LBB50_10
	jmp	.LBB50_25
.LBB50_10:                              # %if.then33
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	120(%rsp), %rdx         # 8-byte Reload
	movl	$-3, (%rdx)
	movl	$8344, 156(%rsp)        # imm = 0x2098
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	jmp	.LBB50_25
.LBB50_11:                              # %if.end39
	movb	115(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB50_12
	jmp	.LBB50_13
.LBB50_12:                              # %if.then41
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8348, 156(%rsp)        # imm = 0x209C
.LBB50_13:                              # %if.then44
	xorl	%esi, %esi
	movl	$24, %eax
	movl	%eax, %edx
	movq	96(%rsp), %rcx          # 8-byte Reload
	movl	$0, 5096(%rcx)
	movl	$8350, 156(%rsp)        # imm = 0x209E
	addq	$5100, %rcx             # imm = 0x13EC
	movq	96(%rsp), %rdi          # 8-byte Reload
	movb	$0, 5100(%rdi)
	movl	$8352, 156(%rsp)        # imm = 0x20A0
	movl	132(%rsp), %eax         # 4-byte Reload
	movl	%eax, (%rdi)
	movl	$8355, 156(%rsp)        # imm = 0x20A3
	addq	$5004, %rdi             # imm = 0x138C
	movq	96(%rsp), %r8           # 8-byte Reload
	movl	$0, 5004(%r8)
	movl	$8357, 156(%rsp)        # imm = 0x20A5
	movb	$0, 5008(%r8)
	movl	$8376, 156(%rsp)        # imm = 0x20B8
	addq	$5016, %r8              # imm = 0x1398
	movq	96(%rsp), %r9           # 8-byte Reload
	addq	$5072, %r9              # imm = 0x13D0
	movq	%r9, %r10
	movq	96(%rsp), %r11          # 8-byte Reload
	addq	$5080, %r11             # imm = 0x13D8
	movq	96(%rsp), %rbx          # 8-byte Reload
	addq	$5088, %rbx             # imm = 0x13E0
	movq	%rdi, 88(%rsp)          # 8-byte Spill
	movq	%r9, %rdi
	movq	%r10, 80(%rsp)          # 8-byte Spill
	movq	%rbx, 72(%rsp)          # 8-byte Spill
	movq	%rcx, 64(%rsp)          # 8-byte Spill
	movq	%r11, 56(%rsp)          # 8-byte Spill
	movq	%r8, 48(%rsp)           # 8-byte Spill
	callq	memset
	movl	116(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB50_17
# %bb.14:                               # %while.body.lr.ph
	xorl	%eax, %eax
	movq	96(%rsp), %rcx          # 8-byte Reload
	addq	$4, %rcx
	movl	116(%rsp), %edx         # 4-byte Reload
	movq	144(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movl	%eax, 36(%rsp)          # 4-byte Spill
	movl	%edx, 32(%rsp)          # 4-byte Spill
	movq	%rsi, 24(%rsp)          # 8-byte Spill
.LBB50_15:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	32(%rsp), %ecx          # 4-byte Reload
	movl	36(%rsp), %edx          # 4-byte Reload
	movb	(%rax), %sil
	movl	$8379, 156(%rsp)        # imm = 0x20BB
	movslq	%edx, %rdi
	movq	40(%rsp), %r8           # 8-byte Reload
	movb	%sil, (%r8,%rdi)
	movl	$8380, 156(%rsp)        # imm = 0x20BC
	movq	88(%rsp), %rdi          # 8-byte Reload
	movl	(%rdi), %edx
	movl	$8381, 156(%rsp)        # imm = 0x20BD
	addl	$1, %edx
	movl	%edx, (%rdi)
	movl	$8384, 156(%rsp)        # imm = 0x20C0
	addq	$1, %rax
	movl	%ecx, %r9d
	addl	$-1, %r9d
	cmpl	$1, %ecx
	movl	%r9d, 32(%rsp)          # 4-byte Spill
	movl	%edx, 36(%rsp)          # 4-byte Spill
	movq	%rax, 24(%rsp)          # 8-byte Spill
	jg	.LBB50_15
# %bb.16:                               # %if.end10.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8387, 156(%rsp)        # imm = 0x20C3
	cmpq	$0, %rcx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	jne	.LBB50_18
.LBB50_17:                              # %if.then12.i
	movabsq	$default_bzalloc, %rax
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	movl	$8390, 156(%rsp)        # imm = 0x20C6
	movq	%rax, 16(%rsp)          # 8-byte Spill
.LBB50_18:                              # %if.end14.i
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$8393, 156(%rsp)        # imm = 0x20C9
	cmpq	$0, %rdx
	movq	%rax, 8(%rsp)           # 8-byte Spill
	jne	.LBB50_20
# %bb.19:                               # %if.then16.i
	movabsq	$default_bzfree, %rax
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	movl	$8395, 156(%rsp)        # imm = 0x20CB
.LBB50_20:                              # %if.end18.i
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rdi
	movl	$8400, 156(%rsp)        # imm = 0x20D0
	movq	8(%rsp), %rcx           # 8-byte Reload
	callq	*%rcx
	cmpq	$0, %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	jne	.LBB50_24
# %bb.21:                               # %if.then55
	movb	115(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB50_22
	jmp	.LBB50_23
.LBB50_22:                              # %if.then57
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	$-3, (%rax)
	movl	$8405, 156(%rsp)        # imm = 0x20D5
.LBB50_23:                              # %if.then60
	movq	96(%rsp), %rdi          # 8-byte Reload
	callq	free
	xorl	%eax, %eax
	movl	%eax, %edi
	movq	%rdi, 104(%rsp)         # 8-byte Spill
	jmp	.LBB50_25
.LBB50_24:                              # %if.end63
	xorl	%esi, %esi
	movl	$24, %eax
	movl	%eax, %edx
	movq	(%rsp), %rcx            # 8-byte Reload
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	%rdi, (%rcx)
	movl	$8408, 156(%rsp)        # imm = 0x20D8
	movq	96(%rsp), %r8           # 8-byte Reload
	movq	%rcx, 5064(%r8)
	movl	$8411, 156(%rsp)        # imm = 0x20DB
	movl	$10, 8(%rcx)
	movl	$8414, 156(%rsp)        # imm = 0x20DE
	movl	$0, 36(%rcx)
	movl	$8417, 156(%rsp)        # imm = 0x20E1
	movl	$0, 32(%rcx)
	movl	$8420, 156(%rsp)        # imm = 0x20E4
	movl	$0, 3188(%rcx)
	movl	$8423, 156(%rsp)        # imm = 0x20E7
	movl	$0, 5028(%r8)
	movl	$8426, 156(%rsp)        # imm = 0x20EA
	movl	$0, 5032(%r8)
	movl	$8429, 156(%rsp)        # imm = 0x20ED
	movl	$0, 5052(%r8)
	movl	$8432, 156(%rsp)        # imm = 0x20F0
	movl	$0, 5056(%r8)
	movl	$8435, 156(%rsp)        # imm = 0x20F3
	movl	140(%rsp), %eax         # 4-byte Reload
	movb	%al, %r9b
	movb	%r9b, 44(%rcx)
	movl	$8439, 156(%rsp)        # imm = 0x20F7
	addq	$3152, %rcx             # imm = 0xC50
	movq	(%rsp), %r10            # 8-byte Reload
	movl	$0, 48(%r10)
	movl	$8443, 156(%rsp)        # imm = 0x20FB
	movq	%rcx, %rdi
	callq	memset
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	136(%rsp), %eax         # 4-byte Reload
	movl	%eax, 52(%rcx)
	movl	$8444, 156(%rsp)        # imm = 0x20FC
	movq	88(%rsp), %rdx          # 8-byte Reload
	movl	(%rdx), %esi
	movl	$8447, 156(%rsp)        # imm = 0x20FF
	movq	96(%rsp), %rdi          # 8-byte Reload
	movl	%esi, 5024(%rdi)
	movl	$8450, 156(%rsp)        # imm = 0x2102
	addq	$4, %rdi
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	%rdi, (%r8)
	movl	$8451, 156(%rsp)        # imm = 0x2103
	movq	64(%rsp), %rdi          # 8-byte Reload
	movb	$1, (%rdi)
	movl	$8460, 156(%rsp)        # imm = 0x210C
	movq	96(%rsp), %r10          # 8-byte Reload
	movq	%r10, 104(%rsp)         # 8-byte Spill
.LBB50_25:                              # %cleanup
	movq	104(%rsp), %rax         # 8-byte Reload
	addq	$160, %rsp
	popq	%rbx
	retq
.Lfunc_end50:
	.size	BZ2_bzReadOpen, .Lfunc_end50-BZ2_bzReadOpen
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadClose         # -- Begin function BZ2_bzReadClose
	.p2align	4, 0x90
	.type	BZ2_bzReadClose,@function
BZ2_bzReadClose:                        # @BZ2_bzReadClose
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$104, %rsp
	.cfi_def_cfa_offset 112
	movl	$9999, 100(%rsp)        # imm = 0x270F
	cmpq	$0, %rdi
	setne	%al
	testb	$1, %al
	movq	%rdi, 88(%rsp)          # 8-byte Spill
	movq	%rsi, 80(%rsp)          # 8-byte Spill
	movb	%al, 79(%rsp)           # 1-byte Spill
	jne	.LBB51_1
	jmp	.LBB51_2
.LBB51_1:                               # %if.then
	movq	88(%rsp), %rax          # 8-byte Reload
	movl	$0, (%rax)
	movl	$8465, 100(%rsp)        # imm = 0x2111
.LBB51_2:                               # %if.end
	movq	80(%rsp), %rax          # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB51_5
# %bb.3:                                # %if.then5
	movb	79(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	jne	.LBB51_4
	jmp	.LBB51_21
.LBB51_4:                               # %if.then7
	movq	88(%rsp), %rax          # 8-byte Reload
	movl	$0, (%rax)
	movl	$8469, 100(%rsp)        # imm = 0x2115
	jmp	.LBB51_21
.LBB51_5:                               # %if.end13
	movq	80(%rsp), %rax          # 8-byte Reload
	addq	$5096, %rax             # imm = 0x13E8
	movq	80(%rsp), %rcx          # 8-byte Reload
	movl	$0, 5096(%rcx)
	movl	$8471, 100(%rsp)        # imm = 0x2117
	movb	5008(%rcx), %dl
	movl	$8475, 100(%rsp)        # imm = 0x211B
	cmpb	$0, %dl
	movq	%rax, 64(%rsp)          # 8-byte Spill
	je	.LBB51_9
# %bb.6:                                # %if.then14
	movb	79(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	jne	.LBB51_7
	jmp	.LBB51_8
.LBB51_7:                               # %if.then16
	movq	88(%rsp), %rax          # 8-byte Reload
	movl	$-1, (%rax)
	movl	$8477, 100(%rsp)        # imm = 0x211D
.LBB51_8:                               # %if.then19
	movq	64(%rsp), %rax          # 8-byte Reload
	movl	$-1, (%rax)
	movl	$8480, 100(%rsp)        # imm = 0x2120
	jmp	.LBB51_21
.LBB51_9:                               # %if.end22
	movq	80(%rsp), %rax          # 8-byte Reload
	movb	5100(%rax), %cl
	movl	$8486, 100(%rsp)        # imm = 0x2126
	cmpb	$0, %cl
	je	.LBB51_20
# %bb.10:                               # %if.then24
	movq	80(%rsp), %rax          # 8-byte Reload
	addq	$5064, %rax             # imm = 0x13C8
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	5064(%rcx), %rdx
	movl	$8492, 100(%rsp)        # imm = 0x212C
	cmpq	$0, %rdx
	movq	%rax, 56(%rsp)          # 8-byte Spill
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	je	.LBB51_20
# %bb.11:                               # %if.end3.i
	movq	80(%rsp), %rax          # 8-byte Reload
	addq	$5016, %rax             # imm = 0x1398
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$8496, 100(%rsp)        # imm = 0x2130
	cmpq	%rax, %rdx
	jne	.LBB51_20
# %bb.12:                               # %if.end7.i
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	3152(%rax), %rcx
	movl	$8501, 100(%rsp)        # imm = 0x2135
	cmpq	$0, %rcx
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	je	.LBB51_14
# %bb.13:                               # %if.then9.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	5080(%rax), %rcx
	movl	$8504, 100(%rsp)        # imm = 0x2138
	movq	5088(%rax), %rdi
	movl	$8509, 100(%rsp)        # imm = 0x213D
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	%rdx, %rsi
	callq	*%rcx
.LBB51_14:                              # %if.end11.i
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	3160(%rax), %rcx
	movl	$8514, 100(%rsp)        # imm = 0x2142
	movq	80(%rsp), %rdx          # 8-byte Reload
	addq	$5080, %rdx             # imm = 0x13D8
	cmpq	$0, %rcx
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	je	.LBB51_16
# %bb.15:                               # %if.then13.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8517, 100(%rsp)        # imm = 0x2145
	movq	80(%rsp), %rdx          # 8-byte Reload
	movq	5088(%rdx), %rdi
	movl	$8522, 100(%rsp)        # imm = 0x214A
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB51_16:                              # %if.end17.i
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	3168(%rax), %rcx
	movl	$8528, 100(%rsp)        # imm = 0x2150
	cmpq	$0, %rcx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	jne	.LBB51_18
# %bb.17:                               # %if.end17.if.end23_crit_edge.i
	movq	80(%rsp), %rax          # 8-byte Reload
	addq	$5088, %rax             # imm = 0x13E0
	movq	%rax, 8(%rsp)           # 8-byte Spill
	jmp	.LBB51_19
.LBB51_18:                              # %if.then19.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8531, 100(%rsp)        # imm = 0x2153
	movq	80(%rsp), %rdx          # 8-byte Reload
	addq	$5088, %rdx             # imm = 0x13E0
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	5088(%rsi), %rdi
	movl	$8535, 100(%rsp)        # imm = 0x2157
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	%rdx, (%rsp)            # 8-byte Spill
	callq	*%rcx
	movq	(%rsp), %rax            # 8-byte Reload
	movq	%rax, 8(%rsp)           # 8-byte Spill
.LBB51_19:                              # %if.end23.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$8536, 100(%rsp)        # imm = 0x2158
	movq	(%rax), %rdi
	movl	$8537, 100(%rsp)        # imm = 0x2159
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rsi
	movl	$8550, 100(%rsp)        # imm = 0x2166
	callq	*%rdx
.LBB51_20:                              # %if.end25
	movq	80(%rsp), %rdi          # 8-byte Reload
	callq	free
.LBB51_21:                              # %cleanup
	addq	$104, %rsp
	retq
.Lfunc_end51:
	.size	BZ2_bzReadClose, .Lfunc_end51-BZ2_bzReadClose
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead              # -- Begin function BZ2_bzRead
	.p2align	4, 0x90
	.type	BZ2_bzRead,@function
BZ2_bzRead:                             # @BZ2_bzRead
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$152, %rsp
	.cfi_def_cfa_offset 160
	movl	$9999, 148(%rsp)        # imm = 0x270F
	cmpq	$0, %rdi
	setne	%al
	testb	$1, %al
	movq	%rdx, 136(%rsp)         # 8-byte Spill
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	movq	%rdi, 120(%rsp)         # 8-byte Spill
	movl	%ecx, 116(%rsp)         # 4-byte Spill
	movb	%al, 115(%rsp)          # 1-byte Spill
	jne	.LBB52_1
	jmp	.LBB52_2
.LBB52_1:                               # %if.then
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8556, 148(%rsp)        # imm = 0x216C
.LBB52_2:                               # %if.end
	movq	128(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	setne	%cl
	testb	$1, %cl
	movb	%cl, 114(%rsp)          # 1-byte Spill
	jne	.LBB52_3
	jmp	.LBB52_4
.LBB52_3:                               # %if.end3
	movq	128(%rsp), %rax         # 8-byte Reload
	addq	$5096, %rax             # imm = 0x13E8
	movq	128(%rsp), %rcx         # 8-byte Reload
	movl	$0, 5096(%rcx)
	movl	$8562, 148(%rsp)        # imm = 0x2172
	movq	136(%rsp), %rdx         # 8-byte Reload
	cmpq	$0, %rdx
	sete	%sil
	movl	116(%rsp), %edi         # 4-byte Reload
	cmpl	$0, %edi
	setl	%r8b
	orb	%r8b, %sil
	testb	$1, %sil
	movq	%rax, 104(%rsp)         # 8-byte Spill
	jne	.LBB52_4
	jmp	.LBB52_8
.LBB52_4:                               # %if.then8
	movb	115(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB52_5
	jmp	.LBB52_6
.LBB52_5:                               # %if.then10
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	$-2, (%rax)
	movl	$8567, 148(%rsp)        # imm = 0x2177
.LBB52_6:                               # %if.end11
	xorl	%eax, %eax
	movb	114(%rsp), %cl          # 1-byte Reload
	testb	$1, %cl
	movl	%eax, 100(%rsp)         # 4-byte Spill
	jne	.LBB52_7
	jmp	.LBB52_39
.LBB52_7:                               # %if.then13
	xorl	%eax, %eax
	movq	128(%rsp), %rcx         # 8-byte Reload
	movl	$-2, 5096(%rcx)
	movl	$8570, 148(%rsp)        # imm = 0x217A
	movl	%eax, 100(%rsp)         # 4-byte Spill
	jmp	.LBB52_39
.LBB52_8:                               # %if.end16
	movq	128(%rsp), %rax         # 8-byte Reload
	movb	5008(%rax), %cl
	movl	$8574, 148(%rsp)        # imm = 0x217E
	cmpb	$0, %cl
	je	.LBB52_12
# %bb.9:                                # %if.then17
	movb	115(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB52_10
	jmp	.LBB52_11
.LBB52_10:                              # %if.then19
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	$-1, (%rax)
	movl	$8576, 148(%rsp)        # imm = 0x2180
.LBB52_11:                              # %if.then22
	xorl	%eax, %eax
	movq	104(%rsp), %rcx         # 8-byte Reload
	movl	$-1, (%rcx)
	movl	$8581, 148(%rsp)        # imm = 0x2185
	movl	%eax, 100(%rsp)         # 4-byte Spill
	jmp	.LBB52_39
.LBB52_12:                              # %if.end25
	movl	116(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB52_16
# %bb.13:                               # %if.then27
	movb	115(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB52_14
	jmp	.LBB52_15
.LBB52_14:                              # %if.then29
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8583, 148(%rsp)        # imm = 0x2187
.LBB52_15:                              # %if.then32
	xorl	%eax, %eax
	movq	104(%rsp), %rcx         # 8-byte Reload
	movl	$0, (%rcx)
	movl	$8589, 148(%rsp)        # imm = 0x218D
	movl	%eax, 100(%rsp)         # 4-byte Spill
	jmp	.LBB52_39
.LBB52_16:                              # %if.end35
	movq	128(%rsp), %rax         # 8-byte Reload
	addq	$5016, %rax             # imm = 0x1398
	movq	%rax, %rcx
	movq	128(%rsp), %rdx         # 8-byte Reload
	addq	$5048, %rdx             # imm = 0x13B8
	movq	128(%rsp), %rsi         # 8-byte Reload
	movl	116(%rsp), %edi         # 4-byte Reload
	movl	%edi, 5048(%rsi)
	movl	$8592, 148(%rsp)        # imm = 0x2190
	movq	136(%rsp), %r8          # 8-byte Reload
	movq	%r8, 5040(%rsi)
	movl	$8601, 148(%rsp)        # imm = 0x2199
	addq	$5024, %rsi             # imm = 0x13A0
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	addq	$4, %r10
	movq	128(%rsp), %r11         # 8-byte Reload
	addq	$5004, %r11             # imm = 0x138C
	movq	%r11, 88(%rsp)          # 8-byte Spill
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movq	%rdx, 72(%rsp)          # 8-byte Spill
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movq	%r9, 56(%rsp)           # 8-byte Spill
	movq	%r10, 48(%rsp)          # 8-byte Spill
	movq	%rax, 40(%rsp)          # 8-byte Spill
.LBB52_17:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	64(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %ecx
	movl	$8604, 148(%rsp)        # imm = 0x219C
	cmpl	$0, %ecx
	jne	.LBB52_20
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB52_17 Depth=1
	movq	56(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %ecx
	movl	$8610, 148(%rsp)        # imm = 0x21A2
	movl	%ecx, %edi
	movl	%ecx, 36(%rsp)          # 4-byte Spill
	callq	spec_getc
	cmpl	$-1, %eax
	movl	%eax, 32(%rsp)          # 4-byte Spill
	je	.LBB52_20
# %bb.19:                               # %if.then40
                                        #   in Loop: Header=BB52_17 Depth=1
	movl	32(%rsp), %eax          # 4-byte Reload
	movb	%al, %cl
	movzbl	%cl, %edi
	movl	36(%rsp), %esi          # 4-byte Reload
	callq	spec_ungetc
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	movq	56(%rsp), %r8           # 8-byte Reload
	movl	(%r8), %ecx
	movl	$8612, 148(%rsp)        # imm = 0x21A4
	movq	48(%rsp), %rdi          # 8-byte Reload
	movl	%eax, 28(%rsp)          # 4-byte Spill
	callq	spec_fread
	movq	88(%rsp), %rdi          # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$8613, 148(%rsp)        # imm = 0x21A5
	movq	64(%rsp), %r8           # 8-byte Reload
	movl	%eax, (%r8)
	movl	$8614, 148(%rsp)        # imm = 0x21A6
	movq	40(%rsp), %r9           # 8-byte Reload
	movq	48(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%r9)
	movl	$8621, 148(%rsp)        # imm = 0x21AD
.LBB52_20:                              # %if.end50
                                        #   in Loop: Header=BB52_17 Depth=1
	movq	80(%rsp), %rdi          # 8-byte Reload
	callq	BZ2_bzDecompress
	movl	%eax, %ecx
	orl	$4, %ecx
	cmpl	$4, %ecx
	movl	%eax, 24(%rsp)          # 4-byte Spill
	je	.LBB52_24
# %bb.21:                               # %if.then56
	movb	115(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB52_22
	jmp	.LBB52_23
.LBB52_22:                              # %if.then58
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	24(%rsp), %ecx          # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$8623, 148(%rsp)        # imm = 0x21AF
.LBB52_23:                              # %if.then61
	xorl	%eax, %eax
	movq	104(%rsp), %rcx         # 8-byte Reload
	movl	24(%rsp), %edx          # 4-byte Reload
	movl	%edx, (%rcx)
	movl	$8626, 148(%rsp)        # imm = 0x21B2
	movl	%eax, 100(%rsp)         # 4-byte Spill
	jmp	.LBB52_39
.LBB52_24:                              # %if.end64
                                        #   in Loop: Header=BB52_17 Depth=1
	movl	24(%rsp), %eax          # 4-byte Reload
	testl	%eax, %eax
	je	.LBB52_25
	jmp	.LBB52_40
.LBB52_40:                              # %if.end64
                                        #   in Loop: Header=BB52_17 Depth=1
	movl	24(%rsp), %eax          # 4-byte Reload
	subl	$4, %eax
	movl	%eax, 20(%rsp)          # 4-byte Spill
	je	.LBB52_32
	jmp	.LBB52_35
.LBB52_25:                              # %land.lhs.true66
                                        #   in Loop: Header=BB52_17 Depth=1
	movq	56(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %ecx
	movl	$8633, 148(%rsp)        # imm = 0x21B9
	movl	%ecx, %edi
	movl	%ecx, 16(%rsp)          # 4-byte Spill
	callq	spec_getc
	cmpl	$-1, %eax
	movl	%eax, 12(%rsp)          # 4-byte Spill
	je	.LBB52_27
# %bb.26:                               # %myfeof.exit193.thread
                                        #   in Loop: Header=BB52_17 Depth=1
	movl	12(%rsp), %eax          # 4-byte Reload
	movb	%al, %cl
	movzbl	%cl, %edi
	movl	16(%rsp), %esi          # 4-byte Reload
	callq	spec_ungetc
	movl	%eax, 8(%rsp)           # 4-byte Spill
	jmp	.LBB52_35
.LBB52_27:                              # %land.lhs.true70
                                        #   in Loop: Header=BB52_17 Depth=1
	movq	64(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %ecx
	movl	$8636, 148(%rsp)        # imm = 0x21BC
	cmpl	$0, %ecx
	jne	.LBB52_35
# %bb.28:                               # %land.lhs.true75
	movq	72(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %ecx
	movl	$8640, 148(%rsp)        # imm = 0x21C0
	cmpl	$0, %ecx
	je	.LBB52_36
# %bb.29:                               # %if.then80
	movb	115(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB52_30
	jmp	.LBB52_31
.LBB52_30:                              # %if.then83
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	$-7, (%rax)
	movl	$8642, 148(%rsp)        # imm = 0x21C2
.LBB52_31:                              # %if.then87
	xorl	%eax, %eax
	movq	104(%rsp), %rcx         # 8-byte Reload
	movl	$-7, (%rcx)
	movl	$8645, 148(%rsp)        # imm = 0x21C5
	movl	%eax, 100(%rsp)         # 4-byte Spill
	jmp	.LBB52_39
.LBB52_32:                              # %if.then93
	movb	115(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB52_33
	jmp	.LBB52_34
.LBB52_33:                              # %if.then96
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	$4, (%rax)
	movl	$8647, 148(%rsp)        # imm = 0x21C7
.LBB52_34:                              # %if.end102
	movq	104(%rsp), %rax         # 8-byte Reload
	movl	$4, (%rax)
	movl	$8648, 148(%rsp)        # imm = 0x21C8
	movq	72(%rsp), %rcx          # 8-byte Reload
	movl	(%rcx), %edx
	movl	$8651, 148(%rsp)        # imm = 0x21CB
	movl	116(%rsp), %esi         # 4-byte Reload
	subl	%edx, %esi
	movl	%esi, 100(%rsp)         # 4-byte Spill
	jmp	.LBB52_39
.LBB52_35:                              # %if.end105
                                        #   in Loop: Header=BB52_17 Depth=1
	movq	72(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %ecx
	movl	$8655, 148(%rsp)        # imm = 0x21CF
	cmpl	$0, %ecx
	jne	.LBB52_17
.LBB52_36:                              # %if.then110
	movb	115(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB52_37
	jmp	.LBB52_38
.LBB52_37:                              # %if.then113
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8657, 148(%rsp)        # imm = 0x21D1
.LBB52_38:                              # %if.then117
	movq	104(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8670, 148(%rsp)        # imm = 0x21DE
	movl	116(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, 100(%rsp)         # 4-byte Spill
.LBB52_39:                              # %cleanup
	movl	100(%rsp), %eax         # 4-byte Reload
	addq	$152, %rsp
	retq
.Lfunc_end52:
	.size	BZ2_bzRead, .Lfunc_end52-BZ2_bzRead
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused     # -- Begin function BZ2_bzReadGetUnused
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused,@function
BZ2_bzReadGetUnused:                    # @BZ2_bzReadGetUnused
	.cfi_startproc
# %bb.0:                                # %entry
	movl	$9999, -4(%rsp)         # imm = 0x270F
	cmpq	$0, %rsi
	movq	%rdx, -16(%rsp)         # 8-byte Spill
	movq	%rsi, -24(%rsp)         # 8-byte Spill
	movq	%rdi, -32(%rsp)         # 8-byte Spill
	movq	%rcx, -40(%rsp)         # 8-byte Spill
	jne	.LBB53_3
# %bb.1:                                # %if.then
	movq	-32(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	je	.LBB53_14
# %bb.2:                                # %if.then2
	movq	-32(%rsp), %rax         # 8-byte Reload
	movl	$-2, (%rax)
	movl	$8674, -4(%rsp)         # imm = 0x21E2
	jmp	.LBB53_14
.LBB53_3:                               # %if.end6
	movq	-24(%rsp), %rax         # 8-byte Reload
	addq	$5096, %rax             # imm = 0x13E8
	movq	-24(%rsp), %rcx         # 8-byte Reload
	movl	5096(%rcx), %edx
	movl	$8679, -4(%rsp)         # imm = 0x21E7
	cmpl	$4, %edx
	movq	%rax, -48(%rsp)         # 8-byte Spill
	je	.LBB53_7
# %bb.4:                                # %if.then9
	movq	-32(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	je	.LBB53_6
# %bb.5:                                # %if.then11
	movq	-32(%rsp), %rax         # 8-byte Reload
	movl	$-1, (%rax)
	movl	$8681, -4(%rsp)         # imm = 0x21E9
.LBB53_6:                               # %if.then14
	movq	-48(%rsp), %rax         # 8-byte Reload
	movl	$-1, (%rax)
	movl	$8689, -4(%rsp)         # imm = 0x21F1
	jmp	.LBB53_14
.LBB53_7:                               # %if.end17
	movq	-16(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	sete	%cl
	movq	-40(%rsp), %rdx         # 8-byte Reload
	cmpq	$0, %rdx
	sete	%sil
	orb	%sil, %cl
	movq	-32(%rsp), %rdi         # 8-byte Reload
	cmpq	$0, %rdi
	setne	%sil
	testb	$1, %cl
	movb	%sil, -49(%rsp)         # 1-byte Spill
	jne	.LBB53_8
	jmp	.LBB53_11
.LBB53_8:                               # %if.then20
	movb	-49(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB53_9
	jmp	.LBB53_10
.LBB53_9:                               # %if.then22
	movq	-32(%rsp), %rax         # 8-byte Reload
	movl	$-2, (%rax)
	movl	$8691, -4(%rsp)         # imm = 0x21F3
.LBB53_10:                              # %if.then25
	movq	-48(%rsp), %rax         # 8-byte Reload
	movl	$-2, (%rax)
	movl	$8694, -4(%rsp)         # imm = 0x21F6
	jmp	.LBB53_14
.LBB53_11:                              # %if.end28
	movb	-49(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB53_12
	jmp	.LBB53_13
.LBB53_12:                              # %if.then30
	movq	-32(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8696, -4(%rsp)         # imm = 0x21F8
.LBB53_13:                              # %if.then33
	movq	-48(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$8700, -4(%rsp)         # imm = 0x21FC
	movq	-24(%rsp), %rcx         # 8-byte Reload
	movl	5024(%rcx), %edx
	movl	$8701, -4(%rsp)         # imm = 0x21FD
	movq	-40(%rsp), %rsi         # 8-byte Reload
	movl	%edx, (%rsi)
	movl	$8703, -4(%rsp)         # imm = 0x21FF
	movq	5016(%rcx), %rdi
	movl	$8705, -4(%rsp)         # imm = 0x2201
	movq	-16(%rsp), %r8          # 8-byte Reload
	movq	%rdi, (%r8)
	movl	$8747, -4(%rsp)         # imm = 0x222B
.LBB53_14:                              # %cleanup
	retq
.Lfunc_end53:
	.size	BZ2_bzReadGetUnused, .Lfunc_end53-BZ2_bzReadGetUnused
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress # -- Begin function BZ2_bzBuffToBuffCompress
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress,@function
BZ2_bzBuffToBuffCompress:               # @BZ2_bzBuffToBuffCompress
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$368, %rsp              # imm = 0x170
	.cfi_def_cfa_offset 400
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %rbp, -16
	movl	400(%rsp), %eax
	movl	$4294967294, %r10d      # imm = 0xFFFFFFFE
	leaq	280(%rsp), %r11
	movl	$9999, 364(%rsp)        # imm = 0x270F
	cmpq	$0, %rdi
	sete	%bl
	cmpq	$0, %rsi
	sete	%bpl
	orb	%bpl, %bl
	cmpq	$0, %rdx
	sete	%bpl
	orb	%bpl, %bl
	movl	%r8d, %r14d
	addl	$-1, %r14d
	cmpl	$8, %r14d
	seta	%bpl
	orb	%bpl, %bl
	cmpl	$4, %r9d
	seta	%bpl
	orb	%bl, %bpl
	cmpl	$250, %eax
	seta	%bl
	orb	%bpl, %bl
	testb	$1, %bl
	movl	%eax, 276(%rsp)         # 4-byte Spill
	movl	%r9d, 272(%rsp)         # 4-byte Spill
	movl	%r8d, 268(%rsp)         # 4-byte Spill
	movl	%ecx, 264(%rsp)         # 4-byte Spill
	movq	%rdx, 256(%rsp)         # 8-byte Spill
	movq	%rsi, 248(%rsp)         # 8-byte Spill
	movq	%rdi, 240(%rsp)         # 8-byte Spill
	movq	%r11, 232(%rsp)         # 8-byte Spill
	movl	%r10d, 228(%rsp)        # 4-byte Spill
	jne	.LBB54_41
# %bb.1:                                # %if.end
	leaq	280(%rsp), %rax
	xorl	%esi, %esi
	movl	$24, %ecx
	movl	%ecx, %edx
	movl	$30, %ecx
	movl	276(%rsp), %edi         # 4-byte Reload
	cmpl	$0, %edi
	cmovel	%ecx, %edi
	movq	%rax, %r8
	addq	$56, %r8
	movq	%rax, %r9
	addq	$64, %r9
	movq	%rax, %r10
	addq	$72, %r10
	movl	%edi, 224(%rsp)         # 4-byte Spill
	movq	%r8, %rdi
	movq	%rax, 216(%rsp)         # 8-byte Spill
	movq	%r10, 208(%rsp)         # 8-byte Spill
	movq	%r9, 200(%rsp)          # 8-byte Spill
	callq	memset
	movq	216(%rsp), %rdi         # 8-byte Reload
	movl	268(%rsp), %esi         # 4-byte Reload
	movl	272(%rsp), %edx         # 4-byte Reload
	movl	224(%rsp), %ecx         # 4-byte Reload
	callq	BZ2_bzCompressInit
	cmpl	$0, %eax
	movl	%eax, 228(%rsp)         # 4-byte Spill
	jne	.LBB54_41
# %bb.2:                                # %if.end21
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	leaq	280(%rsp), %rcx
	movq	256(%rsp), %rdx         # 8-byte Reload
	movq	%rdx, 280(%rsp)
	movl	$8749, 364(%rsp)        # imm = 0x222D
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 304(%rsp)
	movl	$8751, 364(%rsp)        # imm = 0x222F
	movl	264(%rsp), %edi         # 4-byte Reload
	movl	%edi, 288(%rsp)
	movl	$8752, 364(%rsp)        # imm = 0x2230
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	(%r8), %r9d
	movl	$8754, 364(%rsp)        # imm = 0x2232
	movq	%rcx, %r10
	addq	$32, %r10
	movl	%r9d, 312(%rsp)
	movl	$8757, 364(%rsp)        # imm = 0x2235
	addq	$48, %rcx
	movq	%rcx, %r11
	movq	328(%rsp), %rbx
	movl	$8761, 364(%rsp)        # imm = 0x2239
	cmpq	$0, %rbx
	movq	%rbx, 192(%rsp)         # 8-byte Spill
	movq	%r10, 184(%rsp)         # 8-byte Spill
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movq	%r11, 168(%rsp)         # 8-byte Spill
	movl	%eax, 228(%rsp)         # 4-byte Spill
	je	.LBB54_41
# %bb.3:                                # %if.end3.i
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	leaq	280(%rsp), %rcx
	movq	192(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$8766, 364(%rsp)        # imm = 0x223E
	cmpq	%rcx, %rsi
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	movl	%eax, 156(%rsp)         # 4-byte Spill
	jne	.LBB54_33
# %bb.4:                                # %if.end7.i
	movq	192(%rsp), %rax         # 8-byte Reload
	addq	$8, %rax
	movq	192(%rsp), %rcx         # 8-byte Reload
	addq	$16, %rcx
	movq	192(%rsp), %rdx         # 8-byte Reload
	movl	8(%rdx), %esi
	movl	$8770, 364(%rsp)        # imm = 0x2242
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movq	%rcx, 136(%rsp)         # 8-byte Spill
	movl	%esi, 132(%rsp)         # 4-byte Spill
.LBB54_5:                               # %preswitch.us131.i
                                        # =>This Inner Loop Header: Depth=1
	movl	132(%rsp), %eax         # 4-byte Reload
	movl	$-1, %ecx
	addl	$-1, %eax
	movl	%eax, %edx
	subl	$3, %eax
	movl	%ecx, 128(%rsp)         # 4-byte Spill
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movl	%eax, 116(%rsp)         # 4-byte Spill
	ja	.LBB54_32
# %bb.42:                               # %preswitch.us131.i
                                        #   in Loop: Header=BB54_5 Depth=1
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	.LJTI54_0(,%rax,8), %rcx
	movl	128(%rsp), %edx         # 4-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 160(%rsp)         # 8-byte Spill
	movl	%edx, 156(%rsp)         # 4-byte Spill
	jmpq	*%rcx
.LBB54_6:                               # %if.then18.us133.i
                                        #   in Loop: Header=BB54_5 Depth=1
	movl	$4, %eax
	movq	136(%rsp), %rcx         # 8-byte Reload
	movl	264(%rsp), %edx         # 4-byte Reload
	movl	%edx, (%rcx)
	movl	$8771, 364(%rsp)        # imm = 0x2243
	movq	144(%rsp), %rsi         # 8-byte Reload
	movl	$4, (%rsi)
	movl	$8773, 364(%rsp)        # imm = 0x2245
	movl	%eax, 132(%rsp)         # 4-byte Spill
	jmp	.LBB54_5
.LBB54_7:                               # %sw.bb47.i
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movq	136(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$8779, 364(%rsp)        # imm = 0x224B
	movl	264(%rsp), %esi         # 4-byte Reload
	cmpl	%esi, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movl	%eax, 156(%rsp)         # 4-byte Spill
	movq	%rdi, 160(%rsp)         # 8-byte Spill
	jne	.LBB54_33
# %bb.8:                                # %if.end58.i
	leaq	280(%rsp), %rdi
	callq	handle_compress
	cmpb	$0, %al
	je	.LBB54_31
# %bb.9:                                # %if.end62.i
	movq	136(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$8783, 364(%rsp)        # imm = 0x224F
	cmpl	$0, %ecx
	jne	.LBB54_22
# %bb.10:                               # %lor.lhs.false66.i
	movq	192(%rsp), %rax         # 8-byte Reload
	movl	92(%rax), %ecx
	movl	$8787, 364(%rsp)        # imm = 0x2253
	cmpl	$256, %ecx              # imm = 0x100
	jae	.LBB54_12
# %bb.11:                               # %land.lhs.true.i115.i
	movq	192(%rsp), %rax         # 8-byte Reload
	movl	96(%rax), %ecx
	movl	$8791, 364(%rsp)        # imm = 0x2257
	cmpl	$0, %ecx
	jg	.LBB54_22
.LBB54_12:                              # %lor.lhs.false69.i
	movq	192(%rsp), %rax         # 8-byte Reload
	movl	120(%rax), %ecx
	movl	$8793, 364(%rsp)        # imm = 0x2259
	movl	116(%rax), %edx
	movl	$8796, 364(%rsp)        # imm = 0x225C
	cmpl	%edx, %ecx
	jl	.LBB54_22
# %bb.13:                               # %if.end28
	xorl	%eax, %eax
	movq	144(%rsp), %rcx         # 8-byte Reload
	movl	$1, (%rcx)
	movl	$8797, 364(%rsp)        # imm = 0x225D
	movq	184(%rsp), %rdx         # 8-byte Reload
	movl	(%rdx), %esi
	movl	$8798, 364(%rsp)        # imm = 0x225E
	movq	248(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %r8d
	movl	$8800, 364(%rsp)        # imm = 0x2260
	subl	%esi, %r8d
	movl	%r8d, (%rdi)
	movl	$8801, 364(%rsp)        # imm = 0x2261
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	(%r9), %r10
	movl	$8805, 364(%rsp)        # imm = 0x2265
	cmpq	$0, %r10
	movq	%r10, 104(%rsp)         # 8-byte Spill
	movl	%eax, 228(%rsp)         # 4-byte Spill
	je	.LBB54_41
# %bb.14:                               # %if.end3.i61
	xorl	%eax, %eax
	leaq	280(%rsp), %rcx
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$8809, 364(%rsp)        # imm = 0x2269
	cmpq	%rcx, %rsi
	movl	%eax, 228(%rsp)         # 4-byte Spill
	jne	.LBB54_41
# %bb.15:                               # %if.end7.i62
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	24(%rax), %rcx
	movl	$8812, 364(%rsp)        # imm = 0x226C
	cmpq	$0, %rcx
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	je	.LBB54_17
# %bb.16:                               # %if.then9.i
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8813, 364(%rsp)        # imm = 0x226D
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$8818, 364(%rsp)        # imm = 0x2272
	movq	96(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB54_17:                              # %if.end11.i
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	32(%rax), %rcx
	movl	$8821, 364(%rsp)        # imm = 0x2275
	cmpq	$0, %rcx
	movq	%rcx, 88(%rsp)          # 8-byte Spill
	je	.LBB54_19
# %bb.18:                               # %if.then13.i
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8822, 364(%rsp)        # imm = 0x2276
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$8827, 364(%rsp)        # imm = 0x227B
	movq	88(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB54_19:                              # %if.end17.i
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	40(%rax), %rcx
	movl	$8830, 364(%rsp)        # imm = 0x227E
	cmpq	$0, %rcx
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	je	.LBB54_21
# %bb.20:                               # %if.then19.i
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8831, 364(%rsp)        # imm = 0x227F
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$8835, 364(%rsp)        # imm = 0x2283
	movq	80(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB54_21:                              # %if.end23.i
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8836, 364(%rsp)        # imm = 0x2284
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$8837, 364(%rsp)        # imm = 0x2285
	movq	176(%rsp), %rsi         # 8-byte Reload
	movq	(%rsi), %rsi
	movl	$8839, 364(%rsp)        # imm = 0x2287
	callq	*%rcx
	xorl	%r8d, %r8d
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movl	$8841, 364(%rsp)        # imm = 0x2289
	movl	%r8d, 228(%rsp)         # 4-byte Spill
	jmp	.LBB54_41
.LBB54_22:                              # %output_overflow
	movl	$4294967288, %eax       # imm = 0xFFFFFFF8
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$8845, 364(%rsp)        # imm = 0x228D
	cmpq	$0, %rdx
	movq	%rdx, 72(%rsp)          # 8-byte Spill
	movl	%eax, 228(%rsp)         # 4-byte Spill
	je	.LBB54_41
# %bb.23:                               # %if.end3.i69
	movl	$4294967288, %eax       # imm = 0xFFFFFFF8
	leaq	280(%rsp), %rcx
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$8849, 364(%rsp)        # imm = 0x2291
	cmpq	%rcx, %rsi
	movl	%eax, 228(%rsp)         # 4-byte Spill
	jne	.LBB54_41
# %bb.24:                               # %if.end7.i72
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	24(%rax), %rcx
	movl	$8852, 364(%rsp)        # imm = 0x2294
	cmpq	$0, %rcx
	movq	%rcx, 64(%rsp)          # 8-byte Spill
	je	.LBB54_26
# %bb.25:                               # %if.then9.i75
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8853, 364(%rsp)        # imm = 0x2295
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$8858, 364(%rsp)        # imm = 0x229A
	movq	64(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB54_26:                              # %if.end11.i78
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	32(%rax), %rcx
	movl	$8861, 364(%rsp)        # imm = 0x229D
	cmpq	$0, %rcx
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	je	.LBB54_28
# %bb.27:                               # %if.then13.i81
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8862, 364(%rsp)        # imm = 0x229E
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$8867, 364(%rsp)        # imm = 0x22A3
	movq	56(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB54_28:                              # %if.end17.i85
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	40(%rax), %rcx
	movl	$8870, 364(%rsp)        # imm = 0x22A6
	cmpq	$0, %rcx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	je	.LBB54_30
# %bb.29:                               # %if.then19.i89
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8871, 364(%rsp)        # imm = 0x22A7
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$8875, 364(%rsp)        # imm = 0x22AB
	movq	48(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB54_30:                              # %if.end23.i91
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8876, 364(%rsp)        # imm = 0x22AC
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$8877, 364(%rsp)        # imm = 0x22AD
	movq	176(%rsp), %rsi         # 8-byte Reload
	movq	(%rsi), %rsi
	movl	$8879, 364(%rsp)        # imm = 0x22AF
	callq	*%rcx
	movl	$4294967288, %r8d       # imm = 0xFFFFFFF8
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movl	$8881, 364(%rsp)        # imm = 0x22B1
	movl	%r8d, 228(%rsp)         # 4-byte Spill
	jmp	.LBB54_41
.LBB54_31:                              # %errhandler
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$8888, 364(%rsp)        # imm = 0x22B8
	cmpq	$0, %rdx
	movl	%eax, %esi
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	movl	%esi, 156(%rsp)         # 4-byte Spill
	movl	%eax, 228(%rsp)         # 4-byte Spill
	je	.LBB54_41
	jmp	.LBB54_33
.LBB54_32:                              # %if.end3.i98.loopexit
	xorl	%eax, %eax
	movq	192(%rsp), %rcx         # 8-byte Reload
	movl	%eax, 156(%rsp)         # 4-byte Spill
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	jmp	.LBB54_33
.LBB54_33:                              # %if.end3.i98
	movq	160(%rsp), %rax         # 8-byte Reload
	movl	156(%rsp), %ecx         # 4-byte Reload
	leaq	280(%rsp), %rdx
	movq	(%rax), %rsi
	movl	$8892, 364(%rsp)        # imm = 0x22BC
	cmpq	%rdx, %rsi
	movl	%ecx, %edi
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movl	%ecx, 36(%rsp)          # 4-byte Spill
	movl	%edi, 228(%rsp)         # 4-byte Spill
	jne	.LBB54_41
# %bb.34:                               # %if.end7.i101
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	24(%rax), %rcx
	movl	$8895, 364(%rsp)        # imm = 0x22BF
	cmpq	$0, %rcx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	je	.LBB54_36
# %bb.35:                               # %if.then9.i104
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8896, 364(%rsp)        # imm = 0x22C0
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$8901, 364(%rsp)        # imm = 0x22C5
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB54_36:                              # %if.end11.i107
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	32(%rax), %rcx
	movl	$8904, 364(%rsp)        # imm = 0x22C8
	cmpq	$0, %rcx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	je	.LBB54_38
# %bb.37:                               # %if.then13.i110
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8905, 364(%rsp)        # imm = 0x22C9
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$8910, 364(%rsp)        # imm = 0x22CE
	movq	16(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB54_38:                              # %if.end17.i114
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	40(%rax), %rcx
	movl	$8913, 364(%rsp)        # imm = 0x22D1
	cmpq	$0, %rcx
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	je	.LBB54_40
# %bb.39:                               # %if.then19.i118
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8914, 364(%rsp)        # imm = 0x22D2
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$8918, 364(%rsp)        # imm = 0x22D6
	movq	8(%rsp), %rsi           # 8-byte Reload
	callq	*%rcx
.LBB54_40:                              # %if.end23.i120
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$8919, 364(%rsp)        # imm = 0x22D7
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$8920, 364(%rsp)        # imm = 0x22D8
	movq	176(%rsp), %rsi         # 8-byte Reload
	movq	(%rsi), %rsi
	movl	$8922, 364(%rsp)        # imm = 0x22DA
	callq	*%rcx
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movl	$8956, 364(%rsp)        # imm = 0x22FC
	movl	36(%rsp), %r8d          # 4-byte Reload
	movl	%r8d, 228(%rsp)         # 4-byte Spill
.LBB54_41:                              # %cleanup
	movl	228(%rsp), %eax         # 4-byte Reload
	addq	$368, %rsp              # imm = 0x170
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end54:
	.size	BZ2_bzBuffToBuffCompress, .Lfunc_end54-BZ2_bzBuffToBuffCompress
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI54_0:
	.quad	.LBB54_33
	.quad	.LBB54_6
	.quad	.LBB54_33
	.quad	.LBB54_7
                                        # -- End function
	.text
	.globl	BZ2_bzBuffToBuffDecompress # -- Begin function BZ2_bzBuffToBuffDecompress
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress,@function
BZ2_bzBuffToBuffDecompress:             # @BZ2_bzBuffToBuffDecompress
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$304, %rsp              # imm = 0x130
	.cfi_def_cfa_offset 336
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %rbp, -16
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	leaq	216(%rsp), %r10
	movl	$9999, 300(%rsp)        # imm = 0x270F
	cmpq	$0, %rdi
	sete	%r11b
	cmpq	$0, %rsi
	sete	%bl
	orb	%bl, %r11b
	cmpq	$0, %rdx
	sete	%bl
	orb	%bl, %r11b
	testb	$1, %r11b
	movl	%r8d, 212(%rsp)         # 4-byte Spill
	movl	%ecx, 208(%rsp)         # 4-byte Spill
	movq	%rdx, 200(%rsp)         # 8-byte Spill
	movq	%rsi, 192(%rsp)         # 8-byte Spill
	movq	%rdi, 184(%rsp)         # 8-byte Spill
	movl	%r9d, 180(%rsp)         # 4-byte Spill
	movq	%r10, 168(%rsp)         # 8-byte Spill
	movl	%eax, 164(%rsp)         # 4-byte Spill
	jne	.LBB55_32
# %bb.1:                                # %lor.lhs.false4
	movl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	212(%rsp), %ecx         # 4-byte Reload
	cmpl	$1, %ecx
	seta	%dl
	movl	180(%rsp), %esi         # 4-byte Reload
	cmpl	$4, %esi
	seta	%dil
	orb	%dil, %dl
	testb	$1, %dl
	movl	%eax, 164(%rsp)         # 4-byte Spill
	jne	.LBB55_32
# %bb.2:                                # %if.end18.i
	movl	$64144, %eax            # imm = 0xFA90
	movl	%eax, %edi
	movabsq	$default_bzfree, %rcx
	movabsq	$default_bzalloc, %rdx
	leaq	216(%rsp), %rsi
	movq	%rsi, %r8
	addq	$64, %r8
	addq	$72, %rsi
	movq	$0, 288(%rsp)
	movl	$8957, 300(%rsp)        # imm = 0x22FD
	movq	%rdx, 272(%rsp)
	movl	$8958, 300(%rsp)        # imm = 0x22FE
	movq	%rcx, 280(%rsp)
	movl	$8965, 300(%rsp)        # imm = 0x2305
	movq	%rsi, 152(%rsp)         # 8-byte Spill
	movq	%r8, 144(%rsp)          # 8-byte Spill
	callq	malloc
	movl	$4294967293, %r9d       # imm = 0xFFFFFFFD
	cmpq	$0, %rax
	movq	%rax, 136(%rsp)         # 8-byte Spill
	movl	%r9d, 164(%rsp)         # 4-byte Spill
	je	.LBB55_32
# %bb.3:                                # %if.end13
	leaq	216(%rsp), %rax
	movq	136(%rsp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movl	$8967, 300(%rsp)        # imm = 0x2307
	leaq	264(%rsp), %rdx
	movq	%rcx, 264(%rsp)
	movl	$8970, 300(%rsp)        # imm = 0x230A
	movl	$10, 8(%rcx)
	movl	$8973, 300(%rsp)        # imm = 0x230D
	movl	$0, 36(%rcx)
	movl	$8976, 300(%rsp)        # imm = 0x2310
	movl	$0, 32(%rcx)
	movl	$8979, 300(%rsp)        # imm = 0x2313
	movl	$0, 3188(%rcx)
	movl	$8981, 300(%rsp)        # imm = 0x2315
	movl	$0, 228(%rsp)
	movl	$8983, 300(%rsp)        # imm = 0x2317
	movl	$0, 232(%rsp)
	movl	$8985, 300(%rsp)        # imm = 0x2319
	movl	$0, 252(%rsp)
	movl	$8987, 300(%rsp)        # imm = 0x231B
	movl	$0, 256(%rsp)
	movl	$8990, 300(%rsp)        # imm = 0x231E
	movl	212(%rsp), %esi         # 4-byte Reload
	movb	%sil, %dil
	movb	%dil, 44(%rcx)
	movl	$8994, 300(%rsp)        # imm = 0x2322
	movl	$0, 48(%rcx)
	movl	$8998, 300(%rsp)        # imm = 0x2326
	xorps	%xmm0, %xmm0
	movups	%xmm0, 3152(%rcx)
	movq	$0, 3168(%rcx)
	movl	180(%rsp), %r8d         # 4-byte Reload
	movl	%r8d, 52(%rcx)
	movl	$9000, 300(%rsp)        # imm = 0x2328
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	%r9, 216(%rsp)
	movl	$9002, 300(%rsp)        # imm = 0x232A
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, 240(%rsp)
	movl	$9004, 300(%rsp)        # imm = 0x232C
	movl	208(%rsp), %r11d        # 4-byte Reload
	movl	%r11d, 224(%rsp)
	movl	$9005, 300(%rsp)        # imm = 0x232D
	movq	192(%rsp), %rbx         # 8-byte Reload
	movl	(%rbx), %ebp
	movl	$9007, 300(%rsp)        # imm = 0x232F
	leaq	248(%rsp), %r14
	movl	%ebp, 248(%rsp)
	movl	$9010, 300(%rsp)        # imm = 0x2332
	movq	%rax, %rdi
	movq	%r14, 128(%rsp)         # 8-byte Spill
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	callq	BZ2_bzDecompress
	movl	%eax, %esi
	testl	%eax, %eax
	movl	%esi, 116(%rsp)         # 4-byte Spill
	je	.LBB55_13
	jmp	.LBB55_33
.LBB55_33:                              # %if.end13
	movl	116(%rsp), %eax         # 4-byte Reload
	subl	$4, %eax
	movl	%eax, 112(%rsp)         # 4-byte Spill
	jne	.LBB55_23
	jmp	.LBB55_4
.LBB55_4:                               # %if.end20
	xorl	%eax, %eax
	movq	128(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$9011, 300(%rsp)        # imm = 0x2333
	movq	192(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %edi
	movl	$9013, 300(%rsp)        # imm = 0x2335
	subl	%edx, %edi
	movl	%edi, (%rsi)
	movl	$9015, 300(%rsp)        # imm = 0x2337
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	(%r8), %r9
	movl	$9019, 300(%rsp)        # imm = 0x233B
	cmpq	$0, %r9
	movq	%r9, 104(%rsp)          # 8-byte Spill
	movl	%eax, 164(%rsp)         # 4-byte Spill
	je	.LBB55_32
# %bb.5:                                # %if.end3.i
	xorl	%eax, %eax
	leaq	216(%rsp), %rcx
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$9023, 300(%rsp)        # imm = 0x233F
	cmpq	%rcx, %rsi
	movl	%eax, 164(%rsp)         # 4-byte Spill
	jne	.LBB55_32
# %bb.6:                                # %if.end7.i
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	3152(%rax), %rcx
	movl	$9026, 300(%rsp)        # imm = 0x2342
	cmpq	$0, %rcx
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	je	.LBB55_8
# %bb.7:                                # %if.then9.i
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9027, 300(%rsp)        # imm = 0x2343
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$9032, 300(%rsp)        # imm = 0x2348
	movq	96(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB55_8:                               # %if.end11.i
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	3160(%rax), %rcx
	movl	$9035, 300(%rsp)        # imm = 0x234B
	cmpq	$0, %rcx
	movq	%rcx, 88(%rsp)          # 8-byte Spill
	je	.LBB55_10
# %bb.9:                                # %if.then13.i
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9036, 300(%rsp)        # imm = 0x234C
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$9041, 300(%rsp)        # imm = 0x2351
	movq	88(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB55_10:                              # %if.end17.i
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	3168(%rax), %rcx
	movl	$9044, 300(%rsp)        # imm = 0x2354
	cmpq	$0, %rcx
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	je	.LBB55_12
# %bb.11:                               # %if.then19.i
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9045, 300(%rsp)        # imm = 0x2355
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$9048, 300(%rsp)        # imm = 0x2358
	movq	80(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB55_12:                              # %if.end23.i51
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9049, 300(%rsp)        # imm = 0x2359
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$9050, 300(%rsp)        # imm = 0x235A
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	(%rsi), %rsi
	movl	$9052, 300(%rsp)        # imm = 0x235C
	callq	*%rcx
	xorl	%r8d, %r8d
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movl	$9054, 300(%rsp)        # imm = 0x235E
	movl	%r8d, 164(%rsp)         # 4-byte Spill
	jmp	.LBB55_32
.LBB55_13:                              # %output_overflow_or_eof
	movq	128(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$9057, 300(%rsp)        # imm = 0x2361
	cmpl	$0, %ecx
	sete	%dl
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$9061, 300(%rsp)        # imm = 0x2365
	cmpq	$0, %rdi
	movb	%dl, 79(%rsp)           # 1-byte Spill
	movq	%rdi, 64(%rsp)          # 8-byte Spill
	je	.LBB55_22
# %bb.14:                               # %if.end3.i57
	leaq	216(%rsp), %rax
	movq	64(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$9065, 300(%rsp)        # imm = 0x2369
	cmpq	%rax, %rdx
	jne	.LBB55_22
# %bb.15:                               # %if.end7.i60
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	3152(%rax), %rcx
	movl	$9068, 300(%rsp)        # imm = 0x236C
	cmpq	$0, %rcx
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	je	.LBB55_17
# %bb.16:                               # %if.then9.i63
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9069, 300(%rsp)        # imm = 0x236D
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$9074, 300(%rsp)        # imm = 0x2372
	movq	56(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB55_17:                              # %if.end11.i66
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	3160(%rax), %rcx
	movl	$9077, 300(%rsp)        # imm = 0x2375
	cmpq	$0, %rcx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	je	.LBB55_19
# %bb.18:                               # %if.then13.i69
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9078, 300(%rsp)        # imm = 0x2376
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$9083, 300(%rsp)        # imm = 0x237B
	movq	48(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB55_19:                              # %if.end17.i73
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	3168(%rax), %rcx
	movl	$9086, 300(%rsp)        # imm = 0x237E
	cmpq	$0, %rcx
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	je	.LBB55_21
# %bb.20:                               # %if.then19.i77
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9087, 300(%rsp)        # imm = 0x237F
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$9090, 300(%rsp)        # imm = 0x2382
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB55_21:                              # %if.end23.i79
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9091, 300(%rsp)        # imm = 0x2383
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$9092, 300(%rsp)        # imm = 0x2384
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	(%rsi), %rsi
	movl	$9094, 300(%rsp)        # imm = 0x2386
	callq	*%rcx
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movl	$9099, 300(%rsp)        # imm = 0x238B
.LBB55_22:                              # %BZ2_bzDecompressEnd.exit81
	movl	$4294967289, %eax       # imm = 0xFFFFFFF9
	movl	$4294967288, %ecx       # imm = 0xFFFFFFF8
	movb	79(%rsp), %dl           # 1-byte Reload
	testb	$1, %dl
	cmovnel	%ecx, %eax
	movl	%eax, 164(%rsp)         # 4-byte Spill
	jmp	.LBB55_32
.LBB55_23:                              # %errhandler
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9103, 300(%rsp)        # imm = 0x238F
	cmpq	$0, %rcx
	movl	116(%rsp), %edx         # 4-byte Reload
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movl	%edx, 164(%rsp)         # 4-byte Spill
	je	.LBB55_32
# %bb.24:                               # %if.end3.i86
	leaq	216(%rsp), %rax
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$9107, 300(%rsp)        # imm = 0x2393
	cmpq	%rax, %rdx
	movl	116(%rsp), %esi         # 4-byte Reload
	movl	%esi, 164(%rsp)         # 4-byte Spill
	jne	.LBB55_32
# %bb.25:                               # %if.end7.i89
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	3152(%rax), %rcx
	movl	$9110, 300(%rsp)        # imm = 0x2396
	cmpq	$0, %rcx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	je	.LBB55_27
# %bb.26:                               # %if.then9.i92
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9111, 300(%rsp)        # imm = 0x2397
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$9116, 300(%rsp)        # imm = 0x239C
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB55_27:                              # %if.end11.i95
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	3160(%rax), %rcx
	movl	$9119, 300(%rsp)        # imm = 0x239F
	cmpq	$0, %rcx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	je	.LBB55_29
# %bb.28:                               # %if.then13.i98
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9120, 300(%rsp)        # imm = 0x23A0
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$9125, 300(%rsp)        # imm = 0x23A5
	movq	16(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB55_29:                              # %if.end17.i102
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	3168(%rax), %rcx
	movl	$9128, 300(%rsp)        # imm = 0x23A8
	cmpq	$0, %rcx
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	je	.LBB55_31
# %bb.30:                               # %if.then19.i106
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9129, 300(%rsp)        # imm = 0x23A9
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$9132, 300(%rsp)        # imm = 0x23AC
	movq	8(%rsp), %rsi           # 8-byte Reload
	callq	*%rcx
.LBB55_31:                              # %if.end23.i108
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9133, 300(%rsp)        # imm = 0x23AD
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdi
	movl	$9134, 300(%rsp)        # imm = 0x23AE
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	(%rsi), %rsi
	movl	$9136, 300(%rsp)        # imm = 0x23B0
	callq	*%rcx
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movl	$9161, 300(%rsp)        # imm = 0x23C9
	movl	116(%rsp), %r8d         # 4-byte Reload
	movl	%r8d, 164(%rsp)         # 4-byte Spill
.LBB55_32:                              # %cleanup
	movl	164(%rsp), %eax         # 4-byte Reload
	addq	$304, %rsp              # imm = 0x130
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end55:
	.size	BZ2_bzBuffToBuffDecompress, .Lfunc_end55-BZ2_bzBuffToBuffDecompress
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzopen              # -- Begin function BZ2_bzopen
	.p2align	4, 0x90
	.type	BZ2_bzopen,@function
BZ2_bzopen:                             # @BZ2_bzopen
	.cfi_startproc
# %bb.0:                                # %entry
	movl	$9999, -4(%rsp)         # imm = 0x270F
	xorl	%edx, %edx
	jmp	bzopen_or_bzdopen       # TAILCALL
.Lfunc_end56:
	.size	BZ2_bzopen, .Lfunc_end56-BZ2_bzopen
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen
	.type	bzopen_or_bzdopen,@function
bzopen_or_bzdopen:                      # @bzopen_or_bzdopen
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$216, %rsp
	.cfi_def_cfa_offset 224
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	$10, %r8d
	movl	%r8d, %r9d
	leaq	202(%rsp), %r10
	movl	$9999, 212(%rsp)        # imm = 0x270F
	movq	%rdi, 192(%rsp)         # 8-byte Spill
	movq	%r10, %rdi
	movq	%rsi, 184(%rsp)         # 8-byte Spill
	movl	%eax, %esi
	movl	%edx, 180(%rsp)         # 4-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	movq	%r10, 160(%rsp)         # 8-byte Spill
	callq	memset
	movq	184(%rsp), %rcx         # 8-byte Reload
	cmpq	$0, %rcx
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	%rdx, 152(%rsp)         # 8-byte Spill
	je	.LBB57_17
# %bb.1:                                # %if.end
	xorl	%eax, %eax
	movl	$9, %ecx
	movq	184(%rsp), %rdx         # 8-byte Reload
	movb	(%rdx), %sil
	movl	$9181, 212(%rsp)        # imm = 0x23DD
	cmpb	$0, %sil
	movb	%sil, 151(%rsp)         # 1-byte Spill
	movl	%eax, 144(%rsp)         # 4-byte Spill
	movl	%ecx, 140(%rsp)         # 4-byte Spill
	je	.LBB57_8
# %bb.2:                                # %while.body.preheader
	movl	$9, %eax
	xorl	%ecx, %ecx
	movb	151(%rsp), %dl          # 1-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	movl	%eax, 124(%rsp)         # 4-byte Spill
	movb	%dl, 123(%rsp)          # 1-byte Spill
	movl	%ecx, 116(%rsp)         # 4-byte Spill
	jmp	.LBB57_3
.LBB57_3:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movl	116(%rsp), %eax         # 4-byte Reload
	movl	124(%rsp), %ecx         # 4-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movb	123(%rsp), %sil         # 1-byte Reload
	movsbl	%sil, %edi
	xorl	%r8d, %r8d
	movl	%edi, %r9d
	subl	$114, %r9d
	movl	%ecx, %r10d
	movl	%eax, 112(%rsp)         # 4-byte Spill
	movl	%ecx, 108(%rsp)         # 4-byte Spill
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	movb	%sil, 95(%rsp)          # 1-byte Spill
	movl	%edi, 88(%rsp)          # 4-byte Spill
	movl	%r9d, 84(%rsp)          # 4-byte Spill
	movl	%r8d, 80(%rsp)          # 4-byte Spill
	movl	%r10d, 76(%rsp)         # 4-byte Spill
	je	.LBB57_7
	jmp	.LBB57_18
.LBB57_18:                              # %while.body
                                        #   in Loop: Header=BB57_3 Depth=1
	movl	88(%rsp), %eax          # 4-byte Reload
	subl	$115, %eax
	movl	%eax, 72(%rsp)          # 4-byte Spill
	je	.LBB57_5
	jmp	.LBB57_19
.LBB57_19:                              # %while.body
                                        #   in Loop: Header=BB57_3 Depth=1
	movl	88(%rsp), %eax          # 4-byte Reload
	subl	$119, %eax
	movl	%eax, 68(%rsp)          # 4-byte Spill
	jne	.LBB57_6
	jmp	.LBB57_4
.LBB57_4:                               # %sw.bb1
                                        #   in Loop: Header=BB57_3 Depth=1
	movl	$1, %eax
	movl	108(%rsp), %ecx         # 4-byte Reload
	movl	%eax, 80(%rsp)          # 4-byte Spill
	movl	%ecx, 76(%rsp)          # 4-byte Spill
	jmp	.LBB57_7
.LBB57_5:                               # %sw.bb2
                                        #   in Loop: Header=BB57_3 Depth=1
	movl	112(%rsp), %eax         # 4-byte Reload
	movl	108(%rsp), %ecx         # 4-byte Reload
	movl	%eax, 80(%rsp)          # 4-byte Spill
	movl	%ecx, 76(%rsp)          # 4-byte Spill
	jmp	.LBB57_7
.LBB57_6:                               # %sw.default
                                        #   in Loop: Header=BB57_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movl	$9184, 212(%rsp)        # imm = 0x23E0
	movb	95(%rsp), %cl           # 1-byte Reload
	movsbq	%cl, %rdx
	movw	(%rax,%rdx,2), %si
	movl	$9166, 212(%rsp)        # imm = 0x23CE
	andw	$2048, %si              # imm = 0x800
	movl	88(%rsp), %edi          # 4-byte Reload
	addl	$-48, %edi
	cmpw	$0, %si
	movl	108(%rsp), %r8d         # 4-byte Reload
	cmovel	%r8d, %edi
	movl	112(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, 80(%rsp)          # 4-byte Spill
	movl	%edi, 76(%rsp)          # 4-byte Spill
.LBB57_7:                               # %sw.epilog
                                        #   in Loop: Header=BB57_3 Depth=1
	movl	76(%rsp), %eax          # 4-byte Reload
	movl	80(%rsp), %ecx          # 4-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	addq	$1, %rdx
	movq	96(%rsp), %rsi          # 8-byte Reload
	movb	1(%rsi), %dil
	movl	$9203, 212(%rsp)        # imm = 0x23F3
	cmpb	$0, %dil
	movl	%eax, %r8d
	movl	%ecx, %r9d
	movl	%ecx, 144(%rsp)         # 4-byte Spill
	movl	%r9d, 116(%rsp)         # 4-byte Spill
	movb	%dil, 123(%rsp)         # 1-byte Spill
	movq	%rdx, 128(%rsp)         # 8-byte Spill
	movl	%r8d, 124(%rsp)         # 4-byte Spill
	movl	%eax, 140(%rsp)         # 4-byte Spill
	jne	.LBB57_3
.LBB57_8:                               # %while.end
	movl	140(%rsp), %eax         # 4-byte Reload
	movl	144(%rsp), %ecx         # 4-byte Reload
	xorl	%edx, %edx
	movl	%edx, %esi
	movw	$114, %di
	movw	$119, %r8w
	cmpl	$0, %ecx
	setne	%r9b
	movq	160(%rsp), %r10         # 8-byte Reload
	movw	%di, 66(%rsp)           # 2-byte Spill
	movq	%r10, %rdi
	movl	%eax, 60(%rsp)          # 4-byte Spill
	movl	%ecx, 56(%rsp)          # 4-byte Spill
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movw	%r8w, 46(%rsp)          # 2-byte Spill
	movb	%r9b, 45(%rsp)          # 1-byte Spill
	callq	strlen
	movl	56(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movw	66(%rsp), %r8w          # 2-byte Reload
	movw	46(%rsp), %r11w         # 2-byte Reload
	cmovnew	%r11w, %r8w
	movw	%r8w, 202(%rsp,%rax)
	movl	$9207, 212(%rsp)        # imm = 0x23F7
	movq	160(%rsp), %rdi         # 8-byte Reload
	callq	strlen
	movw	$98, 202(%rsp,%rax)
	movl	$9213, 212(%rsp)        # imm = 0x23FD
	movl	180(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	%rax, 152(%rsp)         # 8-byte Spill
	jne	.LBB57_17
# %bb.9:                                # %if.then15
	movq	192(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	je	.LBB57_11
# %bb.10:                               # %if.end56
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	192(%rsp), %rdx         # 8-byte Reload
	movb	(%rdx), %sil
	movl	$9231, 212(%rsp)        # imm = 0x240F
	cmpb	$0, %sil
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	jne	.LBB57_17
.LBB57_11:                              # %if.end68
	xorl	%eax, %eax
	movl	%eax, %ecx
	movb	45(%rsp), %dl           # 1-byte Reload
	andb	$1, %dl
	movzbl	%dl, %eax
	movb	45(%rsp), %dl           # 1-byte Reload
	testb	$1, %dl
	movl	%eax, 40(%rsp)          # 4-byte Spill
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	jne	.LBB57_12
	jmp	.LBB57_17
.LBB57_12:                              # %if.then74
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$9, %eax
	movl	$1, %edx
	movl	60(%rsp), %esi          # 4-byte Reload
	cmpl	$1, %esi
	cmovgl	%esi, %edx
	cmpl	$9, %edx
	cmovll	%edx, %eax
	movl	%eax, %edx
	addl	$-1, %edx
	cmpl	$8, %edx
	movl	%eax, 36(%rsp)          # 4-byte Spill
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	ja	.LBB57_17
# %bb.13:                               # %if.end24.i
	movl	$5104, %eax             # imm = 0x13F0
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movl	%ecx, %edi
	cmpq	$0, %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%rdi, 152(%rsp)         # 8-byte Spill
	je	.LBB57_17
# %bb.14:                               # %if.end34.i
	xorl	%eax, %eax
	movl	$30, %ecx
	movl	$24, %edx
                                        # kill: def %rdx killed %edx
	movq	24(%rsp), %rsi          # 8-byte Reload
	movl	$0, 5096(%rsi)
	movl	$9233, 212(%rsp)        # imm = 0x2411
	addq	$5100, %rsi             # imm = 0x13EC
	movq	24(%rsp), %rdi          # 8-byte Reload
	movb	$0, 5100(%rdi)
	movl	$9236, 212(%rsp)        # imm = 0x2414
	movl	$0, 5004(%rdi)
	movl	$9238, 212(%rsp)        # imm = 0x2416
	movl	40(%rsp), %r8d          # 4-byte Reload
	movl	%r8d, (%rdi)
	movl	$9240, 212(%rsp)        # imm = 0x2418
	movb	$1, 5008(%rdi)
	movl	$9252, 212(%rsp)        # imm = 0x2424
	addq	$5016, %rdi             # imm = 0x1398
	movq	24(%rsp), %r9           # 8-byte Reload
	addq	$5072, %r9              # imm = 0x13D0
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	movl	%eax, %esi
	movl	%eax, 4(%rsp)           # 4-byte Spill
	movl	%ecx, (%rsp)            # 4-byte Spill
	callq	memset
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	36(%rsp), %esi          # 4-byte Reload
	movl	4(%rsp), %edx           # 4-byte Reload
	movl	(%rsp), %ecx            # 4-byte Reload
	callq	BZ2_bzCompressInit
	cmpl	$0, %eax
	je	.LBB57_16
# %bb.15:                               # %if.then50.i
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	free
	xorl	%eax, %eax
	movl	%eax, %edi
	movq	%rdi, 152(%rsp)         # 8-byte Spill
	jmp	.LBB57_17
.LBB57_16:                              # %if.end58.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	$0, 5024(%rax)
	movl	$9253, 212(%rsp)        # imm = 0x2425
	movq	8(%rsp), %rcx           # 8-byte Reload
	movb	$1, (%rcx)
	movl	$9273, 212(%rsp)        # imm = 0x2439
	movq	%rax, 152(%rsp)         # 8-byte Spill
.LBB57_17:                              # %cleanup
	movq	152(%rsp), %rax         # 8-byte Reload
	addq	$216, %rsp
	retq
.Lfunc_end57:
	.size	bzopen_or_bzdopen, .Lfunc_end57-bzopen_or_bzdopen
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzdopen             # -- Begin function BZ2_bzdopen
	.p2align	4, 0x90
	.type	BZ2_bzdopen,@function
BZ2_bzdopen:                            # @BZ2_bzdopen
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$136, %rsp
	.cfi_def_cfa_offset 144
	xorl	%eax, %eax
	movl	$10, %ecx
	movl	%ecx, %edx
	leaq	122(%rsp), %r8
	movl	$9999, 132(%rsp)        # imm = 0x270F
	movl	%edi, 116(%rsp)         # 4-byte Spill
	movq	%r8, %rdi
	movq	%rsi, 104(%rsp)         # 8-byte Spill
	movl	%eax, %esi
	movq	%r8, 96(%rsp)           # 8-byte Spill
	callq	memset
	movq	104(%rsp), %rdx         # 8-byte Reload
	cmpq	$0, %rdx
	je	.LBB58_11
# %bb.1:                                # %if.end.i
	movq	104(%rsp), %rax         # 8-byte Reload
	movb	(%rax), %cl
	movl	$9280, 132(%rsp)        # imm = 0x2440
	cmpb	$0, %cl
	movb	%cl, 95(%rsp)           # 1-byte Spill
	je	.LBB58_3
# %bb.2:                                # %while.body.i.preheader
	xorl	%eax, %eax
	movb	95(%rsp), %cl           # 1-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movb	%cl, 79(%rsp)           # 1-byte Spill
	movl	%eax, 72(%rsp)          # 4-byte Spill
	jmp	.LBB58_4
.LBB58_3:                               # %while.end.i.thread
	movw	$114, %ax
	movq	96(%rsp), %rdi          # 8-byte Reload
	movw	%ax, 70(%rsp)           # 2-byte Spill
	callq	strlen
	movw	70(%rsp), %cx           # 2-byte Reload
	movq	%rax, 56(%rsp)          # 8-byte Spill
	movw	%cx, 54(%rsp)           # 2-byte Spill
	jmp	.LBB58_10
.LBB58_4:                               # %while.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	72(%rsp), %eax          # 4-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movb	79(%rsp), %dl           # 1-byte Reload
	movsbl	%dl, %esi
	xorl	%edi, %edi
	movl	%esi, %r8d
	subl	$114, %r8d
	movl	%eax, 48(%rsp)          # 4-byte Spill
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movl	%esi, 36(%rsp)          # 4-byte Spill
	movl	%r8d, 32(%rsp)          # 4-byte Spill
	movl	%edi, 28(%rsp)          # 4-byte Spill
	je	.LBB58_8
	jmp	.LBB58_12
.LBB58_12:                              # %while.body.i
                                        #   in Loop: Header=BB58_4 Depth=1
	movl	36(%rsp), %eax          # 4-byte Reload
	subl	$115, %eax
	movl	%eax, 24(%rsp)          # 4-byte Spill
	je	.LBB58_6
	jmp	.LBB58_13
.LBB58_13:                              # %while.body.i
                                        #   in Loop: Header=BB58_4 Depth=1
	movl	36(%rsp), %eax          # 4-byte Reload
	subl	$119, %eax
	movl	%eax, 20(%rsp)          # 4-byte Spill
	jne	.LBB58_7
	jmp	.LBB58_5
.LBB58_5:                               # %sw.bb1.i
                                        #   in Loop: Header=BB58_4 Depth=1
	movl	$1, %eax
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jmp	.LBB58_8
.LBB58_6:                               # %sw.bb2.i
                                        #   in Loop: Header=BB58_4 Depth=1
	movl	48(%rsp), %eax          # 4-byte Reload
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jmp	.LBB58_8
.LBB58_7:                               # %sw.default.i
                                        #   in Loop: Header=BB58_4 Depth=1
	movl	48(%rsp), %eax          # 4-byte Reload
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jmp	.LBB58_8
.LBB58_8:                               # %sw.epilog.i
                                        #   in Loop: Header=BB58_4 Depth=1
	movl	28(%rsp), %eax          # 4-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	addq	$1, %rcx
	movq	40(%rsp), %rdx          # 8-byte Reload
	movb	1(%rdx), %sil
	movl	$9300, 132(%rsp)        # imm = 0x2454
	cmpb	$0, %sil
	movl	%eax, %edi
	movl	%eax, 16(%rsp)          # 4-byte Spill
	movb	%sil, 79(%rsp)          # 1-byte Spill
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movl	%edi, 72(%rsp)          # 4-byte Spill
	jne	.LBB58_4
# %bb.9:                                # %while.end.i
	movw	$119, %ax
	movw	$114, %cx
	movq	96(%rsp), %rdi          # 8-byte Reload
	movw	%ax, 14(%rsp)           # 2-byte Spill
	movw	%cx, 12(%rsp)           # 2-byte Spill
	callq	strlen
	movl	16(%rsp), %edx          # 4-byte Reload
	cmpl	$0, %edx
	movw	14(%rsp), %cx           # 2-byte Reload
	movw	12(%rsp), %si           # 2-byte Reload
	cmovew	%si, %cx
	movq	%rax, 56(%rsp)          # 8-byte Spill
	movw	%cx, 54(%rsp)           # 2-byte Spill
.LBB58_10:
	movw	54(%rsp), %ax           # 2-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movw	%ax, 122(%rsp,%rcx)
	movl	$9304, 132(%rsp)        # imm = 0x2458
	movq	96(%rsp), %rdi          # 8-byte Reload
	callq	strlen
	movw	$98, 122(%rsp,%rax)
	movl	$9320, 132(%rsp)        # imm = 0x2468
.LBB58_11:                              # %bzopen_or_bzdopen.exit
	xorl	%eax, %eax
                                        # kill: def %rax killed %eax
	addq	$136, %rsp
	retq
.Lfunc_end58:
	.size	BZ2_bzdopen, .Lfunc_end58-BZ2_bzdopen
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread              # -- Begin function BZ2_bzread
	.p2align	4, 0x90
	.type	BZ2_bzread,@function
BZ2_bzread:                             # @BZ2_bzread
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$56, %rsp
	.cfi_def_cfa_offset 64
	xorl	%eax, %eax
	leaq	48(%rsp), %rcx
	movl	$9999, 52(%rsp)         # imm = 0x270F
	movl	5096(%rdi), %r8d
	movl	$9324, 52(%rsp)         # imm = 0x246C
	cmpl	$4, %r8d
	movq	%rsi, 40(%rsp)          # 8-byte Spill
	movq	%rdi, 32(%rsp)          # 8-byte Spill
	movl	%edx, 28(%rsp)          # 4-byte Spill
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movl	%eax, 12(%rsp)          # 4-byte Spill
	je	.LBB59_2
# %bb.1:                                # %if.end
	leaq	48(%rsp), %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movl	28(%rsp), %ecx          # 4-byte Reload
	callq	BZ2_bzRead
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	48(%rsp), %r8d
	movl	$9343, 52(%rsp)         # imm = 0x247F
	orl	$4, %r8d
	cmpl	$4, %r8d
	cmovel	%eax, %ecx
	movl	%ecx, 12(%rsp)          # 4-byte Spill
.LBB59_2:                               # %cleanup
	movl	12(%rsp), %eax          # 4-byte Reload
	addq	$56, %rsp
	retq
.Lfunc_end59:
	.size	BZ2_bzread, .Lfunc_end59-BZ2_bzread
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite             # -- Begin function BZ2_bzwrite
	.p2align	4, 0x90
	.type	BZ2_bzwrite,@function
BZ2_bzwrite:                            # @BZ2_bzwrite
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$40, %rsp
	.cfi_def_cfa_offset 48
	leaq	32(%rsp), %rax
	movl	$9999, 36(%rsp)         # imm = 0x270F
	movq	%rdi, 24(%rsp)          # 8-byte Spill
	movq	%rax, %rdi
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	movq	%rax, %rsi
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	%edx, 12(%rsp)          # 4-byte Spill
	movq	%rcx, %rdx
	movl	12(%rsp), %ecx          # 4-byte Reload
	callq	BZ2_bzWrite
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	32(%rsp), %r8d
	movl	$9364, 36(%rsp)         # imm = 0x2494
	cmpl	$0, %r8d
	movl	12(%rsp), %r8d          # 4-byte Reload
	cmovel	%r8d, %ecx
	movl	%ecx, %eax
	addq	$40, %rsp
	retq
.Lfunc_end60:
	.size	BZ2_bzwrite, .Lfunc_end60-BZ2_bzwrite
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzflush             # -- Begin function BZ2_bzflush
	.p2align	4, 0x90
	.type	BZ2_bzflush,@function
BZ2_bzflush:                            # @BZ2_bzflush
	.cfi_startproc
# %bb.0:                                # %entry
	xorl	%eax, %eax
	movl	$9999, -4(%rsp)         # imm = 0x270F
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	retq
.Lfunc_end61:
	.size	BZ2_bzflush, .Lfunc_end61-BZ2_bzflush
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzclose             # -- Begin function BZ2_bzclose
	.p2align	4, 0x90
	.type	BZ2_bzclose,@function
BZ2_bzclose:                            # @BZ2_bzclose
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$184, %rsp
	.cfi_def_cfa_offset 192
	leaq	176(%rsp), %rax
	movl	$9999, 180(%rsp)        # imm = 0x270F
	cmpq	$0, %rdi
	movq	%rdi, 168(%rsp)         # 8-byte Spill
	movq	%rax, 160(%rsp)         # 8-byte Spill
	je	.LBB62_28
# %bb.1:                                # %if.end
	movq	168(%rsp), %rax         # 8-byte Reload
	addq	$5008, %rax             # imm = 0x1390
	movq	168(%rsp), %rcx         # 8-byte Reload
	movb	5008(%rcx), %dl
	movl	$9368, 180(%rsp)        # imm = 0x2498
	cmpb	$0, %dl
	movq	%rax, 152(%rsp)         # 8-byte Spill
	je	.LBB62_16
# %bb.2:                                # %if.then1
	leaq	176(%rsp), %rdi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	168(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	144(%rsp), %r9          # 8-byte Reload
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	movl	176(%rsp), %eax
	movl	$9371, 180(%rsp)        # imm = 0x249B
	cmpl	$0, %eax
	je	.LBB62_28
# %bb.3:                                # %if.end6.i
	movq	152(%rsp), %rax         # 8-byte Reload
	movb	(%rax), %cl
	movl	$9376, 180(%rsp)        # imm = 0x24A0
	movq	168(%rsp), %rdx         # 8-byte Reload
	addq	$5096, %rdx             # imm = 0x13E8
	cmpb	$0, %cl
	movq	%rdx, 136(%rsp)         # 8-byte Spill
	jne	.LBB62_5
# %bb.4:                                # %if.then7.i
	movq	136(%rsp), %rax         # 8-byte Reload
	movl	$-1, (%rax)
	movl	$9378, 180(%rsp)        # imm = 0x24A2
	jmp	.LBB62_28
.LBB62_5:                               # %if.end15.i
	movq	136(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$9382, 180(%rsp)        # imm = 0x24A6
	movq	168(%rsp), %rcx         # 8-byte Reload
	addq	$5064, %rcx             # imm = 0x13C8
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	5064(%rdx), %rsi
	movl	$9388, 180(%rsp)        # imm = 0x24AC
	cmpq	$0, %rsi
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	movq	%rsi, 120(%rsp)         # 8-byte Spill
	je	.LBB62_15
# %bb.6:                                # %if.end3.i162.i
	movq	168(%rsp), %rax         # 8-byte Reload
	addq	$5016, %rax             # imm = 0x1398
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$9392, 180(%rsp)        # imm = 0x24B0
	cmpq	%rax, %rdx
	jne	.LBB62_15
# %bb.7:                                # %if.end7.i163.i
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	24(%rax), %rcx
	movl	$9397, 180(%rsp)        # imm = 0x24B5
	movq	168(%rsp), %rdx         # 8-byte Reload
	addq	$5080, %rdx             # imm = 0x13D8
	cmpq	$0, %rcx
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	movq	%rdx, 104(%rsp)         # 8-byte Spill
	je	.LBB62_9
# %bb.8:                                # %if.then9.i.i
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9400, 180(%rsp)        # imm = 0x24B8
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	5088(%rdx), %rdi
	movl	$9405, 180(%rsp)        # imm = 0x24BD
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	*%rcx
.LBB62_9:                               # %if.end11.i.i
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	32(%rax), %rcx
	movl	$9408, 180(%rsp)        # imm = 0x24C0
	cmpq	$0, %rcx
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	je	.LBB62_11
# %bb.10:                               # %if.then13.i.i
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9411, 180(%rsp)        # imm = 0x24C3
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	5088(%rdx), %rdi
	movl	$9416, 180(%rsp)        # imm = 0x24C8
	movq	96(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB62_11:                              # %if.end17.i.i
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	40(%rax), %rcx
	movl	$9422, 180(%rsp)        # imm = 0x24CE
	cmpq	$0, %rcx
	movq	%rcx, 88(%rsp)          # 8-byte Spill
	jne	.LBB62_13
# %bb.12:                               # %if.end17.if.end23_crit_edge.i.i
	movq	168(%rsp), %rax         # 8-byte Reload
	addq	$5088, %rax             # imm = 0x13E0
	movq	%rax, 80(%rsp)          # 8-byte Spill
	jmp	.LBB62_14
.LBB62_13:                              # %if.then19.i.i
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9425, 180(%rsp)        # imm = 0x24D1
	movq	168(%rsp), %rdx         # 8-byte Reload
	addq	$5088, %rdx             # imm = 0x13E0
	movq	168(%rsp), %rsi         # 8-byte Reload
	movq	5088(%rsi), %rdi
	movl	$9430, 180(%rsp)        # imm = 0x24D6
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	%r8, %rsi
	movq	%rdx, 72(%rsp)          # 8-byte Spill
	callq	*%rcx
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	%rax, 80(%rsp)          # 8-byte Spill
.LBB62_14:                              # %if.end23.i.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$9431, 180(%rsp)        # imm = 0x24D7
	movq	(%rax), %rdi
	movl	$9432, 180(%rsp)        # imm = 0x24D8
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rsi
	movl	$9437, 180(%rsp)        # imm = 0x24DD
	callq	*%rdx
.LBB62_15:                              # %BZ2_bzCompressEnd.exit.i
	movq	168(%rsp), %rdi         # 8-byte Reload
	callq	free
	jmp	.LBB62_28
.LBB62_16:                              # %if.end22.i
	movl	$0, 176(%rsp)
	movl	$9440, 180(%rsp)        # imm = 0x24E0
	movq	168(%rsp), %rax         # 8-byte Reload
	movl	$0, 5096(%rax)
	movl	$9442, 180(%rsp)        # imm = 0x24E2
	movb	5100(%rax), %cl
	movl	$9448, 180(%rsp)        # imm = 0x24E8
	cmpb	$0, %cl
	je	.LBB62_27
# %bb.17:                               # %if.then24.i
	movq	168(%rsp), %rax         # 8-byte Reload
	addq	$5064, %rax             # imm = 0x13C8
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	5064(%rcx), %rdx
	movl	$9454, 180(%rsp)        # imm = 0x24EE
	cmpq	$0, %rdx
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	je	.LBB62_27
# %bb.18:                               # %if.end3.i.i
	movq	168(%rsp), %rax         # 8-byte Reload
	addq	$5016, %rax             # imm = 0x1398
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$9458, 180(%rsp)        # imm = 0x24F2
	cmpq	%rax, %rdx
	jne	.LBB62_27
# %bb.19:                               # %if.end7.i.i
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	3152(%rax), %rcx
	movl	$9463, 180(%rsp)        # imm = 0x24F7
	movq	168(%rsp), %rdx         # 8-byte Reload
	addq	$5080, %rdx             # imm = 0x13D8
	cmpq	$0, %rcx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	je	.LBB62_21
# %bb.20:                               # %if.then9.i.i23
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9466, 180(%rsp)        # imm = 0x24FA
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	5088(%rdx), %rdi
	movl	$9471, 180(%rsp)        # imm = 0x24FF
	movq	48(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB62_21:                              # %if.end11.i.i26
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	3160(%rax), %rcx
	movl	$9474, 180(%rsp)        # imm = 0x2502
	cmpq	$0, %rcx
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	je	.LBB62_23
# %bb.22:                               # %if.then13.i.i28
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9477, 180(%rsp)        # imm = 0x2505
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	5088(%rdx), %rdi
	movl	$9482, 180(%rsp)        # imm = 0x250A
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	*%rcx
.LBB62_23:                              # %if.end17.i.i30
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	3168(%rax), %rcx
	movl	$9488, 180(%rsp)        # imm = 0x2510
	cmpq	$0, %rcx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	jne	.LBB62_25
# %bb.24:                               # %if.end17.if.end23_crit_edge.i.i32
	movq	168(%rsp), %rax         # 8-byte Reload
	addq	$5088, %rax             # imm = 0x13E0
	movq	%rax, 16(%rsp)          # 8-byte Spill
	jmp	.LBB62_26
.LBB62_25:                              # %if.then19.i.i34
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rcx
	movl	$9491, 180(%rsp)        # imm = 0x2513
	movq	168(%rsp), %rdx         # 8-byte Reload
	addq	$5088, %rdx             # imm = 0x13E0
	movq	168(%rsp), %rsi         # 8-byte Reload
	movq	5088(%rsi), %rdi
	movl	$9495, 180(%rsp)        # imm = 0x2517
	movq	24(%rsp), %rsi          # 8-byte Reload
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	callq	*%rcx
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, 16(%rsp)          # 8-byte Spill
.LBB62_26:                              # %if.end23.i.i36
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$9496, 180(%rsp)        # imm = 0x2518
	movq	(%rax), %rdi
	movl	$9497, 180(%rsp)        # imm = 0x2519
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rsi
	movl	$9511, 180(%rsp)        # imm = 0x2527
	callq	*%rdx
.LBB62_27:                              # %BZ2_bzReadClose.exit
	movq	168(%rsp), %rdi         # 8-byte Reload
	callq	free
.LBB62_28:                              # %cleanup
	addq	$184, %rsp
	retq
.Lfunc_end62:
	.size	BZ2_bzclose, .Lfunc_end62-BZ2_bzclose
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzerror             # -- Begin function BZ2_bzerror
	.p2align	4, 0x90
	.type	BZ2_bzerror,@function
BZ2_bzerror:                            # @BZ2_bzerror
	.cfi_startproc
# %bb.0:                                # %entry
	xorl	%eax, %eax
	movl	$9999, -4(%rsp)         # imm = 0x270F
	movl	5096(%rdi), %ecx
	movl	$9513, -4(%rsp)         # imm = 0x2529
	cmpl	$0, %ecx
	movl	%eax, %edx
	cmovll	%ecx, %edx
	movl	%edx, (%rsi)
	movl	$9515, -4(%rsp)         # imm = 0x252B
	subl	%edx, %eax
	movslq	%eax, %rsi
	movq	bzerrorstrings(,%rsi,8), %rax
	movl	$9525, -4(%rsp)         # imm = 0x2535
	retq
.Lfunc_end63:
	.size	BZ2_bzerror, .Lfunc_end63-BZ2_bzerror
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bsInitWrite         # -- Begin function BZ2_bsInitWrite
	.p2align	4, 0x90
	.type	BZ2_bsInitWrite,@function
BZ2_bsInitWrite:                        # @BZ2_bsInitWrite
	.cfi_startproc
# %bb.0:                                # %entry
	movl	$9999, -4(%rsp)         # imm = 0x270F
	movl	$0, 644(%rdi)
	movl	$9527, -4(%rsp)         # imm = 0x2537
	movl	$0, 640(%rdi)
	movl	$9535, -4(%rsp)         # imm = 0x253F
	retq
.Lfunc_end64:
	.size	BZ2_bsInitWrite, .Lfunc_end64-BZ2_bsInitWrite
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4               # -- Begin function BZ2_compressBlock
.LCPI65_0:
	.byte	0                       # 0x0
	.byte	1                       # 0x1
	.byte	2                       # 0x2
	.byte	3                       # 0x3
	.byte	4                       # 0x4
	.byte	5                       # 0x5
	.byte	6                       # 0x6
	.byte	7                       # 0x7
	.byte	8                       # 0x8
	.byte	9                       # 0x9
	.byte	10                      # 0xa
	.byte	11                      # 0xb
	.byte	12                      # 0xc
	.byte	13                      # 0xd
	.byte	14                      # 0xe
	.byte	15                      # 0xf
.LCPI65_1:
	.zero	16,16
.LCPI65_2:
	.zero	16,32
.LCPI65_3:
	.zero	16,48
.LCPI65_4:
	.zero	16,64
.LCPI65_5:
	.zero	16,80
.LCPI65_6:
	.zero	16,96
.LCPI65_7:
	.zero	16,112
.LCPI65_8:
	.zero	16,128
	.text
	.globl	BZ2_compressBlock
	.p2align	4, 0x90
	.type	BZ2_compressBlock,@function
BZ2_compressBlock:                      # @BZ2_compressBlock
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$1560, %rsp             # imm = 0x618
	.cfi_def_cfa_offset 1616
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movb	%sil, %al
	movl	$9999, 1556(%rsp)       # imm = 0x270F
	movq	%rdi, %rcx
	addq	$108, %rcx
	movl	108(%rdi), %esi
	movl	$9541, 1556(%rsp)       # imm = 0x2545
	cmpl	$0, %esi
	movb	%al, 1295(%rsp)         # 1-byte Spill
	movq	%rdi, 1280(%rsp)        # 8-byte Spill
	movq	%rcx, 1272(%rsp)        # 8-byte Spill
	movl	%esi, 1268(%rsp)        # 4-byte Spill
	jg	.LBB65_2
# %bb.1:                                # %entry.if.end15_crit_edge
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$660, %rax              # imm = 0x294
	movl	1268(%rsp), %ecx        # 4-byte Reload
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	movl	%ecx, 1252(%rsp)        # 4-byte Spill
	jmp	.LBB65_7
.LBB65_2:                               # %if.then
	movq	1280(%rsp), %rax        # 8-byte Reload
	movl	648(%rax), %ecx
	movl	$9543, 1556(%rsp)       # imm = 0x2547
	xorl	$-1, %ecx
	movl	%ecx, 648(%rax)
	movl	$9545, 1556(%rsp)       # imm = 0x2549
	movl	652(%rax), %edx
	movl	$9550, 1556(%rsp)       # imm = 0x254E
	movl	%edx, %esi
	shll	$1, %esi
	shrl	$31, %edx
	orl	%edx, %esi
	xorl	%ecx, %esi
	movl	%esi, 652(%rax)
	movl	$9552, 1556(%rsp)       # imm = 0x2550
	addq	$660, %rax              # imm = 0x294
	movq	1280(%rsp), %rdi        # 8-byte Reload
	movl	660(%rdi), %edx
	movl	$9556, 1556(%rsp)       # imm = 0x2554
	cmpl	$1, %edx
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	movl	%ecx, 1236(%rsp)        # 4-byte Spill
	movl	%esi, 1232(%rsp)        # 4-byte Spill
	movl	%edx, 1228(%rsp)        # 4-byte Spill
	jle	.LBB65_4
# %bb.3:                                # %if.then7
	movq	1280(%rsp), %rax        # 8-byte Reload
	movl	$0, 116(%rax)
	movl	$9559, 1556(%rsp)       # imm = 0x2557
.LBB65_4:                               # %if.end
	movq	1280(%rsp), %rax        # 8-byte Reload
	movl	656(%rax), %ecx
	movl	$9562, 1556(%rsp)       # imm = 0x255A
	cmpl	$1, %ecx
	jle	.LBB65_6
# %bb.5:                                # %if.then9
	movabsq	$.L.str.66, %rsi
	movq	stderr, %rdi
	movl	$9567, 1556(%rsp)       # imm = 0x255F
	movl	1228(%rsp), %edx        # 4-byte Reload
	movl	1236(%rsp), %ecx        # 4-byte Reload
	movl	1232(%rsp), %r8d        # 4-byte Reload
	movl	1268(%rsp), %r9d        # 4-byte Reload
	movb	$0, %al
	callq	fprintf
	movl	%eax, 1224(%rsp)        # 4-byte Spill
.LBB65_6:                               # %if.end14
	movq	1280(%rsp), %rdi        # 8-byte Reload
	callq	BZ2_blockSort
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$9573, 1556(%rsp)       # imm = 0x2565
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1256(%rsp)        # 8-byte Spill
	movl	%eax, 1252(%rsp)        # 4-byte Spill
.LBB65_7:                               # %if.end15
	movl	1252(%rsp), %eax        # 4-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	32(%rdx), %rsi
	movl	$9577, 1556(%rsp)       # imm = 0x2569
	movslq	%eax, %rdi
	addq	%rdi, %rsi
	addq	$80, %rdx
	movq	1280(%rsp), %rdi        # 8-byte Reload
	movq	%rsi, 80(%rdi)
	movl	$9578, 1556(%rsp)       # imm = 0x256A
	movl	(%rcx), %r8d
	movl	$9583, 1556(%rsp)       # imm = 0x256F
	cmpl	$1, %r8d
	movq	%rsi, 1216(%rsp)        # 8-byte Spill
	movq	%rdx, 1208(%rsp)        # 8-byte Spill
	movl	%eax, 1204(%rsp)        # 4-byte Spill
	jne	.LBB65_18
# %bb.8:                                # %while.body.lr.ph.i.i248
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$644, %rax              # imm = 0x284
	movq	1280(%rsp), %rcx        # 8-byte Reload
	addq	$640, %rcx              # imm = 0x280
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movl	$1107296256, 640(%rdx)  # imm = 0x42000000
	movl	$9585, 1556(%rsp)       # imm = 0x2571
	movl	$8, 644(%rdx)
	movl	$9587, 1556(%rsp)       # imm = 0x2573
	addq	$116, %rdx
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movl	116(%rsi), %edi
	movl	$9590, 1556(%rsp)       # imm = 0x2576
	movslq	%edi, %r8
	movq	1216(%rsp), %r9         # 8-byte Reload
	movb	$66, (%r9,%r8)
	movl	$9592, 1556(%rsp)       # imm = 0x2578
	movl	116(%rsi), %edi
	movl	$9594, 1556(%rsp)       # imm = 0x257A
	addl	$1, %edi
	movl	%edi, 116(%rsi)
	movl	$9595, 1556(%rsp)       # imm = 0x257B
	movl	640(%rsi), %r10d
	movl	$9597, 1556(%rsp)       # imm = 0x257D
	shll	$8, %r10d
	movl	%r10d, 640(%rsi)
	movl	$9598, 1556(%rsp)       # imm = 0x257E
	movl	644(%rsi), %r11d
	movl	$9600, 1556(%rsp)       # imm = 0x2580
	movl	%r11d, %ebx
	addl	$-8, %ebx
	movl	%ebx, 644(%rsi)
	movl	$9608, 1556(%rsp)       # imm = 0x2588
	cmpl	$15, %r11d
	movl	%edi, %ebx
	movl	%r10d, %ebp
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movq	%rcx, 1184(%rsp)        # 8-byte Spill
	movq	%rdx, 1176(%rsp)        # 8-byte Spill
	movl	%edi, 1172(%rsp)        # 4-byte Spill
	movl	%r10d, 1168(%rsp)       # 4-byte Spill
	movl	%ebp, 1164(%rsp)        # 4-byte Spill
	movl	%ebx, 1160(%rsp)        # 4-byte Spill
	movl	%r11d, 1156(%rsp)       # 4-byte Spill
	jle	.LBB65_11
# %bb.9:                                # %while.body.i.i257.while.body.i.i257_crit_edge.preheader
	movl	1168(%rsp), %eax        # 4-byte Reload
	movl	1172(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 1152(%rsp)        # 4-byte Spill
	movl	%ecx, 1148(%rsp)        # 4-byte Spill
	jmp	.LBB65_10
.LBB65_10:                              # %while.body.i.i257.while.body.i.i257_crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movl	1148(%rsp), %eax        # 4-byte Reload
	movl	1152(%rsp), %ecx        # 4-byte Reload
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$9613, 1556(%rsp)       # imm = 0x258D
	shrl	$24, %ecx
	movb	%cl, %dil
	movslq	%eax, %r8
	movb	%dil, (%rsi,%r8)
	movl	$9614, 1556(%rsp)       # imm = 0x258E
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %eax
	movl	$9615, 1556(%rsp)       # imm = 0x258F
	addl	$1, %eax
	movl	%eax, (%rsi)
	movl	$9616, 1556(%rsp)       # imm = 0x2590
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$9617, 1556(%rsp)       # imm = 0x2591
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$9618, 1556(%rsp)       # imm = 0x2592
	movq	1192(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$9620, 1556(%rsp)       # imm = 0x2594
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$9629, 1556(%rsp)       # imm = 0x259D
	cmpl	$15, %r10d
	movl	%ecx, %r11d
	movl	%eax, %ebx
	movl	%ebx, 1148(%rsp)        # 4-byte Spill
	movl	%eax, 1160(%rsp)        # 4-byte Spill
	movl	%ecx, 1164(%rsp)        # 4-byte Spill
	movl	%r11d, 1152(%rsp)       # 4-byte Spill
	movl	%r10d, 1156(%rsp)       # 4-byte Spill
	jg	.LBB65_10
.LBB65_11:                              # %bsPutUChar.exit263
	movl	1156(%rsp), %eax        # 4-byte Reload
	movl	1164(%rsp), %ecx        # 4-byte Reload
	movl	1160(%rsp), %edx        # 4-byte Reload
	movl	$90, %esi
	movl	$32, %edi
	subl	%eax, %edi
	movl	%ecx, 1144(%rsp)        # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %esi
	movl	1144(%rsp), %edi        # 4-byte Reload
	orl	%edi, %esi
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	%esi, (%r8)
	movl	$9630, 1556(%rsp)       # imm = 0x259E
	movq	1192(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$9640, 1556(%rsp)       # imm = 0x25A8
	cmpl	$7, %eax
	movl	%edx, %edi
	movl	%esi, %r10d
	movl	%r10d, 1140(%rsp)       # 4-byte Spill
	movl	%edx, 1136(%rsp)        # 4-byte Spill
	movl	%esi, 1132(%rsp)        # 4-byte Spill
	movl	%edi, 1128(%rsp)        # 4-byte Spill
	movl	%eax, 1124(%rsp)        # 4-byte Spill
	jle	.LBB65_14
# %bb.12:                               # %while.body.i.i327.preheader
	movl	1136(%rsp), %eax        # 4-byte Reload
	movl	1132(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 1120(%rsp)        # 4-byte Spill
	movl	%ecx, 1116(%rsp)        # 4-byte Spill
	jmp	.LBB65_13
.LBB65_13:                              # %while.body.i.i327
                                        # =>This Inner Loop Header: Depth=1
	movl	1116(%rsp), %eax        # 4-byte Reload
	movl	1120(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$9643, 1556(%rsp)       # imm = 0x25AB
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$9644, 1556(%rsp)       # imm = 0x25AC
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$9645, 1556(%rsp)       # imm = 0x25AD
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$9646, 1556(%rsp)       # imm = 0x25AE
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$9647, 1556(%rsp)       # imm = 0x25AF
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$9648, 1556(%rsp)       # imm = 0x25B0
	movq	1192(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$9650, 1556(%rsp)       # imm = 0x25B2
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$9659, 1556(%rsp)       # imm = 0x25BB
	cmpl	$15, %r10d
	movl	%eax, %r10d
	movl	%ecx, %ebx
	movl	%ebx, 1116(%rsp)        # 4-byte Spill
	movl	%eax, 1128(%rsp)        # 4-byte Spill
	movl	%ecx, 1140(%rsp)        # 4-byte Spill
	movl	%r10d, 1120(%rsp)       # 4-byte Spill
	movl	%r11d, 1124(%rsp)       # 4-byte Spill
	jg	.LBB65_13
.LBB65_14:                              # %bsPutUChar.exit333
	movl	1124(%rsp), %eax        # 4-byte Reload
	movl	1140(%rsp), %ecx        # 4-byte Reload
	movl	1128(%rsp), %edx        # 4-byte Reload
	movl	$104, %esi
	movl	$24, %edi
	subl	%eax, %edi
	movl	%ecx, 1112(%rsp)        # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %esi
	movl	1112(%rsp), %edi        # 4-byte Reload
	orl	%edi, %esi
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	%esi, (%r8)
	movl	$9661, 1556(%rsp)       # imm = 0x25BD
	movl	%eax, %edi
	addl	$8, %edi
	movq	1192(%rsp), %r9         # 8-byte Reload
	movl	%edi, (%r9)
	movl	$9663, 1556(%rsp)       # imm = 0x25BF
	movq	1280(%rsp), %r10        # 8-byte Reload
	movl	664(%r10), %r11d
	movl	$9675, 1556(%rsp)       # imm = 0x25CB
	addl	$48, %r11d
	andl	$255, %r11d
	cmpl	$-1, %eax
	movl	%esi, %eax
	movl	%r11d, 1108(%rsp)       # 4-byte Spill
	movl	%edx, 1104(%rsp)        # 4-byte Spill
	movl	%esi, 1100(%rsp)        # 4-byte Spill
	movl	%eax, 1096(%rsp)        # 4-byte Spill
	movl	%edi, 1092(%rsp)        # 4-byte Spill
	jle	.LBB65_17
# %bb.15:                               # %while.body.i.i503.preheader
	movl	1104(%rsp), %eax        # 4-byte Reload
	movl	1100(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 1088(%rsp)        # 4-byte Spill
	movl	%ecx, 1084(%rsp)        # 4-byte Spill
	jmp	.LBB65_16
.LBB65_16:                              # %while.body.i.i503
                                        # =>This Inner Loop Header: Depth=1
	movl	1084(%rsp), %eax        # 4-byte Reload
	movl	1088(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$9678, 1556(%rsp)       # imm = 0x25CE
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$9679, 1556(%rsp)       # imm = 0x25CF
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$9680, 1556(%rsp)       # imm = 0x25D0
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$9681, 1556(%rsp)       # imm = 0x25D1
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$9682, 1556(%rsp)       # imm = 0x25D2
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$9683, 1556(%rsp)       # imm = 0x25D3
	movq	1192(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$9685, 1556(%rsp)       # imm = 0x25D5
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$9693, 1556(%rsp)       # imm = 0x25DD
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1096(%rsp)        # 4-byte Spill
	movl	%r10d, 1084(%rsp)       # 4-byte Spill
	movl	%eax, 1088(%rsp)        # 4-byte Spill
	movl	%r11d, 1092(%rsp)       # 4-byte Spill
	jg	.LBB65_16
.LBB65_17:                              # %bsPutUChar.exit509
	movl	1092(%rsp), %eax        # 4-byte Reload
	movl	1096(%rsp), %ecx        # 4-byte Reload
	movl	$24, %edx
	subl	%eax, %edx
	movl	%ecx, 1080(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1108(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1080(%rsp), %esi        # 4-byte Reload
	orl	%esi, %edx
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$9695, 1556(%rsp)       # imm = 0x25DF
	addl	$8, %eax
	movq	1192(%rsp), %r8         # 8-byte Reload
	movl	%eax, (%r8)
	movl	$9696, 1556(%rsp)       # imm = 0x25E0
	movq	1272(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %eax
	movl	$9702, 1556(%rsp)       # imm = 0x25E6
	movl	%eax, 1204(%rsp)        # 4-byte Spill
.LBB65_18:                              # %if.end20
	movl	1204(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB65_87
# %bb.19:                               # %if.then24
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$644, %rax              # imm = 0x284
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	644(%rcx), %edx
	movl	$9706, 1556(%rsp)       # imm = 0x25EA
	addq	$640, %rcx              # imm = 0x280
	cmpl	$7, %edx
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	movq	%rcx, 1064(%rsp)        # 8-byte Spill
	movl	%edx, 1060(%rsp)        # 4-byte Spill
	jg	.LBB65_21
# %bb.20:                               # %entry.while.end_crit_edge.i.i463
	movq	1064(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$9709, 1556(%rsp)       # imm = 0x25ED
	movl	1060(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1056(%rsp)        # 4-byte Spill
	movl	%edx, 1052(%rsp)        # 4-byte Spill
	jmp	.LBB65_23
.LBB65_21:                              # %while.body.lr.ph.i.i468
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$116, %rax
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$9710, 1556(%rsp)       # imm = 0x25EE
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movl	116(%rsi), %edi
	movl	$9718, 1556(%rsp)       # imm = 0x25F6
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	movl	%edi, 1036(%rsp)        # 4-byte Spill
	movl	%edx, 1032(%rsp)        # 4-byte Spill
.LBB65_22:                              # %while.body.i.i477
                                        # =>This Inner Loop Header: Depth=1
	movl	1032(%rsp), %eax        # 4-byte Reload
	movl	1036(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$9721, 1556(%rsp)       # imm = 0x25F9
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$9722, 1556(%rsp)       # imm = 0x25FA
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$9723, 1556(%rsp)       # imm = 0x25FB
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$9724, 1556(%rsp)       # imm = 0x25FC
	movq	1064(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$9725, 1556(%rsp)       # imm = 0x25FD
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$9726, 1556(%rsp)       # imm = 0x25FE
	movq	1072(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$9728, 1556(%rsp)       # imm = 0x2600
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$9736, 1556(%rsp)       # imm = 0x2608
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1056(%rsp)        # 4-byte Spill
	movl	%r10d, 1032(%rsp)       # 4-byte Spill
	movl	%eax, 1036(%rsp)        # 4-byte Spill
	movl	%r11d, 1052(%rsp)       # 4-byte Spill
	jg	.LBB65_22
.LBB65_23:                              # %bsPutUChar.exit483
	movl	1052(%rsp), %eax        # 4-byte Reload
	movl	1056(%rsp), %ecx        # 4-byte Reload
	movl	$49, %edx
	movl	$24, %esi
	subl	%eax, %esi
	movl	%ecx, 1028(%rsp)        # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	1028(%rsp), %esi        # 4-byte Reload
	orl	%esi, %edx
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$9738, 1556(%rsp)       # imm = 0x260A
	movl	%eax, %esi
	addl	$8, %esi
	movq	1072(%rsp), %r8         # 8-byte Reload
	movl	%esi, (%r8)
	movl	$9742, 1556(%rsp)       # imm = 0x260E
	cmpl	$-1, %eax
	movl	%edx, %eax
	movl	%edx, 1024(%rsp)        # 4-byte Spill
	movl	%eax, 1020(%rsp)        # 4-byte Spill
	movl	%esi, 1016(%rsp)        # 4-byte Spill
	jle	.LBB65_26
# %bb.24:                               # %while.body.lr.ph.i.i443
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$116, %rax
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	116(%rcx), %edx
	movl	$9750, 1556(%rsp)       # imm = 0x2616
	movl	1024(%rsp), %esi        # 4-byte Reload
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	movl	%edx, 1004(%rsp)        # 4-byte Spill
	movl	%esi, 1000(%rsp)        # 4-byte Spill
.LBB65_25:                              # %while.body.i.i452
                                        # =>This Inner Loop Header: Depth=1
	movl	1000(%rsp), %eax        # 4-byte Reload
	movl	1004(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$9753, 1556(%rsp)       # imm = 0x2619
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$9754, 1556(%rsp)       # imm = 0x261A
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$9755, 1556(%rsp)       # imm = 0x261B
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$9756, 1556(%rsp)       # imm = 0x261C
	movq	1064(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$9757, 1556(%rsp)       # imm = 0x261D
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$9758, 1556(%rsp)       # imm = 0x261E
	movq	1072(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$9760, 1556(%rsp)       # imm = 0x2620
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$9768, 1556(%rsp)       # imm = 0x2628
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1020(%rsp)        # 4-byte Spill
	movl	%r10d, 1000(%rsp)       # 4-byte Spill
	movl	%eax, 1004(%rsp)        # 4-byte Spill
	movl	%r11d, 1016(%rsp)       # 4-byte Spill
	jg	.LBB65_25
.LBB65_26:                              # %bsPutUChar.exit458
	movl	1016(%rsp), %eax        # 4-byte Reload
	movl	1020(%rsp), %ecx        # 4-byte Reload
	movl	$65, %edx
	movl	$24, %esi
	subl	%eax, %esi
	movl	%ecx, 996(%rsp)         # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	996(%rsp), %esi         # 4-byte Reload
	orl	%esi, %edx
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$9770, 1556(%rsp)       # imm = 0x262A
	movl	%eax, %esi
	addl	$8, %esi
	movq	1072(%rsp), %r8         # 8-byte Reload
	movl	%esi, (%r8)
	movl	$9774, 1556(%rsp)       # imm = 0x262E
	cmpl	$-1, %eax
	movl	%edx, %eax
	movl	%edx, 992(%rsp)         # 4-byte Spill
	movl	%eax, 988(%rsp)         # 4-byte Spill
	movl	%esi, 984(%rsp)         # 4-byte Spill
	jle	.LBB65_29
# %bb.27:                               # %while.body.lr.ph.i.i418
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$116, %rax
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	116(%rcx), %edx
	movl	$9782, 1556(%rsp)       # imm = 0x2636
	movl	992(%rsp), %esi         # 4-byte Reload
	movq	%rax, 976(%rsp)         # 8-byte Spill
	movl	%edx, 972(%rsp)         # 4-byte Spill
	movl	%esi, 968(%rsp)         # 4-byte Spill
.LBB65_28:                              # %while.body.i.i427
                                        # =>This Inner Loop Header: Depth=1
	movl	968(%rsp), %eax         # 4-byte Reload
	movl	972(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$9785, 1556(%rsp)       # imm = 0x2639
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$9786, 1556(%rsp)       # imm = 0x263A
	movq	976(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movl	$9787, 1556(%rsp)       # imm = 0x263B
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$9788, 1556(%rsp)       # imm = 0x263C
	movq	1064(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$9789, 1556(%rsp)       # imm = 0x263D
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$9790, 1556(%rsp)       # imm = 0x263E
	movq	1072(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$9792, 1556(%rsp)       # imm = 0x2640
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$9800, 1556(%rsp)       # imm = 0x2648
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 988(%rsp)         # 4-byte Spill
	movl	%r10d, 968(%rsp)        # 4-byte Spill
	movl	%eax, 972(%rsp)         # 4-byte Spill
	movl	%r11d, 984(%rsp)        # 4-byte Spill
	jg	.LBB65_28
.LBB65_29:                              # %bsPutUChar.exit433
	movl	984(%rsp), %eax         # 4-byte Reload
	movl	988(%rsp), %ecx         # 4-byte Reload
	movl	$89, %edx
	movl	$24, %esi
	subl	%eax, %esi
	movl	%ecx, 964(%rsp)         # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	964(%rsp), %esi         # 4-byte Reload
	orl	%esi, %edx
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$9802, 1556(%rsp)       # imm = 0x264A
	movl	%eax, %esi
	addl	$8, %esi
	movq	1072(%rsp), %r8         # 8-byte Reload
	movl	%esi, (%r8)
	movl	$9806, 1556(%rsp)       # imm = 0x264E
	cmpl	$-1, %eax
	movl	%edx, %eax
	movl	%edx, 960(%rsp)         # 4-byte Spill
	movl	%eax, 956(%rsp)         # 4-byte Spill
	movl	%esi, 952(%rsp)         # 4-byte Spill
	jle	.LBB65_32
# %bb.30:                               # %while.body.lr.ph.i.i393
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$116, %rax
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	116(%rcx), %edx
	movl	$9814, 1556(%rsp)       # imm = 0x2656
	movl	960(%rsp), %esi         # 4-byte Reload
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movl	%edx, 940(%rsp)         # 4-byte Spill
	movl	%esi, 936(%rsp)         # 4-byte Spill
.LBB65_31:                              # %while.body.i.i402
                                        # =>This Inner Loop Header: Depth=1
	movl	936(%rsp), %eax         # 4-byte Reload
	movl	940(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$9817, 1556(%rsp)       # imm = 0x2659
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$9818, 1556(%rsp)       # imm = 0x265A
	movq	944(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movl	$9819, 1556(%rsp)       # imm = 0x265B
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$9820, 1556(%rsp)       # imm = 0x265C
	movq	1064(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$9821, 1556(%rsp)       # imm = 0x265D
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$9822, 1556(%rsp)       # imm = 0x265E
	movq	1072(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$9824, 1556(%rsp)       # imm = 0x2660
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$9832, 1556(%rsp)       # imm = 0x2668
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 956(%rsp)         # 4-byte Spill
	movl	%r10d, 936(%rsp)        # 4-byte Spill
	movl	%eax, 940(%rsp)         # 4-byte Spill
	movl	%r11d, 952(%rsp)        # 4-byte Spill
	jg	.LBB65_31
.LBB65_32:                              # %bsPutUChar.exit408
	movl	952(%rsp), %eax         # 4-byte Reload
	movl	956(%rsp), %ecx         # 4-byte Reload
	movl	$38, %edx
	movl	$24, %esi
	subl	%eax, %esi
	movl	%ecx, 932(%rsp)         # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	932(%rsp), %esi         # 4-byte Reload
	orl	%esi, %edx
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$9834, 1556(%rsp)       # imm = 0x266A
	movl	%eax, %esi
	addl	$8, %esi
	movq	1072(%rsp), %r8         # 8-byte Reload
	movl	%esi, (%r8)
	movl	$9838, 1556(%rsp)       # imm = 0x266E
	cmpl	$-1, %eax
	movl	%edx, %eax
	movl	%edx, 928(%rsp)         # 4-byte Spill
	movl	%eax, 924(%rsp)         # 4-byte Spill
	movl	%esi, 920(%rsp)         # 4-byte Spill
	jle	.LBB65_35
# %bb.33:                               # %while.body.lr.ph.i.i368
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$116, %rax
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	116(%rcx), %edx
	movl	$9846, 1556(%rsp)       # imm = 0x2676
	movl	928(%rsp), %esi         # 4-byte Reload
	movq	%rax, 912(%rsp)         # 8-byte Spill
	movl	%edx, 908(%rsp)         # 4-byte Spill
	movl	%esi, 904(%rsp)         # 4-byte Spill
.LBB65_34:                              # %while.body.i.i377
                                        # =>This Inner Loop Header: Depth=1
	movl	904(%rsp), %eax         # 4-byte Reload
	movl	908(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$9849, 1556(%rsp)       # imm = 0x2679
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$9850, 1556(%rsp)       # imm = 0x267A
	movq	912(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movl	$9851, 1556(%rsp)       # imm = 0x267B
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$9852, 1556(%rsp)       # imm = 0x267C
	movq	1064(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$9853, 1556(%rsp)       # imm = 0x267D
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$9854, 1556(%rsp)       # imm = 0x267E
	movq	1072(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$9856, 1556(%rsp)       # imm = 0x2680
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$9864, 1556(%rsp)       # imm = 0x2688
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 924(%rsp)         # 4-byte Spill
	movl	%r10d, 904(%rsp)        # 4-byte Spill
	movl	%eax, 908(%rsp)         # 4-byte Spill
	movl	%r11d, 920(%rsp)        # 4-byte Spill
	jg	.LBB65_34
.LBB65_35:                              # %bsPutUChar.exit383
	movl	920(%rsp), %eax         # 4-byte Reload
	movl	924(%rsp), %ecx         # 4-byte Reload
	movl	$83, %edx
	movl	$24, %esi
	subl	%eax, %esi
	movl	%ecx, 900(%rsp)         # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	900(%rsp), %esi         # 4-byte Reload
	orl	%esi, %edx
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$9866, 1556(%rsp)       # imm = 0x268A
	movl	%eax, %esi
	addl	$8, %esi
	movq	1072(%rsp), %r8         # 8-byte Reload
	movl	%esi, (%r8)
	movl	$9870, 1556(%rsp)       # imm = 0x268E
	cmpl	$-1, %eax
	movl	%edx, %eax
	movl	%edx, 896(%rsp)         # 4-byte Spill
	movl	%eax, 892(%rsp)         # 4-byte Spill
	movl	%esi, 888(%rsp)         # 4-byte Spill
	jle	.LBB65_38
# %bb.36:                               # %while.body.lr.ph.i.i343
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$116, %rax
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	116(%rcx), %edx
	movl	$9878, 1556(%rsp)       # imm = 0x2696
	movl	896(%rsp), %esi         # 4-byte Reload
	movq	%rax, 880(%rsp)         # 8-byte Spill
	movl	%edx, 876(%rsp)         # 4-byte Spill
	movl	%esi, 872(%rsp)         # 4-byte Spill
.LBB65_37:                              # %while.body.i.i352
                                        # =>This Inner Loop Header: Depth=1
	movl	872(%rsp), %eax         # 4-byte Reload
	movl	876(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$9881, 1556(%rsp)       # imm = 0x2699
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$9882, 1556(%rsp)       # imm = 0x269A
	movq	880(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movl	$9883, 1556(%rsp)       # imm = 0x269B
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$9884, 1556(%rsp)       # imm = 0x269C
	movq	1064(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$9885, 1556(%rsp)       # imm = 0x269D
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$9886, 1556(%rsp)       # imm = 0x269E
	movq	1072(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$9888, 1556(%rsp)       # imm = 0x26A0
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$9896, 1556(%rsp)       # imm = 0x26A8
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 892(%rsp)         # 4-byte Spill
	movl	%r10d, 872(%rsp)        # 4-byte Spill
	movl	%eax, 876(%rsp)         # 4-byte Spill
	movl	%r11d, 888(%rsp)        # 4-byte Spill
	jg	.LBB65_37
.LBB65_38:                              # %bsPutUChar.exit358
	movl	888(%rsp), %eax         # 4-byte Reload
	movl	892(%rsp), %ecx         # 4-byte Reload
	movl	$89, %edx
	movl	$24, %esi
	subl	%eax, %esi
	movl	%ecx, 868(%rsp)         # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	868(%rsp), %esi         # 4-byte Reload
	orl	%esi, %edx
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$9898, 1556(%rsp)       # imm = 0x26AA
	addl	$8, %eax
	movq	1072(%rsp), %r8         # 8-byte Reload
	movl	%eax, (%r8)
	movl	$9900, 1556(%rsp)       # imm = 0x26AC
	movq	1280(%rsp), %r9         # 8-byte Reload
	movl	648(%r9), %esi
	movl	$9904, 1556(%rsp)       # imm = 0x26B0
	movq	%r9, %rdi
	callq	bsPutUInt32
	movq	1072(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$9907, 1556(%rsp)       # imm = 0x26B3
	cmpl	$7, %eax
	movl	%eax, 864(%rsp)         # 4-byte Spill
	jg	.LBB65_40
# %bb.39:                               # %entry.while.end_crit_edge.i290
	movq	1064(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$9910, 1556(%rsp)       # imm = 0x26B6
	movl	864(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 860(%rsp)         # 4-byte Spill
	movl	%edx, 856(%rsp)         # 4-byte Spill
	jmp	.LBB65_42
.LBB65_40:                              # %while.body.lr.ph.i295
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$116, %rax
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$9911, 1556(%rsp)       # imm = 0x26B7
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movl	116(%rsi), %edi
	movl	$9919, 1556(%rsp)       # imm = 0x26BF
	movq	%rax, 848(%rsp)         # 8-byte Spill
	movl	%edi, 844(%rsp)         # 4-byte Spill
	movl	%edx, 840(%rsp)         # 4-byte Spill
.LBB65_41:                              # %while.body.i304
                                        # =>This Inner Loop Header: Depth=1
	movl	840(%rsp), %eax         # 4-byte Reload
	movl	844(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$9922, 1556(%rsp)       # imm = 0x26C2
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$9923, 1556(%rsp)       # imm = 0x26C3
	movq	848(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movl	$9924, 1556(%rsp)       # imm = 0x26C4
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$9925, 1556(%rsp)       # imm = 0x26C5
	movq	1064(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$9926, 1556(%rsp)       # imm = 0x26C6
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$9927, 1556(%rsp)       # imm = 0x26C7
	movq	1072(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$9929, 1556(%rsp)       # imm = 0x26C9
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$9934, 1556(%rsp)       # imm = 0x26CE
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 860(%rsp)         # 4-byte Spill
	movl	%r10d, 840(%rsp)        # 4-byte Spill
	movl	%eax, 844(%rsp)         # 4-byte Spill
	movl	%r11d, 856(%rsp)        # 4-byte Spill
	jg	.LBB65_41
.LBB65_42:                              # %bsW.exit308
	movl	856(%rsp), %eax         # 4-byte Reload
	movl	860(%rsp), %ecx         # 4-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movl	%ecx, (%rdx)
	movl	$9936, 1556(%rsp)       # imm = 0x26D0
	movl	%eax, %esi
	addl	$1, %esi
	movq	1072(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi)
	movl	$9938, 1556(%rsp)       # imm = 0x26D2
	movq	1280(%rsp), %r8         # 8-byte Reload
	movl	48(%r8), %r9d
	movl	$9942, 1556(%rsp)       # imm = 0x26D6
	cmpl	$6, %eax
	movl	%ecx, %eax
	movl	%r9d, 836(%rsp)         # 4-byte Spill
	movl	%ecx, 832(%rsp)         # 4-byte Spill
	movl	%eax, 828(%rsp)         # 4-byte Spill
	movl	%esi, 824(%rsp)         # 4-byte Spill
	jle	.LBB65_45
# %bb.43:                               # %while.body.lr.ph.i275
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$116, %rax
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	116(%rcx), %edx
	movl	$9950, 1556(%rsp)       # imm = 0x26DE
	movl	832(%rsp), %esi         # 4-byte Reload
	movq	%rax, 816(%rsp)         # 8-byte Spill
	movl	%edx, 812(%rsp)         # 4-byte Spill
	movl	%esi, 808(%rsp)         # 4-byte Spill
.LBB65_44:                              # %while.body.i284
                                        # =>This Inner Loop Header: Depth=1
	movl	808(%rsp), %eax         # 4-byte Reload
	movl	812(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$9953, 1556(%rsp)       # imm = 0x26E1
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$9954, 1556(%rsp)       # imm = 0x26E2
	movq	816(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movl	$9955, 1556(%rsp)       # imm = 0x26E3
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$9956, 1556(%rsp)       # imm = 0x26E4
	movq	1064(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$9957, 1556(%rsp)       # imm = 0x26E5
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$9958, 1556(%rsp)       # imm = 0x26E6
	movq	1072(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$9960, 1556(%rsp)       # imm = 0x26E8
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$9968, 1556(%rsp)       # imm = 0x26F0
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 828(%rsp)         # 4-byte Spill
	movl	%r10d, 808(%rsp)        # 4-byte Spill
	movl	%eax, 812(%rsp)         # 4-byte Spill
	movl	%r11d, 824(%rsp)        # 4-byte Spill
	jg	.LBB65_44
.LBB65_45:                              # %bsW.exit
	movl	824(%rsp), %eax         # 4-byte Reload
	movl	828(%rsp), %ecx         # 4-byte Reload
	xorl	%edx, %edx
	xorl	%esi, %esi
	movl	%esi, %edi
	leaq	1296(%rsp), %r8
	movl	$8, %esi
	subl	%eax, %esi
	movl	%ecx, 804(%rsp)         # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	movl	836(%rsp), %esi         # 4-byte Reload
	shll	%cl, %esi
	movl	804(%rsp), %r9d         # 4-byte Reload
	orl	%r9d, %esi
	movq	1064(%rsp), %r10        # 8-byte Reload
	movl	%esi, (%r10)
	movl	$9970, 1556(%rsp)       # imm = 0x26F2
	addl	$24, %eax
	movq	1072(%rsp), %r11        # 8-byte Reload
	movl	%eax, (%r11)
	movl	$9974, 1556(%rsp)       # imm = 0x26F6
	movq	1280(%rsp), %rbx        # 8-byte Reload
	movq	56(%rbx), %r14
	movl	$9976, 1556(%rsp)       # imm = 0x26F8
	movq	64(%rbx), %r15
	movl	$9978, 1556(%rsp)       # imm = 0x26FA
	movq	72(%rbx), %r12
	movl	$9980, 1556(%rsp)       # imm = 0x26FC
	addq	$124, %rbx
	movq	1280(%rsp), %r13        # 8-byte Reload
	movl	$0, 124(%r13)
	movl	$9987, 1556(%rsp)       # imm = 0x2703
	movq	%r8, 792(%rsp)          # 8-byte Spill
	movl	%edx, 788(%rsp)         # 4-byte Spill
	movq	%rbx, 776(%rsp)         # 8-byte Spill
	movq	%r14, 768(%rsp)         # 8-byte Spill
	movq	%r15, 760(%rsp)         # 8-byte Spill
	movq	%r12, 752(%rsp)         # 8-byte Spill
	movq	%rdi, 744(%rsp)         # 8-byte Spill
.LBB65_46:                              # %for.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	movq	744(%rsp), %rax         # 8-byte Reload
	movl	788(%rsp), %ecx         # 4-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movb	128(%rdx,%rax), %sil
	movl	$9992, 1556(%rsp)       # imm = 0x2708
	cmpb	$0, %sil
	movl	%ecx, %edi
	movq	%rax, 736(%rsp)         # 8-byte Spill
	movl	%ecx, 732(%rsp)         # 4-byte Spill
	movl	%edi, 728(%rsp)         # 4-byte Spill
	je	.LBB65_48
# %bb.47:                               # %if.then.i.i
                                        #   in Loop: Header=BB65_46 Depth=1
	movl	732(%rsp), %eax         # 4-byte Reload
	movb	%al, %cl
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	736(%rsp), %rsi         # 8-byte Reload
	movb	%cl, 384(%rdx,%rsi)
	movl	$9994, 1556(%rsp)       # imm = 0x270A
	addl	$1, %eax
	movq	776(%rsp), %rdi         # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$9999, 1556(%rsp)       # imm = 0x270F
	movl	%eax, 728(%rsp)         # 4-byte Spill
.LBB65_48:                              # %for.inc.i.i
                                        #   in Loop: Header=BB65_46 Depth=1
	movl	728(%rsp), %eax         # 4-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	orq	$1, %rcx
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movb	128(%rdx,%rcx), %sil
	movl	$10035, 1556(%rsp)      # imm = 0x2733
	cmpb	$0, %sil
	movl	%eax, %edi
	movl	%eax, 724(%rsp)         # 4-byte Spill
	movq	%rcx, 712(%rsp)         # 8-byte Spill
	movl	%edi, 708(%rsp)         # 4-byte Spill
	je	.LBB65_114
	jmp	.LBB65_113
.LBB65_49:                              # %makeMaps_e.exit.i
	movl	704(%rsp), %eax         # 4-byte Reload
	addl	$1, %eax
	movl	704(%rsp), %ecx         # 4-byte Reload
	cmpl	$-1, %ecx
	movl	%eax, 700(%rsp)         # 4-byte Spill
	jl	.LBB65_61
# %bb.50:                               # %for.end.i
	xorl	%esi, %esi
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$672, %rax              # imm = 0x2A0
	movl	700(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, %edx
	movl	%edx, %edi
	shlq	$2, %rdi
	addq	$4, %rdi
	movq	%rdi, 688(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	688(%rsp), %rdx         # 8-byte Reload
	callq	memset
	movl	704(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	jle	.LBB65_61
# %bb.51:                               # %for.body7.lr.ph.i
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	704(%rsp), %eax         # 4-byte Reload
	movl	%eax, %edx
	movl	%edx, %esi
	cmpl	$32, %eax
	movq	%rsi, 680(%rsp)         # 8-byte Spill
	movq	%rcx, 672(%rsp)         # 8-byte Spill
	jb	.LBB65_59
# %bb.52:                               # %vector.ph
	movq	680(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	andl	$-32, %ecx
	movl	%ecx, %edx
	movq	%rdx, %rsi
	addq	$-32, %rsi
	movq	%rsi, %rdi
	shrq	$5, %rdi
	addq	$1, %rdi
	movl	%edi, %ecx
	andl	$3, %ecx
	movl	%ecx, %r8d
	movaps	.LCPI65_0(%rip), %xmm0  # xmm0 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
	xorl	%ecx, %ecx
	movl	%ecx, %r9d
	subq	$96, %rsi
	movq	%rdx, 664(%rsp)         # 8-byte Spill
	movq	%rsi, 656(%rsp)         # 8-byte Spill
	movq	%rdi, 648(%rsp)         # 8-byte Spill
	movq	%r8, 640(%rsp)          # 8-byte Spill
	movq	%r9, 632(%rsp)          # 8-byte Spill
	movaps	%xmm0, 608(%rsp)        # 16-byte Spill
	jb	.LBB65_55
	jmp	.LBB65_53
.LBB65_53:                              # %vector.ph.new
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	subq	%rcx, %rax
	movaps	.LCPI65_0(%rip), %xmm0  # xmm0 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
	xorl	%edx, %edx
	movl	%edx, %esi
	movaps	%xmm0, 592(%rsp)        # 16-byte Spill
	movq	%rsi, 584(%rsp)         # 8-byte Spill
	movq	%rax, 576(%rsp)         # 8-byte Spill
	jmp	.LBB65_54
.LBB65_54:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	movq	576(%rsp), %rax         # 8-byte Reload
	movaps	592(%rsp), %xmm0        # 16-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movaps	.LCPI65_1(%rip), %xmm1  # xmm1 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	movaps	%xmm0, %xmm2
	paddb	%xmm1, %xmm2
	movaps	%xmm0, 1296(%rsp,%rcx)
	movl	$10038, 1556(%rsp)      # imm = 0x2736
	movaps	%xmm2, 1312(%rsp,%rcx)
	movl	$10044, 1556(%rsp)      # imm = 0x273C
	movq	%rcx, %rdx
	orq	$32, %rdx
	movaps	.LCPI65_2(%rip), %xmm1  # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movaps	%xmm0, %xmm2
	paddb	%xmm1, %xmm2
	movaps	.LCPI65_3(%rip), %xmm1  # xmm1 = [48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48]
	movaps	%xmm0, %xmm3
	paddb	%xmm1, %xmm3
	movaps	%xmm2, 1296(%rsp,%rdx)
	movl	$10047, 1556(%rsp)      # imm = 0x273F
	movaps	%xmm3, 1312(%rsp,%rdx)
	movl	$10053, 1556(%rsp)      # imm = 0x2745
	movq	%rcx, %rdx
	orq	$64, %rdx
	movaps	.LCPI65_4(%rip), %xmm1  # xmm1 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	movaps	%xmm0, %xmm2
	paddb	%xmm1, %xmm2
	movaps	.LCPI65_5(%rip), %xmm1  # xmm1 = [80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80]
	movaps	%xmm0, %xmm3
	paddb	%xmm1, %xmm3
	movaps	%xmm2, 1296(%rsp,%rdx)
	movl	$10056, 1556(%rsp)      # imm = 0x2748
	movaps	%xmm3, 1312(%rsp,%rdx)
	movl	$10062, 1556(%rsp)      # imm = 0x274E
	movq	%rcx, %rdx
	orq	$96, %rdx
	movaps	.LCPI65_6(%rip), %xmm1  # xmm1 = [96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96]
	movaps	%xmm0, %xmm2
	paddb	%xmm1, %xmm2
	movaps	.LCPI65_7(%rip), %xmm1  # xmm1 = [112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112]
	movaps	%xmm0, %xmm3
	paddb	%xmm1, %xmm3
	movaps	%xmm2, 1296(%rsp,%rdx)
	movl	$10065, 1556(%rsp)      # imm = 0x2751
	movaps	%xmm3, 1312(%rsp,%rdx)
	movl	$10082, 1556(%rsp)      # imm = 0x2762
	subq	$-128, %rcx
	movaps	.LCPI65_8(%rip), %xmm1  # xmm1 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pxor	%xmm1, %xmm0
	addq	$-4, %rax
	cmpq	$0, %rax
	movq	%rcx, %rdx
	movaps	%xmm0, %xmm1
	movq	%rax, 576(%rsp)         # 8-byte Spill
	movq	%rcx, 632(%rsp)         # 8-byte Spill
	movaps	%xmm1, 592(%rsp)        # 16-byte Spill
	movq	%rdx, 584(%rsp)         # 8-byte Spill
	movaps	%xmm0, 608(%rsp)        # 16-byte Spill
	jne	.LBB65_54
.LBB65_55:                              # %middle.block.unr-lcssa
	movaps	608(%rsp), %xmm0        # 16-byte Reload
	movq	632(%rsp), %rax         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	cmpq	$0, %rcx
	movaps	%xmm0, 560(%rsp)        # 16-byte Spill
	movq	%rax, 552(%rsp)         # 8-byte Spill
	je	.LBB65_58
# %bb.56:                               # %vector.body.epil.preheader
	movq	552(%rsp), %rax         # 8-byte Reload
	movaps	560(%rsp), %xmm0        # 16-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	%rax, 544(%rsp)         # 8-byte Spill
	movaps	%xmm0, 528(%rsp)        # 16-byte Spill
	movq	%rcx, 520(%rsp)         # 8-byte Spill
	jmp	.LBB65_57
.LBB65_57:                              # %vector.body.epil
                                        # =>This Inner Loop Header: Depth=1
	movq	520(%rsp), %rax         # 8-byte Reload
	movaps	528(%rsp), %xmm0        # 16-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movaps	.LCPI65_1(%rip), %xmm1  # xmm1 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	movaps	%xmm0, %xmm2
	paddb	%xmm1, %xmm2
	movaps	%xmm0, 1296(%rsp,%rcx)
	movl	$10085, 1556(%rsp)      # imm = 0x2765
	movaps	%xmm2, 1312(%rsp,%rcx)
	movl	$10096, 1556(%rsp)      # imm = 0x2770
	addq	$32, %rcx
	movaps	.LCPI65_2(%rip), %xmm1  # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	paddb	%xmm1, %xmm0
	addq	$-1, %rax
	cmpq	$0, %rax
	movaps	%xmm0, 528(%rsp)        # 16-byte Spill
	movq	%rcx, 544(%rsp)         # 8-byte Spill
	movq	%rax, 520(%rsp)         # 8-byte Spill
	jne	.LBB65_57
.LBB65_58:                              # %middle.block
	movq	664(%rsp), %rax         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	je	.LBB65_61
.LBB65_59:                              # %for.body7.i.preheader
	movq	672(%rsp), %rax         # 8-byte Reload
	movq	%rax, 512(%rsp)         # 8-byte Spill
.LBB65_60:                              # %for.body7.i
                                        # =>This Inner Loop Header: Depth=1
	movq	512(%rsp), %rax         # 8-byte Reload
	movb	%al, %cl
	movb	%cl, 1296(%rsp,%rax)
	movl	$10099, 1556(%rsp)      # imm = 0x2773
	addq	$1, %rax
	movq	680(%rsp), %rdx         # 8-byte Reload
	cmpq	%rdx, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	jne	.LBB65_60
.LBB65_61:                              # %for.end12.i
	xorl	%eax, %eax
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$10116, 1556(%rsp)      # imm = 0x2784
	cmpl	$0, %edx
	movl	%edx, 508(%rsp)         # 4-byte Spill
	movl	%eax, 504(%rsp)         # 4-byte Spill
	jle	.LBB65_86
# %bb.62:                               # %for.body16.lr.ph.i
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	leaq	1296(%rsp), %rdx
	movq	1280(%rsp), %rsi        # 8-byte Reload
	addq	$672, %rsi              # imm = 0x2A0
	movq	1280(%rsp), %rdi        # 8-byte Reload
	addq	$676, %rdi              # imm = 0x2A4
	movq	%rdx, %r8
	addq	$1, %r8
	movl	508(%rsp), %r9d         # 4-byte Reload
	movl	%eax, %r10d
	movq	%r8, 496(%rsp)          # 8-byte Spill
	movl	%r10d, 492(%rsp)        # 4-byte Spill
	movq	%rdx, 480(%rsp)         # 8-byte Spill
	movq	%rsi, 472(%rsp)         # 8-byte Spill
	movq	%rdi, 464(%rsp)         # 8-byte Spill
	movq	%rcx, 456(%rsp)         # 8-byte Spill
	movl	%r9d, 452(%rsp)         # 4-byte Spill
	movl	%eax, 448(%rsp)         # 4-byte Spill
.LBB65_63:                              # %for.body16.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_67 Depth 2
                                        #     Child Loop BB65_75 Depth 2
	movl	448(%rsp), %eax         # 4-byte Reload
	movl	492(%rsp), %ecx         # 4-byte Reload
	movl	452(%rsp), %edx         # 4-byte Reload
	movq	456(%rsp), %rsi         # 8-byte Reload
	xorl	%edi, %edi
	movq	768(%rsp), %r8          # 8-byte Reload
	movl	(%r8,%rsi,4), %r9d
	movl	$10123, 1556(%rsp)      # imm = 0x278B
	addl	$-1, %r9d
	cmpl	$0, %r9d
	cmovll	%edx, %edi
	addl	%r9d, %edi
	movslq	%edi, %r10
	movq	760(%rsp), %r11         # 8-byte Reload
	movb	(%r11,%r10), %bl
	movl	$10126, 1556(%rsp)      # imm = 0x278E
	movzbl	%bl, %edi
	movl	%edi, %r10d
	movq	1280(%rsp), %r14        # 8-byte Reload
	movb	384(%r14,%r10), %bl
	movl	$10127, 1556(%rsp)      # imm = 0x278F
	movq	792(%rsp), %r10         # 8-byte Reload
	movb	(%r10), %bpl
	movl	$10145, 1556(%rsp)      # imm = 0x27A1
	cmpb	%bl, %bpl
	movl	%eax, 444(%rsp)         # 4-byte Spill
	movl	%ecx, 440(%rsp)         # 4-byte Spill
	movl	%edx, 436(%rsp)         # 4-byte Spill
	movq	%rsi, 424(%rsp)         # 8-byte Spill
	movb	%bl, 423(%rsp)          # 1-byte Spill
	movb	%bpl, 422(%rsp)         # 1-byte Spill
	jne	.LBB65_65
# %bb.64:                               # %if.then32.i
                                        #   in Loop: Header=BB65_63 Depth=1
	movl	440(%rsp), %eax         # 4-byte Reload
	addl	$1, %eax
	movl	436(%rsp), %ecx         # 4-byte Reload
	movl	444(%rsp), %edx         # 4-byte Reload
	movl	%edx, 416(%rsp)         # 4-byte Spill
	movl	%ecx, 412(%rsp)         # 4-byte Spill
	movl	%eax, 408(%rsp)         # 4-byte Spill
	jmp	.LBB65_77
.LBB65_65:                              # %if.else.i
                                        #   in Loop: Header=BB65_63 Depth=1
	movl	440(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	movb	422(%rsp), %cl          # 1-byte Reload
	movl	444(%rsp), %edx         # 4-byte Reload
	movl	%eax, 404(%rsp)         # 4-byte Spill
	movb	%cl, 403(%rsp)          # 1-byte Spill
	movl	%edx, 396(%rsp)         # 4-byte Spill
	jle	.LBB65_73
# %bb.66:                               # %if.then36.i
                                        #   in Loop: Header=BB65_63 Depth=1
	movl	440(%rsp), %eax         # 4-byte Reload
	addl	$-1, %eax
	movl	444(%rsp), %ecx         # 4-byte Reload
	movslq	%ecx, %rdx
	movq	%rdx, 384(%rsp)         # 8-byte Spill
	movl	%eax, 380(%rsp)         # 4-byte Spill
.LBB65_67:                              # %while.cond.i
                                        #   Parent Loop BB65_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	380(%rsp), %eax         # 4-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movl	%eax, %edx
	andl	$1, %edx
	movq	%rcx, %rsi
	shlq	$1, %rsi
	movq	752(%rsp), %rdi         # 8-byte Reload
	addq	%rsi, %rdi
	cmpl	$0, %edx
	movl	%eax, 376(%rsp)         # 4-byte Spill
	movq	%rcx, 368(%rsp)         # 8-byte Spill
	movq	%rdi, 360(%rsp)         # 8-byte Spill
	je	.LBB65_69
# %bb.68:                               # %if.then37.i
                                        #   in Loop: Header=BB65_67 Depth=2
	movq	360(%rsp), %rax         # 8-byte Reload
	movw	$1, (%rax)
	movl	$10147, 1556(%rsp)      # imm = 0x27A3
	movq	464(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$10149, 1556(%rsp)      # imm = 0x27A5
	addl	$1, %edx
	movl	%edx, (%rcx)
	movl	$10151, 1556(%rsp)      # imm = 0x27A7
	jmp	.LBB65_70
.LBB65_69:                              # %if.else44.i
                                        #   in Loop: Header=BB65_67 Depth=2
	movq	360(%rsp), %rax         # 8-byte Reload
	movw	$0, (%rax)
	movl	$10152, 1556(%rsp)      # imm = 0x27A8
	movq	472(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$10154, 1556(%rsp)      # imm = 0x27AA
	addl	$1, %edx
	movl	%edx, (%rcx)
	movl	$10161, 1556(%rsp)      # imm = 0x27B1
.LBB65_70:                              # %if.end51.i
                                        #   in Loop: Header=BB65_67 Depth=2
	movq	368(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movl	376(%rsp), %ecx         # 4-byte Reload
	cmpl	$2, %ecx
	movq	%rax, 352(%rsp)         # 8-byte Spill
	jl	.LBB65_72
# %bb.71:                               # %if.end55.i
                                        #   in Loop: Header=BB65_67 Depth=2
	movl	$2, %eax
	movl	376(%rsp), %ecx         # 4-byte Reload
	addl	$-2, %ecx
	movl	%eax, 348(%rsp)         # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	348(%rsp), %ecx         # 4-byte Reload
	idivl	%ecx
	movq	352(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 384(%rsp)         # 8-byte Spill
	movl	%eax, 380(%rsp)         # 4-byte Spill
	jmp	.LBB65_67
.LBB65_72:                              # %if.end57.loopexit.i
                                        #   in Loop: Header=BB65_63 Depth=1
	xorl	%eax, %eax
	movq	352(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %edx
	movq	792(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi), %dil
	movl	$10166, 1556(%rsp)      # imm = 0x27B6
	movl	%edx, 396(%rsp)         # 4-byte Spill
	movb	%dil, 403(%rsp)         # 1-byte Spill
	movl	%eax, 404(%rsp)         # 4-byte Spill
.LBB65_73:                              # %if.end57.i
                                        #   in Loop: Header=BB65_63 Depth=1
	movl	404(%rsp), %eax         # 4-byte Reload
	movl	396(%rsp), %ecx         # 4-byte Reload
	movb	403(%rsp), %dl          # 1-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movb	(%rsi), %dil
	movl	$10167, 1556(%rsp)      # imm = 0x27B7
	movb	%dl, (%rsi)
	movl	$10174, 1556(%rsp)      # imm = 0x27BE
	movb	423(%rsp), %dl          # 1-byte Reload
	cmpb	%dil, %dl
	movl	%eax, 344(%rsp)         # 4-byte Spill
	movl	%ecx, 340(%rsp)         # 4-byte Spill
	movb	%dil, 339(%rsp)         # 1-byte Spill
	movq	%rsi, 328(%rsp)         # 8-byte Spill
	je	.LBB65_76
# %bb.74:                               # %while.body67.i.preheader
                                        #   in Loop: Header=BB65_63 Depth=1
	movq	496(%rsp), %rax         # 8-byte Reload
	movb	339(%rsp), %cl          # 1-byte Reload
	movq	%rax, 320(%rsp)         # 8-byte Spill
	movb	%cl, 319(%rsp)          # 1-byte Spill
	jmp	.LBB65_75
.LBB65_75:                              # %while.body67.i
                                        #   Parent Loop BB65_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	319(%rsp), %al          # 1-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, %rdx
	addq	$1, %rdx
	movb	1(%rcx), %sil
	movl	$10175, 1556(%rsp)      # imm = 0x27BF
	movb	%al, 1(%rcx)
	movl	$10179, 1556(%rsp)      # imm = 0x27C3
	movb	423(%rsp), %al          # 1-byte Reload
	cmpb	%sil, %al
	movq	%rdx, %rcx
	movb	%sil, 319(%rsp)         # 1-byte Spill
	movq	%rcx, 320(%rsp)         # 8-byte Spill
	movq	%rdx, 328(%rsp)         # 8-byte Spill
	jne	.LBB65_75
.LBB65_76:                              # %while.end68.i
                                        #   in Loop: Header=BB65_63 Depth=1
	movq	328(%rsp), %rax         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movb	423(%rsp), %dl          # 1-byte Reload
	movb	%dl, (%rcx)
	movl	$10187, 1556(%rsp)      # imm = 0x27CB
	movq	480(%rsp), %rsi         # 8-byte Reload
	subq	%rsi, %rax
	movl	%eax, %edi
	addl	$1, %edi
	movw	%di, %r8w
	movl	340(%rsp), %r9d         # 4-byte Reload
	movslq	%r9d, %rax
	movq	752(%rsp), %r10         # 8-byte Reload
	movw	%r8w, (%r10,%rax,2)
	movl	$10191, 1556(%rsp)      # imm = 0x27CF
	addl	$1, %r9d
	movslq	%edi, %rax
	movq	1280(%rsp), %r11        # 8-byte Reload
	movl	672(%r11,%rax,4), %edi
	movl	$10193, 1556(%rsp)      # imm = 0x27D1
	addl	$1, %edi
	movl	%edi, 672(%r11,%rax,4)
	movl	$10194, 1556(%rsp)      # imm = 0x27D2
	movq	1272(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %edi
	movl	$10212, 1556(%rsp)      # imm = 0x27E4
	movl	344(%rsp), %ebx         # 4-byte Reload
	movl	%edi, 412(%rsp)         # 4-byte Spill
	movl	%r9d, 416(%rsp)         # 4-byte Spill
	movl	%ebx, 408(%rsp)         # 4-byte Spill
.LBB65_77:                              # %if.end82.i
                                        #   in Loop: Header=BB65_63 Depth=1
	movl	408(%rsp), %eax         # 4-byte Reload
	movl	416(%rsp), %ecx         # 4-byte Reload
	movl	412(%rsp), %edx         # 4-byte Reload
	movq	424(%rsp), %rsi         # 8-byte Reload
	addq	$1, %rsi
	movslq	%edx, %rdi
	cmpq	%rdi, %rsi
	movl	%eax, %r8d
	movl	%ecx, %r9d
	movl	%eax, 312(%rsp)         # 4-byte Spill
	movl	%ecx, 308(%rsp)         # 4-byte Spill
	movq	%rsi, 456(%rsp)         # 8-byte Spill
	movl	%edx, 452(%rsp)         # 4-byte Spill
	movl	%r8d, 492(%rsp)         # 4-byte Spill
	movl	%r9d, 448(%rsp)         # 4-byte Spill
	jl	.LBB65_63
# %bb.78:                               # %for.end85.i
	movl	312(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	movl	308(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, 504(%rsp)         # 4-byte Spill
	jle	.LBB65_86
# %bb.79:                               # %if.then88.i
	movl	312(%rsp), %eax         # 4-byte Reload
	addl	$-1, %eax
	movl	308(%rsp), %ecx         # 4-byte Reload
	movslq	%ecx, %rdx
	movq	%rdx, 296(%rsp)         # 8-byte Spill
	movl	%eax, 292(%rsp)         # 4-byte Spill
.LBB65_80:                              # %while.cond90.i
                                        # =>This Inner Loop Header: Depth=1
	movl	292(%rsp), %eax         # 4-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movl	%eax, %edx
	andl	$1, %edx
	movq	%rcx, %rsi
	shlq	$1, %rsi
	movq	752(%rsp), %rdi         # 8-byte Reload
	addq	%rsi, %rdi
	cmpl	$0, %edx
	movl	%eax, 288(%rsp)         # 4-byte Spill
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	movq	%rdi, 272(%rsp)         # 8-byte Spill
	je	.LBB65_82
# %bb.81:                               # %if.then94.i
                                        #   in Loop: Header=BB65_80 Depth=1
	movq	272(%rsp), %rax         # 8-byte Reload
	movw	$1, (%rax)
	movl	$10213, 1556(%rsp)      # imm = 0x27E5
	movq	464(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$10215, 1556(%rsp)      # imm = 0x27E7
	addl	$1, %edx
	movl	%edx, (%rcx)
	movl	$10217, 1556(%rsp)      # imm = 0x27E9
	jmp	.LBB65_83
.LBB65_82:                              # %if.else101.i
                                        #   in Loop: Header=BB65_80 Depth=1
	movq	272(%rsp), %rax         # 8-byte Reload
	movw	$0, (%rax)
	movl	$10218, 1556(%rsp)      # imm = 0x27EA
	movq	472(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$10220, 1556(%rsp)      # imm = 0x27EC
	addl	$1, %edx
	movl	%edx, (%rcx)
	movl	$10232, 1556(%rsp)      # imm = 0x27F8
.LBB65_83:                              # %if.end108.i
                                        #   in Loop: Header=BB65_80 Depth=1
	movq	280(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movl	288(%rsp), %ecx         # 4-byte Reload
	cmpl	$2, %ecx
	movq	%rax, 264(%rsp)         # 8-byte Spill
	jl	.LBB65_85
# %bb.84:                               # %if.end112.i
                                        #   in Loop: Header=BB65_80 Depth=1
	movl	$2, %eax
	movl	288(%rsp), %ecx         # 4-byte Reload
	addl	$-2, %ecx
	movl	%eax, 260(%rsp)         # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	260(%rsp), %ecx         # 4-byte Reload
	idivl	%ecx
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 296(%rsp)         # 8-byte Spill
	movl	%eax, 292(%rsp)         # 4-byte Spill
	jmp	.LBB65_80
.LBB65_85:                              # %if.end116.loopexit.i
	movq	264(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, 504(%rsp)         # 4-byte Spill
.LBB65_86:                              # %generateMTFValues.exit
	movl	504(%rsp), %eax         # 4-byte Reload
	movl	700(%rsp), %ecx         # 4-byte Reload
	movw	%cx, %dx
	movslq	%eax, %rsi
	movq	752(%rsp), %rdi         # 8-byte Reload
	movw	%dx, (%rdi,%rsi,2)
	movl	$10236, 1556(%rsp)      # imm = 0x27FC
	addl	$1, %eax
	movslq	%ecx, %rsi
	movq	1280(%rsp), %r8         # 8-byte Reload
	movl	672(%r8,%rsi,4), %r9d
	movl	$10238, 1556(%rsp)      # imm = 0x27FE
	addl	$1, %r9d
	movl	%r9d, 672(%r8,%rsi,4)
	movl	$10240, 1556(%rsp)      # imm = 0x2800
	movl	%eax, 668(%r8)
	movl	$10249, 1556(%rsp)      # imm = 0x2809
	movq	%r8, %rdi
	callq	sendMTFValues
.LBB65_87:                              # %if.end26
	movb	1295(%rsp), %al         # 1-byte Reload
	cmpb	$0, %al
	je	.LBB65_112
# %bb.88:                               # %if.then27
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$644, %rax              # imm = 0x284
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	644(%rcx), %edx
	movl	$10253, 1556(%rsp)      # imm = 0x280D
	addq	$640, %rcx              # imm = 0x280
	cmpl	$7, %edx
	movq	%rax, 248(%rsp)         # 8-byte Spill
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	movl	%edx, 236(%rsp)         # 4-byte Spill
	jg	.LBB65_90
# %bb.89:                               # %entry.while.end_crit_edge.i.i218
	movq	240(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$10256, 1556(%rsp)      # imm = 0x2810
	movl	236(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 232(%rsp)         # 4-byte Spill
	movl	%edx, 228(%rsp)         # 4-byte Spill
	jmp	.LBB65_92
.LBB65_90:                              # %while.body.lr.ph.i.i223
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$116, %rax
	movq	240(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$10257, 1556(%rsp)      # imm = 0x2811
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movl	116(%rsi), %edi
	movl	$10265, 1556(%rsp)      # imm = 0x2819
	movq	%rax, 216(%rsp)         # 8-byte Spill
	movl	%edi, 212(%rsp)         # 4-byte Spill
	movl	%edx, 208(%rsp)         # 4-byte Spill
.LBB65_91:                              # %while.body.i.i232
                                        # =>This Inner Loop Header: Depth=1
	movl	208(%rsp), %eax         # 4-byte Reload
	movl	212(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$10268, 1556(%rsp)      # imm = 0x281C
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$10269, 1556(%rsp)      # imm = 0x281D
	movq	216(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movl	$10270, 1556(%rsp)      # imm = 0x281E
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$10271, 1556(%rsp)      # imm = 0x281F
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	(%r8), %ecx
	movl	$10272, 1556(%rsp)      # imm = 0x2820
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$10273, 1556(%rsp)      # imm = 0x2821
	movq	248(%rsp), %r9          # 8-byte Reload
	movl	(%r9), %r10d
	movl	$10275, 1556(%rsp)      # imm = 0x2823
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$10283, 1556(%rsp)      # imm = 0x282B
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 232(%rsp)         # 4-byte Spill
	movl	%r10d, 208(%rsp)        # 4-byte Spill
	movl	%eax, 212(%rsp)         # 4-byte Spill
	movl	%r11d, 228(%rsp)        # 4-byte Spill
	jg	.LBB65_91
.LBB65_92:                              # %bsPutUChar.exit238
	movl	228(%rsp), %eax         # 4-byte Reload
	movl	232(%rsp), %ecx         # 4-byte Reload
	movl	$23, %edx
	movl	$24, %esi
	subl	%eax, %esi
	movl	%ecx, 204(%rsp)         # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	204(%rsp), %esi         # 4-byte Reload
	orl	%esi, %edx
	movq	240(%rsp), %rdi         # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$10285, 1556(%rsp)      # imm = 0x282D
	movl	%eax, %esi
	addl	$8, %esi
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	%esi, (%r8)
	movl	$10289, 1556(%rsp)      # imm = 0x2831
	cmpl	$-1, %eax
	movl	%edx, %eax
	movl	%edx, 200(%rsp)         # 4-byte Spill
	movl	%eax, 196(%rsp)         # 4-byte Spill
	movl	%esi, 192(%rsp)         # 4-byte Spill
	jle	.LBB65_95
# %bb.93:                               # %while.body.lr.ph.i.i198
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$116, %rax
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	116(%rcx), %edx
	movl	$10297, 1556(%rsp)      # imm = 0x2839
	movl	200(%rsp), %esi         # 4-byte Reload
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movl	%edx, 180(%rsp)         # 4-byte Spill
	movl	%esi, 176(%rsp)         # 4-byte Spill
.LBB65_94:                              # %while.body.i.i207
                                        # =>This Inner Loop Header: Depth=1
	movl	176(%rsp), %eax         # 4-byte Reload
	movl	180(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$10300, 1556(%rsp)      # imm = 0x283C
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$10301, 1556(%rsp)      # imm = 0x283D
	movq	184(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movl	$10302, 1556(%rsp)      # imm = 0x283E
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$10303, 1556(%rsp)      # imm = 0x283F
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	(%r8), %ecx
	movl	$10304, 1556(%rsp)      # imm = 0x2840
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$10305, 1556(%rsp)      # imm = 0x2841
	movq	248(%rsp), %r9          # 8-byte Reload
	movl	(%r9), %r10d
	movl	$10307, 1556(%rsp)      # imm = 0x2843
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$10315, 1556(%rsp)      # imm = 0x284B
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 196(%rsp)         # 4-byte Spill
	movl	%r10d, 176(%rsp)        # 4-byte Spill
	movl	%eax, 180(%rsp)         # 4-byte Spill
	movl	%r11d, 192(%rsp)        # 4-byte Spill
	jg	.LBB65_94
.LBB65_95:                              # %bsPutUChar.exit213
	movl	192(%rsp), %eax         # 4-byte Reload
	movl	196(%rsp), %ecx         # 4-byte Reload
	movl	$114, %edx
	movl	$24, %esi
	subl	%eax, %esi
	movl	%ecx, 172(%rsp)         # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	172(%rsp), %esi         # 4-byte Reload
	orl	%esi, %edx
	movq	240(%rsp), %rdi         # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$10317, 1556(%rsp)      # imm = 0x284D
	movl	%eax, %esi
	addl	$8, %esi
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	%esi, (%r8)
	movl	$10321, 1556(%rsp)      # imm = 0x2851
	cmpl	$-1, %eax
	movl	%edx, %eax
	movl	%edx, 168(%rsp)         # 4-byte Spill
	movl	%eax, 164(%rsp)         # 4-byte Spill
	movl	%esi, 160(%rsp)         # 4-byte Spill
	jle	.LBB65_98
# %bb.96:                               # %while.body.lr.ph.i.i173
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$116, %rax
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	116(%rcx), %edx
	movl	$10329, 1556(%rsp)      # imm = 0x2859
	movl	168(%rsp), %esi         # 4-byte Reload
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movl	%edx, 148(%rsp)         # 4-byte Spill
	movl	%esi, 144(%rsp)         # 4-byte Spill
.LBB65_97:                              # %while.body.i.i182
                                        # =>This Inner Loop Header: Depth=1
	movl	144(%rsp), %eax         # 4-byte Reload
	movl	148(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$10332, 1556(%rsp)      # imm = 0x285C
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$10333, 1556(%rsp)      # imm = 0x285D
	movq	152(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movl	$10334, 1556(%rsp)      # imm = 0x285E
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$10335, 1556(%rsp)      # imm = 0x285F
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	(%r8), %ecx
	movl	$10336, 1556(%rsp)      # imm = 0x2860
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$10337, 1556(%rsp)      # imm = 0x2861
	movq	248(%rsp), %r9          # 8-byte Reload
	movl	(%r9), %r10d
	movl	$10339, 1556(%rsp)      # imm = 0x2863
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$10347, 1556(%rsp)      # imm = 0x286B
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 164(%rsp)         # 4-byte Spill
	movl	%r10d, 144(%rsp)        # 4-byte Spill
	movl	%eax, 148(%rsp)         # 4-byte Spill
	movl	%r11d, 160(%rsp)        # 4-byte Spill
	jg	.LBB65_97
.LBB65_98:                              # %bsPutUChar.exit188
	movl	160(%rsp), %eax         # 4-byte Reload
	movl	164(%rsp), %ecx         # 4-byte Reload
	movl	$69, %edx
	movl	$24, %esi
	subl	%eax, %esi
	movl	%ecx, 140(%rsp)         # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	140(%rsp), %esi         # 4-byte Reload
	orl	%esi, %edx
	movq	240(%rsp), %rdi         # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$10349, 1556(%rsp)      # imm = 0x286D
	movl	%eax, %esi
	addl	$8, %esi
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	%esi, (%r8)
	movl	$10353, 1556(%rsp)      # imm = 0x2871
	cmpl	$-1, %eax
	movl	%edx, %eax
	movl	%edx, 136(%rsp)         # 4-byte Spill
	movl	%eax, 132(%rsp)         # 4-byte Spill
	movl	%esi, 128(%rsp)         # 4-byte Spill
	jle	.LBB65_101
# %bb.99:                               # %while.body.lr.ph.i.i148
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$116, %rax
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	116(%rcx), %edx
	movl	$10361, 1556(%rsp)      # imm = 0x2879
	movl	136(%rsp), %esi         # 4-byte Reload
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movl	%edx, 116(%rsp)         # 4-byte Spill
	movl	%esi, 112(%rsp)         # 4-byte Spill
.LBB65_100:                             # %while.body.i.i157
                                        # =>This Inner Loop Header: Depth=1
	movl	112(%rsp), %eax         # 4-byte Reload
	movl	116(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$10364, 1556(%rsp)      # imm = 0x287C
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$10365, 1556(%rsp)      # imm = 0x287D
	movq	120(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movl	$10366, 1556(%rsp)      # imm = 0x287E
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$10367, 1556(%rsp)      # imm = 0x287F
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	(%r8), %ecx
	movl	$10368, 1556(%rsp)      # imm = 0x2880
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$10369, 1556(%rsp)      # imm = 0x2881
	movq	248(%rsp), %r9          # 8-byte Reload
	movl	(%r9), %r10d
	movl	$10371, 1556(%rsp)      # imm = 0x2883
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$10379, 1556(%rsp)      # imm = 0x288B
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 132(%rsp)         # 4-byte Spill
	movl	%r10d, 112(%rsp)        # 4-byte Spill
	movl	%eax, 116(%rsp)         # 4-byte Spill
	movl	%r11d, 128(%rsp)        # 4-byte Spill
	jg	.LBB65_100
.LBB65_101:                             # %bsPutUChar.exit163
	movl	128(%rsp), %eax         # 4-byte Reload
	movl	132(%rsp), %ecx         # 4-byte Reload
	movl	$56, %edx
	movl	$24, %esi
	subl	%eax, %esi
	movl	%ecx, 108(%rsp)         # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	108(%rsp), %esi         # 4-byte Reload
	orl	%esi, %edx
	movq	240(%rsp), %rdi         # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$10381, 1556(%rsp)      # imm = 0x288D
	movl	%eax, %esi
	addl	$8, %esi
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	%esi, (%r8)
	movl	$10385, 1556(%rsp)      # imm = 0x2891
	cmpl	$-1, %eax
	movl	%edx, %eax
	movl	%edx, 104(%rsp)         # 4-byte Spill
	movl	%eax, 100(%rsp)         # 4-byte Spill
	movl	%esi, 96(%rsp)          # 4-byte Spill
	jle	.LBB65_104
# %bb.102:                              # %while.body.lr.ph.i.i123
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$116, %rax
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	116(%rcx), %edx
	movl	$10393, 1556(%rsp)      # imm = 0x2899
	movl	104(%rsp), %esi         # 4-byte Reload
	movq	%rax, 88(%rsp)          # 8-byte Spill
	movl	%edx, 84(%rsp)          # 4-byte Spill
	movl	%esi, 80(%rsp)          # 4-byte Spill
.LBB65_103:                             # %while.body.i.i132
                                        # =>This Inner Loop Header: Depth=1
	movl	80(%rsp), %eax          # 4-byte Reload
	movl	84(%rsp), %ecx          # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$10396, 1556(%rsp)      # imm = 0x289C
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$10397, 1556(%rsp)      # imm = 0x289D
	movq	88(%rsp), %rdi          # 8-byte Reload
	movl	(%rdi), %eax
	movl	$10398, 1556(%rsp)      # imm = 0x289E
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$10399, 1556(%rsp)      # imm = 0x289F
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	(%r8), %ecx
	movl	$10400, 1556(%rsp)      # imm = 0x28A0
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$10401, 1556(%rsp)      # imm = 0x28A1
	movq	248(%rsp), %r9          # 8-byte Reload
	movl	(%r9), %r10d
	movl	$10403, 1556(%rsp)      # imm = 0x28A3
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$10411, 1556(%rsp)      # imm = 0x28AB
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 100(%rsp)         # 4-byte Spill
	movl	%r10d, 80(%rsp)         # 4-byte Spill
	movl	%eax, 84(%rsp)          # 4-byte Spill
	movl	%r11d, 96(%rsp)         # 4-byte Spill
	jg	.LBB65_103
.LBB65_104:                             # %bsPutUChar.exit138
	movl	96(%rsp), %eax          # 4-byte Reload
	movl	100(%rsp), %ecx         # 4-byte Reload
	movl	$80, %edx
	movl	$24, %esi
	subl	%eax, %esi
	movl	%ecx, 76(%rsp)          # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	76(%rsp), %esi          # 4-byte Reload
	orl	%esi, %edx
	movq	240(%rsp), %rdi         # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$10413, 1556(%rsp)      # imm = 0x28AD
	movl	%eax, %esi
	addl	$8, %esi
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	%esi, (%r8)
	movl	$10417, 1556(%rsp)      # imm = 0x28B1
	cmpl	$-1, %eax
	movl	%edx, %eax
	movl	%edx, 72(%rsp)          # 4-byte Spill
	movl	%eax, 68(%rsp)          # 4-byte Spill
	movl	%esi, 64(%rsp)          # 4-byte Spill
	jle	.LBB65_107
# %bb.105:                              # %while.body.lr.ph.i.i98
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$116, %rax
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	116(%rcx), %edx
	movl	$10425, 1556(%rsp)      # imm = 0x28B9
	movl	72(%rsp), %esi          # 4-byte Reload
	movq	%rax, 56(%rsp)          # 8-byte Spill
	movl	%edx, 52(%rsp)          # 4-byte Spill
	movl	%esi, 48(%rsp)          # 4-byte Spill
.LBB65_106:                             # %while.body.i.i107
                                        # =>This Inner Loop Header: Depth=1
	movl	48(%rsp), %eax          # 4-byte Reload
	movl	52(%rsp), %ecx          # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$10428, 1556(%rsp)      # imm = 0x28BC
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$10429, 1556(%rsp)      # imm = 0x28BD
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	(%rdi), %eax
	movl	$10430, 1556(%rsp)      # imm = 0x28BE
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$10431, 1556(%rsp)      # imm = 0x28BF
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	(%r8), %ecx
	movl	$10432, 1556(%rsp)      # imm = 0x28C0
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$10433, 1556(%rsp)      # imm = 0x28C1
	movq	248(%rsp), %r9          # 8-byte Reload
	movl	(%r9), %r10d
	movl	$10435, 1556(%rsp)      # imm = 0x28C3
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$10443, 1556(%rsp)      # imm = 0x28CB
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 68(%rsp)          # 4-byte Spill
	movl	%r10d, 48(%rsp)         # 4-byte Spill
	movl	%eax, 52(%rsp)          # 4-byte Spill
	movl	%r11d, 64(%rsp)         # 4-byte Spill
	jg	.LBB65_106
.LBB65_107:                             # %bsPutUChar.exit113
	movl	64(%rsp), %eax          # 4-byte Reload
	movl	68(%rsp), %ecx          # 4-byte Reload
	movl	$144, %edx
	movl	$24, %esi
	subl	%eax, %esi
	movl	%ecx, 44(%rsp)          # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	44(%rsp), %esi          # 4-byte Reload
	orl	%esi, %edx
	movq	240(%rsp), %rdi         # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$10445, 1556(%rsp)      # imm = 0x28CD
	addl	$8, %eax
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	%eax, (%r8)
	movl	$10447, 1556(%rsp)      # imm = 0x28CF
	movq	1280(%rsp), %r9         # 8-byte Reload
	addq	$652, %r9               # imm = 0x28C
	movq	1280(%rsp), %r10        # 8-byte Reload
	movl	652(%r10), %esi
	movl	$10450, 1556(%rsp)      # imm = 0x28D2
	movq	%r10, %rdi
	movq	%r9, 32(%rsp)           # 8-byte Spill
	callq	bsPutUInt32
	movq	1280(%rsp), %rdi        # 8-byte Reload
	movl	656(%rdi), %eax
	movl	$10453, 1556(%rsp)      # imm = 0x28D5
	cmpl	$1, %eax
	jle	.LBB65_109
# %bb.108:                              # %if.then32
	movabsq	$.L.str.1.67, %rsi
	movq	stderr, %rdi
	movl	$10454, 1556(%rsp)      # imm = 0x28D6
	movq	32(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %edx
	movl	$10458, 1556(%rsp)      # imm = 0x28DA
	movb	$0, %al
	callq	fprintf
	movl	%eax, 28(%rsp)          # 4-byte Spill
.LBB65_109:                             # %if.end35
	movq	248(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$10462, 1556(%rsp)      # imm = 0x28DE
	cmpl	$0, %ecx
	jle	.LBB65_112
# %bb.110:                              # %while.body.lr.ph.i
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$116, %rax
	movq	240(%rsp), %rcx         # 8-byte Reload
	movl	(%rcx), %edx
	movl	$10463, 1556(%rsp)      # imm = 0x28DF
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movl	116(%rsi), %edi
	movl	$10471, 1556(%rsp)      # imm = 0x28E7
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movl	%edi, 12(%rsp)          # 4-byte Spill
	movl	%edx, 8(%rsp)           # 4-byte Spill
.LBB65_111:                             # %while.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	8(%rsp), %eax           # 4-byte Reload
	movl	12(%rsp), %ecx          # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$10474, 1556(%rsp)      # imm = 0x28EA
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$10475, 1556(%rsp)      # imm = 0x28EB
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	(%rdi), %eax
	movl	$10476, 1556(%rsp)      # imm = 0x28EC
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$10477, 1556(%rsp)      # imm = 0x28ED
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	(%r8), %ecx
	movl	$10478, 1556(%rsp)      # imm = 0x28EE
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$10479, 1556(%rsp)      # imm = 0x28EF
	movq	248(%rsp), %r9          # 8-byte Reload
	movl	(%r9), %r10d
	movl	$10481, 1556(%rsp)      # imm = 0x28F1
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$10487, 1556(%rsp)      # imm = 0x28F7
	cmpl	$8, %r10d
	movl	%eax, 12(%rsp)          # 4-byte Spill
	movl	%ecx, 8(%rsp)           # 4-byte Spill
	jg	.LBB65_111
.LBB65_112:                             # %if.end36
	addq	$1560, %rsp             # imm = 0x618
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB65_113:                             # %if.then.i.i.1
                                        #   in Loop: Header=BB65_46 Depth=1
	movl	724(%rsp), %eax         # 4-byte Reload
	movb	%al, %cl
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movb	%cl, 384(%rdx,%rsi)
	movl	$10489, 1556(%rsp)      # imm = 0x28F9
	addl	$1, %eax
	movq	776(%rsp), %rdi         # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$10498, 1556(%rsp)      # imm = 0x2902
	movl	%eax, 708(%rsp)         # 4-byte Spill
.LBB65_114:                             # %for.inc.i.i.1
                                        #   in Loop: Header=BB65_46 Depth=1
	movl	708(%rsp), %eax         # 4-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	addq	$2, %rcx
	cmpq	$256, %rcx              # imm = 0x100
	movl	%eax, %edx
	movl	%eax, 704(%rsp)         # 4-byte Spill
	movl	%edx, 788(%rsp)         # 4-byte Spill
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	je	.LBB65_49
	jmp	.LBB65_46
.Lfunc_end65:
	.size	BZ2_compressBlock, .Lfunc_end65-BZ2_compressBlock
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bsPutUInt32
	.type	bsPutUInt32,@function
bsPutUInt32:                            # @bsPutUInt32
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$104, %rsp
	.cfi_def_cfa_offset 112
	movl	$9999, 100(%rsp)        # imm = 0x270F
	movl	%esi, %eax
	shrl	$24, %eax
	movq	%rdi, %rcx
	addq	$644, %rcx              # imm = 0x284
	movl	644(%rdi), %edx
	movl	$10502, 100(%rsp)       # imm = 0x2906
	movq	%rdi, %r8
	addq	$640, %r8               # imm = 0x280
	cmpl	$7, %edx
	movl	%esi, 96(%rsp)          # 4-byte Spill
	movq	%rdi, 88(%rsp)          # 8-byte Spill
	movl	%eax, 84(%rsp)          # 4-byte Spill
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movl	%edx, 68(%rsp)          # 4-byte Spill
	movq	%r8, 56(%rsp)           # 8-byte Spill
	jg	.LBB66_2
# %bb.1:                                # %entry.while.end_crit_edge.i
	movq	56(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %ecx
	movl	$10506, 100(%rsp)       # imm = 0x290A
	movl	68(%rsp), %edx          # 4-byte Reload
	movl	%ecx, 52(%rsp)          # 4-byte Spill
	movl	%edx, 48(%rsp)          # 4-byte Spill
	jmp	.LBB66_4
.LBB66_2:                               # %while.body.lr.ph.i
	movq	88(%rsp), %rax          # 8-byte Reload
	addq	$80, %rax
	movq	88(%rsp), %rcx          # 8-byte Reload
	addq	$116, %rcx
	movq	56(%rsp), %rdx          # 8-byte Reload
	movl	(%rdx), %esi
	movl	$10507, 100(%rsp)       # imm = 0x290B
	movq	88(%rsp), %rdi          # 8-byte Reload
	movl	116(%rdi), %r8d
	movl	$10515, 100(%rsp)       # imm = 0x2913
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movl	%r8d, 28(%rsp)          # 4-byte Spill
	movl	%esi, 24(%rsp)          # 4-byte Spill
.LBB66_3:                               # %while.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	24(%rsp), %eax          # 4-byte Reload
	movl	28(%rsp), %ecx          # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	40(%rsp), %rsi          # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$10518, 100(%rsp)       # imm = 0x2916
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$10519, 100(%rsp)       # imm = 0x2917
	movq	32(%rsp), %rdi          # 8-byte Reload
	movl	(%rdi), %eax
	movl	$10520, 100(%rsp)       # imm = 0x2918
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$10521, 100(%rsp)       # imm = 0x2919
	movq	56(%rsp), %r8           # 8-byte Reload
	movl	(%r8), %ecx
	movl	$10522, 100(%rsp)       # imm = 0x291A
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$10523, 100(%rsp)       # imm = 0x291B
	movq	72(%rsp), %r9           # 8-byte Reload
	movl	(%r9), %r10d
	movl	$10525, 100(%rsp)       # imm = 0x291D
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$10533, 100(%rsp)       # imm = 0x2925
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 52(%rsp)          # 4-byte Spill
	movl	%r10d, 24(%rsp)         # 4-byte Spill
	movl	%eax, 28(%rsp)          # 4-byte Spill
	movl	%r11d, 48(%rsp)         # 4-byte Spill
	jg	.LBB66_3
.LBB66_4:                               # %bsW.exit
	movl	48(%rsp), %eax          # 4-byte Reload
	movl	52(%rsp), %ecx          # 4-byte Reload
	movl	$24, %edx
	subl	%eax, %edx
	movl	%ecx, 20(%rsp)          # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	84(%rsp), %edx          # 4-byte Reload
	shll	%cl, %edx
	movl	20(%rsp), %esi          # 4-byte Reload
	orl	%esi, %edx
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$10535, 100(%rsp)       # imm = 0x2927
	movl	%eax, %esi
	addl	$8, %esi
	movq	72(%rsp), %r8           # 8-byte Reload
	movl	%esi, (%r8)
	movl	$10542, 100(%rsp)       # imm = 0x292E
	movl	96(%rsp), %r9d          # 4-byte Reload
	shrl	$16, %r9d
	andl	$255, %r9d
	cmpl	$-1, %eax
	movl	%edx, %eax
	movl	%r9d, 16(%rsp)          # 4-byte Spill
	movl	%edx, 12(%rsp)          # 4-byte Spill
	movl	%eax, 8(%rsp)           # 4-byte Spill
	movl	%esi, 4(%rsp)           # 4-byte Spill
	jle	.LBB66_7
# %bb.5:                                # %while.body.lr.ph.i78
	movq	88(%rsp), %rax          # 8-byte Reload
	addq	$80, %rax
	movq	88(%rsp), %rcx          # 8-byte Reload
	addq	$116, %rcx
	movq	88(%rsp), %rdx          # 8-byte Reload
	movl	116(%rdx), %esi
	movl	$10550, 100(%rsp)       # imm = 0x2936
	movl	12(%rsp), %edi          # 4-byte Reload
	movq	%rax, -8(%rsp)          # 8-byte Spill
	movq	%rcx, -16(%rsp)         # 8-byte Spill
	movl	%esi, -20(%rsp)         # 4-byte Spill
	movl	%edi, -24(%rsp)         # 4-byte Spill
.LBB66_6:                               # %while.body.i87
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rsp), %eax         # 4-byte Reload
	movl	-20(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	-8(%rsp), %rsi          # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$10553, 100(%rsp)       # imm = 0x2939
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$10554, 100(%rsp)       # imm = 0x293A
	movq	-16(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movl	$10555, 100(%rsp)       # imm = 0x293B
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$10556, 100(%rsp)       # imm = 0x293C
	movq	56(%rsp), %r8           # 8-byte Reload
	movl	(%r8), %ecx
	movl	$10557, 100(%rsp)       # imm = 0x293D
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$10558, 100(%rsp)       # imm = 0x293E
	movq	72(%rsp), %r9           # 8-byte Reload
	movl	(%r9), %r10d
	movl	$10560, 100(%rsp)       # imm = 0x2940
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$10568, 100(%rsp)       # imm = 0x2948
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 8(%rsp)           # 4-byte Spill
	movl	%r10d, -24(%rsp)        # 4-byte Spill
	movl	%eax, -20(%rsp)         # 4-byte Spill
	movl	%r11d, 4(%rsp)          # 4-byte Spill
	jg	.LBB66_6
.LBB66_7:                               # %bsW.exit93
	movl	4(%rsp), %eax           # 4-byte Reload
	movl	8(%rsp), %ecx           # 4-byte Reload
	movl	$24, %edx
	subl	%eax, %edx
	movl	%ecx, -28(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	16(%rsp), %edx          # 4-byte Reload
	shll	%cl, %edx
	movl	-28(%rsp), %esi         # 4-byte Reload
	orl	%esi, %edx
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$10570, 100(%rsp)       # imm = 0x294A
	movl	%eax, %esi
	addl	$8, %esi
	movq	72(%rsp), %r8           # 8-byte Reload
	movl	%esi, (%r8)
	movl	$10577, 100(%rsp)       # imm = 0x2951
	movl	96(%rsp), %r9d          # 4-byte Reload
	shrl	$8, %r9d
	andl	$255, %r9d
	cmpl	$-1, %eax
	movl	%edx, %eax
	movl	%r9d, -32(%rsp)         # 4-byte Spill
	movl	%edx, -36(%rsp)         # 4-byte Spill
	movl	%eax, -40(%rsp)         # 4-byte Spill
	movl	%esi, -44(%rsp)         # 4-byte Spill
	jle	.LBB66_10
# %bb.8:                                # %while.body.lr.ph.i53
	movq	88(%rsp), %rax          # 8-byte Reload
	addq	$80, %rax
	movq	88(%rsp), %rcx          # 8-byte Reload
	addq	$116, %rcx
	movq	88(%rsp), %rdx          # 8-byte Reload
	movl	116(%rdx), %esi
	movl	$10585, 100(%rsp)       # imm = 0x2959
	movl	-36(%rsp), %edi         # 4-byte Reload
	movq	%rax, -56(%rsp)         # 8-byte Spill
	movq	%rcx, -64(%rsp)         # 8-byte Spill
	movl	%esi, -68(%rsp)         # 4-byte Spill
	movl	%edi, -72(%rsp)         # 4-byte Spill
.LBB66_9:                               # %while.body.i62
                                        # =>This Inner Loop Header: Depth=1
	movl	-72(%rsp), %eax         # 4-byte Reload
	movl	-68(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	-56(%rsp), %rsi         # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$10588, 100(%rsp)       # imm = 0x295C
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$10589, 100(%rsp)       # imm = 0x295D
	movq	-64(%rsp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movl	$10590, 100(%rsp)       # imm = 0x295E
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$10591, 100(%rsp)       # imm = 0x295F
	movq	56(%rsp), %r8           # 8-byte Reload
	movl	(%r8), %ecx
	movl	$10592, 100(%rsp)       # imm = 0x2960
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$10593, 100(%rsp)       # imm = 0x2961
	movq	72(%rsp), %r9           # 8-byte Reload
	movl	(%r9), %r10d
	movl	$10595, 100(%rsp)       # imm = 0x2963
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$10603, 100(%rsp)       # imm = 0x296B
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, -40(%rsp)         # 4-byte Spill
	movl	%r10d, -72(%rsp)        # 4-byte Spill
	movl	%eax, -68(%rsp)         # 4-byte Spill
	movl	%r11d, -44(%rsp)        # 4-byte Spill
	jg	.LBB66_9
.LBB66_10:                              # %bsW.exit68
	movl	-44(%rsp), %eax         # 4-byte Reload
	movl	-40(%rsp), %ecx         # 4-byte Reload
	movl	$24, %edx
	subl	%eax, %edx
	movl	%ecx, -76(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	-32(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	-76(%rsp), %esi         # 4-byte Reload
	orl	%esi, %edx
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$10605, 100(%rsp)       # imm = 0x296D
	movl	%eax, %esi
	addl	$8, %esi
	movq	72(%rsp), %r8           # 8-byte Reload
	movl	%esi, (%r8)
	movl	$10611, 100(%rsp)       # imm = 0x2973
	movl	96(%rsp), %r9d          # 4-byte Reload
	andl	$255, %r9d
	cmpl	$-1, %eax
	movl	%edx, %eax
	movl	%r9d, -80(%rsp)         # 4-byte Spill
	movl	%edx, -84(%rsp)         # 4-byte Spill
	movl	%eax, -88(%rsp)         # 4-byte Spill
	movl	%esi, -92(%rsp)         # 4-byte Spill
	jle	.LBB66_13
# %bb.11:                               # %while.body.lr.ph.i28
	movq	88(%rsp), %rax          # 8-byte Reload
	addq	$80, %rax
	movq	88(%rsp), %rcx          # 8-byte Reload
	addq	$116, %rcx
	movq	88(%rsp), %rdx          # 8-byte Reload
	movl	116(%rdx), %esi
	movl	$10619, 100(%rsp)       # imm = 0x297B
	movl	-84(%rsp), %edi         # 4-byte Reload
	movq	%rax, -104(%rsp)        # 8-byte Spill
	movq	%rcx, -112(%rsp)        # 8-byte Spill
	movl	%esi, -116(%rsp)        # 4-byte Spill
	movl	%edi, -120(%rsp)        # 4-byte Spill
.LBB66_12:                              # %while.body.i37
                                        # =>This Inner Loop Header: Depth=1
	movl	-120(%rsp), %eax        # 4-byte Reload
	movl	-116(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	-104(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$10622, 100(%rsp)       # imm = 0x297E
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$10623, 100(%rsp)       # imm = 0x297F
	movq	-112(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$10624, 100(%rsp)       # imm = 0x2980
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$10625, 100(%rsp)       # imm = 0x2981
	movq	56(%rsp), %r8           # 8-byte Reload
	movl	(%r8), %ecx
	movl	$10626, 100(%rsp)       # imm = 0x2982
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$10627, 100(%rsp)       # imm = 0x2983
	movq	72(%rsp), %r9           # 8-byte Reload
	movl	(%r9), %r10d
	movl	$10629, 100(%rsp)       # imm = 0x2985
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$10637, 100(%rsp)       # imm = 0x298D
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, -88(%rsp)         # 4-byte Spill
	movl	%r10d, -120(%rsp)       # 4-byte Spill
	movl	%eax, -116(%rsp)        # 4-byte Spill
	movl	%r11d, -92(%rsp)        # 4-byte Spill
	jg	.LBB66_12
.LBB66_13:                              # %bsW.exit43
	movl	-92(%rsp), %eax         # 4-byte Reload
	movl	-88(%rsp), %ecx         # 4-byte Reload
	movl	$24, %edx
	subl	%eax, %edx
	movl	%ecx, -124(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	-80(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	-124(%rsp), %esi        # 4-byte Reload
	orl	%esi, %edx
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	%edx, (%rdi)
	movl	$10639, 100(%rsp)       # imm = 0x298F
	addl	$8, %eax
	movq	72(%rsp), %r8           # 8-byte Reload
	movl	%eax, (%r8)
	movl	$10657, 100(%rsp)       # imm = 0x29A1
	addq	$104, %rsp
	retq
.Lfunc_end66:
	.size	bsPutUInt32, .Lfunc_end66-bsPutUInt32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function sendMTFValues
.LCPI67_0:
	.quad	4636737291354636288     # double 100
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI67_1:
	.long	32                      # 0x20
	.long	32                      # 0x20
	.long	32                      # 0x20
	.long	32                      # 0x20
	.text
	.p2align	4, 0x90
	.type	sendMTFValues,@function
sendMTFValues:                          # @sendMTFValues
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$4168, %rsp             # imm = 0x1048
	.cfi_def_cfa_offset 4224
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	leaq	4128(%rsp), %rax
	leaq	4152(%rsp), %rcx
	movl	$9999, 4164(%rsp)       # imm = 0x270F
	movq	72(%rdi), %rdx
	movl	$10659, 4164(%rsp)      # imm = 0x29A3
	movq	%rdi, %rsi
	addq	$656, %rsi              # imm = 0x290
	movl	656(%rdi), %r8d
	movl	$10664, 4164(%rsp)      # imm = 0x29A8
	cmpl	$2, %r8d
	movq	%rdi, 4088(%rsp)        # 8-byte Spill
	movq	%rcx, 4080(%rsp)        # 8-byte Spill
	movq	%rax, 4072(%rsp)        # 8-byte Spill
	movq	%rdx, 4064(%rsp)        # 8-byte Spill
	movq	%rsi, 4056(%rsp)        # 8-byte Spill
	jg	.LBB67_2
# %bb.1:                                # %entry.if.end_crit_edge
	movq	4088(%rsp), %rax        # 8-byte Reload
	addq	$124, %rax
	movq	%rax, 4048(%rsp)        # 8-byte Spill
	jmp	.LBB67_3
.LBB67_2:                               # %if.then
	movabsq	$.L.str.2.68, %rsi
	movq	stderr, %rdi
	movl	$10666, 4164(%rsp)      # imm = 0x29AA
	movq	4088(%rsp), %rax        # 8-byte Reload
	movl	108(%rax), %edx
	movl	$10668, 4164(%rsp)      # imm = 0x29AC
	movl	668(%rax), %ecx
	movl	$10670, 4164(%rsp)      # imm = 0x29AE
	addq	$124, %rax
	movq	4088(%rsp), %r8         # 8-byte Reload
	movl	124(%r8), %r8d
	movl	$10675, 4164(%rsp)      # imm = 0x29B3
	movq	%rax, 4040(%rsp)        # 8-byte Spill
	movb	$0, %al
	callq	fprintf
	movq	4040(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 4036(%rsp)        # 4-byte Spill
	movq	%rsi, 4048(%rsp)        # 8-byte Spill
.LBB67_3:                               # %if.end
	movq	4048(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$10697, 4164(%rsp)      # imm = 0x29C9
	movl	%ecx, %edx
	addl	$2, %edx
	cmpl	$-2, %ecx
	setg	%sil
	testb	$1, %sil
	movl	%ecx, 4032(%rsp)        # 4-byte Spill
	movl	%edx, 4028(%rsp)        # 4-byte Spill
	movb	%sil, 4027(%rsp)        # 1-byte Spill
	jne	.LBB67_4
	jmp	.LBB67_5
.LBB67_4:                               # %if.end.split.us
	movl	$15, %eax
	movl	$1, %ecx
	movl	4028(%rsp), %edx        # 4-byte Reload
	cmpl	$1, %edx
	cmovgl	%edx, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movq	4088(%rsp), %rdi        # 8-byte Reload
	addq	$37708, %rdi            # imm = 0x934C
	movq	%rsi, 4016(%rsp)        # 8-byte Spill
	movl	%eax, %esi
	movq	4016(%rsp), %rdx        # 8-byte Reload
	movl	%eax, 4012(%rsp)        # 4-byte Spill
	callq	memset
	movq	4088(%rsp), %rdx        # 8-byte Reload
	addq	$37708, %rdx            # imm = 0x934C
	addq	$258, %rdx              # imm = 0x102
	movq	%rdx, %rdi
	movl	4012(%rsp), %esi        # 4-byte Reload
	movq	4016(%rsp), %rdx        # 8-byte Reload
	callq	memset
	movq	4088(%rsp), %rdx        # 8-byte Reload
	addq	$37708, %rdx            # imm = 0x934C
	addq	$516, %rdx              # imm = 0x204
	movq	%rdx, %rdi
	movl	4012(%rsp), %esi        # 4-byte Reload
	movq	4016(%rsp), %rdx        # 8-byte Reload
	callq	memset
	movq	4088(%rsp), %rdx        # 8-byte Reload
	addq	$37708, %rdx            # imm = 0x934C
	addq	$774, %rdx              # imm = 0x306
	movq	%rdx, %rdi
	movl	4012(%rsp), %esi        # 4-byte Reload
	movq	4016(%rsp), %rdx        # 8-byte Reload
	callq	memset
	movq	4088(%rsp), %rdx        # 8-byte Reload
	addq	$37708, %rdx            # imm = 0x934C
	addq	$1032, %rdx             # imm = 0x408
	movq	%rdx, %rdi
	movl	4012(%rsp), %esi        # 4-byte Reload
	movq	4016(%rsp), %rdx        # 8-byte Reload
	callq	memset
	movq	4088(%rsp), %rdx        # 8-byte Reload
	addq	$37708, %rdx            # imm = 0x934C
	addq	$1290, %rdx             # imm = 0x50A
	movq	%rdx, %rdi
	movl	4012(%rsp), %esi        # 4-byte Reload
	movq	4016(%rsp), %rdx        # 8-byte Reload
	callq	memset
.LBB67_5:                               # %for.end11
	movq	4088(%rsp), %rax        # 8-byte Reload
	addq	$668, %rax              # imm = 0x29C
	movq	4088(%rsp), %rcx        # 8-byte Reload
	movl	668(%rcx), %edx
	movl	$10702, 4164(%rsp)      # imm = 0x29CE
	cmpl	$0, %edx
	movq	%rax, 4000(%rsp)        # 8-byte Spill
	movl	%edx, 3996(%rsp)        # 4-byte Spill
	jg	.LBB67_7
# %bb.6:                                # %if.then14
	movl	$3001, %edi             # imm = 0xBB9
	callq	BZ2_bz__AssertH__fail
	movq	4000(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %edi
	movl	$10740, 4164(%rsp)      # imm = 0x29F4
	movl	%edi, 3996(%rsp)        # 4-byte Spill
.LBB67_7:                               # %if.end15
	movl	3996(%rsp), %eax        # 4-byte Reload
	movl	$2, %ecx
	cmpl	$200, %eax
	movl	%eax, 3992(%rsp)        # 4-byte Spill
	movl	%ecx, 3988(%rsp)        # 4-byte Spill
	jl	.LBB67_11
# %bb.8:                                # %if.else
	movl	$3, %eax
	movl	3992(%rsp), %ecx        # 4-byte Reload
	cmpl	$600, %ecx              # imm = 0x258
	movl	%eax, 3988(%rsp)        # 4-byte Spill
	jl	.LBB67_11
# %bb.9:                                # %if.else22
	movl	$4, %eax
	movl	3992(%rsp), %ecx        # 4-byte Reload
	cmpl	$1200, %ecx             # imm = 0x4B0
	movl	%eax, 3988(%rsp)        # 4-byte Spill
	jl	.LBB67_11
# %bb.10:                               # %if.else26
	movl	$6, %eax
	movl	$5, %ecx
	movl	3992(%rsp), %edx        # 4-byte Reload
	cmpl	$2400, %edx             # imm = 0x960
	cmovll	%ecx, %eax
	movl	%eax, 3988(%rsp)        # 4-byte Spill
.LBB67_11:                              # %if.end34
	movl	3988(%rsp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movl	4032(%rsp), %edx        # 4-byte Reload
	movslq	%edx, %rsi
	movl	4028(%rsp), %edi        # 4-byte Reload
	movslq	%edi, %r8
	movl	%eax, %r9d
	movl	%r9d, %r10d
	movl	3992(%rsp), %r9d        # 4-byte Reload
	movl	%eax, 3984(%rsp)        # 4-byte Spill
	movq	%r10, 3976(%rsp)        # 8-byte Spill
	movq	%rsi, 3968(%rsp)        # 8-byte Spill
	movq	%r8, 3960(%rsp)         # 8-byte Spill
	movl	%ecx, 3956(%rsp)        # 4-byte Spill
	movl	%r9d, 3952(%rsp)        # 4-byte Spill
.LBB67_12:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_14 Depth 2
                                        #     Child Loop BB67_23 Depth 2
	movl	3952(%rsp), %eax        # 4-byte Reload
	movl	3956(%rsp), %ecx        # 4-byte Reload
	movq	3976(%rsp), %rdx        # 8-byte Reload
	xorl	%esi, %esi
	movl	%edx, %edi
	movl	%eax, 3948(%rsp)        # 4-byte Spill
	movq	%rdx, 3936(%rsp)        # 8-byte Spill
	cltd
	idivl	%edi
	movl	%ecx, %r8d
	addl	$-1, %r8d
	cmpl	$0, %eax
	setg	%r9b
	movl	4032(%rsp), %r10d       # 4-byte Reload
	cmpl	%r10d, %r8d
	setle	%r11b
	andb	%r11b, %r9b
	testb	$1, %r9b
	movl	%r8d, %ebx
	movl	%edi, 3932(%rsp)        # 4-byte Spill
	movl	%ecx, 3928(%rsp)        # 4-byte Spill
	movl	%eax, 3924(%rsp)        # 4-byte Spill
	movl	%r8d, 3920(%rsp)        # 4-byte Spill
	movl	%esi, 3916(%rsp)        # 4-byte Spill
	movl	%ebx, 3912(%rsp)        # 4-byte Spill
	jne	.LBB67_13
	jmp	.LBB67_19
.LBB67_13:                              # %while.body41.lr.ph
                                        #   in Loop: Header=BB67_12 Depth=1
	xorl	%eax, %eax
	movl	3920(%rsp), %ecx        # 4-byte Reload
	movslq	%ecx, %rdx
	movq	%rdx, 3904(%rsp)        # 8-byte Spill
	movl	%eax, 3900(%rsp)        # 4-byte Spill
.LBB67_14:                              # %while.body41
                                        #   Parent Loop BB67_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	3900(%rsp), %eax        # 4-byte Reload
	movq	3904(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	4088(%rsp), %rsi        # 8-byte Reload
	movl	676(%rsi,%rcx,4), %edi
	movl	$10760, 4164(%rsp)      # imm = 0x2A08
	addl	%eax, %edi
	movl	3924(%rsp), %eax        # 4-byte Reload
	cmpl	%eax, %edi
	setl	%r8b
	movq	3968(%rsp), %r9         # 8-byte Reload
	cmpq	%r9, %rcx
	setl	%r10b
	andb	%r10b, %r8b
	testb	$1, %r8b
	movq	%rdx, %rcx
	movl	%edi, %r11d
	movl	%edi, 3896(%rsp)        # 4-byte Spill
	movq	%rdx, 3888(%rsp)        # 8-byte Spill
	movq	%rcx, 3904(%rsp)        # 8-byte Spill
	movl	%r11d, 3900(%rsp)       # 4-byte Spill
	jne	.LBB67_14
# %bb.15:                               # %while.end
                                        #   in Loop: Header=BB67_12 Depth=1
	movq	3888(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	3928(%rsp), %edx        # 4-byte Reload
	cmpl	%ecx, %edx
	movl	3896(%rsp), %esi        # 4-byte Reload
	movl	%ecx, %edi
	movl	%ecx, 3884(%rsp)        # 4-byte Spill
	movl	%esi, 3916(%rsp)        # 4-byte Spill
	movl	%edi, 3912(%rsp)        # 4-byte Spill
	jge	.LBB67_19
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB67_12 Depth=1
	movl	3984(%rsp), %eax        # 4-byte Reload
	movl	3932(%rsp), %ecx        # 4-byte Reload
	cmpl	%ecx, %eax
	setne	%dl
	cmpl	$1, %ecx
	setne	%sil
	andb	%sil, %dl
	testb	$1, %dl
	movl	3896(%rsp), %edi        # 4-byte Reload
	movl	3884(%rsp), %r8d        # 4-byte Reload
	movl	%edi, 3916(%rsp)        # 4-byte Spill
	movl	%r8d, 3912(%rsp)        # 4-byte Spill
	jne	.LBB67_17
	jmp	.LBB67_19
.LBB67_17:                              # %land.lhs.true50
                                        #   in Loop: Header=BB67_12 Depth=1
	movq	3936(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	3984(%rsp), %edx        # 4-byte Reload
	subl	%ecx, %edx
	andl	$1, %edx
	cmpl	$0, %edx
	movl	3896(%rsp), %ecx        # 4-byte Reload
	movl	3884(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 3916(%rsp)        # 4-byte Spill
	movl	%edx, 3912(%rsp)        # 4-byte Spill
	je	.LBB67_19
# %bb.18:                               # %if.then53
                                        #   in Loop: Header=BB67_12 Depth=1
	movq	3888(%rsp), %rax        # 8-byte Reload
	shlq	$32, %rax
	sarq	$32, %rax
	movq	4088(%rsp), %rcx        # 8-byte Reload
	movl	672(%rcx,%rax,4), %edx
	movl	$10766, 4164(%rsp)      # imm = 0x2A0E
	movl	3896(%rsp), %esi        # 4-byte Reload
	subl	%edx, %esi
	movl	3884(%rsp), %edx        # 4-byte Reload
	addl	$-1, %edx
	movl	%esi, 3916(%rsp)        # 4-byte Spill
	movl	%edx, 3912(%rsp)        # 4-byte Spill
.LBB67_19:                              # %if.end58
                                        #   in Loop: Header=BB67_12 Depth=1
	movl	3912(%rsp), %eax        # 4-byte Reload
	movl	3916(%rsp), %ecx        # 4-byte Reload
	movq	4056(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %esi
	movl	$10769, 4164(%rsp)      # imm = 0x2A11
	cmpl	$2, %esi
	movl	%eax, 3880(%rsp)        # 4-byte Spill
	movl	%ecx, 3876(%rsp)        # 4-byte Spill
	jle	.LBB67_21
# %bb.20:                               # %if.then61
                                        #   in Loop: Header=BB67_12 Depth=1
	movabsq	$.L.str.3.69, %rsi
	movsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	stderr, %rdi
	movl	$10773, 4164(%rsp)      # imm = 0x2A15
	movl	3876(%rsp), %eax        # 4-byte Reload
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm0, %xmm1
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$10791, 4164(%rsp)      # imm = 0x2A27
	cvtsi2ssl	%edx, %xmm0
	cvtss2sd	%xmm0, %xmm0
	divsd	%xmm0, %xmm1
	movl	3932(%rsp), %edx        # 4-byte Reload
	movl	3928(%rsp), %ecx        # 4-byte Reload
	movl	3880(%rsp), %r8d        # 4-byte Reload
	movl	%eax, %r9d
	movaps	%xmm1, %xmm0
	movb	$1, %al
	callq	fprintf
	movl	%eax, 3872(%rsp)        # 4-byte Spill
.LBB67_21:                              # %if.end68
                                        #   in Loop: Header=BB67_12 Depth=1
	movq	3936(%rsp), %rax        # 8-byte Reload
	addq	$-1, %rax
	movb	4027(%rsp), %cl         # 1-byte Reload
	testb	$1, %cl
	movq	%rax, 3864(%rsp)        # 8-byte Spill
	jne	.LBB67_22
	jmp	.LBB67_24
.LBB67_22:                              # %for.body72.lr.ph
                                        #   in Loop: Header=BB67_12 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	3880(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rdx
	movl	3928(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rdi
	movq	%rdi, 3856(%rsp)        # 8-byte Spill
	movq	%rdx, 3848(%rsp)        # 8-byte Spill
	movq	%rcx, 3840(%rsp)        # 8-byte Spill
.LBB67_23:                              # %for.body72
                                        #   Parent Loop BB67_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	3840(%rsp), %rax        # 8-byte Reload
	movb	$15, %cl
	xorl	%edx, %edx
	movb	%dl, %sil
	movq	3856(%rsp), %rdi        # 8-byte Reload
	cmpq	%rdi, %rax
	setl	%r8b
	movq	3848(%rsp), %r9         # 8-byte Reload
	cmpq	%r9, %rax
	setg	%r10b
	orb	%r10b, %r8b
	movq	4088(%rsp), %r11        # 8-byte Reload
	addq	$37708, %r11            # imm = 0x934C
	movq	3864(%rsp), %rbx        # 8-byte Reload
	imulq	$258, %rbx, %r14        # imm = 0x102
	addq	%r14, %r11
	addq	%rax, %r11
	testb	$1, %r8b
	movq	%rax, 3832(%rsp)        # 8-byte Spill
	movb	%sil, 3831(%rsp)        # 1-byte Spill
	movq	%r11, 3816(%rsp)        # 8-byte Spill
	movb	%cl, 3815(%rsp)         # 1-byte Spill
	jne	.LBB67_343
# %bb.342:                              # %for.body72
                                        #   in Loop: Header=BB67_23 Depth=2
	movb	3831(%rsp), %al         # 1-byte Reload
	movb	%al, 3815(%rsp)         # 1-byte Spill
.LBB67_343:                             # %for.body72
                                        #   in Loop: Header=BB67_23 Depth=2
	movb	3815(%rsp), %al         # 1-byte Reload
	movq	3816(%rsp), %rcx        # 8-byte Reload
	movb	%al, (%rcx)
	movl	$10864, 4164(%rsp)      # imm = 0x2A70
	movq	3832(%rsp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	movq	3960(%rsp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rdx
	movq	%rdx, 3840(%rsp)        # 8-byte Spill
	jl	.LBB67_23
.LBB67_24:                              # %for.end95
                                        #   in Loop: Header=BB67_12 Depth=1
	movl	3880(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	3948(%rsp), %ecx        # 4-byte Reload
	movl	3876(%rsp), %edx        # 4-byte Reload
	subl	%edx, %ecx
	movq	3936(%rsp), %rsi        # 8-byte Reload
	cmpq	$1, %rsi
	movq	3864(%rsp), %rdi        # 8-byte Reload
	movq	%rdi, 3976(%rsp)        # 8-byte Spill
	movl	%eax, 3956(%rsp)        # 4-byte Spill
	movl	%ecx, 3952(%rsp)        # 4-byte Spill
	jg	.LBB67_12
# %bb.25:                               # %while.end99
	xorl	%eax, %eax
	leaq	4152(%rsp), %rcx
	movl	$1, %edx
	movl	3984(%rsp), %esi        # 4-byte Reload
	cmpl	$6, %esi
	sete	%dil
	movl	4032(%rsp), %r8d        # 4-byte Reload
	cmpl	$-1, %r8d
	setl	%r9b
	movq	%rcx, %r10
	addq	$2, %r10
	movq	%rcx, %r11
	addq	$4, %r11
	movq	%rcx, %rbx
	addq	$6, %rbx
	movq	%rcx, %r14
	addq	$8, %r14
	movq	%rcx, %r15
	addq	$10, %r15
	movl	%esi, %ebp
	movl	%ebp, %r12d
	shll	$2, %esi
	movl	%esi, %esi
	movl	%esi, %r13d
	movl	4028(%rsp), %esi        # 4-byte Reload
	cmpl	$1, %esi
	cmovgl	%esi, %edx
	movl	%edx, %edx
	movl	%edx, %esi
	shlq	$2, %rsi
	movl	3984(%rsp), %edx        # 4-byte Reload
	shll	$1, %edx
	movl	%edx, %edx
                                        # kill: def %rdx killed %edx
	movb	%dil, %r8b
	xorb	$-1, %r8b
	orb	%r8b, %r9b
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	movq	%rcx, %rbp
	addq	$2, %rbp
	movl	%eax, 3808(%rsp)        # 4-byte Spill
	movl	3984(%rsp), %eax        # 4-byte Reload
	cmpl	$2, %eax
	seta	%al
	movb	%al, 3807(%rsp)         # 1-byte Spill
	movq	%rcx, %rax
	addq	$4, %rax
	movq	%rsi, 3792(%rsp)        # 8-byte Spill
	movl	3984(%rsp), %esi        # 4-byte Reload
	cmpl	$3, %esi
	sete	%sil
	movq	%rax, 3784(%rsp)        # 8-byte Spill
	movq	%rcx, %rax
	addq	$6, %rax
	movb	%sil, 3783(%rsp)        # 1-byte Spill
	movl	3984(%rsp), %esi        # 4-byte Reload
	cmpl	$4, %esi
	seta	%sil
	movq	%rax, 3768(%rsp)        # 8-byte Spill
	movq	%rcx, %rax
	addq	$8, %rax
	movb	%sil, 3767(%rsp)        # 1-byte Spill
	movl	3984(%rsp), %esi        # 4-byte Reload
	cmpl	$5, %esi
	sete	%sil
	movq	%rax, 3752(%rsp)        # 8-byte Spill
	movq	%rcx, %rax
	addq	$10, %rax
	movq	%rax, 3744(%rsp)        # 8-byte Spill
	movq	%rcx, %rax
	addq	$2, %rax
	movb	%sil, 3743(%rsp)        # 1-byte Spill
	movl	3984(%rsp), %esi        # 4-byte Reload
	cmpl	$2, %esi
	seta	%sil
	movq	%rax, 3728(%rsp)        # 8-byte Spill
	movq	%rcx, %rax
	addq	$4, %rax
	movb	%sil, 3727(%rsp)        # 1-byte Spill
	movl	3984(%rsp), %esi        # 4-byte Reload
	cmpl	$3, %esi
	sete	%sil
	movq	%rax, 3712(%rsp)        # 8-byte Spill
	movq	%rcx, %rax
	addq	$6, %rax
	movb	%sil, 3711(%rsp)        # 1-byte Spill
	movl	3984(%rsp), %esi        # 4-byte Reload
	cmpl	$4, %esi
	seta	%sil
	movq	%rax, 3696(%rsp)        # 8-byte Spill
	movq	%rcx, %rax
	addq	$8, %rax
	movb	%sil, 3695(%rsp)        # 1-byte Spill
	movl	3984(%rsp), %esi        # 4-byte Reload
	cmpl	$5, %esi
	sete	%sil
	movq	%rax, 3680(%rsp)        # 8-byte Spill
	movq	%rcx, %rax
	addq	$10, %rax
	movq	%rax, 3672(%rsp)        # 8-byte Spill
	movq	4088(%rsp), %rax        # 8-byte Reload
	addq	$45448, %rax            # imm = 0xB188
	addq	$1032, %rax             # imm = 0x408
	movb	%sil, 3671(%rsp)        # 1-byte Spill
	movl	3984(%rsp), %esi        # 4-byte Reload
	cmpl	$2, %esi
	seta	%sil
	movq	%rax, 3656(%rsp)        # 8-byte Spill
	movq	4088(%rsp), %rax        # 8-byte Reload
	addq	$45448, %rax            # imm = 0xB188
	addq	$2064, %rax             # imm = 0x810
	movb	%sil, 3655(%rsp)        # 1-byte Spill
	movl	3984(%rsp), %esi        # 4-byte Reload
	cmpl	$3, %esi
	sete	%sil
	movq	%rax, 3640(%rsp)        # 8-byte Spill
	movq	4088(%rsp), %rax        # 8-byte Reload
	addq	$45448, %rax            # imm = 0xB188
	addq	$3096, %rax             # imm = 0xC18
	movb	%sil, 3639(%rsp)        # 1-byte Spill
	movl	3984(%rsp), %esi        # 4-byte Reload
	cmpl	$4, %esi
	seta	%sil
	movq	%rax, 3624(%rsp)        # 8-byte Spill
	movq	4088(%rsp), %rax        # 8-byte Reload
	addq	$45448, %rax            # imm = 0xB188
	addq	$4128, %rax             # imm = 0x1020
	movb	%sil, 3623(%rsp)        # 1-byte Spill
	movl	3984(%rsp), %esi        # 4-byte Reload
	cmpl	$5, %esi
	sete	%sil
	movq	%rax, 3608(%rsp)        # 8-byte Spill
	movq	4088(%rsp), %rax        # 8-byte Reload
	addq	$45448, %rax            # imm = 0xB188
	addq	$5160, %rax             # imm = 0x1428
	movb	%sil, 3607(%rsp)        # 1-byte Spill
	movl	3808(%rsp), %esi        # 4-byte Reload
	movq	%rbp, 3592(%rsp)        # 8-byte Spill
	movq	%rcx, 3584(%rsp)        # 8-byte Spill
	movq	%r13, 3576(%rsp)        # 8-byte Spill
	movq	%r12, 3568(%rsp)        # 8-byte Spill
	movb	%dil, 3567(%rsp)        # 1-byte Spill
	movb	%r9b, 3566(%rsp)        # 1-byte Spill
	movq	%rdx, 3552(%rsp)        # 8-byte Spill
	movq	%r10, 3544(%rsp)        # 8-byte Spill
	movq	%r11, 3536(%rsp)        # 8-byte Spill
	movq	%rbx, 3528(%rsp)        # 8-byte Spill
	movq	%r14, 3520(%rsp)        # 8-byte Spill
	movq	%r15, 3512(%rsp)        # 8-byte Spill
	movl	%esi, 3508(%rsp)        # 4-byte Spill
	movq	%r8, 3496(%rsp)         # 8-byte Spill
	movq	%rax, 3488(%rsp)        # 8-byte Spill
.LBB67_26:                              # %for.body103
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_30 Depth 2
                                        #     Child Loop BB67_33 Depth 2
                                        #       Child Loop BB67_37 Depth 3
                                        #       Child Loop BB67_48 Depth 3
                                        #     Child Loop BB67_53 Depth 2
                                        #     Child Loop BB67_56 Depth 2
	movl	3508(%rsp), %eax        # 4-byte Reload
	xorl	%esi, %esi
	movq	4072(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rdx        # 8-byte Reload
	movl	%eax, 3484(%rsp)        # 4-byte Spill
	callq	memset
	movb	4027(%rsp), %cl         # 1-byte Reload
	testb	$1, %cl
	jne	.LBB67_27
	jmp	.LBB67_28
.LBB67_27:                              # %for.body116.us
                                        #   in Loop: Header=BB67_26 Depth=1
	xorl	%eax, %eax
	movq	3496(%rsp), %rdi        # 8-byte Reload
	movl	%eax, %esi
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movl	%eax, 3480(%rsp)        # 4-byte Spill
	callq	memset
	movq	3656(%rsp), %rdi        # 8-byte Reload
	movl	3480(%rsp), %esi        # 4-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	callq	memset
	movb	3655(%rsp), %cl         # 1-byte Reload
	testb	$1, %cl
	jne	.LBB67_330
.LBB67_28:                              # %for.end130
                                        #   in Loop: Header=BB67_26 Depth=1
	movb	3566(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB67_31
	jmp	.LBB67_29
.LBB67_29:                              # %for.body137.preheader
                                        #   in Loop: Header=BB67_26 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, 3472(%rsp)        # 8-byte Spill
	jmp	.LBB67_30
.LBB67_30:                              # %for.body137
                                        #   Parent Loop BB67_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	3472(%rsp), %rax        # 8-byte Reload
	movq	4088(%rsp), %rcx        # 8-byte Reload
	movb	37966(%rcx,%rax), %dl
	movl	$10868, 4164(%rsp)      # imm = 0x2A74
	movzbl	%dl, %esi
	shll	$16, %esi
	movb	37708(%rcx,%rax), %dl
	movl	$10872, 4164(%rsp)      # imm = 0x2A78
	movzbl	%dl, %edi
	orl	%edi, %esi
	addq	$51640, %rcx            # imm = 0xC9B8
	movq	%rax, %r8
	shlq	$4, %r8
	addq	%r8, %rcx
	movl	%esi, (%rcx)
	movl	$10874, 4164(%rsp)      # imm = 0x2A7A
	movq	4088(%rsp), %rcx        # 8-byte Reload
	movb	38482(%rcx,%rax), %dl
	movl	$10878, 4164(%rsp)      # imm = 0x2A7E
	movzbl	%dl, %esi
	shll	$16, %esi
	movb	38224(%rcx,%rax), %dl
	movl	$10882, 4164(%rsp)      # imm = 0x2A82
	movzbl	%dl, %edi
	orl	%edi, %esi
	addq	$51640, %rcx            # imm = 0xC9B8
	movq	%rax, %r8
	shlq	$4, %r8
	addq	%r8, %rcx
	addq	$4, %rcx
	movl	%esi, (%rcx)
	movl	$10884, 4164(%rsp)      # imm = 0x2A84
	movq	4088(%rsp), %rcx        # 8-byte Reload
	movb	38998(%rcx,%rax), %dl
	movl	$10888, 4164(%rsp)      # imm = 0x2A88
	movzbl	%dl, %esi
	shll	$16, %esi
	movb	38740(%rcx,%rax), %dl
	movl	$10892, 4164(%rsp)      # imm = 0x2A8C
	movzbl	%dl, %edi
	orl	%edi, %esi
	addq	$51640, %rcx            # imm = 0xC9B8
	movq	%rax, %r8
	shlq	$4, %r8
	addq	%r8, %rcx
	addq	$8, %rcx
	movl	%esi, (%rcx)
	movl	$10895, 4164(%rsp)      # imm = 0x2A8F
	addq	$1, %rax
	movq	3960(%rsp), %rcx        # 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, 3472(%rsp)        # 8-byte Spill
	jl	.LBB67_30
.LBB67_31:                              # %if.end186
                                        #   in Loop: Header=BB67_26 Depth=1
	xorl	%eax, %eax
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$10918, 4164(%rsp)      # imm = 0x2AA6
	cmpl	$0, %edx
	movl	%eax, %esi
	movl	%esi, 3468(%rsp)        # 4-byte Spill
	movl	%edx, 3464(%rsp)        # 4-byte Spill
	movl	%eax, 3460(%rsp)        # 4-byte Spill
	jle	.LBB67_51
# %bb.32:                               # %if.end193.preheader
                                        #   in Loop: Header=BB67_26 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	3464(%rsp), %edx        # 4-byte Reload
	movl	%eax, %esi
	movl	%esi, 3456(%rsp)        # 4-byte Spill
	movq	%rcx, 3448(%rsp)        # 8-byte Spill
	movl	%edx, 3444(%rsp)        # 4-byte Spill
	movl	%eax, 3440(%rsp)        # 4-byte Spill
	jmp	.LBB67_33
.LBB67_33:                              # %if.end193
                                        #   Parent Loop BB67_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_37 Depth 3
                                        #       Child Loop BB67_48 Depth 3
	movl	3440(%rsp), %eax        # 4-byte Reload
	movl	3456(%rsp), %ecx        # 4-byte Reload
	movl	3444(%rsp), %edx        # 4-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	xorl	%edi, %edi
	movl	%ecx, %r8d
	addl	$49, %r8d
	movl	%edx, %r9d
	addl	$-1, %r9d
	movq	4080(%rsp), %r10        # 8-byte Reload
	movl	%edi, 3436(%rsp)        # 4-byte Spill
	movq	%r10, %rdi
	movl	3436(%rsp), %r11d       # 4-byte Reload
	movq	%rsi, 3424(%rsp)        # 8-byte Spill
	movl	%r11d, %esi
	movq	3552(%rsp), %rbx        # 8-byte Reload
	movl	%edx, 3420(%rsp)        # 4-byte Spill
	movq	%rbx, %rdx
	movl	%eax, 3416(%rsp)        # 4-byte Spill
	movl	%ecx, 3412(%rsp)        # 4-byte Spill
	movl	%r8d, 3408(%rsp)        # 4-byte Spill
	movl	%r9d, 3404(%rsp)        # 4-byte Spill
	callq	memset
	movl	3408(%rsp), %eax        # 4-byte Reload
	movl	3420(%rsp), %ecx        # 4-byte Reload
	cmpl	%ecx, %eax
	movl	3404(%rsp), %esi        # 4-byte Reload
	cmovll	%eax, %esi
	movl	%esi, %r8d
	movl	3412(%rsp), %r9d        # 4-byte Reload
	subl	%r9d, %r8d
	cmpl	$49, %r8d
	sete	%bpl
	movb	3567(%rsp), %r14b       # 1-byte Reload
	andb	%bpl, %r14b
	testb	$1, %r14b
	movl	%esi, 3400(%rsp)        # 4-byte Spill
	movb	%r14b, 3399(%rsp)       # 1-byte Spill
	jne	.LBB67_34
	jmp	.LBB67_35
.LBB67_34:                              # %if.then219
                                        #   in Loop: Header=BB67_33 Depth=2
	movl	3412(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	4064(%rsp), %rdx        # 8-byte Reload
	movw	(%rdx,%rcx,2), %si
	movl	$10921, 4164(%rsp)      # imm = 0x2AA9
	movzwl	%si, %edi
	movl	%edi, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %edi
	movl	$10923, 4164(%rsp)      # imm = 0x2AAB
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r10d
	movl	$10925, 4164(%rsp)      # imm = 0x2AAD
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$10929, 4164(%rsp)      # imm = 0x2AB1
	addl	$1, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$10932, 4164(%rsp)      # imm = 0x2AB4
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %eax
	movl	$10935, 4164(%rsp)      # imm = 0x2AB7
	addl	%edi, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %edi
	movl	$10938, 4164(%rsp)      # imm = 0x2ABA
	addl	%r10d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r10d
	movl	$10943, 4164(%rsp)      # imm = 0x2ABF
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$2, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$10946, 4164(%rsp)      # imm = 0x2AC2
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$10949, 4164(%rsp)      # imm = 0x2AC5
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$10952, 4164(%rsp)      # imm = 0x2AC8
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$10957, 4164(%rsp)      # imm = 0x2ACD
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$3, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$10960, 4164(%rsp)      # imm = 0x2AD0
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$10963, 4164(%rsp)      # imm = 0x2AD3
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$10966, 4164(%rsp)      # imm = 0x2AD6
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$10971, 4164(%rsp)      # imm = 0x2ADB
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$4, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$10974, 4164(%rsp)      # imm = 0x2ADE
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$10977, 4164(%rsp)      # imm = 0x2AE1
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$10980, 4164(%rsp)      # imm = 0x2AE4
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$10985, 4164(%rsp)      # imm = 0x2AE9
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$5, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$10988, 4164(%rsp)      # imm = 0x2AEC
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$10991, 4164(%rsp)      # imm = 0x2AEF
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$10994, 4164(%rsp)      # imm = 0x2AF2
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$10999, 4164(%rsp)      # imm = 0x2AF7
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$6, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11002, 4164(%rsp)      # imm = 0x2AFA
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11005, 4164(%rsp)      # imm = 0x2AFD
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11008, 4164(%rsp)      # imm = 0x2B00
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11013, 4164(%rsp)      # imm = 0x2B05
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$7, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11016, 4164(%rsp)      # imm = 0x2B08
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11019, 4164(%rsp)      # imm = 0x2B0B
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11022, 4164(%rsp)      # imm = 0x2B0E
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11027, 4164(%rsp)      # imm = 0x2B13
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$8, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11030, 4164(%rsp)      # imm = 0x2B16
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11033, 4164(%rsp)      # imm = 0x2B19
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11036, 4164(%rsp)      # imm = 0x2B1C
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11041, 4164(%rsp)      # imm = 0x2B21
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$9, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11044, 4164(%rsp)      # imm = 0x2B24
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11047, 4164(%rsp)      # imm = 0x2B27
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11050, 4164(%rsp)      # imm = 0x2B2A
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11055, 4164(%rsp)      # imm = 0x2B2F
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$10, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11058, 4164(%rsp)      # imm = 0x2B32
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11061, 4164(%rsp)      # imm = 0x2B35
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11064, 4164(%rsp)      # imm = 0x2B38
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11069, 4164(%rsp)      # imm = 0x2B3D
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$11, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11072, 4164(%rsp)      # imm = 0x2B40
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11075, 4164(%rsp)      # imm = 0x2B43
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11078, 4164(%rsp)      # imm = 0x2B46
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11083, 4164(%rsp)      # imm = 0x2B4B
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$12, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11086, 4164(%rsp)      # imm = 0x2B4E
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11089, 4164(%rsp)      # imm = 0x2B51
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11092, 4164(%rsp)      # imm = 0x2B54
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11097, 4164(%rsp)      # imm = 0x2B59
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$13, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11100, 4164(%rsp)      # imm = 0x2B5C
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11103, 4164(%rsp)      # imm = 0x2B5F
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11106, 4164(%rsp)      # imm = 0x2B62
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11111, 4164(%rsp)      # imm = 0x2B67
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$14, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11114, 4164(%rsp)      # imm = 0x2B6A
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11117, 4164(%rsp)      # imm = 0x2B6D
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11120, 4164(%rsp)      # imm = 0x2B70
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11125, 4164(%rsp)      # imm = 0x2B75
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$15, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11128, 4164(%rsp)      # imm = 0x2B78
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11131, 4164(%rsp)      # imm = 0x2B7B
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11134, 4164(%rsp)      # imm = 0x2B7E
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11139, 4164(%rsp)      # imm = 0x2B83
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$16, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11142, 4164(%rsp)      # imm = 0x2B86
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11145, 4164(%rsp)      # imm = 0x2B89
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11148, 4164(%rsp)      # imm = 0x2B8C
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11153, 4164(%rsp)      # imm = 0x2B91
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$17, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11156, 4164(%rsp)      # imm = 0x2B94
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11159, 4164(%rsp)      # imm = 0x2B97
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11162, 4164(%rsp)      # imm = 0x2B9A
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11167, 4164(%rsp)      # imm = 0x2B9F
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$18, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11170, 4164(%rsp)      # imm = 0x2BA2
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11173, 4164(%rsp)      # imm = 0x2BA5
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11176, 4164(%rsp)      # imm = 0x2BA8
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11181, 4164(%rsp)      # imm = 0x2BAD
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$19, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11184, 4164(%rsp)      # imm = 0x2BB0
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11187, 4164(%rsp)      # imm = 0x2BB3
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11190, 4164(%rsp)      # imm = 0x2BB6
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11195, 4164(%rsp)      # imm = 0x2BBB
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$20, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11198, 4164(%rsp)      # imm = 0x2BBE
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11201, 4164(%rsp)      # imm = 0x2BC1
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11204, 4164(%rsp)      # imm = 0x2BC4
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11209, 4164(%rsp)      # imm = 0x2BC9
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$21, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11212, 4164(%rsp)      # imm = 0x2BCC
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11215, 4164(%rsp)      # imm = 0x2BCF
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11218, 4164(%rsp)      # imm = 0x2BD2
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11223, 4164(%rsp)      # imm = 0x2BD7
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$22, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11226, 4164(%rsp)      # imm = 0x2BDA
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11229, 4164(%rsp)      # imm = 0x2BDD
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11232, 4164(%rsp)      # imm = 0x2BE0
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11237, 4164(%rsp)      # imm = 0x2BE5
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$23, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11240, 4164(%rsp)      # imm = 0x2BE8
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11243, 4164(%rsp)      # imm = 0x2BEB
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11246, 4164(%rsp)      # imm = 0x2BEE
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11251, 4164(%rsp)      # imm = 0x2BF3
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$24, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11254, 4164(%rsp)      # imm = 0x2BF6
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11257, 4164(%rsp)      # imm = 0x2BF9
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11260, 4164(%rsp)      # imm = 0x2BFC
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11265, 4164(%rsp)      # imm = 0x2C01
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$25, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11268, 4164(%rsp)      # imm = 0x2C04
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11271, 4164(%rsp)      # imm = 0x2C07
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11274, 4164(%rsp)      # imm = 0x2C0A
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11279, 4164(%rsp)      # imm = 0x2C0F
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$26, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11282, 4164(%rsp)      # imm = 0x2C12
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11285, 4164(%rsp)      # imm = 0x2C15
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11288, 4164(%rsp)      # imm = 0x2C18
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11293, 4164(%rsp)      # imm = 0x2C1D
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$27, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11296, 4164(%rsp)      # imm = 0x2C20
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11299, 4164(%rsp)      # imm = 0x2C23
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11302, 4164(%rsp)      # imm = 0x2C26
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11307, 4164(%rsp)      # imm = 0x2C2B
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$28, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11310, 4164(%rsp)      # imm = 0x2C2E
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11313, 4164(%rsp)      # imm = 0x2C31
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11316, 4164(%rsp)      # imm = 0x2C34
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11321, 4164(%rsp)      # imm = 0x2C39
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$29, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11324, 4164(%rsp)      # imm = 0x2C3C
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11327, 4164(%rsp)      # imm = 0x2C3F
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11330, 4164(%rsp)      # imm = 0x2C42
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11335, 4164(%rsp)      # imm = 0x2C47
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$30, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11338, 4164(%rsp)      # imm = 0x2C4A
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11341, 4164(%rsp)      # imm = 0x2C4D
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11344, 4164(%rsp)      # imm = 0x2C50
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11349, 4164(%rsp)      # imm = 0x2C55
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$31, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11352, 4164(%rsp)      # imm = 0x2C58
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11355, 4164(%rsp)      # imm = 0x2C5B
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11358, 4164(%rsp)      # imm = 0x2C5E
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11363, 4164(%rsp)      # imm = 0x2C63
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$32, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11366, 4164(%rsp)      # imm = 0x2C66
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11369, 4164(%rsp)      # imm = 0x2C69
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11372, 4164(%rsp)      # imm = 0x2C6C
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11377, 4164(%rsp)      # imm = 0x2C71
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$33, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11380, 4164(%rsp)      # imm = 0x2C74
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11383, 4164(%rsp)      # imm = 0x2C77
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11386, 4164(%rsp)      # imm = 0x2C7A
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11391, 4164(%rsp)      # imm = 0x2C7F
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$34, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11394, 4164(%rsp)      # imm = 0x2C82
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11397, 4164(%rsp)      # imm = 0x2C85
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11400, 4164(%rsp)      # imm = 0x2C88
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11405, 4164(%rsp)      # imm = 0x2C8D
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$35, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11408, 4164(%rsp)      # imm = 0x2C90
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11411, 4164(%rsp)      # imm = 0x2C93
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11414, 4164(%rsp)      # imm = 0x2C96
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11419, 4164(%rsp)      # imm = 0x2C9B
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$36, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11422, 4164(%rsp)      # imm = 0x2C9E
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11425, 4164(%rsp)      # imm = 0x2CA1
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11428, 4164(%rsp)      # imm = 0x2CA4
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11433, 4164(%rsp)      # imm = 0x2CA9
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$37, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11436, 4164(%rsp)      # imm = 0x2CAC
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11439, 4164(%rsp)      # imm = 0x2CAF
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11442, 4164(%rsp)      # imm = 0x2CB2
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11447, 4164(%rsp)      # imm = 0x2CB7
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$38, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11450, 4164(%rsp)      # imm = 0x2CBA
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11453, 4164(%rsp)      # imm = 0x2CBD
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11456, 4164(%rsp)      # imm = 0x2CC0
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11461, 4164(%rsp)      # imm = 0x2CC5
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$39, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11464, 4164(%rsp)      # imm = 0x2CC8
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11467, 4164(%rsp)      # imm = 0x2CCB
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11470, 4164(%rsp)      # imm = 0x2CCE
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11475, 4164(%rsp)      # imm = 0x2CD3
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$40, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11478, 4164(%rsp)      # imm = 0x2CD6
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11481, 4164(%rsp)      # imm = 0x2CD9
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11484, 4164(%rsp)      # imm = 0x2CDC
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11489, 4164(%rsp)      # imm = 0x2CE1
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$41, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11492, 4164(%rsp)      # imm = 0x2CE4
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11495, 4164(%rsp)      # imm = 0x2CE7
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11498, 4164(%rsp)      # imm = 0x2CEA
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11503, 4164(%rsp)      # imm = 0x2CEF
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$42, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11506, 4164(%rsp)      # imm = 0x2CF2
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11509, 4164(%rsp)      # imm = 0x2CF5
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11512, 4164(%rsp)      # imm = 0x2CF8
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11517, 4164(%rsp)      # imm = 0x2CFD
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$43, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11520, 4164(%rsp)      # imm = 0x2D00
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11523, 4164(%rsp)      # imm = 0x2D03
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11526, 4164(%rsp)      # imm = 0x2D06
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11531, 4164(%rsp)      # imm = 0x2D0B
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$44, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11534, 4164(%rsp)      # imm = 0x2D0E
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11537, 4164(%rsp)      # imm = 0x2D11
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11540, 4164(%rsp)      # imm = 0x2D14
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11545, 4164(%rsp)      # imm = 0x2D19
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$45, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11548, 4164(%rsp)      # imm = 0x2D1C
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11551, 4164(%rsp)      # imm = 0x2D1F
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11554, 4164(%rsp)      # imm = 0x2D22
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11559, 4164(%rsp)      # imm = 0x2D27
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$46, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11562, 4164(%rsp)      # imm = 0x2D2A
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11565, 4164(%rsp)      # imm = 0x2D2D
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11568, 4164(%rsp)      # imm = 0x2D30
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11573, 4164(%rsp)      # imm = 0x2D35
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$47, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11576, 4164(%rsp)      # imm = 0x2D38
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11579, 4164(%rsp)      # imm = 0x2D3B
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11582, 4164(%rsp)      # imm = 0x2D3E
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11587, 4164(%rsp)      # imm = 0x2D43
	addl	%r11d, %r10d
	movl	3412(%rsp), %r11d       # 4-byte Reload
	addl	$48, %r11d
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11590, 4164(%rsp)      # imm = 0x2D46
	movzwl	%si, %r11d
	movl	%r11d, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %r11d
	movl	$11593, 4164(%rsp)      # imm = 0x2D49
	addl	%r11d, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %r11d
	movl	$11596, 4164(%rsp)      # imm = 0x2D4C
	addl	%r11d, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %r11d
	movl	$11600, 4164(%rsp)      # imm = 0x2D50
	addl	%r11d, %r10d
	movl	3408(%rsp), %r11d       # 4-byte Reload
	movslq	%r11d, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11603, 4164(%rsp)      # imm = 0x2D53
	movzwl	%si, %ebx
	movl	%ebx, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	movl	(%r8), %ebx
	movl	$11606, 4164(%rsp)      # imm = 0x2D56
	addl	%ebx, %eax
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	movq	%rcx, %r9
	shlq	$4, %r9
	addq	%r9, %r8
	addq	$4, %r8
	movl	(%r8), %ebx
	movl	$11609, 4164(%rsp)      # imm = 0x2D59
	addl	%ebx, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$51640, %r8             # imm = 0xC9B8
	shlq	$4, %rcx
	addq	%rcx, %r8
	addq	$8, %r8
	movl	(%r8), %ebx
	movl	$11612, 4164(%rsp)      # imm = 0x2D5C
	addl	%ebx, %r10d
	movw	%ax, %si
	movq	3584(%rsp), %rcx        # 8-byte Reload
	movw	%si, (%rcx)
	movl	$11615, 4164(%rsp)      # imm = 0x2D5F
	shrl	$16, %eax
	movw	%ax, %si
	movq	3544(%rsp), %r8         # 8-byte Reload
	movw	%si, (%r8)
	movl	$11617, 4164(%rsp)      # imm = 0x2D61
	movw	%di, %si
	movq	3536(%rsp), %r9         # 8-byte Reload
	movw	%si, (%r9)
	movl	$11620, 4164(%rsp)      # imm = 0x2D64
	shrl	$16, %edi
	movw	%di, %si
	movq	3528(%rsp), %r14        # 8-byte Reload
	movw	%si, (%r14)
	movl	$11622, 4164(%rsp)      # imm = 0x2D66
	movw	%r10w, %si
	movq	3520(%rsp), %r15        # 8-byte Reload
	movw	%si, (%r15)
	movl	$11625, 4164(%rsp)      # imm = 0x2D69
	shrl	$16, %r10d
	movw	%r10w, %si
	movq	3512(%rsp), %r12        # 8-byte Reload
	movw	%si, (%r12)
	movl	$11631, 4164(%rsp)      # imm = 0x2D6F
	jmp	.LBB67_40
.LBB67_35:                              # %if.else1136
                                        #   in Loop: Header=BB67_33 Depth=2
	movl	3400(%rsp), %eax        # 4-byte Reload
	movl	3412(%rsp), %ecx        # 4-byte Reload
	cmpl	%ecx, %eax
	jl	.LBB67_40
# %bb.36:                               # %for.body1140.lr.ph
                                        #   in Loop: Header=BB67_33 Depth=2
	movl	3412(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movl	3400(%rsp), %edx        # 4-byte Reload
	movslq	%edx, %rsi
	movq	3584(%rsp), %rdi        # 8-byte Reload
	movw	(%rdi), %r8w
	movl	$11632, 4164(%rsp)      # imm = 0x2D70
	movq	3592(%rsp), %r9         # 8-byte Reload
	movw	(%r9), %r10w
	movl	$11633, 4164(%rsp)      # imm = 0x2D71
	movq	3784(%rsp), %r11        # 8-byte Reload
	movw	(%r11), %bx
	movl	$11634, 4164(%rsp)      # imm = 0x2D72
	movq	3768(%rsp), %r14        # 8-byte Reload
	movw	(%r14), %bp
	movl	$11635, 4164(%rsp)      # imm = 0x2D73
	movq	3752(%rsp), %r15        # 8-byte Reload
	movw	(%r15), %r12w
	movl	$11636, 4164(%rsp)      # imm = 0x2D74
	movq	3744(%rsp), %r13        # 8-byte Reload
	movw	(%r13), %di
	movl	$11653, 4164(%rsp)      # imm = 0x2D85
	movw	%r8w, 3396(%rsp)        # 2-byte Spill
	movq	%rsi, 3384(%rsp)        # 8-byte Spill
	movw	%r10w, 3382(%rsp)       # 2-byte Spill
	movw	%bx, 3380(%rsp)         # 2-byte Spill
	movw	%bp, 3378(%rsp)         # 2-byte Spill
	movw	%r12w, 3376(%rsp)       # 2-byte Spill
	movw	%di, 3374(%rsp)         # 2-byte Spill
	movq	%rcx, 3360(%rsp)        # 8-byte Spill
.LBB67_37:                              # %for.body1140
                                        #   Parent Loop BB67_26 Depth=1
                                        #     Parent Loop BB67_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	3360(%rsp), %rax        # 8-byte Reload
	movw	3396(%rsp), %cx         # 2-byte Reload
	movw	3382(%rsp), %dx         # 2-byte Reload
	movw	3380(%rsp), %si         # 2-byte Reload
	movw	3378(%rsp), %di         # 2-byte Reload
	movw	3376(%rsp), %r8w        # 2-byte Reload
	movw	3374(%rsp), %r9w        # 2-byte Reload
	movq	4064(%rsp), %r10        # 8-byte Reload
	movw	(%r10,%rax,2), %r11w
	movl	$11656, 4164(%rsp)      # imm = 0x2D88
	movzwl	%r11w, %ebx
	movl	%ebx, %r14d
	movq	4088(%rsp), %r15        # 8-byte Reload
	movb	37708(%r15,%r14), %bpl
	movl	$11659, 4164(%rsp)      # imm = 0x2D8B
	movzbl	%bpl, %ebx
	movw	%bx, %r11w
	addw	%r11w, %cx
	movb	37966(%r15,%r14), %bpl
	movl	$11668, 4164(%rsp)      # imm = 0x2D94
	movzbl	%bpl, %ebx
	movw	%bx, %r11w
	addw	%r11w, %dx
	movb	3807(%rsp), %bpl        # 1-byte Reload
	testb	$1, %bpl
	movw	%r9w, %r11w
	movw	%r8w, %r12w
	movw	%di, %r13w
	movw	%si, %r10w
	movq	%rax, 3352(%rsp)        # 8-byte Spill
	movw	%cx, 3350(%rsp)         # 2-byte Spill
	movw	%dx, 3348(%rsp)         # 2-byte Spill
	movw	%si, 3346(%rsp)         # 2-byte Spill
	movw	%di, 3344(%rsp)         # 2-byte Spill
	movw	%r8w, 3342(%rsp)        # 2-byte Spill
	movw	%r9w, 3340(%rsp)        # 2-byte Spill
	movw	%r10w, 3338(%rsp)       # 2-byte Spill
	movq	%r14, 3328(%rsp)        # 8-byte Spill
	movw	%r11w, 3326(%rsp)       # 2-byte Spill
	movw	%r12w, 3324(%rsp)       # 2-byte Spill
	movw	%r13w, 3322(%rsp)       # 2-byte Spill
	jne	.LBB67_334
.LBB67_38:                              # %for.end1161
                                        #   in Loop: Header=BB67_37 Depth=3
	movw	3338(%rsp), %ax         # 2-byte Reload
	movw	3322(%rsp), %cx         # 2-byte Reload
	movw	3324(%rsp), %dx         # 2-byte Reload
	movw	3326(%rsp), %si         # 2-byte Reload
	movq	3352(%rsp), %rdi        # 8-byte Reload
	addq	$1, %rdi
	movq	3352(%rsp), %r8         # 8-byte Reload
	movq	3384(%rsp), %r9         # 8-byte Reload
	cmpq	%r9, %r8
	movw	%si, %r10w
	movw	%dx, %r11w
	movw	%cx, %bx
	movw	%ax, %bp
	movw	3348(%rsp), %r14w       # 2-byte Reload
	movw	3350(%rsp), %r15w       # 2-byte Reload
	movw	%ax, 3320(%rsp)         # 2-byte Spill
	movw	%cx, 3318(%rsp)         # 2-byte Spill
	movw	%dx, 3316(%rsp)         # 2-byte Spill
	movw	%si, 3314(%rsp)         # 2-byte Spill
	movw	%r15w, 3396(%rsp)       # 2-byte Spill
	movw	%r10w, 3374(%rsp)       # 2-byte Spill
	movw	%r11w, 3376(%rsp)       # 2-byte Spill
	movw	%bx, 3378(%rsp)         # 2-byte Spill
	movw	%bp, 3380(%rsp)         # 2-byte Spill
	movw	%r14w, 3382(%rsp)       # 2-byte Spill
	movq	%rdi, 3360(%rsp)        # 8-byte Spill
	jl	.LBB67_37
# %bb.39:                               # %for.body1169.preheader.loopexit
                                        #   in Loop: Header=BB67_33 Depth=2
	movq	3584(%rsp), %rax        # 8-byte Reload
	movw	3350(%rsp), %cx         # 2-byte Reload
	movw	%cx, (%rax)
	movl	$11669, 4164(%rsp)      # imm = 0x2D95
	movq	3592(%rsp), %rdx        # 8-byte Reload
	movw	3348(%rsp), %si         # 2-byte Reload
	movw	%si, (%rdx)
	movl	$11670, 4164(%rsp)      # imm = 0x2D96
	movq	3784(%rsp), %rdi        # 8-byte Reload
	movw	3320(%rsp), %r8w        # 2-byte Reload
	movw	%r8w, (%rdi)
	movl	$11671, 4164(%rsp)      # imm = 0x2D97
	movq	3768(%rsp), %r9         # 8-byte Reload
	movw	3318(%rsp), %r10w       # 2-byte Reload
	movw	%r10w, (%r9)
	movl	$11672, 4164(%rsp)      # imm = 0x2D98
	movq	3752(%rsp), %r11        # 8-byte Reload
	movw	3316(%rsp), %bx         # 2-byte Reload
	movw	%bx, (%r11)
	movl	$11673, 4164(%rsp)      # imm = 0x2D99
	movq	3744(%rsp), %r14        # 8-byte Reload
	movw	3314(%rsp), %bp         # 2-byte Reload
	movw	%bp, (%r14)
	movl	$11675, 4164(%rsp)      # imm = 0x2D9B
.LBB67_40:                              # %for.body1169
                                        #   in Loop: Header=BB67_33 Depth=2
	movq	3584(%rsp), %rax        # 8-byte Reload
	movw	(%rax), %cx
	movl	$11677, 4164(%rsp)      # imm = 0x2D9D
	movq	3728(%rsp), %rdx        # 8-byte Reload
	movw	(%rdx), %si
	movl	$11696, 4164(%rsp)      # imm = 0x2DB0
	cmpw	%si, %cx
	seta	%dil
	cmpw	%si, %cx
	cmovbw	%cx, %si
	movzwl	%si, %r8d
	andb	$1, %dil
	movzbl	%dil, %r9d
	movb	3727(%rsp), %dil        # 1-byte Reload
	testb	$1, %dil
	movl	%r9d, %r10d
	movw	%si, 3312(%rsp)         # 2-byte Spill
	movl	%r9d, 3308(%rsp)        # 4-byte Spill
	movl	%r8d, 3304(%rsp)        # 4-byte Spill
	movl	%r10d, 3300(%rsp)       # 4-byte Spill
	jne	.LBB67_338
.LBB67_41:                              # %for.end1182
                                        #   in Loop: Header=BB67_33 Depth=2
	movl	3300(%rsp), %eax        # 4-byte Reload
	movl	3304(%rsp), %ecx        # 4-byte Reload
	movl	3416(%rsp), %edx        # 4-byte Reload
	addl	%edx, %ecx
	movslq	%eax, %rsi
	movl	4128(%rsp,%rsi,4), %edi
	movl	$11698, 4164(%rsp)      # imm = 0x2DB2
	addl	$1, %edi
	movl	%edi, 4128(%rsp,%rsi,4)
	movl	$11701, 4164(%rsp)      # imm = 0x2DB5
	movb	%al, %r8b
	movq	4088(%rsp), %r9         # 8-byte Reload
	movq	3424(%rsp), %r10        # 8-byte Reload
	movb	%r8b, 1704(%r9,%r10)
	movl	$11705, 4164(%rsp)      # imm = 0x2DB9
	addq	$1, %r10
	movb	3399(%rsp), %r8b        # 1-byte Reload
	testb	$1, %r8b
	movq	%rsi, 3288(%rsp)        # 8-byte Spill
	movl	%ecx, 3284(%rsp)        # 4-byte Spill
	movq	%r10, 3272(%rsp)        # 8-byte Spill
	jne	.LBB67_42
	jmp	.LBB67_43
.LBB67_42:                              # %if.then1198
                                        #   in Loop: Header=BB67_33 Depth=2
	movl	3412(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	4064(%rsp), %rdx        # 8-byte Reload
	movw	(%rdx,%rcx,2), %si
	movl	$11708, 4164(%rsp)      # imm = 0x2DBC
	movzwl	%si, %edi
	movl	%edi, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	movq	3288(%rsp), %r9         # 8-byte Reload
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %edi
	movl	$11710, 4164(%rsp)      # imm = 0x2DBE
	addl	$1, %edi
	movl	%edi, (%r8)
	movl	$11714, 4164(%rsp)      # imm = 0x2DC2
	addl	$1, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11717, 4164(%rsp)      # imm = 0x2DC5
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11719, 4164(%rsp)      # imm = 0x2DC7
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11723, 4164(%rsp)      # imm = 0x2DCB
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$2, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11726, 4164(%rsp)      # imm = 0x2DCE
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11728, 4164(%rsp)      # imm = 0x2DD0
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11732, 4164(%rsp)      # imm = 0x2DD4
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$3, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11735, 4164(%rsp)      # imm = 0x2DD7
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11737, 4164(%rsp)      # imm = 0x2DD9
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11741, 4164(%rsp)      # imm = 0x2DDD
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$4, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11744, 4164(%rsp)      # imm = 0x2DE0
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11746, 4164(%rsp)      # imm = 0x2DE2
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11750, 4164(%rsp)      # imm = 0x2DE6
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$5, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11753, 4164(%rsp)      # imm = 0x2DE9
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11755, 4164(%rsp)      # imm = 0x2DEB
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11759, 4164(%rsp)      # imm = 0x2DEF
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$6, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11762, 4164(%rsp)      # imm = 0x2DF2
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11764, 4164(%rsp)      # imm = 0x2DF4
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11768, 4164(%rsp)      # imm = 0x2DF8
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$7, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11771, 4164(%rsp)      # imm = 0x2DFB
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11773, 4164(%rsp)      # imm = 0x2DFD
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11777, 4164(%rsp)      # imm = 0x2E01
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$8, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11780, 4164(%rsp)      # imm = 0x2E04
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11782, 4164(%rsp)      # imm = 0x2E06
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11786, 4164(%rsp)      # imm = 0x2E0A
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$9, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11789, 4164(%rsp)      # imm = 0x2E0D
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11791, 4164(%rsp)      # imm = 0x2E0F
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11795, 4164(%rsp)      # imm = 0x2E13
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$10, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11798, 4164(%rsp)      # imm = 0x2E16
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11800, 4164(%rsp)      # imm = 0x2E18
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11804, 4164(%rsp)      # imm = 0x2E1C
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$11, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11807, 4164(%rsp)      # imm = 0x2E1F
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11809, 4164(%rsp)      # imm = 0x2E21
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11813, 4164(%rsp)      # imm = 0x2E25
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$12, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11816, 4164(%rsp)      # imm = 0x2E28
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11818, 4164(%rsp)      # imm = 0x2E2A
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11822, 4164(%rsp)      # imm = 0x2E2E
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$13, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11825, 4164(%rsp)      # imm = 0x2E31
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11827, 4164(%rsp)      # imm = 0x2E33
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11831, 4164(%rsp)      # imm = 0x2E37
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$14, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11834, 4164(%rsp)      # imm = 0x2E3A
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11836, 4164(%rsp)      # imm = 0x2E3C
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11840, 4164(%rsp)      # imm = 0x2E40
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$15, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11843, 4164(%rsp)      # imm = 0x2E43
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11845, 4164(%rsp)      # imm = 0x2E45
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11849, 4164(%rsp)      # imm = 0x2E49
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$16, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11852, 4164(%rsp)      # imm = 0x2E4C
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11854, 4164(%rsp)      # imm = 0x2E4E
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11858, 4164(%rsp)      # imm = 0x2E52
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$17, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11861, 4164(%rsp)      # imm = 0x2E55
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11863, 4164(%rsp)      # imm = 0x2E57
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11867, 4164(%rsp)      # imm = 0x2E5B
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$18, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11870, 4164(%rsp)      # imm = 0x2E5E
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11872, 4164(%rsp)      # imm = 0x2E60
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11876, 4164(%rsp)      # imm = 0x2E64
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$19, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11879, 4164(%rsp)      # imm = 0x2E67
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11881, 4164(%rsp)      # imm = 0x2E69
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11885, 4164(%rsp)      # imm = 0x2E6D
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$20, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11888, 4164(%rsp)      # imm = 0x2E70
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11890, 4164(%rsp)      # imm = 0x2E72
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11894, 4164(%rsp)      # imm = 0x2E76
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$21, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11897, 4164(%rsp)      # imm = 0x2E79
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11899, 4164(%rsp)      # imm = 0x2E7B
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11903, 4164(%rsp)      # imm = 0x2E7F
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$22, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11906, 4164(%rsp)      # imm = 0x2E82
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11908, 4164(%rsp)      # imm = 0x2E84
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11912, 4164(%rsp)      # imm = 0x2E88
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$23, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11915, 4164(%rsp)      # imm = 0x2E8B
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11917, 4164(%rsp)      # imm = 0x2E8D
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11921, 4164(%rsp)      # imm = 0x2E91
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$24, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11924, 4164(%rsp)      # imm = 0x2E94
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11926, 4164(%rsp)      # imm = 0x2E96
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11930, 4164(%rsp)      # imm = 0x2E9A
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$25, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11933, 4164(%rsp)      # imm = 0x2E9D
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11935, 4164(%rsp)      # imm = 0x2E9F
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11939, 4164(%rsp)      # imm = 0x2EA3
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$26, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11942, 4164(%rsp)      # imm = 0x2EA6
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11944, 4164(%rsp)      # imm = 0x2EA8
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11948, 4164(%rsp)      # imm = 0x2EAC
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$27, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11951, 4164(%rsp)      # imm = 0x2EAF
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11953, 4164(%rsp)      # imm = 0x2EB1
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11957, 4164(%rsp)      # imm = 0x2EB5
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$28, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11960, 4164(%rsp)      # imm = 0x2EB8
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11962, 4164(%rsp)      # imm = 0x2EBA
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11966, 4164(%rsp)      # imm = 0x2EBE
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$29, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11969, 4164(%rsp)      # imm = 0x2EC1
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11971, 4164(%rsp)      # imm = 0x2EC3
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11975, 4164(%rsp)      # imm = 0x2EC7
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$30, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11978, 4164(%rsp)      # imm = 0x2ECA
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11980, 4164(%rsp)      # imm = 0x2ECC
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11984, 4164(%rsp)      # imm = 0x2ED0
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$31, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11987, 4164(%rsp)      # imm = 0x2ED3
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11989, 4164(%rsp)      # imm = 0x2ED5
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$11993, 4164(%rsp)      # imm = 0x2ED9
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$32, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$11996, 4164(%rsp)      # imm = 0x2EDC
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$11998, 4164(%rsp)      # imm = 0x2EDE
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12002, 4164(%rsp)      # imm = 0x2EE2
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$33, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12005, 4164(%rsp)      # imm = 0x2EE5
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12007, 4164(%rsp)      # imm = 0x2EE7
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12011, 4164(%rsp)      # imm = 0x2EEB
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$34, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12014, 4164(%rsp)      # imm = 0x2EEE
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12016, 4164(%rsp)      # imm = 0x2EF0
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12020, 4164(%rsp)      # imm = 0x2EF4
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$35, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12023, 4164(%rsp)      # imm = 0x2EF7
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12025, 4164(%rsp)      # imm = 0x2EF9
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12029, 4164(%rsp)      # imm = 0x2EFD
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$36, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12032, 4164(%rsp)      # imm = 0x2F00
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12034, 4164(%rsp)      # imm = 0x2F02
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12038, 4164(%rsp)      # imm = 0x2F06
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$37, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12041, 4164(%rsp)      # imm = 0x2F09
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12043, 4164(%rsp)      # imm = 0x2F0B
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12047, 4164(%rsp)      # imm = 0x2F0F
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$38, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12050, 4164(%rsp)      # imm = 0x2F12
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12052, 4164(%rsp)      # imm = 0x2F14
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12056, 4164(%rsp)      # imm = 0x2F18
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$39, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12059, 4164(%rsp)      # imm = 0x2F1B
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12061, 4164(%rsp)      # imm = 0x2F1D
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12065, 4164(%rsp)      # imm = 0x2F21
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$40, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12068, 4164(%rsp)      # imm = 0x2F24
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12070, 4164(%rsp)      # imm = 0x2F26
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12074, 4164(%rsp)      # imm = 0x2F2A
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$41, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12077, 4164(%rsp)      # imm = 0x2F2D
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12079, 4164(%rsp)      # imm = 0x2F2F
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12083, 4164(%rsp)      # imm = 0x2F33
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$42, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12086, 4164(%rsp)      # imm = 0x2F36
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12088, 4164(%rsp)      # imm = 0x2F38
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12092, 4164(%rsp)      # imm = 0x2F3C
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$43, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12095, 4164(%rsp)      # imm = 0x2F3F
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12097, 4164(%rsp)      # imm = 0x2F41
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12101, 4164(%rsp)      # imm = 0x2F45
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$44, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12104, 4164(%rsp)      # imm = 0x2F48
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12106, 4164(%rsp)      # imm = 0x2F4A
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12110, 4164(%rsp)      # imm = 0x2F4E
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$45, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12113, 4164(%rsp)      # imm = 0x2F51
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12115, 4164(%rsp)      # imm = 0x2F53
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12119, 4164(%rsp)      # imm = 0x2F57
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$46, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12122, 4164(%rsp)      # imm = 0x2F5A
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12124, 4164(%rsp)      # imm = 0x2F5C
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12128, 4164(%rsp)      # imm = 0x2F60
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$47, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12131, 4164(%rsp)      # imm = 0x2F63
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12133, 4164(%rsp)      # imm = 0x2F65
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12137, 4164(%rsp)      # imm = 0x2F69
	movl	3412(%rsp), %eax        # 4-byte Reload
	addl	$48, %eax
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12140, 4164(%rsp)      # imm = 0x2F6C
	movzwl	%si, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %eax
	movl	$12142, 4164(%rsp)      # imm = 0x2F6E
	addl	$1, %eax
	movl	%eax, (%r8)
	movl	$12145, 4164(%rsp)      # imm = 0x2F71
	movl	3408(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movw	(%rdx,%rcx,2), %si
	movl	$12148, 4164(%rsp)      # imm = 0x2F74
	movzwl	%si, %edi
	movl	%edi, %ecx
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rcx
	addq	%rcx, %r8
	movl	(%r8), %edi
	movl	$12150, 4164(%rsp)      # imm = 0x2F76
	addl	$1, %edi
	movl	%edi, (%r8)
	movl	$12162, 4164(%rsp)      # imm = 0x2F82
	jmp	.LBB67_49
.LBB67_43:                              # %if.else1649
                                        #   in Loop: Header=BB67_33 Depth=2
	movl	3400(%rsp), %eax        # 4-byte Reload
	movl	3412(%rsp), %ecx        # 4-byte Reload
	cmpl	%ecx, %eax
	jl	.LBB67_49
# %bb.44:                               # %for.body1653.lr.ph
                                        #   in Loop: Header=BB67_33 Depth=2
	movl	3412(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movl	3400(%rsp), %edx        # 4-byte Reload
	movslq	%edx, %rsi
	movq	%rsi, %rdi
	addq	$1, %rdi
	subq	%rcx, %rdi
	andq	$1, %rdi
	cmpq	$0, %rdi
	movq	%rcx, %rdi
	movq	%rcx, 3264(%rsp)        # 8-byte Spill
	movq	%rsi, 3256(%rsp)        # 8-byte Spill
	movq	%rdi, 3248(%rsp)        # 8-byte Spill
	je	.LBB67_46
# %bb.45:                               # %for.body1653.prol
                                        #   in Loop: Header=BB67_33 Depth=2
	movq	4064(%rsp), %rax        # 8-byte Reload
	movq	3264(%rsp), %rcx        # 8-byte Reload
	movw	(%rax,%rcx,2), %dx
	movl	$12165, 4164(%rsp)      # imm = 0x2F85
	movzwl	%dx, %esi
	movl	%esi, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	movq	3288(%rsp), %r9         # 8-byte Reload
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rdi
	addq	%rdi, %r8
	movl	(%r8), %esi
	movl	$12167, 4164(%rsp)      # imm = 0x2F87
	addl	$1, %esi
	movl	%esi, (%r8)
	movl	$12177, 4164(%rsp)      # imm = 0x2F91
	addq	$1, %rcx
	movq	%rcx, 3248(%rsp)        # 8-byte Spill
.LBB67_46:                              # %for.body1653.prol.loopexit
                                        #   in Loop: Header=BB67_33 Depth=2
	movq	3248(%rsp), %rax        # 8-byte Reload
	movl	3400(%rsp), %ecx        # 4-byte Reload
	movl	3412(%rsp), %edx        # 4-byte Reload
	cmpl	%edx, %ecx
	movq	%rax, 3240(%rsp)        # 8-byte Spill
	je	.LBB67_49
# %bb.47:                               # %for.body1653.lr.ph.new
                                        #   in Loop: Header=BB67_33 Depth=2
	movq	3240(%rsp), %rax        # 8-byte Reload
	movq	%rax, 3232(%rsp)        # 8-byte Spill
	jmp	.LBB67_48
.LBB67_48:                              # %for.body1653
                                        #   Parent Loop BB67_26 Depth=1
                                        #     Parent Loop BB67_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	3232(%rsp), %rax        # 8-byte Reload
	movq	4064(%rsp), %rcx        # 8-byte Reload
	movw	(%rcx,%rax,2), %dx
	movl	$12180, 4164(%rsp)      # imm = 0x2F94
	movzwl	%dx, %esi
	movl	%esi, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$45448, %r8             # imm = 0xB188
	movq	3288(%rsp), %r9         # 8-byte Reload
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %r8
	shlq	$2, %rdi
	addq	%rdi, %r8
	movl	(%r8), %esi
	movl	$12182, 4164(%rsp)      # imm = 0x2F96
	addl	$1, %esi
	movl	%esi, (%r8)
	movl	$12185, 4164(%rsp)      # imm = 0x2F99
	movq	%rax, %rdi
	addq	$1, %rdi
	movw	2(%rcx,%rax,2), %dx
	movl	$12188, 4164(%rsp)      # imm = 0x2F9C
	movzwl	%dx, %esi
	movl	%esi, %r8d
	movq	4088(%rsp), %r10        # 8-byte Reload
	addq	$45448, %r10            # imm = 0xB188
	imulq	$1032, %r9, %r11        # imm = 0x408
	addq	%r11, %r10
	shlq	$2, %r8
	addq	%r8, %r10
	movl	(%r10), %esi
	movl	$12190, 4164(%rsp)      # imm = 0x2F9E
	addl	$1, %esi
	movl	%esi, (%r10)
	movl	$10902, 4164(%rsp)      # imm = 0x2A96
	addq	$2, %rax
	movq	3256(%rsp), %r8         # 8-byte Reload
	cmpq	%r8, %rdi
	movq	%rax, 3232(%rsp)        # 8-byte Spill
	jl	.LBB67_48
.LBB67_49:                              # %if.end1665
                                        #   in Loop: Header=BB67_33 Depth=2
	movl	3400(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$12199, 4164(%rsp)      # imm = 0x2FA7
	cmpl	%edx, %eax
	movq	3272(%rsp), %rsi        # 8-byte Reload
	movl	3284(%rsp), %edi        # 4-byte Reload
	movl	%edx, 3444(%rsp)        # 4-byte Spill
	movq	%rsi, 3448(%rsp)        # 8-byte Spill
	movl	%eax, 3456(%rsp)        # 4-byte Spill
	movl	%edi, 3440(%rsp)        # 4-byte Spill
	jl	.LBB67_33
# %bb.50:                               # %while.end1667.loopexit
                                        #   in Loop: Header=BB67_26 Depth=1
	movq	3272(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	3284(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 3468(%rsp)        # 4-byte Spill
	movl	%edx, 3460(%rsp)        # 4-byte Spill
.LBB67_51:                              # %while.end1667
                                        #   in Loop: Header=BB67_26 Depth=1
	movl	3460(%rsp), %eax        # 4-byte Reload
	movl	3468(%rsp), %ecx        # 4-byte Reload
	movq	4056(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %esi
	movl	$12202, 4164(%rsp)      # imm = 0x2FAA
	cmpl	$2, %esi
	movl	%eax, 3228(%rsp)        # 4-byte Spill
	movl	%ecx, 3224(%rsp)        # 4-byte Spill
	jle	.LBB67_55
# %bb.52:                               # %if.then1671
                                        #   in Loop: Header=BB67_26 Depth=1
	movabsq	$.L.str.4.70, %rsi
	movl	$8, %eax
	movq	stderr, %rdi
	movl	$12207, 4164(%rsp)      # imm = 0x2FAF
	movl	3484(%rsp), %ecx        # 4-byte Reload
	addl	$1, %ecx
	movl	3228(%rsp), %edx        # 4-byte Reload
	movl	%eax, 3220(%rsp)        # 4-byte Spill
	movl	%edx, %eax
	cltd
	movl	3220(%rsp), %r8d        # 4-byte Reload
	idivl	%r8d
	movl	%ecx, %edx
	movl	%eax, %ecx
	movb	$0, %al
	callq	fprintf
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	stderr, %rdi
	movl	$12214, 4164(%rsp)      # imm = 0x2FB6
	movl	%eax, 3216(%rsp)        # 4-byte Spill
	movq	%rsi, 3208(%rsp)        # 8-byte Spill
	movq	%rdi, 3200(%rsp)        # 8-byte Spill
.LBB67_53:                              # %for.body1678
                                        #   Parent Loop BB67_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	3200(%rsp), %rax        # 8-byte Reload
	movq	3208(%rsp), %rcx        # 8-byte Reload
	movabsq	$.L.str.5.71, %rsi
	movl	4128(%rsp,%rcx,4), %edx
	movl	$12212, 4164(%rsp)      # imm = 0x2FB4
	movq	%rax, %rdi
	movb	$0, %al
	movq	%rcx, 3192(%rsp)        # 8-byte Spill
	callq	fprintf
	movq	3192(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	stderr, %rsi
	movl	$12243, 4164(%rsp)      # imm = 0x2FD3
	movq	3568(%rsp), %rdi        # 8-byte Reload
	cmpq	%rdi, %rcx
	movq	%rsi, %r8
	movl	%eax, 3188(%rsp)        # 4-byte Spill
	movq	%rsi, 3176(%rsp)        # 8-byte Spill
	movq	%rcx, 3208(%rsp)        # 8-byte Spill
	movq	%r8, 3200(%rsp)         # 8-byte Spill
	jb	.LBB67_53
# %bb.54:                               # %for.end1684
                                        #   in Loop: Header=BB67_26 Depth=1
	movl	$10, %edi
	movq	3176(%rsp), %rsi        # 8-byte Reload
	callq	fputc
	movl	%eax, 3172(%rsp)        # 4-byte Spill
.LBB67_55:                              # %for.body1690.preheader
                                        #   in Loop: Header=BB67_26 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, 3160(%rsp)        # 8-byte Spill
	jmp	.LBB67_56
.LBB67_56:                              # %for.body1690
                                        #   Parent Loop BB67_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	3160(%rsp), %rax        # 8-byte Reload
	movl	$17, %ecx
	movq	4088(%rsp), %rdx        # 8-byte Reload
	addq	$37708, %rdx            # imm = 0x934C
	imulq	$258, %rax, %rsi        # imm = 0x102
	addq	%rsi, %rdx
	movq	4088(%rsp), %rsi        # 8-byte Reload
	addq	$45448, %rsi            # imm = 0xB188
	imulq	$1032, %rax, %rdi       # imm = 0x408
	addq	%rdi, %rsi
	movq	%rdx, %rdi
	movl	4028(%rsp), %edx        # 4-byte Reload
	movq	%rax, 3152(%rsp)        # 8-byte Spill
	callq	BZ2_hbMakeCodeLengths
	movq	3152(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	3568(%rsp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rax
	movq	%rax, 3160(%rsp)        # 8-byte Spill
	jb	.LBB67_56
# %bb.57:                               # %for.inc1702
                                        #   in Loop: Header=BB67_26 Depth=1
	movl	3484(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	cmpl	$4, %eax
	movl	%eax, 3508(%rsp)        # 4-byte Spill
	jne	.LBB67_26
# %bb.58:                               # %if.end1708
	movl	3224(%rsp), %eax        # 4-byte Reload
	cmpl	$18003, %eax            # imm = 0x4653
	jl	.LBB67_60
# %bb.59:                               # %if.then1714
	movl	$3003, %edi             # imm = 0xBBB
	callq	BZ2_bz__AssertH__fail
.LBB67_60:                              # %if.end1715
	leaq	4122(%rsp), %rax
	movb	$0, 4122(%rsp)
	movl	$12245, 4164(%rsp)      # imm = 0x2FD5
	movb	$1, 4123(%rsp)
	movl	$12250, 4164(%rsp)      # imm = 0x2FDA
	movl	3984(%rsp), %ecx        # 4-byte Reload
	cmpl	$2, %ecx
	movq	%rax, 3144(%rsp)        # 8-byte Spill
	ja	.LBB67_326
.LBB67_61:                              # %for.end1725
	movl	3224(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setg	%cl
	testb	$1, %cl
	movb	%cl, 3143(%rsp)         # 1-byte Spill
	jne	.LBB67_62
	jmp	.LBB67_69
.LBB67_62:                              # %for.body1729.lr.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	3144(%rsp), %rdx        # 8-byte Reload
	movb	(%rdx), %sil
	movl	$12258, 4164(%rsp)      # imm = 0x2FE2
	movl	3224(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edi
	movl	%edi, %r8d
	movq	%r8, 3128(%rsp)         # 8-byte Spill
	movq	%rcx, 3120(%rsp)        # 8-byte Spill
	movb	%sil, 3119(%rsp)        # 1-byte Spill
.LBB67_63:                              # %for.body1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_65 Depth 2
	movb	3119(%rsp), %al         # 1-byte Reload
	movq	3120(%rsp), %rcx        # 8-byte Reload
	xorl	%edx, %edx
	movb	%dl, %sil
	movq	4088(%rsp), %rdi        # 8-byte Reload
	movb	1704(%rdi,%rcx), %r8b
	movl	$12265, 4164(%rsp)      # imm = 0x2FE9
	cmpb	%al, %r8b
	movb	%al, %r9b
	movb	%al, 3118(%rsp)         # 1-byte Spill
	movq	%rcx, 3104(%rsp)        # 8-byte Spill
	movb	%r8b, 3103(%rsp)        # 1-byte Spill
	movb	%sil, 3102(%rsp)        # 1-byte Spill
	movb	%r9b, 3101(%rsp)        # 1-byte Spill
	je	.LBB67_67
# %bb.64:                               # %while.body1740.preheader
                                        #   in Loop: Header=BB67_63 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movb	3118(%rsp), %dl         # 1-byte Reload
	movq	%rcx, 3088(%rsp)        # 8-byte Spill
	movb	%dl, 3087(%rsp)         # 1-byte Spill
	jmp	.LBB67_65
.LBB67_65:                              # %while.body1740
                                        #   Parent Loop BB67_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	3087(%rsp), %al         # 1-byte Reload
	movq	3088(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, %rdx
	addq	$1, %rdx
	movb	4123(%rsp,%rcx), %sil
	movl	$12267, 4164(%rsp)      # imm = 0x2FEB
	movb	%al, 4123(%rsp,%rcx)
	movl	$12274, 4164(%rsp)      # imm = 0x2FF2
	movb	3103(%rsp), %al         # 1-byte Reload
	cmpb	%sil, %al
	movq	%rdx, %rcx
	movq	%rdx, 3072(%rsp)        # 8-byte Spill
	movq	%rcx, 3088(%rsp)        # 8-byte Spill
	movb	%sil, 3087(%rsp)        # 1-byte Spill
	jne	.LBB67_65
# %bb.66:                               # %while.end1746.loopexit
                                        #   in Loop: Header=BB67_63 Depth=1
	movq	3072(%rsp), %rax        # 8-byte Reload
	movb	%al, %cl
	movb	3103(%rsp), %dl         # 1-byte Reload
	movb	%cl, 3102(%rsp)         # 1-byte Spill
	movb	%dl, 3101(%rsp)         # 1-byte Spill
.LBB67_67:                              # %while.end1746
                                        #   in Loop: Header=BB67_63 Depth=1
	movb	3101(%rsp), %al         # 1-byte Reload
	movb	3102(%rsp), %cl         # 1-byte Reload
	movq	4088(%rsp), %rdx        # 8-byte Reload
	movq	3104(%rsp), %rsi        # 8-byte Reload
	movb	%cl, 19706(%rdx,%rsi)
	movl	$12277, 4164(%rsp)      # imm = 0x2FF5
	addq	$1, %rsi
	movq	3128(%rsp), %rdi        # 8-byte Reload
	cmpq	%rdi, %rsi
	movb	%al, %cl
	movb	%al, 3071(%rsp)         # 1-byte Spill
	movq	%rsi, 3120(%rsp)        # 8-byte Spill
	movb	%cl, 3119(%rsp)         # 1-byte Spill
	jne	.LBB67_63
# %bb.68:                               # %for.cond1726.for.end1753_crit_edge
	movq	3144(%rsp), %rax        # 8-byte Reload
	movb	3071(%rsp), %cl         # 1-byte Reload
	movb	%cl, (%rax)
	movl	$12313, 4164(%rsp)      # imm = 0x3019
.LBB67_69:                              # %for.end1753
	movb	4027(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB67_71
# %bb.70:                               # %if.end1804.preheader
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, 3056(%rsp)        # 8-byte Spill
	jmp	.LBB67_83
.LBB67_71:                              # %for.end1753.split.us
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$9223372036854775800, %rdx # imm = 0x7FFFFFFFFFFFFFF8
	movl	$1, %eax
	movl	%eax, %esi
	movq	3960(%rsp), %rdi        # 8-byte Reload
	cmpq	$1, %rdi
	cmovgq	%rdi, %rsi
	cmpq	$8, %rsi
	setb	%r8b
	movq	%rsi, %r9
	andq	%rdx, %r9
	cmpq	%r9, %rsi
	sete	%r10b
	movb	%r10b, 3055(%rsp)       # 1-byte Spill
	movq	%r9, 3040(%rsp)         # 8-byte Spill
	movb	%r8b, 3039(%rsp)        # 1-byte Spill
	movq	%rcx, 3024(%rsp)        # 8-byte Spill
.LBB67_72:                              # %for.body1757.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_75 Depth 2
                                        #     Child Loop BB67_81 Depth 2
	movq	3024(%rsp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movl	$32, %ecx
	xorl	%esi, %esi
	movb	3039(%rsp), %dil        # 1-byte Reload
	testb	$1, %dil
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	movq	%rdx, 3008(%rsp)        # 8-byte Spill
	movl	%ecx, 3004(%rsp)        # 4-byte Spill
	movl	%esi, 3000(%rsp)        # 4-byte Spill
	jne	.LBB67_73
	jmp	.LBB67_74
.LBB67_73:                              # %for.body1761.us.preheader
                                        #   in Loop: Header=BB67_72 Depth=1
	movl	3000(%rsp), %eax        # 4-byte Reload
	movl	3004(%rsp), %ecx        # 4-byte Reload
	movq	3008(%rsp), %rdx        # 8-byte Reload
	movl	%ecx, 2996(%rsp)        # 4-byte Spill
	movq	%rdx, 2984(%rsp)        # 8-byte Spill
	movl	%eax, 2980(%rsp)        # 4-byte Spill
	jmp	.LBB67_81
.LBB67_74:                              # %vector.ph
                                        #   in Loop: Header=BB67_72 Depth=1
	xorps	%xmm0, %xmm0
	movaps	.LCPI67_1(%rip), %xmm1  # xmm1 = [32,32,32,32]
	xorl	%eax, %eax
	movl	%eax, %ecx
	movaps	%xmm1, %xmm2
	movaps	%xmm0, %xmm3
	movaps	%xmm3, 2960(%rsp)       # 16-byte Spill
	movaps	%xmm2, 2944(%rsp)       # 16-byte Spill
	movq	%rcx, 2936(%rsp)        # 8-byte Spill
	movaps	%xmm1, 2912(%rsp)       # 16-byte Spill
	movaps	%xmm0, 2896(%rsp)       # 16-byte Spill
	jmp	.LBB67_75
.LBB67_75:                              # %vector.body
                                        #   Parent Loop BB67_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movaps	2896(%rsp), %xmm0       # 16-byte Reload
	movaps	2960(%rsp), %xmm1       # 16-byte Reload
	movaps	2912(%rsp), %xmm2       # 16-byte Reload
	movaps	2944(%rsp), %xmm3       # 16-byte Reload
	movq	2936(%rsp), %rax        # 8-byte Reload
	movq	3016(%rsp), %rcx        # 8-byte Reload
	imulq	$258, %rcx, %rdx        # imm = 0x102
	movq	4088(%rsp), %rsi        # 8-byte Reload
	addq	%rdx, %rsi
	movl	37708(%rax,%rsi), %edi
	movd	%edi, %xmm4
	movl	$12316, 4164(%rsp)      # imm = 0x301C
	movl	37712(%rax,%rsi), %edi
	movd	%edi, %xmm5
	movl	$12317, 4164(%rsp)      # imm = 0x301D
	xorps	%xmm6, %xmm6
	punpcklbw	%xmm6, %xmm4    # xmm4 = xmm4[0],xmm6[0],xmm4[1],xmm6[1],xmm4[2],xmm6[2],xmm4[3],xmm6[3],xmm4[4],xmm6[4],xmm4[5],xmm6[5],xmm4[6],xmm6[6],xmm4[7],xmm6[7]
	punpcklwd	%xmm6, %xmm4    # xmm4 = xmm4[0],xmm6[0],xmm4[1],xmm6[1],xmm4[2],xmm6[2],xmm4[3],xmm6[3]
	movl	$12318, 4164(%rsp)      # imm = 0x301E
	punpcklbw	%xmm6, %xmm5    # xmm5 = xmm5[0],xmm6[0],xmm5[1],xmm6[1],xmm5[2],xmm6[2],xmm5[3],xmm6[3],xmm5[4],xmm6[4],xmm5[5],xmm6[5],xmm5[6],xmm6[6],xmm5[7],xmm6[7]
	punpcklwd	%xmm6, %xmm5    # xmm5 = xmm5[0],xmm6[0],xmm5[1],xmm6[1],xmm5[2],xmm6[2],xmm5[3],xmm6[3]
	movaps	%xmm4, %xmm6
	pcmpgtd	%xmm1, %xmm6
	movaps	%xmm5, %xmm7
	pcmpgtd	%xmm0, %xmm7
	movaps	%xmm4, %xmm8
	pand	%xmm6, %xmm8
	pandn	%xmm1, %xmm6
	por	%xmm6, %xmm8
	movaps	%xmm5, %xmm1
	pand	%xmm7, %xmm1
	pandn	%xmm0, %xmm7
	por	%xmm7, %xmm1
	movaps	%xmm3, %xmm0
	pcmpgtd	%xmm4, %xmm0
	movaps	%xmm2, %xmm6
	pcmpgtd	%xmm5, %xmm6
	pand	%xmm0, %xmm4
	pandn	%xmm3, %xmm0
	por	%xmm0, %xmm4
	pand	%xmm6, %xmm5
	pandn	%xmm2, %xmm6
	por	%xmm6, %xmm5
	addq	$8, %rax
	movq	3040(%rsp), %rdx        # 8-byte Reload
	cmpq	%rdx, %rax
	movaps	%xmm4, %xmm0
	movaps	%xmm5, %xmm2
	movaps	%xmm8, %xmm3
	movaps	%xmm1, %xmm6
	movaps	%xmm1, 2880(%rsp)       # 16-byte Spill
	movaps	%xmm8, 2864(%rsp)       # 16-byte Spill
	movaps	%xmm5, 2848(%rsp)       # 16-byte Spill
	movaps	%xmm4, 2832(%rsp)       # 16-byte Spill
	movq	%rax, 2936(%rsp)        # 8-byte Spill
	movaps	%xmm0, 2944(%rsp)       # 16-byte Spill
	movaps	%xmm2, 2912(%rsp)       # 16-byte Spill
	movaps	%xmm3, 2960(%rsp)       # 16-byte Spill
	movaps	%xmm6, 2896(%rsp)       # 16-byte Spill
	jne	.LBB67_75
# %bb.76:                               # %middle.block
                                        #   in Loop: Header=BB67_72 Depth=1
	movaps	2864(%rsp), %xmm0       # 16-byte Reload
	movaps	2880(%rsp), %xmm1       # 16-byte Reload
	pcmpgtd	%xmm1, %xmm0
	movaps	%xmm0, %xmm2
	pandn	%xmm1, %xmm2
	movaps	2864(%rsp), %xmm3       # 16-byte Reload
	pand	%xmm0, %xmm3
	por	%xmm2, %xmm3
	pshufd	$78, %xmm3, %xmm0       # xmm0 = xmm3[2,3,0,1]
	movaps	%xmm3, %xmm2
	pcmpgtd	%xmm0, %xmm2
	movaps	%xmm2, %xmm4
	pandn	%xmm0, %xmm4
	pand	%xmm2, %xmm3
	por	%xmm4, %xmm3
	pshufd	$229, %xmm3, %xmm0      # xmm0 = xmm3[1,1,2,3]
	movaps	%xmm3, %xmm2
	pcmpgtd	%xmm0, %xmm2
	movaps	%xmm2, %xmm4
	pandn	%xmm0, %xmm4
	pand	%xmm2, %xmm3
	por	%xmm4, %xmm3
	movd	%xmm3, %eax
	movaps	2848(%rsp), %xmm0       # 16-byte Reload
	movaps	2832(%rsp), %xmm2       # 16-byte Reload
	pcmpgtd	%xmm2, %xmm0
	movaps	%xmm0, %xmm3
	movaps	2848(%rsp), %xmm4       # 16-byte Reload
	pandn	%xmm4, %xmm3
	pand	%xmm0, %xmm2
	por	%xmm3, %xmm2
	pshufd	$78, %xmm2, %xmm0       # xmm0 = xmm2[2,3,0,1]
	movaps	%xmm0, %xmm3
	pcmpgtd	%xmm2, %xmm3
	movaps	%xmm3, %xmm5
	pandn	%xmm0, %xmm5
	pand	%xmm3, %xmm2
	por	%xmm5, %xmm2
	pshufd	$229, %xmm2, %xmm0      # xmm0 = xmm2[1,1,2,3]
	movaps	%xmm0, %xmm3
	pcmpgtd	%xmm2, %xmm3
	movaps	%xmm3, %xmm5
	pandn	%xmm0, %xmm5
	pand	%xmm3, %xmm2
	por	%xmm5, %xmm2
	movd	%xmm2, %ecx
	movb	3055(%rsp), %dl         # 1-byte Reload
	testb	$1, %dl
	movq	3040(%rsp), %rsi        # 8-byte Reload
	movl	%ecx, %edi
	movl	%eax, %r8d
	movl	%r8d, 3000(%rsp)        # 4-byte Spill
	movl	%eax, 2828(%rsp)        # 4-byte Spill
	movq	%rsi, 3008(%rsp)        # 8-byte Spill
	movl	%edi, 3004(%rsp)        # 4-byte Spill
	movl	%ecx, 2824(%rsp)        # 4-byte Spill
	jne	.LBB67_82
	jmp	.LBB67_73
.LBB67_77:                              # %if.then1799.us
                                        #   in Loop: Header=BB67_72 Depth=1
	movl	$3004, %edi             # imm = 0xBBC
	callq	BZ2_bz__AssertH__fail
.LBB67_78:                              # %if.end1800.us
                                        #   in Loop: Header=BB67_72 Depth=1
	movl	2820(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	jge	.LBB67_80
# %bb.79:                               # %if.then1803.us
                                        #   in Loop: Header=BB67_72 Depth=1
	movl	$3005, %edi             # imm = 0xBBD
	callq	BZ2_bz__AssertH__fail
.LBB67_80:                              # %if.end1804.us
                                        #   in Loop: Header=BB67_72 Depth=1
	movq	4088(%rsp), %rax        # 8-byte Reload
	addq	$39256, %rax            # imm = 0x9958
	movq	3016(%rsp), %rcx        # 8-byte Reload
	imulq	$1032, %rcx, %rdx       # imm = 0x408
	addq	%rdx, %rax
	movq	4088(%rsp), %rdx        # 8-byte Reload
	addq	$37708, %rdx            # imm = 0x934C
	imulq	$258, %rcx, %rsi        # imm = 0x102
	addq	%rsi, %rdx
	movq	%rax, %rdi
	movq	%rdx, %rsi
	movl	2820(%rsp), %edx        # 4-byte Reload
	movl	2816(%rsp), %ecx        # 4-byte Reload
	movl	4028(%rsp), %r8d        # 4-byte Reload
	callq	BZ2_hbAssignCodes
	movq	3016(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	3568(%rsp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rax
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	jb	.LBB67_72
	jmp	.LBB67_84
.LBB67_81:                              # %for.body1761.us
                                        #   Parent Loop BB67_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	2980(%rsp), %eax        # 4-byte Reload
	movl	2996(%rsp), %ecx        # 4-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	4088(%rsp), %rsi        # 8-byte Reload
	addq	$37708, %rsi            # imm = 0x934C
	movq	3016(%rsp), %rdi        # 8-byte Reload
	imulq	$258, %rdi, %r8         # imm = 0x102
	addq	%r8, %rsi
	addq	%rdx, %rsi
	movb	(%rsi), %r9b
	movl	$12387, 4164(%rsp)      # imm = 0x3063
	movzbl	%r9b, %r10d
	cmpl	%r10d, %eax
	cmovll	%r10d, %eax
	cmpl	%r10d, %ecx
	cmovgl	%r10d, %ecx
	addq	$1, %rdx
	movq	3960(%rsp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rdx
	movl	%ecx, %r10d
	movl	%eax, %r11d
	movl	%eax, 2828(%rsp)        # 4-byte Spill
	movl	%r11d, 2980(%rsp)       # 4-byte Spill
	movq	%rdx, 2984(%rsp)        # 8-byte Spill
	movl	%r10d, 2996(%rsp)       # 4-byte Spill
	movl	%ecx, 2824(%rsp)        # 4-byte Spill
	jl	.LBB67_81
.LBB67_82:                              # %for.cond1758.for.end1796_crit_edge.us
                                        #   in Loop: Header=BB67_72 Depth=1
	movl	2824(%rsp), %eax        # 4-byte Reload
	movl	2828(%rsp), %ecx        # 4-byte Reload
	cmpl	$17, %ecx
	movl	%eax, 2820(%rsp)        # 4-byte Spill
	movl	%ecx, 2816(%rsp)        # 4-byte Spill
	jg	.LBB67_77
	jmp	.LBB67_78
.LBB67_83:                              # %if.end1804
                                        # =>This Inner Loop Header: Depth=1
	movq	3056(%rsp), %rax        # 8-byte Reload
	movl	$32, %edx
	xorl	%ecx, %ecx
	movq	4088(%rsp), %rsi        # 8-byte Reload
	addq	$39256, %rsi            # imm = 0x9958
	imulq	$1032, %rax, %rdi       # imm = 0x408
	addq	%rdi, %rsi
	movq	4088(%rsp), %rdi        # 8-byte Reload
	addq	$37708, %rdi            # imm = 0x934C
	imulq	$258, %rax, %r8         # imm = 0x102
	addq	%r8, %rdi
	movq	%rdi, 2808(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	2808(%rsp), %rsi        # 8-byte Reload
	movl	4028(%rsp), %r8d        # 4-byte Reload
	movq	%rax, 2800(%rsp)        # 8-byte Spill
	callq	BZ2_hbAssignCodes
	movq	2800(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	3568(%rsp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	jb	.LBB67_83
.LBB67_84:                              # %for.end1814
	xorl	%eax, %eax
	movl	%eax, %ecx
	leaq	4096(%rsp), %rdx
	movq	%rdx, 2792(%rsp)        # 8-byte Spill
	movq	%rcx, 2784(%rsp)        # 8-byte Spill
.LBB67_85:                              # %for.body1818
                                        # =>This Inner Loop Header: Depth=1
	movq	2784(%rsp), %rax        # 8-byte Reload
	movb	$0, 4096(%rsp,%rax)
	movl	$12390, 4164(%rsp)      # imm = 0x3066
	movq	%rax, %rcx
	shlq	$4, %rcx
	movq	4088(%rsp), %rdx        # 8-byte Reload
	movb	128(%rdx,%rcx), %sil
	movl	$12392, 4164(%rsp)      # imm = 0x3068
	cmpb	$0, %sil
	setne	%dil
	andb	$1, %dil
	movb	%dil, 4096(%rsp,%rax)
	movl	$12396, 4164(%rsp)      # imm = 0x306C
	movq	%rcx, %r8
	orq	$1, %r8
	movb	128(%rdx,%r8), %dil
	movl	$12399, 4164(%rsp)      # imm = 0x306F
	orb	%dil, %sil
	cmpb	$0, %sil
	setne	%dil
	andb	$1, %dil
	movb	%dil, 4096(%rsp,%rax)
	movl	$12403, 4164(%rsp)      # imm = 0x3073
	movq	%rcx, %r8
	orq	$2, %r8
	movb	128(%rdx,%r8), %dil
	movl	$12406, 4164(%rsp)      # imm = 0x3076
	orb	%dil, %sil
	cmpb	$0, %sil
	setne	%dil
	andb	$1, %dil
	movb	%dil, 4096(%rsp,%rax)
	movl	$12410, 4164(%rsp)      # imm = 0x307A
	movq	%rcx, %r8
	orq	$3, %r8
	movb	128(%rdx,%r8), %dil
	movl	$12413, 4164(%rsp)      # imm = 0x307D
	orb	%dil, %sil
	cmpb	$0, %sil
	setne	%dil
	andb	$1, %dil
	movb	%dil, 4096(%rsp,%rax)
	movl	$12417, 4164(%rsp)      # imm = 0x3081
	movq	%rcx, %r8
	orq	$4, %r8
	movb	128(%rdx,%r8), %dil
	movl	$12420, 4164(%rsp)      # imm = 0x3084
	orb	%dil, %sil
	cmpb	$0, %sil
	setne	%dil
	andb	$1, %dil
	movb	%dil, 4096(%rsp,%rax)
	movl	$12424, 4164(%rsp)      # imm = 0x3088
	movq	%rcx, %r8
	orq	$5, %r8
	movb	128(%rdx,%r8), %dil
	movl	$12427, 4164(%rsp)      # imm = 0x308B
	orb	%dil, %sil
	cmpb	$0, %sil
	setne	%dil
	andb	$1, %dil
	movb	%dil, 4096(%rsp,%rax)
	movl	$12431, 4164(%rsp)      # imm = 0x308F
	movq	%rcx, %r8
	orq	$6, %r8
	movb	128(%rdx,%r8), %dil
	movl	$12434, 4164(%rsp)      # imm = 0x3092
	orb	%dil, %sil
	cmpb	$0, %sil
	setne	%dil
	andb	$1, %dil
	movb	%dil, 4096(%rsp,%rax)
	movl	$12438, 4164(%rsp)      # imm = 0x3096
	movq	%rcx, %r8
	orq	$7, %r8
	movb	128(%rdx,%r8), %dil
	movl	$12441, 4164(%rsp)      # imm = 0x3099
	orb	%dil, %sil
	cmpb	$0, %sil
	setne	%dil
	andb	$1, %dil
	movb	%dil, 4096(%rsp,%rax)
	movl	$12445, 4164(%rsp)      # imm = 0x309D
	movq	%rcx, %r8
	orq	$8, %r8
	movb	128(%rdx,%r8), %dil
	movl	$12448, 4164(%rsp)      # imm = 0x30A0
	orb	%dil, %sil
	cmpb	$0, %sil
	setne	%dil
	andb	$1, %dil
	movb	%dil, 4096(%rsp,%rax)
	movl	$12452, 4164(%rsp)      # imm = 0x30A4
	movq	%rcx, %r8
	orq	$9, %r8
	movb	128(%rdx,%r8), %dil
	movl	$12455, 4164(%rsp)      # imm = 0x30A7
	orb	%dil, %sil
	cmpb	$0, %sil
	setne	%dil
	andb	$1, %dil
	movb	%dil, 4096(%rsp,%rax)
	movl	$12459, 4164(%rsp)      # imm = 0x30AB
	movq	%rcx, %r8
	orq	$10, %r8
	movb	128(%rdx,%r8), %dil
	movl	$12462, 4164(%rsp)      # imm = 0x30AE
	orb	%dil, %sil
	cmpb	$0, %sil
	setne	%dil
	andb	$1, %dil
	movb	%dil, 4096(%rsp,%rax)
	movl	$12466, 4164(%rsp)      # imm = 0x30B2
	movq	%rcx, %r8
	orq	$11, %r8
	movb	128(%rdx,%r8), %dil
	movl	$12469, 4164(%rsp)      # imm = 0x30B5
	orb	%dil, %sil
	cmpb	$0, %sil
	setne	%dil
	andb	$1, %dil
	movb	%dil, 4096(%rsp,%rax)
	movl	$12473, 4164(%rsp)      # imm = 0x30B9
	movq	%rcx, %r8
	orq	$12, %r8
	movb	128(%rdx,%r8), %dil
	movl	$12476, 4164(%rsp)      # imm = 0x30BC
	orb	%dil, %sil
	cmpb	$0, %sil
	setne	%dil
	andb	$1, %dil
	movb	%dil, 4096(%rsp,%rax)
	movl	$12480, 4164(%rsp)      # imm = 0x30C0
	movq	%rcx, %r8
	orq	$13, %r8
	movb	128(%rdx,%r8), %dil
	movl	$12483, 4164(%rsp)      # imm = 0x30C3
	orb	%dil, %sil
	cmpb	$0, %sil
	setne	%dil
	andb	$1, %dil
	movb	%dil, 4096(%rsp,%rax)
	movl	$12487, 4164(%rsp)      # imm = 0x30C7
	movq	%rcx, %r8
	orq	$14, %r8
	movb	128(%rdx,%r8), %dil
	movl	$12490, 4164(%rsp)      # imm = 0x30CA
	orb	%dil, %sil
	cmpb	$0, %sil
	setne	%dil
	andb	$1, %dil
	movb	%dil, 4096(%rsp,%rax)
	movl	$12494, 4164(%rsp)      # imm = 0x30CE
	orq	$15, %rcx
	movb	128(%rdx,%rcx), %dil
	movl	$12497, 4164(%rsp)      # imm = 0x30D1
	orb	%dil, %sil
	cmpb	$0, %sil
	setne	%sil
	andb	$1, %sil
	movb	%sil, 4096(%rsp,%rax)
	movl	$12502, 4164(%rsp)      # imm = 0x30D6
	addq	$1, %rax
	cmpq	$16, %rax
	movq	%rax, 2784(%rsp)        # 8-byte Spill
	jne	.LBB67_85
# %bb.86:                               # %for.end1838
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	4088(%rsp), %rdx        # 8-byte Reload
	addq	$116, %rdx
	movq	4088(%rsp), %rsi        # 8-byte Reload
	movl	116(%rsi), %eax
	movl	$12506, 4164(%rsp)      # imm = 0x30DA
	addq	$644, %rsi              # imm = 0x284
	movq	4088(%rsp), %rdi        # 8-byte Reload
	addq	$640, %rdi              # imm = 0x280
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$80, %r8
	movq	4088(%rsp), %r9         # 8-byte Reload
	movl	644(%r9), %r10d
	movl	$12507, 4164(%rsp)      # imm = 0x30DB
	movl	640(%r9), %r11d
	movl	$12511, 4164(%rsp)      # imm = 0x30DF
	movl	%eax, %ebx
	movl	%r10d, 2780(%rsp)       # 4-byte Spill
	movq	%rdx, 2768(%rsp)        # 8-byte Spill
	movq	%rsi, 2760(%rsp)        # 8-byte Spill
	movl	%eax, 2756(%rsp)        # 4-byte Spill
	movq	%rdi, 2744(%rsp)        # 8-byte Spill
	movq	%r8, 2736(%rsp)         # 8-byte Spill
	movl	%r11d, 2732(%rsp)       # 4-byte Spill
	movl	%ebx, 2728(%rsp)        # 4-byte Spill
	movq	%rcx, 2720(%rsp)        # 8-byte Spill
.LBB67_87:                              # %for.body1842
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_90 Depth 2
                                        #     Child Loop BB67_94 Depth 2
	movq	2720(%rsp), %rax        # 8-byte Reload
	movl	2780(%rsp), %ecx        # 4-byte Reload
	movl	2732(%rsp), %edx        # 4-byte Reload
	movl	2728(%rsp), %esi        # 4-byte Reload
	movb	4096(%rsp,%rax), %dil
	movl	$12530, 4164(%rsp)      # imm = 0x30F2
	cmpl	$7, %ecx
	setg	%r8b
	cmpb	$0, %dil
	movq	%rax, 2712(%rsp)        # 8-byte Spill
	movl	%ecx, 2708(%rsp)        # 4-byte Spill
	movl	%edx, 2704(%rsp)        # 4-byte Spill
	movl	%esi, 2700(%rsp)        # 4-byte Spill
	movb	%r8b, 2699(%rsp)        # 1-byte Spill
	je	.LBB67_92
# %bb.88:                               # %if.then1846
                                        #   in Loop: Header=BB67_87 Depth=1
	movb	2699(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	2700(%rsp), %ecx        # 4-byte Reload
	movl	2704(%rsp), %edx        # 4-byte Reload
	movl	2708(%rsp), %esi        # 4-byte Reload
	movl	%ecx, 2692(%rsp)        # 4-byte Spill
	movl	%edx, 2688(%rsp)        # 4-byte Spill
	movl	%esi, 2684(%rsp)        # 4-byte Spill
	jne	.LBB67_89
	jmp	.LBB67_91
.LBB67_89:                              # %while.body.i.preheader
                                        #   in Loop: Header=BB67_87 Depth=1
	movl	2700(%rsp), %eax        # 4-byte Reload
	movl	2704(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 2680(%rsp)        # 4-byte Spill
	movl	%ecx, 2676(%rsp)        # 4-byte Spill
	jmp	.LBB67_90
.LBB67_90:                              # %while.body.i
                                        #   Parent Loop BB67_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	2676(%rsp), %eax        # 4-byte Reload
	movl	2680(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$12533, 4164(%rsp)      # imm = 0x30F5
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$12534, 4164(%rsp)      # imm = 0x30F6
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$12535, 4164(%rsp)      # imm = 0x30F7
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$12536, 4164(%rsp)      # imm = 0x30F8
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$12537, 4164(%rsp)      # imm = 0x30F9
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$12538, 4164(%rsp)      # imm = 0x30FA
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$12540, 4164(%rsp)      # imm = 0x30FC
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$12558, 4164(%rsp)      # imm = 0x310E
	cmpl	$15, %r10d
	movl	%eax, %r10d
	movl	%ecx, %ebx
	movl	%ebx, 2676(%rsp)        # 4-byte Spill
	movl	%eax, 2692(%rsp)        # 4-byte Spill
	movl	%ecx, 2688(%rsp)        # 4-byte Spill
	movl	%r10d, 2680(%rsp)       # 4-byte Spill
	movl	%r11d, 2684(%rsp)       # 4-byte Spill
	jg	.LBB67_90
.LBB67_91:                              # %bsW.exit
                                        #   in Loop: Header=BB67_87 Depth=1
	movl	2684(%rsp), %eax        # 4-byte Reload
	movl	2688(%rsp), %ecx        # 4-byte Reload
	movl	2692(%rsp), %edx        # 4-byte Reload
	movl	$1, %esi
	movl	$31, %edi
	subl	%eax, %edi
	movl	%ecx, 2672(%rsp)        # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %esi
	movl	2672(%rsp), %edi        # 4-byte Reload
	orl	%edi, %esi
	movl	%esi, 2668(%rsp)        # 4-byte Spill
	movl	%edx, 2664(%rsp)        # 4-byte Spill
	movl	%eax, 2660(%rsp)        # 4-byte Spill
	jmp	.LBB67_95
.LBB67_92:                              # %if.else1847
                                        #   in Loop: Header=BB67_87 Depth=1
	movb	2699(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	2700(%rsp), %ecx        # 4-byte Reload
	movl	2704(%rsp), %edx        # 4-byte Reload
	movl	2708(%rsp), %esi        # 4-byte Reload
	movl	%ecx, 2664(%rsp)        # 4-byte Spill
	movl	%edx, 2668(%rsp)        # 4-byte Spill
	movl	%esi, 2660(%rsp)        # 4-byte Spill
	jne	.LBB67_93
	jmp	.LBB67_95
.LBB67_93:                              # %while.body.i5492.preheader
                                        #   in Loop: Header=BB67_87 Depth=1
	movl	2700(%rsp), %eax        # 4-byte Reload
	movl	2704(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 2656(%rsp)        # 4-byte Spill
	movl	%ecx, 2652(%rsp)        # 4-byte Spill
	jmp	.LBB67_94
.LBB67_94:                              # %while.body.i5492
                                        #   Parent Loop BB67_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	2652(%rsp), %eax        # 4-byte Reload
	movl	2656(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$12561, 4164(%rsp)      # imm = 0x3111
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$12562, 4164(%rsp)      # imm = 0x3112
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$12563, 4164(%rsp)      # imm = 0x3113
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$12564, 4164(%rsp)      # imm = 0x3114
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$12565, 4164(%rsp)      # imm = 0x3115
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$12566, 4164(%rsp)      # imm = 0x3116
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$12568, 4164(%rsp)      # imm = 0x3118
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$12512, 4164(%rsp)      # imm = 0x30E0
	cmpl	$15, %r10d
	movl	%eax, %r10d
	movl	%ecx, %ebx
	movl	%ebx, 2652(%rsp)        # 4-byte Spill
	movl	%eax, 2664(%rsp)        # 4-byte Spill
	movl	%ecx, 2668(%rsp)        # 4-byte Spill
	movl	%r10d, 2656(%rsp)       # 4-byte Spill
	movl	%r11d, 2660(%rsp)       # 4-byte Spill
	jg	.LBB67_94
.LBB67_95:                              # %for.inc1849
                                        #   in Loop: Header=BB67_87 Depth=1
	movl	2660(%rsp), %eax        # 4-byte Reload
	movl	2668(%rsp), %ecx        # 4-byte Reload
	movl	2664(%rsp), %edx        # 4-byte Reload
	movq	2744(%rsp), %rsi        # 8-byte Reload
	movl	%ecx, (%rsi)
	movl	$12514, 4164(%rsp)      # imm = 0x30E2
	addl	$1, %eax
	movq	2760(%rsp), %rdi        # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$12579, 4164(%rsp)      # imm = 0x3123
	movq	2712(%rsp), %r8         # 8-byte Reload
	addq	$1, %r8
	cmpq	$16, %r8
	movl	%edx, %r9d
	movl	%ecx, %r10d
	movl	%eax, %r11d
	movl	%ecx, 2648(%rsp)        # 4-byte Spill
	movl	%edx, 2644(%rsp)        # 4-byte Spill
	movl	%eax, 2640(%rsp)        # 4-byte Spill
	movl	%r11d, 2780(%rsp)       # 4-byte Spill
	movl	%r9d, 2728(%rsp)        # 4-byte Spill
	movl	%r10d, 2732(%rsp)       # 4-byte Spill
	movq	%r8, 2720(%rsp)         # 8-byte Spill
	jne	.LBB67_87
# %bb.96:                               # %for.body1855.preheader
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	2644(%rsp), %eax        # 4-byte Reload
	movl	2648(%rsp), %edx        # 4-byte Reload
	movl	2640(%rsp), %esi        # 4-byte Reload
	movl	%esi, 2636(%rsp)        # 4-byte Spill
	movl	%eax, 2632(%rsp)        # 4-byte Spill
	movl	%edx, 2628(%rsp)        # 4-byte Spill
	movq	%rcx, 2616(%rsp)        # 8-byte Spill
	jmp	.LBB67_97
.LBB67_97:                              # %for.body1855
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_99 Depth 2
                                        #       Child Loop BB67_102 Depth 3
                                        #       Child Loop BB67_106 Depth 3
	movq	2616(%rsp), %rax        # 8-byte Reload
	movl	2636(%rsp), %ecx        # 4-byte Reload
	movl	2628(%rsp), %edx        # 4-byte Reload
	movl	2632(%rsp), %esi        # 4-byte Reload
	movb	4096(%rsp,%rax), %dil
	movl	$12593, 4164(%rsp)      # imm = 0x3131
	cmpb	$0, %dil
	movl	%esi, %r8d
	movl	%edx, %r9d
	movl	%ecx, %r10d
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	movl	%ecx, 2604(%rsp)        # 4-byte Spill
	movl	%edx, 2600(%rsp)        # 4-byte Spill
	movl	%esi, 2596(%rsp)        # 4-byte Spill
	movl	%r8d, 2592(%rsp)        # 4-byte Spill
	movl	%r9d, 2588(%rsp)        # 4-byte Spill
	movl	%r10d, 2584(%rsp)       # 4-byte Spill
	je	.LBB67_108
# %bb.98:                               # %if.then1859
                                        #   in Loop: Header=BB67_97 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	2608(%rsp), %rdx        # 8-byte Reload
	shlq	$4, %rdx
	movl	2596(%rsp), %eax        # 4-byte Reload
	movl	2600(%rsp), %esi        # 4-byte Reload
	movl	2604(%rsp), %edi        # 4-byte Reload
	movl	%edi, 2580(%rsp)        # 4-byte Spill
	movq	%rdx, 2568(%rsp)        # 8-byte Spill
	movl	%eax, 2564(%rsp)        # 4-byte Spill
	movl	%esi, 2560(%rsp)        # 4-byte Spill
	movq	%rcx, 2552(%rsp)        # 8-byte Spill
.LBB67_99:                              # %for.body1863
                                        #   Parent Loop BB67_97 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_102 Depth 3
                                        #       Child Loop BB67_106 Depth 3
	movq	2552(%rsp), %rax        # 8-byte Reload
	movl	2580(%rsp), %ecx        # 4-byte Reload
	movl	2560(%rsp), %edx        # 4-byte Reload
	movl	2564(%rsp), %esi        # 4-byte Reload
	movq	%rax, %rdi
	movq	2568(%rsp), %r8         # 8-byte Reload
	addq	%r8, %rdi
	movq	4088(%rsp), %r9         # 8-byte Reload
	movb	128(%r9,%rdi), %r10b
	movl	$12613, 4164(%rsp)      # imm = 0x3145
	cmpl	$7, %ecx
	setg	%r11b
	cmpb	$0, %r10b
	movq	%rax, 2544(%rsp)        # 8-byte Spill
	movl	%ecx, 2540(%rsp)        # 4-byte Spill
	movl	%edx, 2536(%rsp)        # 4-byte Spill
	movl	%esi, 2532(%rsp)        # 4-byte Spill
	movb	%r11b, 2531(%rsp)       # 1-byte Spill
	je	.LBB67_104
# %bb.100:                              # %if.then1870
                                        #   in Loop: Header=BB67_99 Depth=2
	movb	2531(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	2532(%rsp), %ecx        # 4-byte Reload
	movl	2536(%rsp), %edx        # 4-byte Reload
	movl	2540(%rsp), %esi        # 4-byte Reload
	movl	%ecx, 2524(%rsp)        # 4-byte Spill
	movl	%edx, 2520(%rsp)        # 4-byte Spill
	movl	%esi, 2516(%rsp)        # 4-byte Spill
	jne	.LBB67_101
	jmp	.LBB67_103
.LBB67_101:                             # %while.body.i5467.preheader
                                        #   in Loop: Header=BB67_99 Depth=2
	movl	2532(%rsp), %eax        # 4-byte Reload
	movl	2536(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 2512(%rsp)        # 4-byte Spill
	movl	%ecx, 2508(%rsp)        # 4-byte Spill
	jmp	.LBB67_102
.LBB67_102:                             # %while.body.i5467
                                        #   Parent Loop BB67_97 Depth=1
                                        #     Parent Loop BB67_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	2508(%rsp), %eax        # 4-byte Reload
	movl	2512(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$12616, 4164(%rsp)      # imm = 0x3148
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$12617, 4164(%rsp)      # imm = 0x3149
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$12618, 4164(%rsp)      # imm = 0x314A
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$12619, 4164(%rsp)      # imm = 0x314B
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$12620, 4164(%rsp)      # imm = 0x314C
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$12621, 4164(%rsp)      # imm = 0x314D
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$12623, 4164(%rsp)      # imm = 0x314F
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$12641, 4164(%rsp)      # imm = 0x3161
	cmpl	$15, %r10d
	movl	%eax, %r10d
	movl	%ecx, %ebx
	movl	%ebx, 2508(%rsp)        # 4-byte Spill
	movl	%eax, 2524(%rsp)        # 4-byte Spill
	movl	%ecx, 2520(%rsp)        # 4-byte Spill
	movl	%r10d, 2512(%rsp)       # 4-byte Spill
	movl	%r11d, 2516(%rsp)       # 4-byte Spill
	jg	.LBB67_102
.LBB67_103:                             # %bsW.exit5473
                                        #   in Loop: Header=BB67_99 Depth=2
	movl	2516(%rsp), %eax        # 4-byte Reload
	movl	2520(%rsp), %ecx        # 4-byte Reload
	movl	2524(%rsp), %edx        # 4-byte Reload
	movl	$1, %esi
	movl	$31, %edi
	subl	%eax, %edi
	movl	%ecx, 2504(%rsp)        # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %esi
	movl	2504(%rsp), %edi        # 4-byte Reload
	orl	%edi, %esi
	movl	%esi, 2500(%rsp)        # 4-byte Spill
	movl	%edx, 2496(%rsp)        # 4-byte Spill
	movl	%eax, 2492(%rsp)        # 4-byte Spill
	jmp	.LBB67_107
.LBB67_104:                             # %if.else1871
                                        #   in Loop: Header=BB67_99 Depth=2
	movb	2531(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	2532(%rsp), %ecx        # 4-byte Reload
	movl	2536(%rsp), %edx        # 4-byte Reload
	movl	2540(%rsp), %esi        # 4-byte Reload
	movl	%ecx, 2496(%rsp)        # 4-byte Spill
	movl	%edx, 2500(%rsp)        # 4-byte Spill
	movl	%esi, 2492(%rsp)        # 4-byte Spill
	jne	.LBB67_105
	jmp	.LBB67_107
.LBB67_105:                             # %while.body.i5444.preheader
                                        #   in Loop: Header=BB67_99 Depth=2
	movl	2532(%rsp), %eax        # 4-byte Reload
	movl	2536(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 2488(%rsp)        # 4-byte Spill
	movl	%ecx, 2484(%rsp)        # 4-byte Spill
	jmp	.LBB67_106
.LBB67_106:                             # %while.body.i5444
                                        #   Parent Loop BB67_97 Depth=1
                                        #     Parent Loop BB67_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	2484(%rsp), %eax        # 4-byte Reload
	movl	2488(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$12644, 4164(%rsp)      # imm = 0x3164
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$12645, 4164(%rsp)      # imm = 0x3165
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$12646, 4164(%rsp)      # imm = 0x3166
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$12647, 4164(%rsp)      # imm = 0x3167
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$12648, 4164(%rsp)      # imm = 0x3168
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$12649, 4164(%rsp)      # imm = 0x3169
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$12651, 4164(%rsp)      # imm = 0x316B
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$12594, 4164(%rsp)      # imm = 0x3132
	cmpl	$15, %r10d
	movl	%eax, %r10d
	movl	%ecx, %ebx
	movl	%ebx, 2484(%rsp)        # 4-byte Spill
	movl	%eax, 2496(%rsp)        # 4-byte Spill
	movl	%ecx, 2500(%rsp)        # 4-byte Spill
	movl	%r10d, 2488(%rsp)       # 4-byte Spill
	movl	%r11d, 2492(%rsp)       # 4-byte Spill
	jg	.LBB67_106
.LBB67_107:                             # %for.inc1873
                                        #   in Loop: Header=BB67_99 Depth=2
	movl	2492(%rsp), %eax        # 4-byte Reload
	movl	2500(%rsp), %ecx        # 4-byte Reload
	movl	2496(%rsp), %edx        # 4-byte Reload
	movq	2744(%rsp), %rsi        # 8-byte Reload
	movl	%ecx, (%rsi)
	movl	$12596, 4164(%rsp)      # imm = 0x3134
	addl	$1, %eax
	movq	2760(%rsp), %rdi        # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$12580, 4164(%rsp)      # imm = 0x3124
	movq	2544(%rsp), %r8         # 8-byte Reload
	addq	$1, %r8
	cmpq	$16, %r8
	movl	%edx, %r9d
	movl	%ecx, %r10d
	movl	%eax, %r11d
	movl	%edx, 2592(%rsp)        # 4-byte Spill
	movq	%r8, 2552(%rsp)         # 8-byte Spill
	movl	%ecx, 2588(%rsp)        # 4-byte Spill
	movl	%r11d, 2580(%rsp)       # 4-byte Spill
	movl	%r9d, 2564(%rsp)        # 4-byte Spill
	movl	%r10d, 2560(%rsp)       # 4-byte Spill
	movl	%eax, 2584(%rsp)        # 4-byte Spill
	jne	.LBB67_99
.LBB67_108:                             # %for.inc1877
                                        #   in Loop: Header=BB67_97 Depth=1
	movl	2584(%rsp), %eax        # 4-byte Reload
	movl	2588(%rsp), %ecx        # 4-byte Reload
	movl	2592(%rsp), %edx        # 4-byte Reload
	movq	2608(%rsp), %rsi        # 8-byte Reload
	addq	$1, %rsi
	cmpq	$16, %rsi
	movl	%edx, %edi
	movl	%eax, %r8d
	movl	%eax, 2480(%rsp)        # 4-byte Spill
	movl	%edi, 2632(%rsp)        # 4-byte Spill
	movl	%edx, 2476(%rsp)        # 4-byte Spill
	movl	%r8d, 2636(%rsp)        # 4-byte Spill
	movl	%ecx, 2628(%rsp)        # 4-byte Spill
	movq	%rsi, 2616(%rsp)        # 8-byte Spill
	jne	.LBB67_97
# %bb.109:                              # %for.end1879
	movq	4056(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$12664, 4164(%rsp)      # imm = 0x3178
	cmpl	$2, %ecx
	movl	2480(%rsp), %ecx        # 4-byte Reload
	movl	2476(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 2472(%rsp)        # 4-byte Spill
	movl	%edx, 2468(%rsp)        # 4-byte Spill
	jle	.LBB67_111
# %bb.110:                              # %if.then1883
	movabsq	$.L.str.7.72, %rsi
	movq	stderr, %rdi
	movl	$12668, 4164(%rsp)      # imm = 0x317C
	movl	2476(%rsp), %eax        # 4-byte Reload
	movl	2756(%rsp), %ecx        # 4-byte Reload
	subl	%ecx, %eax
	movl	%eax, %edx
	movb	$0, %al
	callq	fprintf
	movq	2768(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %ecx
	movl	$12669, 4164(%rsp)      # imm = 0x317D
	movq	2760(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %edx
	movl	$12675, 4164(%rsp)      # imm = 0x3183
	movl	%eax, 2464(%rsp)        # 4-byte Spill
	movl	%edx, 2472(%rsp)        # 4-byte Spill
	movl	%ecx, 2468(%rsp)        # 4-byte Spill
.LBB67_111:                             # %if.end1887
	movl	2468(%rsp), %eax        # 4-byte Reload
	movl	2472(%rsp), %ecx        # 4-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %esi
	movl	$12684, 4164(%rsp)      # imm = 0x318C
	cmpl	$7, %ecx
	movl	%eax, %edi
	movl	%esi, %r8d
	movl	%eax, 2460(%rsp)        # 4-byte Spill
	movl	%r8d, 2456(%rsp)        # 4-byte Spill
	movl	%esi, 2452(%rsp)        # 4-byte Spill
	movl	%edi, 2448(%rsp)        # 4-byte Spill
	movl	%ecx, 2444(%rsp)        # 4-byte Spill
	jle	.LBB67_114
# %bb.112:                              # %while.body.i5419.preheader
	movl	2460(%rsp), %eax        # 4-byte Reload
	movl	2452(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 2440(%rsp)        # 4-byte Spill
	movl	%ecx, 2436(%rsp)        # 4-byte Spill
	jmp	.LBB67_113
.LBB67_113:                             # %while.body.i5419
                                        # =>This Inner Loop Header: Depth=1
	movl	2436(%rsp), %eax        # 4-byte Reload
	movl	2440(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$12687, 4164(%rsp)      # imm = 0x318F
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$12688, 4164(%rsp)      # imm = 0x3190
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$12689, 4164(%rsp)      # imm = 0x3191
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$12690, 4164(%rsp)      # imm = 0x3192
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$12691, 4164(%rsp)      # imm = 0x3193
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$12692, 4164(%rsp)      # imm = 0x3194
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$12694, 4164(%rsp)      # imm = 0x3196
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$12703, 4164(%rsp)      # imm = 0x319F
	cmpl	$15, %r10d
	movl	%eax, %r10d
	movl	%ecx, %ebx
	movl	%ebx, 2436(%rsp)        # 4-byte Spill
	movl	%eax, 2448(%rsp)        # 4-byte Spill
	movl	%ecx, 2456(%rsp)        # 4-byte Spill
	movl	%r10d, 2440(%rsp)       # 4-byte Spill
	movl	%r11d, 2444(%rsp)       # 4-byte Spill
	jg	.LBB67_113
.LBB67_114:                             # %bsW.exit5425
	movl	2444(%rsp), %eax        # 4-byte Reload
	movl	2456(%rsp), %ecx        # 4-byte Reload
	movl	2448(%rsp), %edx        # 4-byte Reload
	movl	$29, %esi
	subl	%eax, %esi
	movl	%ecx, 2432(%rsp)        # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	movl	3984(%rsp), %esi        # 4-byte Reload
	shll	%cl, %esi
	movl	2432(%rsp), %edi        # 4-byte Reload
	orl	%edi, %esi
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%esi, (%r8)
	movl	$12705, 4164(%rsp)      # imm = 0x31A1
	movl	%eax, %edi
	addl	$3, %edi
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%edi, (%r9)
	movl	$12715, 4164(%rsp)      # imm = 0x31AB
	cmpl	$4, %eax
	movl	%edx, %eax
	movl	%esi, %r10d
	movl	%edx, 2428(%rsp)        # 4-byte Spill
	movl	%esi, 2424(%rsp)        # 4-byte Spill
	movl	%r10d, 2420(%rsp)       # 4-byte Spill
	movl	%eax, 2416(%rsp)        # 4-byte Spill
	movl	%edi, 2412(%rsp)        # 4-byte Spill
	jle	.LBB67_117
# %bb.115:                              # %while.body.i5394.preheader
	movl	2428(%rsp), %eax        # 4-byte Reload
	movl	2424(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 2408(%rsp)        # 4-byte Spill
	movl	%ecx, 2404(%rsp)        # 4-byte Spill
	jmp	.LBB67_116
.LBB67_116:                             # %while.body.i5394
                                        # =>This Inner Loop Header: Depth=1
	movl	2404(%rsp), %eax        # 4-byte Reload
	movl	2408(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$12718, 4164(%rsp)      # imm = 0x31AE
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$12719, 4164(%rsp)      # imm = 0x31AF
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$12720, 4164(%rsp)      # imm = 0x31B0
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$12721, 4164(%rsp)      # imm = 0x31B1
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$12722, 4164(%rsp)      # imm = 0x31B2
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$12723, 4164(%rsp)      # imm = 0x31B3
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$12725, 4164(%rsp)      # imm = 0x31B5
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$12734, 4164(%rsp)      # imm = 0x31BE
	cmpl	$15, %r10d
	movl	%eax, %r10d
	movl	%ecx, %ebx
	movl	%ebx, 2404(%rsp)        # 4-byte Spill
	movl	%eax, 2416(%rsp)        # 4-byte Spill
	movl	%ecx, 2420(%rsp)        # 4-byte Spill
	movl	%r10d, 2408(%rsp)       # 4-byte Spill
	movl	%r11d, 2412(%rsp)       # 4-byte Spill
	jg	.LBB67_116
.LBB67_117:                             # %bsW.exit5400
	movl	2412(%rsp), %eax        # 4-byte Reload
	movl	2420(%rsp), %ecx        # 4-byte Reload
	movl	2416(%rsp), %edx        # 4-byte Reload
	movl	$17, %esi
	subl	%eax, %esi
	movl	%ecx, 2400(%rsp)        # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	movl	3224(%rsp), %esi        # 4-byte Reload
	shll	%cl, %esi
	movl	2400(%rsp), %edi        # 4-byte Reload
	orl	%edi, %esi
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%esi, (%r8)
	movl	$12736, 4164(%rsp)      # imm = 0x31C0
	addl	$15, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$12749, 4164(%rsp)      # imm = 0x31CD
	movb	3143(%rsp), %cl         # 1-byte Reload
	testb	$1, %cl
	movl	%esi, %edi
	movl	%eax, %r10d
	movl	%edx, %r11d
	movl	%edx, 2396(%rsp)        # 4-byte Spill
	movl	%esi, 2392(%rsp)        # 4-byte Spill
	movl	%eax, 2388(%rsp)        # 4-byte Spill
	movl	%edi, 2384(%rsp)        # 4-byte Spill
	movl	%r10d, 2380(%rsp)       # 4-byte Spill
	movl	%r11d, 2376(%rsp)       # 4-byte Spill
	jne	.LBB67_118
	jmp	.LBB67_129
.LBB67_118:                             # %for.body1892.lr.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	3224(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edx
	movl	%edx, %esi
	movl	2396(%rsp), %edx        # 4-byte Reload
	movl	2392(%rsp), %edi        # 4-byte Reload
	movl	2388(%rsp), %r8d        # 4-byte Reload
	movl	%r8d, 2372(%rsp)        # 4-byte Spill
	movq	%rsi, 2360(%rsp)        # 8-byte Spill
	movl	%edx, 2356(%rsp)        # 4-byte Spill
	movl	%edi, 2352(%rsp)        # 4-byte Spill
	movq	%rcx, 2344(%rsp)        # 8-byte Spill
.LBB67_119:                             # %for.body1892
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_121 Depth 2
                                        #       Child Loop BB67_123 Depth 3
                                        #     Child Loop BB67_127 Depth 2
	movq	2344(%rsp), %rax        # 8-byte Reload
	movl	2372(%rsp), %ecx        # 4-byte Reload
	movl	2352(%rsp), %edx        # 4-byte Reload
	movl	2356(%rsp), %esi        # 4-byte Reload
	movq	4088(%rsp), %rdi        # 8-byte Reload
	addq	$19706, %rdi            # imm = 0x4CFA
	addq	%rax, %rdi
	movq	4088(%rsp), %r8         # 8-byte Reload
	movb	19706(%r8,%rax), %r9b
	movl	$12772, 4164(%rsp)      # imm = 0x31E4
	cmpl	$7, %ecx
	setg	%r10b
	cmpb	$0, %r9b
	movl	%edx, %r11d
	movl	%esi, %ebx
	movl	%ecx, %ebp
	movb	%r10b, %r9b
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	movl	%ecx, 2332(%rsp)        # 4-byte Spill
	movl	%edx, 2328(%rsp)        # 4-byte Spill
	movl	%esi, 2324(%rsp)        # 4-byte Spill
	movq	%rdi, 2312(%rsp)        # 8-byte Spill
	movb	%r10b, 2311(%rsp)       # 1-byte Spill
	movl	%r11d, 2304(%rsp)       # 4-byte Spill
	movl	%ebx, 2300(%rsp)        # 4-byte Spill
	movl	%ebp, 2296(%rsp)        # 4-byte Spill
	movb	%r9b, 2295(%rsp)        # 1-byte Spill
	je	.LBB67_125
# %bb.120:                              # %for.body1900.preheader
                                        #   in Loop: Header=BB67_119 Depth=1
	xorl	%eax, %eax
	movl	2324(%rsp), %ecx        # 4-byte Reload
	movl	2328(%rsp), %edx        # 4-byte Reload
	movb	2311(%rsp), %sil        # 1-byte Reload
	movl	2332(%rsp), %edi        # 4-byte Reload
	movl	%edi, 2288(%rsp)        # 4-byte Spill
	movl	%ecx, 2284(%rsp)        # 4-byte Spill
	movl	%edx, 2280(%rsp)        # 4-byte Spill
	movb	%sil, 2279(%rsp)        # 1-byte Spill
	movl	%eax, 2272(%rsp)        # 4-byte Spill
	jmp	.LBB67_121
.LBB67_121:                             # %for.body1900
                                        #   Parent Loop BB67_119 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_123 Depth 3
	movl	2272(%rsp), %eax        # 4-byte Reload
	movl	2288(%rsp), %ecx        # 4-byte Reload
	movb	2279(%rsp), %dl         # 1-byte Reload
	movl	2280(%rsp), %esi        # 4-byte Reload
	movl	2284(%rsp), %edi        # 4-byte Reload
	testb	$1, %dl
	movl	%edi, %r8d
	movl	%esi, %r9d
	movl	%eax, 2268(%rsp)        # 4-byte Spill
	movl	%r9d, 2264(%rsp)        # 4-byte Spill
	movl	%edi, 2260(%rsp)        # 4-byte Spill
	movl	%esi, 2256(%rsp)        # 4-byte Spill
	movl	%r8d, 2252(%rsp)        # 4-byte Spill
	movl	%ecx, 2248(%rsp)        # 4-byte Spill
	jne	.LBB67_122
	jmp	.LBB67_124
.LBB67_122:                             # %while.body.i5369.preheader
                                        #   in Loop: Header=BB67_121 Depth=2
	movl	2260(%rsp), %eax        # 4-byte Reload
	movl	2256(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 2244(%rsp)        # 4-byte Spill
	movl	%ecx, 2240(%rsp)        # 4-byte Spill
	jmp	.LBB67_123
.LBB67_123:                             # %while.body.i5369
                                        #   Parent Loop BB67_119 Depth=1
                                        #     Parent Loop BB67_121 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	2240(%rsp), %eax        # 4-byte Reload
	movl	2244(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$12775, 4164(%rsp)      # imm = 0x31E7
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$12776, 4164(%rsp)      # imm = 0x31E8
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$12777, 4164(%rsp)      # imm = 0x31E9
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$12778, 4164(%rsp)      # imm = 0x31EA
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$12779, 4164(%rsp)      # imm = 0x31EB
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$12780, 4164(%rsp)      # imm = 0x31EC
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$12782, 4164(%rsp)      # imm = 0x31EE
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$12789, 4164(%rsp)      # imm = 0x31F5
	cmpl	$15, %r10d
	movl	%eax, %r10d
	movl	%ecx, %ebx
	movl	%ebx, 2240(%rsp)        # 4-byte Spill
	movl	%eax, 2252(%rsp)        # 4-byte Spill
	movl	%ecx, 2264(%rsp)        # 4-byte Spill
	movl	%r10d, 2244(%rsp)       # 4-byte Spill
	movl	%r11d, 2248(%rsp)       # 4-byte Spill
	jg	.LBB67_123
.LBB67_124:                             # %bsW.exit5375
                                        #   in Loop: Header=BB67_121 Depth=2
	movl	2248(%rsp), %eax        # 4-byte Reload
	movl	2264(%rsp), %ecx        # 4-byte Reload
	movl	2252(%rsp), %edx        # 4-byte Reload
	movl	$1, %esi
	movl	$31, %edi
	subl	%eax, %edi
	movl	%ecx, 2236(%rsp)        # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %esi
	movl	2236(%rsp), %edi        # 4-byte Reload
	orl	%edi, %esi
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%esi, (%r8)
	movl	$12790, 4164(%rsp)      # imm = 0x31F6
	movl	%eax, %edi
	addl	$1, %edi
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%edi, (%r9)
	movl	$12791, 4164(%rsp)      # imm = 0x31F7
	movl	2268(%rsp), %r10d       # 4-byte Reload
	addl	$1, %r10d
	movq	2312(%rsp), %r11        # 8-byte Reload
	movb	(%r11), %cl
	movl	$12807, 4164(%rsp)      # imm = 0x3207
	movzbl	%cl, %ebx
	cmpl	$6, %eax
	setg	%cl
	cmpl	%ebx, %r10d
	movl	%edx, %eax
	movl	%esi, %ebx
	movb	%cl, %bpl
	movl	%edi, %r14d
	movl	%edi, 2296(%rsp)        # 4-byte Spill
	movl	%esi, 2304(%rsp)        # 4-byte Spill
	movl	%r10d, 2272(%rsp)       # 4-byte Spill
	movl	%edx, 2300(%rsp)        # 4-byte Spill
	movl	%r14d, 2288(%rsp)       # 4-byte Spill
	movl	%eax, 2284(%rsp)        # 4-byte Spill
	movl	%ebx, 2280(%rsp)        # 4-byte Spill
	movb	%bpl, 2279(%rsp)        # 1-byte Spill
	movb	%cl, 2295(%rsp)         # 1-byte Spill
	jb	.LBB67_121
.LBB67_125:                             # %for.end1903
                                        #   in Loop: Header=BB67_119 Depth=1
	movb	2295(%rsp), %al         # 1-byte Reload
	movl	2296(%rsp), %ecx        # 4-byte Reload
	movl	2300(%rsp), %edx        # 4-byte Reload
	movl	2304(%rsp), %esi        # 4-byte Reload
	testb	$1, %al
	movl	%edx, %edi
	movl	%esi, %r8d
	movl	%esi, 2232(%rsp)        # 4-byte Spill
	movl	%r8d, 2228(%rsp)        # 4-byte Spill
	movl	%edx, 2224(%rsp)        # 4-byte Spill
	movl	%edi, 2220(%rsp)        # 4-byte Spill
	movl	%ecx, 2216(%rsp)        # 4-byte Spill
	jne	.LBB67_126
	jmp	.LBB67_128
.LBB67_126:                             # %while.body.i5346.preheader
                                        #   in Loop: Header=BB67_119 Depth=1
	movl	2224(%rsp), %eax        # 4-byte Reload
	movl	2232(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 2212(%rsp)        # 4-byte Spill
	movl	%ecx, 2208(%rsp)        # 4-byte Spill
	jmp	.LBB67_127
.LBB67_127:                             # %while.body.i5346
                                        #   Parent Loop BB67_119 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	2208(%rsp), %eax        # 4-byte Reload
	movl	2212(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$12810, 4164(%rsp)      # imm = 0x320A
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$12811, 4164(%rsp)      # imm = 0x320B
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$12812, 4164(%rsp)      # imm = 0x320C
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$12813, 4164(%rsp)      # imm = 0x320D
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$12814, 4164(%rsp)      # imm = 0x320E
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$12815, 4164(%rsp)      # imm = 0x320F
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$12817, 4164(%rsp)      # imm = 0x3211
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$12821, 4164(%rsp)      # imm = 0x3215
	cmpl	$15, %r10d
	movl	%eax, %r10d
	movl	%ecx, %ebx
	movl	%ebx, 2208(%rsp)        # 4-byte Spill
	movl	%eax, 2220(%rsp)        # 4-byte Spill
	movl	%ecx, 2228(%rsp)        # 4-byte Spill
	movl	%r10d, 2212(%rsp)       # 4-byte Spill
	movl	%r11d, 2216(%rsp)       # 4-byte Spill
	jg	.LBB67_127
.LBB67_128:                             # %bsW.exit5350
                                        #   in Loop: Header=BB67_119 Depth=1
	movl	2216(%rsp), %eax        # 4-byte Reload
	movl	2228(%rsp), %ecx        # 4-byte Reload
	movl	2220(%rsp), %edx        # 4-byte Reload
	movq	2744(%rsp), %rsi        # 8-byte Reload
	movl	%ecx, (%rsi)
	movl	$12822, 4164(%rsp)      # imm = 0x3216
	addl	$1, %eax
	movq	2760(%rsp), %rdi        # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$12828, 4164(%rsp)      # imm = 0x321C
	movq	2336(%rsp), %r8         # 8-byte Reload
	addq	$1, %r8
	movq	2360(%rsp), %r9         # 8-byte Reload
	cmpq	%r9, %r8
	movl	%edx, %r10d
	movl	%ecx, %r11d
	movl	%eax, %ebx
	movq	%r8, 2344(%rsp)         # 8-byte Spill
	movl	%eax, 2380(%rsp)        # 4-byte Spill
	movl	%ecx, 2384(%rsp)        # 4-byte Spill
	movl	%ebx, 2372(%rsp)        # 4-byte Spill
	movl	%r10d, 2356(%rsp)       # 4-byte Spill
	movl	%r11d, 2352(%rsp)       # 4-byte Spill
	movl	%edx, 2376(%rsp)        # 4-byte Spill
	jne	.LBB67_119
.LBB67_129:                             # %for.end1906
	movl	2376(%rsp), %eax        # 4-byte Reload
	movl	2380(%rsp), %ecx        # 4-byte Reload
	movl	2384(%rsp), %edx        # 4-byte Reload
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %edi
	movl	$12831, 4164(%rsp)      # imm = 0x321F
	cmpl	$2, %edi
	movl	%eax, %edi
	movl	%eax, 2204(%rsp)        # 4-byte Spill
	movl	%edx, 2200(%rsp)        # 4-byte Spill
	movl	%ecx, 2196(%rsp)        # 4-byte Spill
	movl	%edi, 2192(%rsp)        # 4-byte Spill
	jle	.LBB67_131
# %bb.130:                              # %if.then1910
	movabsq	$.L.str.8.73, %rsi
	movq	stderr, %rdi
	movl	$12835, 4164(%rsp)      # imm = 0x3223
	movl	2204(%rsp), %eax        # 4-byte Reload
	movl	2460(%rsp), %ecx        # 4-byte Reload
	subl	%ecx, %eax
	movl	%eax, %edx
	movb	$0, %al
	callq	fprintf
	movq	2768(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %ecx
	movl	$12836, 4164(%rsp)      # imm = 0x3224
	movq	2760(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %edx
	movl	$12837, 4164(%rsp)      # imm = 0x3225
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %r9d
	movl	$12852, 4164(%rsp)      # imm = 0x3234
	movl	%eax, 2188(%rsp)        # 4-byte Spill
	movl	%edx, 2196(%rsp)        # 4-byte Spill
	movl	%r9d, 2200(%rsp)        # 4-byte Spill
	movl	%ecx, 2192(%rsp)        # 4-byte Spill
.LBB67_131:                             # %if.end1914
	movl	2192(%rsp), %eax        # 4-byte Reload
	movl	2196(%rsp), %ecx        # 4-byte Reload
	movl	2200(%rsp), %edx        # 4-byte Reload
	xorl	%esi, %esi
	movl	%esi, %edi
	movl	%eax, %esi
	movl	%eax, 2184(%rsp)        # 4-byte Spill
	movl	%edx, 2180(%rsp)        # 4-byte Spill
	movl	%esi, 2176(%rsp)        # 4-byte Spill
	movl	%ecx, 2172(%rsp)        # 4-byte Spill
	movq	%rdi, 2160(%rsp)        # 8-byte Spill
.LBB67_132:                             # %for.body1919
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_134 Depth 2
                                        #     Child Loop BB67_137 Depth 2
                                        #       Child Loop BB67_139 Depth 3
                                        #         Child Loop BB67_141 Depth 4
                                        #       Child Loop BB67_146 Depth 3
                                        #         Child Loop BB67_148 Depth 4
                                        #       Child Loop BB67_152 Depth 3
	movq	2160(%rsp), %rax        # 8-byte Reload
	movl	2172(%rsp), %ecx        # 4-byte Reload
	movl	2180(%rsp), %edx        # 4-byte Reload
	movl	2176(%rsp), %esi        # 4-byte Reload
	movq	4088(%rsp), %rdi        # 8-byte Reload
	addq	$37708, %rdi            # imm = 0x934C
	imulq	$258, %rax, %r8         # imm = 0x102
	addq	%r8, %rdi
	movb	(%rdi), %r9b
	movl	$12863, 4164(%rsp)      # imm = 0x323F
	movzbl	%r9b, %r10d
	cmpl	$7, %ecx
	movl	%esi, %r11d
	movl	%edx, %ebx
	movq	%rax, 2152(%rsp)        # 8-byte Spill
	movl	%ebx, 2148(%rsp)        # 4-byte Spill
	movl	%edx, 2144(%rsp)        # 4-byte Spill
	movl	%esi, 2140(%rsp)        # 4-byte Spill
	movl	%r10d, 2136(%rsp)       # 4-byte Spill
	movl	%r11d, 2132(%rsp)       # 4-byte Spill
	movl	%ecx, 2128(%rsp)        # 4-byte Spill
	jle	.LBB67_135
# %bb.133:                              # %while.body.i5321.preheader
                                        #   in Loop: Header=BB67_132 Depth=1
	movl	2140(%rsp), %eax        # 4-byte Reload
	movl	2144(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 2124(%rsp)        # 4-byte Spill
	movl	%ecx, 2120(%rsp)        # 4-byte Spill
	jmp	.LBB67_134
.LBB67_134:                             # %while.body.i5321
                                        #   Parent Loop BB67_132 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	2120(%rsp), %eax        # 4-byte Reload
	movl	2124(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$12866, 4164(%rsp)      # imm = 0x3242
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$12867, 4164(%rsp)      # imm = 0x3243
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$12868, 4164(%rsp)      # imm = 0x3244
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$12869, 4164(%rsp)      # imm = 0x3245
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$12870, 4164(%rsp)      # imm = 0x3246
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$12871, 4164(%rsp)      # imm = 0x3247
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$12873, 4164(%rsp)      # imm = 0x3249
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$12882, 4164(%rsp)      # imm = 0x3252
	cmpl	$15, %r10d
	movl	%eax, %r10d
	movl	%ecx, %ebx
	movl	%ebx, 2120(%rsp)        # 4-byte Spill
	movl	%eax, 2132(%rsp)        # 4-byte Spill
	movl	%ecx, 2148(%rsp)        # 4-byte Spill
	movl	%r10d, 2124(%rsp)       # 4-byte Spill
	movl	%r11d, 2128(%rsp)       # 4-byte Spill
	jg	.LBB67_134
.LBB67_135:                             # %bsW.exit5327
                                        #   in Loop: Header=BB67_132 Depth=1
	movl	2128(%rsp), %eax        # 4-byte Reload
	movl	2148(%rsp), %ecx        # 4-byte Reload
	movl	2132(%rsp), %edx        # 4-byte Reload
	movl	$27, %esi
	subl	%eax, %esi
	movl	%ecx, 2116(%rsp)        # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	movl	2136(%rsp), %esi        # 4-byte Reload
	shll	%cl, %esi
	movl	2116(%rsp), %edi        # 4-byte Reload
	orl	%edi, %esi
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%esi, (%r8)
	movl	$12884, 4164(%rsp)      # imm = 0x3254
	addl	$5, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$12898, 4164(%rsp)      # imm = 0x3262
	movb	4027(%rsp), %cl         # 1-byte Reload
	testb	$1, %cl
	movl	%edx, %edi
	movl	%esi, %r10d
	movl	%eax, %r11d
	movl	%edx, 2112(%rsp)        # 4-byte Spill
	movl	%esi, 2108(%rsp)        # 4-byte Spill
	movl	%eax, 2104(%rsp)        # 4-byte Spill
	movl	%edi, 2100(%rsp)        # 4-byte Spill
	movl	%r10d, 2096(%rsp)       # 4-byte Spill
	movl	%r11d, 2092(%rsp)       # 4-byte Spill
	jne	.LBB67_136
	jmp	.LBB67_154
.LBB67_136:                             # %for.body1928.preheader
                                        #   in Loop: Header=BB67_132 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	2108(%rsp), %eax        # 4-byte Reload
	movl	2104(%rsp), %edx        # 4-byte Reload
	movl	2112(%rsp), %esi        # 4-byte Reload
	movl	2136(%rsp), %edi        # 4-byte Reload
	movl	%esi, 2088(%rsp)        # 4-byte Spill
	movl	%eax, 2084(%rsp)        # 4-byte Spill
	movl	%edx, 2080(%rsp)        # 4-byte Spill
	movq	%rcx, 2072(%rsp)        # 8-byte Spill
	movl	%edi, 2068(%rsp)        # 4-byte Spill
	jmp	.LBB67_137
.LBB67_137:                             # %for.body1928
                                        #   Parent Loop BB67_132 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_139 Depth 3
                                        #         Child Loop BB67_141 Depth 4
                                        #       Child Loop BB67_146 Depth 3
                                        #         Child Loop BB67_148 Depth 4
                                        #       Child Loop BB67_152 Depth 3
	movl	2068(%rsp), %eax        # 4-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movl	2088(%rsp), %edx        # 4-byte Reload
	movl	2080(%rsp), %esi        # 4-byte Reload
	movl	2084(%rsp), %edi        # 4-byte Reload
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$37708, %r8             # imm = 0x934C
	movq	2152(%rsp), %r9         # 8-byte Reload
	imulq	$258, %r9, %r10         # imm = 0x102
	addq	%r10, %r8
	addq	%rcx, %r8
	movb	(%r8), %r11b
	movl	$12920, 4164(%rsp)      # imm = 0x3278
	movzbl	%r11b, %ebx
	cmpl	%ebx, %eax
	movl	%edi, %ebp
	movl	%esi, %r14d
	movl	%edx, %r15d
	movl	%eax, %r12d
	movl	%eax, 2064(%rsp)        # 4-byte Spill
	movq	%rcx, 2056(%rsp)        # 8-byte Spill
	movl	%edx, 2052(%rsp)        # 4-byte Spill
	movl	%esi, 2048(%rsp)        # 4-byte Spill
	movl	%edi, 2044(%rsp)        # 4-byte Spill
	movq	%r8, 2032(%rsp)         # 8-byte Spill
	movl	%ebx, 2028(%rsp)        # 4-byte Spill
	movl	%ebp, 2024(%rsp)        # 4-byte Spill
	movl	%r14d, 2020(%rsp)       # 4-byte Spill
	movl	%r15d, 2016(%rsp)       # 4-byte Spill
	movl	%r12d, 2012(%rsp)       # 4-byte Spill
	jge	.LBB67_144
# %bb.138:                              # %while.body1938.preheader
                                        #   in Loop: Header=BB67_137 Depth=2
	movl	2044(%rsp), %eax        # 4-byte Reload
	movl	2048(%rsp), %ecx        # 4-byte Reload
	movl	2052(%rsp), %edx        # 4-byte Reload
	movl	2064(%rsp), %esi        # 4-byte Reload
	movl	%eax, 2008(%rsp)        # 4-byte Spill
	movl	%ecx, 2004(%rsp)        # 4-byte Spill
	movl	%edx, 2000(%rsp)        # 4-byte Spill
	movl	%esi, 1996(%rsp)        # 4-byte Spill
	jmp	.LBB67_139
.LBB67_139:                             # %while.body1938
                                        #   Parent Loop BB67_132 Depth=1
                                        #     Parent Loop BB67_137 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_141 Depth 4
	movl	1996(%rsp), %eax        # 4-byte Reload
	movl	2000(%rsp), %ecx        # 4-byte Reload
	movl	2004(%rsp), %edx        # 4-byte Reload
	movl	2008(%rsp), %esi        # 4-byte Reload
	cmpl	$7, %edx
	movl	%ecx, %edi
	movl	%esi, %r8d
	movl	%eax, 1992(%rsp)        # 4-byte Spill
	movl	%ecx, 1988(%rsp)        # 4-byte Spill
	movl	%r8d, 1984(%rsp)        # 4-byte Spill
	movl	%esi, 1980(%rsp)        # 4-byte Spill
	movl	%edi, 1976(%rsp)        # 4-byte Spill
	movl	%edx, 1972(%rsp)        # 4-byte Spill
	jle	.LBB67_142
# %bb.140:                              # %while.body.i5296.preheader
                                        #   in Loop: Header=BB67_139 Depth=3
	movl	1988(%rsp), %eax        # 4-byte Reload
	movl	1980(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 1968(%rsp)        # 4-byte Spill
	movl	%ecx, 1964(%rsp)        # 4-byte Spill
	jmp	.LBB67_141
.LBB67_141:                             # %while.body.i5296
                                        #   Parent Loop BB67_132 Depth=1
                                        #     Parent Loop BB67_137 Depth=2
                                        #       Parent Loop BB67_139 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	1964(%rsp), %eax        # 4-byte Reload
	movl	1968(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$12923, 4164(%rsp)      # imm = 0x327B
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$12924, 4164(%rsp)      # imm = 0x327C
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$12925, 4164(%rsp)      # imm = 0x327D
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$12926, 4164(%rsp)      # imm = 0x327E
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$12927, 4164(%rsp)      # imm = 0x327F
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$12928, 4164(%rsp)      # imm = 0x3280
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$12930, 4164(%rsp)      # imm = 0x3282
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$12937, 4164(%rsp)      # imm = 0x3289
	cmpl	$15, %r10d
	movl	%eax, %r10d
	movl	%ecx, %ebx
	movl	%ebx, 1964(%rsp)        # 4-byte Spill
	movl	%eax, 1976(%rsp)        # 4-byte Spill
	movl	%ecx, 1984(%rsp)        # 4-byte Spill
	movl	%r10d, 1968(%rsp)       # 4-byte Spill
	movl	%r11d, 1972(%rsp)       # 4-byte Spill
	jg	.LBB67_141
.LBB67_142:                             # %bsW.exit5302
                                        #   in Loop: Header=BB67_139 Depth=3
	movl	1972(%rsp), %eax        # 4-byte Reload
	movl	1984(%rsp), %ecx        # 4-byte Reload
	movl	1976(%rsp), %edx        # 4-byte Reload
	movl	$2, %esi
	movl	$30, %edi
	subl	%eax, %edi
	movl	%ecx, 1960(%rsp)        # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %esi
	movl	1960(%rsp), %edi        # 4-byte Reload
	orl	%edi, %esi
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%esi, (%r8)
	movl	$12938, 4164(%rsp)      # imm = 0x328A
	addl	$2, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$12939, 4164(%rsp)      # imm = 0x328B
	movl	1992(%rsp), %edi        # 4-byte Reload
	addl	$1, %edi
	movq	2032(%rsp), %r10        # 8-byte Reload
	movb	(%r10), %cl
	movl	$12972, 4164(%rsp)      # imm = 0x32AC
	movzbl	%cl, %r11d
	cmpl	%r11d, %edi
	movl	%esi, %r11d
	movl	%eax, %ebx
	movl	%edx, %ebp
	movl	%edi, %r14d
	movl	%edx, 1956(%rsp)        # 4-byte Spill
	movl	%esi, 1952(%rsp)        # 4-byte Spill
	movl	%eax, 1948(%rsp)        # 4-byte Spill
	movl	%edi, 1944(%rsp)        # 4-byte Spill
	movb	%cl, 1943(%rsp)         # 1-byte Spill
	movl	%r11d, 2008(%rsp)       # 4-byte Spill
	movl	%ebx, 2004(%rsp)        # 4-byte Spill
	movl	%ebp, 2000(%rsp)        # 4-byte Spill
	movl	%r14d, 1996(%rsp)       # 4-byte Spill
	jl	.LBB67_139
# %bb.143:                              # %while.end1940.loopexit
                                        #   in Loop: Header=BB67_137 Depth=2
	movb	1943(%rsp), %al         # 1-byte Reload
	movzbl	%al, %ecx
	movl	1952(%rsp), %edx        # 4-byte Reload
	movl	1948(%rsp), %esi        # 4-byte Reload
	movl	1956(%rsp), %edi        # 4-byte Reload
	movl	1944(%rsp), %r8d        # 4-byte Reload
	movl	%ecx, 2028(%rsp)        # 4-byte Spill
	movl	%edx, 2024(%rsp)        # 4-byte Spill
	movl	%esi, 2020(%rsp)        # 4-byte Spill
	movl	%edi, 2016(%rsp)        # 4-byte Spill
	movl	%r8d, 2012(%rsp)        # 4-byte Spill
.LBB67_144:                             # %while.end1940
                                        #   in Loop: Header=BB67_137 Depth=2
	movl	2012(%rsp), %eax        # 4-byte Reload
	movl	2016(%rsp), %ecx        # 4-byte Reload
	movl	2020(%rsp), %edx        # 4-byte Reload
	movl	2024(%rsp), %esi        # 4-byte Reload
	movl	2028(%rsp), %edi        # 4-byte Reload
	cmpl	$7, %edx
	setg	%r8b
	cmpl	%edi, %eax
	movl	%esi, %edi
	movl	%ecx, %r9d
	movl	%eax, %r10d
	movl	%edx, %r11d
	movb	%r8b, %bl
	movl	%eax, 1936(%rsp)        # 4-byte Spill
	movl	%ecx, 1932(%rsp)        # 4-byte Spill
	movl	%edx, 1928(%rsp)        # 4-byte Spill
	movl	%esi, 1924(%rsp)        # 4-byte Spill
	movb	%r8b, 1923(%rsp)        # 1-byte Spill
	movl	%edi, 1916(%rsp)        # 4-byte Spill
	movl	%r9d, 1912(%rsp)        # 4-byte Spill
	movl	%r10d, 1908(%rsp)       # 4-byte Spill
	movl	%r11d, 1904(%rsp)       # 4-byte Spill
	movb	%bl, 1903(%rsp)         # 1-byte Spill
	jle	.LBB67_150
# %bb.145:                              # %while.body1950.preheader
                                        #   in Loop: Header=BB67_137 Depth=2
	movl	1924(%rsp), %eax        # 4-byte Reload
	movl	1932(%rsp), %ecx        # 4-byte Reload
	movb	1923(%rsp), %dl         # 1-byte Reload
	movl	1928(%rsp), %esi        # 4-byte Reload
	movl	1936(%rsp), %edi        # 4-byte Reload
	movl	%eax, 1896(%rsp)        # 4-byte Spill
	movl	%ecx, 1892(%rsp)        # 4-byte Spill
	movb	%dl, 1891(%rsp)         # 1-byte Spill
	movl	%esi, 1884(%rsp)        # 4-byte Spill
	movl	%edi, 1880(%rsp)        # 4-byte Spill
	jmp	.LBB67_146
.LBB67_146:                             # %while.body1950
                                        #   Parent Loop BB67_132 Depth=1
                                        #     Parent Loop BB67_137 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_148 Depth 4
	movl	1880(%rsp), %eax        # 4-byte Reload
	movl	1884(%rsp), %ecx        # 4-byte Reload
	movb	1891(%rsp), %dl         # 1-byte Reload
	movl	1892(%rsp), %esi        # 4-byte Reload
	movl	1896(%rsp), %edi        # 4-byte Reload
	testb	$1, %dl
	movl	%esi, %r8d
	movl	%edi, %r9d
	movl	%eax, 1876(%rsp)        # 4-byte Spill
	movl	%r9d, 1872(%rsp)        # 4-byte Spill
	movl	%edi, 1868(%rsp)        # 4-byte Spill
	movl	%esi, 1864(%rsp)        # 4-byte Spill
	movl	%r8d, 1860(%rsp)        # 4-byte Spill
	movl	%ecx, 1856(%rsp)        # 4-byte Spill
	jne	.LBB67_147
	jmp	.LBB67_149
.LBB67_147:                             # %while.body.i5271.preheader
                                        #   in Loop: Header=BB67_146 Depth=3
	movl	1864(%rsp), %eax        # 4-byte Reload
	movl	1868(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 1852(%rsp)        # 4-byte Spill
	movl	%ecx, 1848(%rsp)        # 4-byte Spill
	jmp	.LBB67_148
.LBB67_148:                             # %while.body.i5271
                                        #   Parent Loop BB67_132 Depth=1
                                        #     Parent Loop BB67_137 Depth=2
                                        #       Parent Loop BB67_146 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	1848(%rsp), %eax        # 4-byte Reload
	movl	1852(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$12975, 4164(%rsp)      # imm = 0x32AF
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$12976, 4164(%rsp)      # imm = 0x32B0
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$12977, 4164(%rsp)      # imm = 0x32B1
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$12978, 4164(%rsp)      # imm = 0x32B2
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$12979, 4164(%rsp)      # imm = 0x32B3
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$12980, 4164(%rsp)      # imm = 0x32B4
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$12982, 4164(%rsp)      # imm = 0x32B6
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$12989, 4164(%rsp)      # imm = 0x32BD
	cmpl	$15, %r10d
	movl	%eax, %r10d
	movl	%ecx, %ebx
	movl	%ebx, 1848(%rsp)        # 4-byte Spill
	movl	%eax, 1860(%rsp)        # 4-byte Spill
	movl	%ecx, 1872(%rsp)        # 4-byte Spill
	movl	%r10d, 1852(%rsp)       # 4-byte Spill
	movl	%r11d, 1856(%rsp)       # 4-byte Spill
	jg	.LBB67_148
.LBB67_149:                             # %bsW.exit5277
                                        #   in Loop: Header=BB67_146 Depth=3
	movl	1856(%rsp), %eax        # 4-byte Reload
	movl	1872(%rsp), %ecx        # 4-byte Reload
	movl	1860(%rsp), %edx        # 4-byte Reload
	movl	$3, %esi
	movl	$30, %edi
	subl	%eax, %edi
	movl	%ecx, 1844(%rsp)        # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %esi
	movl	1844(%rsp), %edi        # 4-byte Reload
	orl	%edi, %esi
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%esi, (%r8)
	movl	$12990, 4164(%rsp)      # imm = 0x32BE
	movl	%eax, %edi
	addl	$2, %edi
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%edi, (%r9)
	movl	$12991, 4164(%rsp)      # imm = 0x32BF
	movl	1876(%rsp), %r10d       # 4-byte Reload
	addl	$-1, %r10d
	movq	2032(%rsp), %r11        # 8-byte Reload
	movb	(%r11), %cl
	movl	$13007, 4164(%rsp)      # imm = 0x32CF
	movzbl	%cl, %ebx
	cmpl	$5, %eax
	setg	%cl
	cmpl	%ebx, %r10d
	movl	%esi, %eax
	movl	%edx, %ebx
	movb	%cl, %bpl
	movl	%edi, %r14d
	movl	%r10d, %r15d
	movl	%edi, 1904(%rsp)        # 4-byte Spill
	movl	%esi, 1916(%rsp)        # 4-byte Spill
	movl	%r15d, 1880(%rsp)       # 4-byte Spill
	movl	%r10d, 1908(%rsp)       # 4-byte Spill
	movl	%edx, 1912(%rsp)        # 4-byte Spill
	movl	%eax, 1896(%rsp)        # 4-byte Spill
	movl	%ebx, 1892(%rsp)        # 4-byte Spill
	movb	%bpl, 1891(%rsp)        # 1-byte Spill
	movl	%r14d, 1884(%rsp)       # 4-byte Spill
	movb	%cl, 1903(%rsp)         # 1-byte Spill
	jg	.LBB67_146
.LBB67_150:                             # %while.end1952
                                        #   in Loop: Header=BB67_137 Depth=2
	movb	1903(%rsp), %al         # 1-byte Reload
	movl	1904(%rsp), %ecx        # 4-byte Reload
	movl	1908(%rsp), %edx        # 4-byte Reload
	movl	1912(%rsp), %esi        # 4-byte Reload
	movl	1916(%rsp), %edi        # 4-byte Reload
	testb	$1, %al
	movl	%esi, %r8d
	movl	%edi, %r9d
	movl	%edi, 1840(%rsp)        # 4-byte Spill
	movl	%r9d, 1836(%rsp)        # 4-byte Spill
	movl	%edx, 1832(%rsp)        # 4-byte Spill
	movl	%esi, 1828(%rsp)        # 4-byte Spill
	movl	%r8d, 1824(%rsp)        # 4-byte Spill
	movl	%ecx, 1820(%rsp)        # 4-byte Spill
	jne	.LBB67_151
	jmp	.LBB67_153
.LBB67_151:                             # %while.body.i5248.preheader
                                        #   in Loop: Header=BB67_137 Depth=2
	movl	1828(%rsp), %eax        # 4-byte Reload
	movl	1840(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 1816(%rsp)        # 4-byte Spill
	movl	%ecx, 1812(%rsp)        # 4-byte Spill
	jmp	.LBB67_152
.LBB67_152:                             # %while.body.i5248
                                        #   Parent Loop BB67_132 Depth=1
                                        #     Parent Loop BB67_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	1812(%rsp), %eax        # 4-byte Reload
	movl	1816(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13010, 4164(%rsp)      # imm = 0x32D2
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13011, 4164(%rsp)      # imm = 0x32D3
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13012, 4164(%rsp)      # imm = 0x32D4
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13013, 4164(%rsp)      # imm = 0x32D5
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13014, 4164(%rsp)      # imm = 0x32D6
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13015, 4164(%rsp)      # imm = 0x32D7
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13017, 4164(%rsp)      # imm = 0x32D9
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13021, 4164(%rsp)      # imm = 0x32DD
	cmpl	$15, %r10d
	movl	%eax, %r10d
	movl	%ecx, %ebx
	movl	%ebx, 1812(%rsp)        # 4-byte Spill
	movl	%eax, 1824(%rsp)        # 4-byte Spill
	movl	%ecx, 1836(%rsp)        # 4-byte Spill
	movl	%r10d, 1816(%rsp)       # 4-byte Spill
	movl	%r11d, 1820(%rsp)       # 4-byte Spill
	jg	.LBB67_152
.LBB67_153:                             # %bsW.exit5252
                                        #   in Loop: Header=BB67_137 Depth=2
	movl	1820(%rsp), %eax        # 4-byte Reload
	movl	1836(%rsp), %ecx        # 4-byte Reload
	movl	1824(%rsp), %edx        # 4-byte Reload
	movq	2744(%rsp), %rsi        # 8-byte Reload
	movl	%ecx, (%rsi)
	movl	$13022, 4164(%rsp)      # imm = 0x32DE
	addl	$1, %eax
	movq	2760(%rsp), %rdi        # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$13027, 4164(%rsp)      # imm = 0x32E3
	movq	2056(%rsp), %r8         # 8-byte Reload
	addq	$1, %r8
	movq	3960(%rsp), %r9         # 8-byte Reload
	cmpq	%r9, %r8
	movl	%ecx, %r10d
	movl	%eax, %r11d
	movl	%edx, %ebx
	movl	1832(%rsp), %ebp        # 4-byte Reload
	movl	%edx, 2100(%rsp)        # 4-byte Spill
	movl	%ebp, 2068(%rsp)        # 4-byte Spill
	movl	%ecx, 2096(%rsp)        # 4-byte Spill
	movl	%ebx, 2088(%rsp)        # 4-byte Spill
	movl	%r10d, 2084(%rsp)       # 4-byte Spill
	movl	%r11d, 2080(%rsp)       # 4-byte Spill
	movq	%r8, 2072(%rsp)         # 8-byte Spill
	movl	%eax, 2092(%rsp)        # 4-byte Spill
	jl	.LBB67_137
.LBB67_154:                             # %for.end1955
                                        #   in Loop: Header=BB67_132 Depth=1
	movl	2092(%rsp), %eax        # 4-byte Reload
	movl	2096(%rsp), %ecx        # 4-byte Reload
	movl	2100(%rsp), %edx        # 4-byte Reload
	movq	2152(%rsp), %rsi        # 8-byte Reload
	addq	$1, %rsi
	movq	3568(%rsp), %rdi        # 8-byte Reload
	cmpq	%rdi, %rsi
	movl	%edx, %r8d
	movl	%ecx, 2180(%rsp)        # 4-byte Spill
	movl	%r8d, 2176(%rsp)        # 4-byte Spill
	movl	%edx, 1808(%rsp)        # 4-byte Spill
	movl	%eax, 2172(%rsp)        # 4-byte Spill
	movq	%rsi, 2160(%rsp)        # 8-byte Spill
	jb	.LBB67_132
# %bb.155:                              # %for.end1958
	movq	4056(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13030, 4164(%rsp)      # imm = 0x32E6
	cmpl	$2, %ecx
	movl	1808(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 1804(%rsp)        # 4-byte Spill
	jle	.LBB67_157
# %bb.156:                              # %if.then1962
	movabsq	$.L.str.9.74, %rsi
	movq	stderr, %rdi
	movl	$13034, 4164(%rsp)      # imm = 0x32EA
	movl	1808(%rsp), %eax        # 4-byte Reload
	movl	2184(%rsp), %ecx        # 4-byte Reload
	subl	%ecx, %eax
	movl	%eax, %edx
	movb	$0, %al
	callq	fprintf
	movq	2768(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %ecx
	movl	$13037, 4164(%rsp)      # imm = 0x32ED
	movl	%eax, 1800(%rsp)        # 4-byte Spill
	movl	%ecx, 1804(%rsp)        # 4-byte Spill
.LBB67_157:                             # %if.end1966
	movl	1804(%rsp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movq	4000(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %esi
	movl	$13052, 4164(%rsp)      # imm = 0x32FC
	cmpl	$0, %esi
	movl	%eax, 1796(%rsp)        # 4-byte Spill
	movl	%esi, 1792(%rsp)        # 4-byte Spill
	movl	%ecx, 1788(%rsp)        # 4-byte Spill
	jle	.LBB67_321
# %bb.158:                              # %if.end1974.preheader
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	1792(%rsp), %edx        # 4-byte Reload
	movl	%edx, 1784(%rsp)        # 4-byte Spill
	movq	%rcx, 1776(%rsp)        # 8-byte Spill
	movl	%eax, 1772(%rsp)        # 4-byte Spill
	jmp	.LBB67_159
.LBB67_159:                             # %if.end1974
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_315 Depth 2
                                        #       Child Loop BB67_317 Depth 3
                                        #     Child Loop BB67_164 Depth 2
                                        #     Child Loop BB67_167 Depth 2
                                        #     Child Loop BB67_170 Depth 2
                                        #     Child Loop BB67_173 Depth 2
                                        #     Child Loop BB67_176 Depth 2
                                        #     Child Loop BB67_179 Depth 2
                                        #     Child Loop BB67_182 Depth 2
                                        #     Child Loop BB67_185 Depth 2
                                        #     Child Loop BB67_188 Depth 2
                                        #     Child Loop BB67_191 Depth 2
                                        #     Child Loop BB67_194 Depth 2
                                        #     Child Loop BB67_197 Depth 2
                                        #     Child Loop BB67_200 Depth 2
                                        #     Child Loop BB67_203 Depth 2
                                        #     Child Loop BB67_206 Depth 2
                                        #     Child Loop BB67_209 Depth 2
                                        #     Child Loop BB67_212 Depth 2
                                        #     Child Loop BB67_215 Depth 2
                                        #     Child Loop BB67_218 Depth 2
                                        #     Child Loop BB67_221 Depth 2
                                        #     Child Loop BB67_224 Depth 2
                                        #     Child Loop BB67_227 Depth 2
                                        #     Child Loop BB67_230 Depth 2
                                        #     Child Loop BB67_233 Depth 2
                                        #     Child Loop BB67_236 Depth 2
                                        #     Child Loop BB67_239 Depth 2
                                        #     Child Loop BB67_242 Depth 2
                                        #     Child Loop BB67_245 Depth 2
                                        #     Child Loop BB67_248 Depth 2
                                        #     Child Loop BB67_251 Depth 2
                                        #     Child Loop BB67_254 Depth 2
                                        #     Child Loop BB67_257 Depth 2
                                        #     Child Loop BB67_260 Depth 2
                                        #     Child Loop BB67_263 Depth 2
                                        #     Child Loop BB67_266 Depth 2
                                        #     Child Loop BB67_269 Depth 2
                                        #     Child Loop BB67_272 Depth 2
                                        #     Child Loop BB67_275 Depth 2
                                        #     Child Loop BB67_278 Depth 2
                                        #     Child Loop BB67_281 Depth 2
                                        #     Child Loop BB67_284 Depth 2
                                        #     Child Loop BB67_287 Depth 2
                                        #     Child Loop BB67_290 Depth 2
                                        #     Child Loop BB67_293 Depth 2
                                        #     Child Loop BB67_296 Depth 2
                                        #     Child Loop BB67_299 Depth 2
                                        #     Child Loop BB67_302 Depth 2
                                        #     Child Loop BB67_305 Depth 2
                                        #     Child Loop BB67_308 Depth 2
                                        #     Child Loop BB67_311 Depth 2
	movl	1772(%rsp), %eax        # 4-byte Reload
	movl	1784(%rsp), %ecx        # 4-byte Reload
	movq	1776(%rsp), %rdx        # 8-byte Reload
	movl	%eax, %esi
	addl	$49, %esi
	movl	%ecx, %edi
	addl	$-1, %edi
	cmpl	%ecx, %esi
	cmovll	%esi, %edi
	movq	4088(%rsp), %r8         # 8-byte Reload
	addq	$1704, %r8              # imm = 0x6A8
	addq	%rdx, %r8
	movq	4088(%rsp), %r9         # 8-byte Reload
	movb	1704(%r9,%rdx), %r10b
	movl	$13063, 4164(%rsp)      # imm = 0x3307
	movzbl	%r10b, %ecx
	movl	3984(%rsp), %r11d       # 4-byte Reload
	cmpl	%ecx, %r11d
	movl	%eax, 1768(%rsp)        # 4-byte Spill
	movl	%esi, 1764(%rsp)        # 4-byte Spill
	movq	%rdx, 1752(%rsp)        # 8-byte Spill
	movl	%edi, 1748(%rsp)        # 4-byte Spill
	movq	%r8, 1736(%rsp)         # 8-byte Spill
	ja	.LBB67_161
# %bb.160:                              # %if.then1990
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	$3006, %edi             # imm = 0xBBE
	callq	BZ2_bz__AssertH__fail
.LBB67_161:                             # %if.end1991
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1748(%rsp), %eax        # 4-byte Reload
	movl	1768(%rsp), %ecx        # 4-byte Reload
	subl	%ecx, %eax
	cmpl	$49, %eax
	sete	%dl
	movb	3567(%rsp), %sil        # 1-byte Reload
	andb	%dl, %sil
	testb	$1, %sil
	jne	.LBB67_162
	jmp	.LBB67_313
.LBB67_162:                             # %if.then1999
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	1736(%rsp), %rax        # 8-byte Reload
	movb	(%rax), %cl
	movl	$13067, 4164(%rsp)      # imm = 0x330B
	movzbl	%cl, %edx
	movl	%edx, %esi
	movl	1768(%rsp), %edx        # 4-byte Reload
	movslq	%edx, %rdi
	movq	4064(%rsp), %r8         # 8-byte Reload
	movw	(%r8,%rdi,2), %r9w
	movl	$13070, 4164(%rsp)      # imm = 0x330E
	movzwl	%r9w, %r10d
	movl	%r10d, %edi
	movq	4088(%rsp), %r11        # 8-byte Reload
	addq	$37708, %r11            # imm = 0x934C
	imulq	$258, %rsi, %rbx        # imm = 0x102
	addq	%rbx, %r11
	addq	%rdi, %r11
	movb	(%r11), %cl
	movl	$13073, 4164(%rsp)      # imm = 0x3311
	movzbl	%cl, %r10d
	movq	4088(%rsp), %r11        # 8-byte Reload
	addq	$39256, %r11            # imm = 0x9958
	imulq	$1032, %rsi, %rbx       # imm = 0x408
	addq	%rbx, %r11
	shlq	$2, %rdi
	addq	%rdi, %r11
	movl	(%r11), %ebp
	movl	$13074, 4164(%rsp)      # imm = 0x3312
	movq	2760(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %r14d
	movl	$13076, 4164(%rsp)      # imm = 0x3314
	movq	2744(%rsp), %r11        # 8-byte Reload
	movl	(%r11), %r15d
	movl	$13078, 4164(%rsp)      # imm = 0x3316
	cmpl	$7, %r14d
	movl	%r15d, %r12d
	movq	%rsi, 1728(%rsp)        # 8-byte Spill
	movl	%r10d, 1724(%rsp)       # 4-byte Spill
	movl	%ebp, 1720(%rsp)        # 4-byte Spill
	movl	%r12d, 1716(%rsp)       # 4-byte Spill
	movl	%r15d, 1712(%rsp)       # 4-byte Spill
	movl	%r14d, 1708(%rsp)       # 4-byte Spill
	jle	.LBB67_165
# %bb.163:                              # %while.body.lr.ph.i5213
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13086, 4164(%rsp)      # imm = 0x331E
	movl	1712(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1704(%rsp)        # 4-byte Spill
	movl	%edx, 1700(%rsp)        # 4-byte Spill
.LBB67_164:                             # %while.body.i5222
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1700(%rsp), %eax        # 4-byte Reload
	movl	1704(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13089, 4164(%rsp)      # imm = 0x3321
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13090, 4164(%rsp)      # imm = 0x3322
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13091, 4164(%rsp)      # imm = 0x3323
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13092, 4164(%rsp)      # imm = 0x3324
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13093, 4164(%rsp)      # imm = 0x3325
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13094, 4164(%rsp)      # imm = 0x3326
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13096, 4164(%rsp)      # imm = 0x3328
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13105, 4164(%rsp)      # imm = 0x3331
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1716(%rsp)        # 4-byte Spill
	movl	%r10d, 1700(%rsp)       # 4-byte Spill
	movl	%eax, 1704(%rsp)        # 4-byte Spill
	movl	%r11d, 1708(%rsp)       # 4-byte Spill
	jg	.LBB67_164
.LBB67_165:                             # %bsW.exit5229
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1708(%rsp), %eax        # 4-byte Reload
	movl	1716(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1724(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1696(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1720(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1696(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13107, 4164(%rsp)      # imm = 0x3333
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13111, 4164(%rsp)      # imm = 0x3337
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$1, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13114, 4164(%rsp)      # imm = 0x333A
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13117, 4164(%rsp)      # imm = 0x333D
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13120, 4164(%rsp)      # imm = 0x3340
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1692(%rsp)        # 4-byte Spill
	movl	%r13d, 1688(%rsp)       # 4-byte Spill
	movl	%edi, 1684(%rsp)        # 4-byte Spill
	movl	%ebp, 1680(%rsp)        # 4-byte Spill
	movl	%eax, 1676(%rsp)        # 4-byte Spill
	jle	.LBB67_168
# %bb.166:                              # %while.body.lr.ph.i5187
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13128, 4164(%rsp)      # imm = 0x3348
	movl	1692(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1672(%rsp)        # 4-byte Spill
	movl	%edx, 1668(%rsp)        # 4-byte Spill
.LBB67_167:                             # %while.body.i5196
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1668(%rsp), %eax        # 4-byte Reload
	movl	1672(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13131, 4164(%rsp)      # imm = 0x334B
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13132, 4164(%rsp)      # imm = 0x334C
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13133, 4164(%rsp)      # imm = 0x334D
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13134, 4164(%rsp)      # imm = 0x334E
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13135, 4164(%rsp)      # imm = 0x334F
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13136, 4164(%rsp)      # imm = 0x3350
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13138, 4164(%rsp)      # imm = 0x3352
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13147, 4164(%rsp)      # imm = 0x335B
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1688(%rsp)        # 4-byte Spill
	movl	%r10d, 1668(%rsp)       # 4-byte Spill
	movl	%eax, 1672(%rsp)        # 4-byte Spill
	movl	%r11d, 1676(%rsp)       # 4-byte Spill
	jg	.LBB67_167
.LBB67_168:                             # %bsW.exit5203
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1676(%rsp), %eax        # 4-byte Reload
	movl	1688(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1684(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1664(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1680(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1664(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13149, 4164(%rsp)      # imm = 0x335D
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13153, 4164(%rsp)      # imm = 0x3361
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$2, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13156, 4164(%rsp)      # imm = 0x3364
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13159, 4164(%rsp)      # imm = 0x3367
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13162, 4164(%rsp)      # imm = 0x336A
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1660(%rsp)        # 4-byte Spill
	movl	%r13d, 1656(%rsp)       # 4-byte Spill
	movl	%edi, 1652(%rsp)        # 4-byte Spill
	movl	%ebp, 1648(%rsp)        # 4-byte Spill
	movl	%eax, 1644(%rsp)        # 4-byte Spill
	jle	.LBB67_171
# %bb.169:                              # %while.body.lr.ph.i5161
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13170, 4164(%rsp)      # imm = 0x3372
	movl	1660(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1640(%rsp)        # 4-byte Spill
	movl	%edx, 1636(%rsp)        # 4-byte Spill
.LBB67_170:                             # %while.body.i5170
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1636(%rsp), %eax        # 4-byte Reload
	movl	1640(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13173, 4164(%rsp)      # imm = 0x3375
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13174, 4164(%rsp)      # imm = 0x3376
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13175, 4164(%rsp)      # imm = 0x3377
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13176, 4164(%rsp)      # imm = 0x3378
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13177, 4164(%rsp)      # imm = 0x3379
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13178, 4164(%rsp)      # imm = 0x337A
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13180, 4164(%rsp)      # imm = 0x337C
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13189, 4164(%rsp)      # imm = 0x3385
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1656(%rsp)        # 4-byte Spill
	movl	%r10d, 1636(%rsp)       # 4-byte Spill
	movl	%eax, 1640(%rsp)        # 4-byte Spill
	movl	%r11d, 1644(%rsp)       # 4-byte Spill
	jg	.LBB67_170
.LBB67_171:                             # %bsW.exit5177
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1644(%rsp), %eax        # 4-byte Reload
	movl	1656(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1652(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1632(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1648(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1632(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13191, 4164(%rsp)      # imm = 0x3387
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13195, 4164(%rsp)      # imm = 0x338B
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$3, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13198, 4164(%rsp)      # imm = 0x338E
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13201, 4164(%rsp)      # imm = 0x3391
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13204, 4164(%rsp)      # imm = 0x3394
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1628(%rsp)        # 4-byte Spill
	movl	%r13d, 1624(%rsp)       # 4-byte Spill
	movl	%edi, 1620(%rsp)        # 4-byte Spill
	movl	%ebp, 1616(%rsp)        # 4-byte Spill
	movl	%eax, 1612(%rsp)        # 4-byte Spill
	jle	.LBB67_174
# %bb.172:                              # %while.body.lr.ph.i5135
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13212, 4164(%rsp)      # imm = 0x339C
	movl	1628(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1608(%rsp)        # 4-byte Spill
	movl	%edx, 1604(%rsp)        # 4-byte Spill
.LBB67_173:                             # %while.body.i5144
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1604(%rsp), %eax        # 4-byte Reload
	movl	1608(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13215, 4164(%rsp)      # imm = 0x339F
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13216, 4164(%rsp)      # imm = 0x33A0
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13217, 4164(%rsp)      # imm = 0x33A1
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13218, 4164(%rsp)      # imm = 0x33A2
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13219, 4164(%rsp)      # imm = 0x33A3
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13220, 4164(%rsp)      # imm = 0x33A4
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13222, 4164(%rsp)      # imm = 0x33A6
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13231, 4164(%rsp)      # imm = 0x33AF
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1624(%rsp)        # 4-byte Spill
	movl	%r10d, 1604(%rsp)       # 4-byte Spill
	movl	%eax, 1608(%rsp)        # 4-byte Spill
	movl	%r11d, 1612(%rsp)       # 4-byte Spill
	jg	.LBB67_173
.LBB67_174:                             # %bsW.exit5151
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1612(%rsp), %eax        # 4-byte Reload
	movl	1624(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1620(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1600(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1616(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1600(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13233, 4164(%rsp)      # imm = 0x33B1
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13237, 4164(%rsp)      # imm = 0x33B5
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$4, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13240, 4164(%rsp)      # imm = 0x33B8
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13243, 4164(%rsp)      # imm = 0x33BB
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13246, 4164(%rsp)      # imm = 0x33BE
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1596(%rsp)        # 4-byte Spill
	movl	%r13d, 1592(%rsp)       # 4-byte Spill
	movl	%edi, 1588(%rsp)        # 4-byte Spill
	movl	%ebp, 1584(%rsp)        # 4-byte Spill
	movl	%eax, 1580(%rsp)        # 4-byte Spill
	jle	.LBB67_177
# %bb.175:                              # %while.body.lr.ph.i5109
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13254, 4164(%rsp)      # imm = 0x33C6
	movl	1596(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1576(%rsp)        # 4-byte Spill
	movl	%edx, 1572(%rsp)        # 4-byte Spill
.LBB67_176:                             # %while.body.i5118
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1572(%rsp), %eax        # 4-byte Reload
	movl	1576(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13257, 4164(%rsp)      # imm = 0x33C9
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13258, 4164(%rsp)      # imm = 0x33CA
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13259, 4164(%rsp)      # imm = 0x33CB
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13260, 4164(%rsp)      # imm = 0x33CC
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13261, 4164(%rsp)      # imm = 0x33CD
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13262, 4164(%rsp)      # imm = 0x33CE
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13264, 4164(%rsp)      # imm = 0x33D0
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13273, 4164(%rsp)      # imm = 0x33D9
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1592(%rsp)        # 4-byte Spill
	movl	%r10d, 1572(%rsp)       # 4-byte Spill
	movl	%eax, 1576(%rsp)        # 4-byte Spill
	movl	%r11d, 1580(%rsp)       # 4-byte Spill
	jg	.LBB67_176
.LBB67_177:                             # %bsW.exit5125
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1580(%rsp), %eax        # 4-byte Reload
	movl	1592(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1588(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1568(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1584(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1568(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13275, 4164(%rsp)      # imm = 0x33DB
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13279, 4164(%rsp)      # imm = 0x33DF
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$5, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13282, 4164(%rsp)      # imm = 0x33E2
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13285, 4164(%rsp)      # imm = 0x33E5
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13288, 4164(%rsp)      # imm = 0x33E8
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1564(%rsp)        # 4-byte Spill
	movl	%r13d, 1560(%rsp)       # 4-byte Spill
	movl	%edi, 1556(%rsp)        # 4-byte Spill
	movl	%ebp, 1552(%rsp)        # 4-byte Spill
	movl	%eax, 1548(%rsp)        # 4-byte Spill
	jle	.LBB67_180
# %bb.178:                              # %while.body.lr.ph.i5083
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13296, 4164(%rsp)      # imm = 0x33F0
	movl	1564(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1544(%rsp)        # 4-byte Spill
	movl	%edx, 1540(%rsp)        # 4-byte Spill
.LBB67_179:                             # %while.body.i5092
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1540(%rsp), %eax        # 4-byte Reload
	movl	1544(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13299, 4164(%rsp)      # imm = 0x33F3
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13300, 4164(%rsp)      # imm = 0x33F4
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13301, 4164(%rsp)      # imm = 0x33F5
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13302, 4164(%rsp)      # imm = 0x33F6
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13303, 4164(%rsp)      # imm = 0x33F7
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13304, 4164(%rsp)      # imm = 0x33F8
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13306, 4164(%rsp)      # imm = 0x33FA
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13315, 4164(%rsp)      # imm = 0x3403
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1560(%rsp)        # 4-byte Spill
	movl	%r10d, 1540(%rsp)       # 4-byte Spill
	movl	%eax, 1544(%rsp)        # 4-byte Spill
	movl	%r11d, 1548(%rsp)       # 4-byte Spill
	jg	.LBB67_179
.LBB67_180:                             # %bsW.exit5099
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1548(%rsp), %eax        # 4-byte Reload
	movl	1560(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1556(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1536(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1552(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1536(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13317, 4164(%rsp)      # imm = 0x3405
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13321, 4164(%rsp)      # imm = 0x3409
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$6, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13324, 4164(%rsp)      # imm = 0x340C
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13327, 4164(%rsp)      # imm = 0x340F
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13330, 4164(%rsp)      # imm = 0x3412
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1532(%rsp)        # 4-byte Spill
	movl	%r13d, 1528(%rsp)       # 4-byte Spill
	movl	%edi, 1524(%rsp)        # 4-byte Spill
	movl	%ebp, 1520(%rsp)        # 4-byte Spill
	movl	%eax, 1516(%rsp)        # 4-byte Spill
	jle	.LBB67_183
# %bb.181:                              # %while.body.lr.ph.i5057
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13338, 4164(%rsp)      # imm = 0x341A
	movl	1532(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1512(%rsp)        # 4-byte Spill
	movl	%edx, 1508(%rsp)        # 4-byte Spill
.LBB67_182:                             # %while.body.i5066
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1508(%rsp), %eax        # 4-byte Reload
	movl	1512(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13341, 4164(%rsp)      # imm = 0x341D
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13342, 4164(%rsp)      # imm = 0x341E
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13343, 4164(%rsp)      # imm = 0x341F
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13344, 4164(%rsp)      # imm = 0x3420
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13345, 4164(%rsp)      # imm = 0x3421
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13346, 4164(%rsp)      # imm = 0x3422
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13348, 4164(%rsp)      # imm = 0x3424
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13357, 4164(%rsp)      # imm = 0x342D
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1528(%rsp)        # 4-byte Spill
	movl	%r10d, 1508(%rsp)       # 4-byte Spill
	movl	%eax, 1512(%rsp)        # 4-byte Spill
	movl	%r11d, 1516(%rsp)       # 4-byte Spill
	jg	.LBB67_182
.LBB67_183:                             # %bsW.exit5073
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1516(%rsp), %eax        # 4-byte Reload
	movl	1528(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1524(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1504(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1520(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1504(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13359, 4164(%rsp)      # imm = 0x342F
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13363, 4164(%rsp)      # imm = 0x3433
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$7, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13366, 4164(%rsp)      # imm = 0x3436
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13369, 4164(%rsp)      # imm = 0x3439
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13372, 4164(%rsp)      # imm = 0x343C
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1500(%rsp)        # 4-byte Spill
	movl	%r13d, 1496(%rsp)       # 4-byte Spill
	movl	%edi, 1492(%rsp)        # 4-byte Spill
	movl	%ebp, 1488(%rsp)        # 4-byte Spill
	movl	%eax, 1484(%rsp)        # 4-byte Spill
	jle	.LBB67_186
# %bb.184:                              # %while.body.lr.ph.i5031
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13380, 4164(%rsp)      # imm = 0x3444
	movl	1500(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1480(%rsp)        # 4-byte Spill
	movl	%edx, 1476(%rsp)        # 4-byte Spill
.LBB67_185:                             # %while.body.i5040
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1476(%rsp), %eax        # 4-byte Reload
	movl	1480(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13383, 4164(%rsp)      # imm = 0x3447
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13384, 4164(%rsp)      # imm = 0x3448
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13385, 4164(%rsp)      # imm = 0x3449
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13386, 4164(%rsp)      # imm = 0x344A
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13387, 4164(%rsp)      # imm = 0x344B
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13388, 4164(%rsp)      # imm = 0x344C
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13390, 4164(%rsp)      # imm = 0x344E
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13399, 4164(%rsp)      # imm = 0x3457
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1496(%rsp)        # 4-byte Spill
	movl	%r10d, 1476(%rsp)       # 4-byte Spill
	movl	%eax, 1480(%rsp)        # 4-byte Spill
	movl	%r11d, 1484(%rsp)       # 4-byte Spill
	jg	.LBB67_185
.LBB67_186:                             # %bsW.exit5047
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1484(%rsp), %eax        # 4-byte Reload
	movl	1496(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1492(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1472(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1488(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1472(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13401, 4164(%rsp)      # imm = 0x3459
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13405, 4164(%rsp)      # imm = 0x345D
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$8, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13408, 4164(%rsp)      # imm = 0x3460
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13411, 4164(%rsp)      # imm = 0x3463
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13414, 4164(%rsp)      # imm = 0x3466
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1468(%rsp)        # 4-byte Spill
	movl	%r13d, 1464(%rsp)       # 4-byte Spill
	movl	%edi, 1460(%rsp)        # 4-byte Spill
	movl	%ebp, 1456(%rsp)        # 4-byte Spill
	movl	%eax, 1452(%rsp)        # 4-byte Spill
	jle	.LBB67_189
# %bb.187:                              # %while.body.lr.ph.i5005
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13422, 4164(%rsp)      # imm = 0x346E
	movl	1468(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1448(%rsp)        # 4-byte Spill
	movl	%edx, 1444(%rsp)        # 4-byte Spill
.LBB67_188:                             # %while.body.i5014
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1444(%rsp), %eax        # 4-byte Reload
	movl	1448(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13425, 4164(%rsp)      # imm = 0x3471
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13426, 4164(%rsp)      # imm = 0x3472
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13427, 4164(%rsp)      # imm = 0x3473
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13428, 4164(%rsp)      # imm = 0x3474
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13429, 4164(%rsp)      # imm = 0x3475
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13430, 4164(%rsp)      # imm = 0x3476
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13432, 4164(%rsp)      # imm = 0x3478
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13441, 4164(%rsp)      # imm = 0x3481
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1464(%rsp)        # 4-byte Spill
	movl	%r10d, 1444(%rsp)       # 4-byte Spill
	movl	%eax, 1448(%rsp)        # 4-byte Spill
	movl	%r11d, 1452(%rsp)       # 4-byte Spill
	jg	.LBB67_188
.LBB67_189:                             # %bsW.exit5021
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1452(%rsp), %eax        # 4-byte Reload
	movl	1464(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1460(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1440(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1456(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1440(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13443, 4164(%rsp)      # imm = 0x3483
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13447, 4164(%rsp)      # imm = 0x3487
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$9, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13450, 4164(%rsp)      # imm = 0x348A
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13453, 4164(%rsp)      # imm = 0x348D
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13456, 4164(%rsp)      # imm = 0x3490
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1436(%rsp)        # 4-byte Spill
	movl	%r13d, 1432(%rsp)       # 4-byte Spill
	movl	%edi, 1428(%rsp)        # 4-byte Spill
	movl	%ebp, 1424(%rsp)        # 4-byte Spill
	movl	%eax, 1420(%rsp)        # 4-byte Spill
	jle	.LBB67_192
# %bb.190:                              # %while.body.lr.ph.i4979
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13464, 4164(%rsp)      # imm = 0x3498
	movl	1436(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1416(%rsp)        # 4-byte Spill
	movl	%edx, 1412(%rsp)        # 4-byte Spill
.LBB67_191:                             # %while.body.i4988
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1412(%rsp), %eax        # 4-byte Reload
	movl	1416(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13467, 4164(%rsp)      # imm = 0x349B
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13468, 4164(%rsp)      # imm = 0x349C
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13469, 4164(%rsp)      # imm = 0x349D
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13470, 4164(%rsp)      # imm = 0x349E
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13471, 4164(%rsp)      # imm = 0x349F
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13472, 4164(%rsp)      # imm = 0x34A0
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13474, 4164(%rsp)      # imm = 0x34A2
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13483, 4164(%rsp)      # imm = 0x34AB
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1432(%rsp)        # 4-byte Spill
	movl	%r10d, 1412(%rsp)       # 4-byte Spill
	movl	%eax, 1416(%rsp)        # 4-byte Spill
	movl	%r11d, 1420(%rsp)       # 4-byte Spill
	jg	.LBB67_191
.LBB67_192:                             # %bsW.exit4995
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1420(%rsp), %eax        # 4-byte Reload
	movl	1432(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1428(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1408(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1424(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1408(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13485, 4164(%rsp)      # imm = 0x34AD
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13489, 4164(%rsp)      # imm = 0x34B1
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$10, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13492, 4164(%rsp)      # imm = 0x34B4
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13495, 4164(%rsp)      # imm = 0x34B7
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13498, 4164(%rsp)      # imm = 0x34BA
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1404(%rsp)        # 4-byte Spill
	movl	%r13d, 1400(%rsp)       # 4-byte Spill
	movl	%edi, 1396(%rsp)        # 4-byte Spill
	movl	%ebp, 1392(%rsp)        # 4-byte Spill
	movl	%eax, 1388(%rsp)        # 4-byte Spill
	jle	.LBB67_195
# %bb.193:                              # %while.body.lr.ph.i4953
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13506, 4164(%rsp)      # imm = 0x34C2
	movl	1404(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1384(%rsp)        # 4-byte Spill
	movl	%edx, 1380(%rsp)        # 4-byte Spill
.LBB67_194:                             # %while.body.i4962
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1380(%rsp), %eax        # 4-byte Reload
	movl	1384(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13509, 4164(%rsp)      # imm = 0x34C5
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13510, 4164(%rsp)      # imm = 0x34C6
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13511, 4164(%rsp)      # imm = 0x34C7
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13512, 4164(%rsp)      # imm = 0x34C8
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13513, 4164(%rsp)      # imm = 0x34C9
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13514, 4164(%rsp)      # imm = 0x34CA
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13516, 4164(%rsp)      # imm = 0x34CC
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13525, 4164(%rsp)      # imm = 0x34D5
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1400(%rsp)        # 4-byte Spill
	movl	%r10d, 1380(%rsp)       # 4-byte Spill
	movl	%eax, 1384(%rsp)        # 4-byte Spill
	movl	%r11d, 1388(%rsp)       # 4-byte Spill
	jg	.LBB67_194
.LBB67_195:                             # %bsW.exit4969
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1388(%rsp), %eax        # 4-byte Reload
	movl	1400(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1396(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1376(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1392(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1376(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13527, 4164(%rsp)      # imm = 0x34D7
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13531, 4164(%rsp)      # imm = 0x34DB
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$11, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13534, 4164(%rsp)      # imm = 0x34DE
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13537, 4164(%rsp)      # imm = 0x34E1
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13540, 4164(%rsp)      # imm = 0x34E4
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1372(%rsp)        # 4-byte Spill
	movl	%r13d, 1368(%rsp)       # 4-byte Spill
	movl	%edi, 1364(%rsp)        # 4-byte Spill
	movl	%ebp, 1360(%rsp)        # 4-byte Spill
	movl	%eax, 1356(%rsp)        # 4-byte Spill
	jle	.LBB67_198
# %bb.196:                              # %while.body.lr.ph.i4927
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13548, 4164(%rsp)      # imm = 0x34EC
	movl	1372(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1352(%rsp)        # 4-byte Spill
	movl	%edx, 1348(%rsp)        # 4-byte Spill
.LBB67_197:                             # %while.body.i4936
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1348(%rsp), %eax        # 4-byte Reload
	movl	1352(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13551, 4164(%rsp)      # imm = 0x34EF
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13552, 4164(%rsp)      # imm = 0x34F0
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13553, 4164(%rsp)      # imm = 0x34F1
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13554, 4164(%rsp)      # imm = 0x34F2
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13555, 4164(%rsp)      # imm = 0x34F3
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13556, 4164(%rsp)      # imm = 0x34F4
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13558, 4164(%rsp)      # imm = 0x34F6
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13567, 4164(%rsp)      # imm = 0x34FF
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1368(%rsp)        # 4-byte Spill
	movl	%r10d, 1348(%rsp)       # 4-byte Spill
	movl	%eax, 1352(%rsp)        # 4-byte Spill
	movl	%r11d, 1356(%rsp)       # 4-byte Spill
	jg	.LBB67_197
.LBB67_198:                             # %bsW.exit4943
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1356(%rsp), %eax        # 4-byte Reload
	movl	1368(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1364(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1344(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1360(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1344(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13569, 4164(%rsp)      # imm = 0x3501
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13573, 4164(%rsp)      # imm = 0x3505
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$12, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13576, 4164(%rsp)      # imm = 0x3508
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13579, 4164(%rsp)      # imm = 0x350B
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13582, 4164(%rsp)      # imm = 0x350E
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1340(%rsp)        # 4-byte Spill
	movl	%r13d, 1336(%rsp)       # 4-byte Spill
	movl	%edi, 1332(%rsp)        # 4-byte Spill
	movl	%ebp, 1328(%rsp)        # 4-byte Spill
	movl	%eax, 1324(%rsp)        # 4-byte Spill
	jle	.LBB67_201
# %bb.199:                              # %while.body.lr.ph.i4901
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13590, 4164(%rsp)      # imm = 0x3516
	movl	1340(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1320(%rsp)        # 4-byte Spill
	movl	%edx, 1316(%rsp)        # 4-byte Spill
.LBB67_200:                             # %while.body.i4910
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1316(%rsp), %eax        # 4-byte Reload
	movl	1320(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13593, 4164(%rsp)      # imm = 0x3519
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13594, 4164(%rsp)      # imm = 0x351A
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13595, 4164(%rsp)      # imm = 0x351B
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13596, 4164(%rsp)      # imm = 0x351C
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13597, 4164(%rsp)      # imm = 0x351D
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13598, 4164(%rsp)      # imm = 0x351E
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13600, 4164(%rsp)      # imm = 0x3520
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13609, 4164(%rsp)      # imm = 0x3529
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1336(%rsp)        # 4-byte Spill
	movl	%r10d, 1316(%rsp)       # 4-byte Spill
	movl	%eax, 1320(%rsp)        # 4-byte Spill
	movl	%r11d, 1324(%rsp)       # 4-byte Spill
	jg	.LBB67_200
.LBB67_201:                             # %bsW.exit4917
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1324(%rsp), %eax        # 4-byte Reload
	movl	1336(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1332(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1312(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1328(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1312(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13611, 4164(%rsp)      # imm = 0x352B
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13615, 4164(%rsp)      # imm = 0x352F
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$13, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13618, 4164(%rsp)      # imm = 0x3532
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13621, 4164(%rsp)      # imm = 0x3535
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13624, 4164(%rsp)      # imm = 0x3538
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1308(%rsp)        # 4-byte Spill
	movl	%r13d, 1304(%rsp)       # 4-byte Spill
	movl	%edi, 1300(%rsp)        # 4-byte Spill
	movl	%ebp, 1296(%rsp)        # 4-byte Spill
	movl	%eax, 1292(%rsp)        # 4-byte Spill
	jle	.LBB67_204
# %bb.202:                              # %while.body.lr.ph.i4875
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13632, 4164(%rsp)      # imm = 0x3540
	movl	1308(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1288(%rsp)        # 4-byte Spill
	movl	%edx, 1284(%rsp)        # 4-byte Spill
.LBB67_203:                             # %while.body.i4884
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1284(%rsp), %eax        # 4-byte Reload
	movl	1288(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13635, 4164(%rsp)      # imm = 0x3543
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13636, 4164(%rsp)      # imm = 0x3544
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13637, 4164(%rsp)      # imm = 0x3545
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13638, 4164(%rsp)      # imm = 0x3546
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13639, 4164(%rsp)      # imm = 0x3547
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13640, 4164(%rsp)      # imm = 0x3548
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13642, 4164(%rsp)      # imm = 0x354A
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13651, 4164(%rsp)      # imm = 0x3553
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1304(%rsp)        # 4-byte Spill
	movl	%r10d, 1284(%rsp)       # 4-byte Spill
	movl	%eax, 1288(%rsp)        # 4-byte Spill
	movl	%r11d, 1292(%rsp)       # 4-byte Spill
	jg	.LBB67_203
.LBB67_204:                             # %bsW.exit4891
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1292(%rsp), %eax        # 4-byte Reload
	movl	1304(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1300(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1280(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1296(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1280(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13653, 4164(%rsp)      # imm = 0x3555
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13657, 4164(%rsp)      # imm = 0x3559
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$14, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13660, 4164(%rsp)      # imm = 0x355C
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13663, 4164(%rsp)      # imm = 0x355F
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13666, 4164(%rsp)      # imm = 0x3562
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1276(%rsp)        # 4-byte Spill
	movl	%r13d, 1272(%rsp)       # 4-byte Spill
	movl	%edi, 1268(%rsp)        # 4-byte Spill
	movl	%ebp, 1264(%rsp)        # 4-byte Spill
	movl	%eax, 1260(%rsp)        # 4-byte Spill
	jle	.LBB67_207
# %bb.205:                              # %while.body.lr.ph.i4849
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13674, 4164(%rsp)      # imm = 0x356A
	movl	1276(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1256(%rsp)        # 4-byte Spill
	movl	%edx, 1252(%rsp)        # 4-byte Spill
.LBB67_206:                             # %while.body.i4858
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1252(%rsp), %eax        # 4-byte Reload
	movl	1256(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13677, 4164(%rsp)      # imm = 0x356D
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13678, 4164(%rsp)      # imm = 0x356E
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13679, 4164(%rsp)      # imm = 0x356F
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13680, 4164(%rsp)      # imm = 0x3570
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13681, 4164(%rsp)      # imm = 0x3571
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13682, 4164(%rsp)      # imm = 0x3572
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13684, 4164(%rsp)      # imm = 0x3574
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13693, 4164(%rsp)      # imm = 0x357D
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1272(%rsp)        # 4-byte Spill
	movl	%r10d, 1252(%rsp)       # 4-byte Spill
	movl	%eax, 1256(%rsp)        # 4-byte Spill
	movl	%r11d, 1260(%rsp)       # 4-byte Spill
	jg	.LBB67_206
.LBB67_207:                             # %bsW.exit4865
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1260(%rsp), %eax        # 4-byte Reload
	movl	1272(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1268(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1248(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1264(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1248(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13695, 4164(%rsp)      # imm = 0x357F
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13699, 4164(%rsp)      # imm = 0x3583
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$15, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13702, 4164(%rsp)      # imm = 0x3586
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13705, 4164(%rsp)      # imm = 0x3589
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13708, 4164(%rsp)      # imm = 0x358C
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1244(%rsp)        # 4-byte Spill
	movl	%r13d, 1240(%rsp)       # 4-byte Spill
	movl	%edi, 1236(%rsp)        # 4-byte Spill
	movl	%ebp, 1232(%rsp)        # 4-byte Spill
	movl	%eax, 1228(%rsp)        # 4-byte Spill
	jle	.LBB67_210
# %bb.208:                              # %while.body.lr.ph.i4823
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13716, 4164(%rsp)      # imm = 0x3594
	movl	1244(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1224(%rsp)        # 4-byte Spill
	movl	%edx, 1220(%rsp)        # 4-byte Spill
.LBB67_209:                             # %while.body.i4832
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1220(%rsp), %eax        # 4-byte Reload
	movl	1224(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13719, 4164(%rsp)      # imm = 0x3597
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13720, 4164(%rsp)      # imm = 0x3598
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13721, 4164(%rsp)      # imm = 0x3599
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13722, 4164(%rsp)      # imm = 0x359A
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13723, 4164(%rsp)      # imm = 0x359B
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13724, 4164(%rsp)      # imm = 0x359C
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13726, 4164(%rsp)      # imm = 0x359E
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13735, 4164(%rsp)      # imm = 0x35A7
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1240(%rsp)        # 4-byte Spill
	movl	%r10d, 1220(%rsp)       # 4-byte Spill
	movl	%eax, 1224(%rsp)        # 4-byte Spill
	movl	%r11d, 1228(%rsp)       # 4-byte Spill
	jg	.LBB67_209
.LBB67_210:                             # %bsW.exit4839
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1228(%rsp), %eax        # 4-byte Reload
	movl	1240(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1236(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1216(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1232(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1216(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13737, 4164(%rsp)      # imm = 0x35A9
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13741, 4164(%rsp)      # imm = 0x35AD
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$16, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13744, 4164(%rsp)      # imm = 0x35B0
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13747, 4164(%rsp)      # imm = 0x35B3
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13750, 4164(%rsp)      # imm = 0x35B6
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1212(%rsp)        # 4-byte Spill
	movl	%r13d, 1208(%rsp)       # 4-byte Spill
	movl	%edi, 1204(%rsp)        # 4-byte Spill
	movl	%ebp, 1200(%rsp)        # 4-byte Spill
	movl	%eax, 1196(%rsp)        # 4-byte Spill
	jle	.LBB67_213
# %bb.211:                              # %while.body.lr.ph.i4797
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13758, 4164(%rsp)      # imm = 0x35BE
	movl	1212(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1192(%rsp)        # 4-byte Spill
	movl	%edx, 1188(%rsp)        # 4-byte Spill
.LBB67_212:                             # %while.body.i4806
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1188(%rsp), %eax        # 4-byte Reload
	movl	1192(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13761, 4164(%rsp)      # imm = 0x35C1
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13762, 4164(%rsp)      # imm = 0x35C2
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13763, 4164(%rsp)      # imm = 0x35C3
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13764, 4164(%rsp)      # imm = 0x35C4
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13765, 4164(%rsp)      # imm = 0x35C5
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13766, 4164(%rsp)      # imm = 0x35C6
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13768, 4164(%rsp)      # imm = 0x35C8
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13777, 4164(%rsp)      # imm = 0x35D1
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1208(%rsp)        # 4-byte Spill
	movl	%r10d, 1188(%rsp)       # 4-byte Spill
	movl	%eax, 1192(%rsp)        # 4-byte Spill
	movl	%r11d, 1196(%rsp)       # 4-byte Spill
	jg	.LBB67_212
.LBB67_213:                             # %bsW.exit4813
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1196(%rsp), %eax        # 4-byte Reload
	movl	1208(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1204(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1184(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1200(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1184(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13779, 4164(%rsp)      # imm = 0x35D3
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13783, 4164(%rsp)      # imm = 0x35D7
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$17, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13786, 4164(%rsp)      # imm = 0x35DA
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13789, 4164(%rsp)      # imm = 0x35DD
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13792, 4164(%rsp)      # imm = 0x35E0
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1180(%rsp)        # 4-byte Spill
	movl	%r13d, 1176(%rsp)       # 4-byte Spill
	movl	%edi, 1172(%rsp)        # 4-byte Spill
	movl	%ebp, 1168(%rsp)        # 4-byte Spill
	movl	%eax, 1164(%rsp)        # 4-byte Spill
	jle	.LBB67_216
# %bb.214:                              # %while.body.lr.ph.i4771
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13800, 4164(%rsp)      # imm = 0x35E8
	movl	1180(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1160(%rsp)        # 4-byte Spill
	movl	%edx, 1156(%rsp)        # 4-byte Spill
.LBB67_215:                             # %while.body.i4780
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1156(%rsp), %eax        # 4-byte Reload
	movl	1160(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13803, 4164(%rsp)      # imm = 0x35EB
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13804, 4164(%rsp)      # imm = 0x35EC
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13805, 4164(%rsp)      # imm = 0x35ED
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13806, 4164(%rsp)      # imm = 0x35EE
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13807, 4164(%rsp)      # imm = 0x35EF
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13808, 4164(%rsp)      # imm = 0x35F0
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13810, 4164(%rsp)      # imm = 0x35F2
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13819, 4164(%rsp)      # imm = 0x35FB
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1176(%rsp)        # 4-byte Spill
	movl	%r10d, 1156(%rsp)       # 4-byte Spill
	movl	%eax, 1160(%rsp)        # 4-byte Spill
	movl	%r11d, 1164(%rsp)       # 4-byte Spill
	jg	.LBB67_215
.LBB67_216:                             # %bsW.exit4787
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1164(%rsp), %eax        # 4-byte Reload
	movl	1176(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1172(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1152(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1168(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1152(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13821, 4164(%rsp)      # imm = 0x35FD
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13825, 4164(%rsp)      # imm = 0x3601
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$18, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13828, 4164(%rsp)      # imm = 0x3604
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13831, 4164(%rsp)      # imm = 0x3607
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13834, 4164(%rsp)      # imm = 0x360A
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1148(%rsp)        # 4-byte Spill
	movl	%r13d, 1144(%rsp)       # 4-byte Spill
	movl	%edi, 1140(%rsp)        # 4-byte Spill
	movl	%ebp, 1136(%rsp)        # 4-byte Spill
	movl	%eax, 1132(%rsp)        # 4-byte Spill
	jle	.LBB67_219
# %bb.217:                              # %while.body.lr.ph.i4745
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13842, 4164(%rsp)      # imm = 0x3612
	movl	1148(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1128(%rsp)        # 4-byte Spill
	movl	%edx, 1124(%rsp)        # 4-byte Spill
.LBB67_218:                             # %while.body.i4754
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1124(%rsp), %eax        # 4-byte Reload
	movl	1128(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13845, 4164(%rsp)      # imm = 0x3615
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13846, 4164(%rsp)      # imm = 0x3616
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13847, 4164(%rsp)      # imm = 0x3617
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13848, 4164(%rsp)      # imm = 0x3618
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13849, 4164(%rsp)      # imm = 0x3619
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13850, 4164(%rsp)      # imm = 0x361A
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13852, 4164(%rsp)      # imm = 0x361C
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13861, 4164(%rsp)      # imm = 0x3625
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1144(%rsp)        # 4-byte Spill
	movl	%r10d, 1124(%rsp)       # 4-byte Spill
	movl	%eax, 1128(%rsp)        # 4-byte Spill
	movl	%r11d, 1132(%rsp)       # 4-byte Spill
	jg	.LBB67_218
.LBB67_219:                             # %bsW.exit4761
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1132(%rsp), %eax        # 4-byte Reload
	movl	1144(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1140(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1120(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1136(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1120(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13863, 4164(%rsp)      # imm = 0x3627
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13867, 4164(%rsp)      # imm = 0x362B
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$19, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13870, 4164(%rsp)      # imm = 0x362E
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13873, 4164(%rsp)      # imm = 0x3631
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13876, 4164(%rsp)      # imm = 0x3634
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1116(%rsp)        # 4-byte Spill
	movl	%r13d, 1112(%rsp)       # 4-byte Spill
	movl	%edi, 1108(%rsp)        # 4-byte Spill
	movl	%ebp, 1104(%rsp)        # 4-byte Spill
	movl	%eax, 1100(%rsp)        # 4-byte Spill
	jle	.LBB67_222
# %bb.220:                              # %while.body.lr.ph.i4719
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13884, 4164(%rsp)      # imm = 0x363C
	movl	1116(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1096(%rsp)        # 4-byte Spill
	movl	%edx, 1092(%rsp)        # 4-byte Spill
.LBB67_221:                             # %while.body.i4728
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1092(%rsp), %eax        # 4-byte Reload
	movl	1096(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13887, 4164(%rsp)      # imm = 0x363F
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13888, 4164(%rsp)      # imm = 0x3640
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13889, 4164(%rsp)      # imm = 0x3641
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13890, 4164(%rsp)      # imm = 0x3642
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13891, 4164(%rsp)      # imm = 0x3643
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13892, 4164(%rsp)      # imm = 0x3644
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13894, 4164(%rsp)      # imm = 0x3646
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13903, 4164(%rsp)      # imm = 0x364F
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1112(%rsp)        # 4-byte Spill
	movl	%r10d, 1092(%rsp)       # 4-byte Spill
	movl	%eax, 1096(%rsp)        # 4-byte Spill
	movl	%r11d, 1100(%rsp)       # 4-byte Spill
	jg	.LBB67_221
.LBB67_222:                             # %bsW.exit4735
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1100(%rsp), %eax        # 4-byte Reload
	movl	1112(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1108(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1088(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1104(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1088(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13905, 4164(%rsp)      # imm = 0x3651
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13909, 4164(%rsp)      # imm = 0x3655
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$20, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13912, 4164(%rsp)      # imm = 0x3658
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13915, 4164(%rsp)      # imm = 0x365B
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13918, 4164(%rsp)      # imm = 0x365E
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1084(%rsp)        # 4-byte Spill
	movl	%r13d, 1080(%rsp)       # 4-byte Spill
	movl	%edi, 1076(%rsp)        # 4-byte Spill
	movl	%ebp, 1072(%rsp)        # 4-byte Spill
	movl	%eax, 1068(%rsp)        # 4-byte Spill
	jle	.LBB67_225
# %bb.223:                              # %while.body.lr.ph.i4693
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13926, 4164(%rsp)      # imm = 0x3666
	movl	1084(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1064(%rsp)        # 4-byte Spill
	movl	%edx, 1060(%rsp)        # 4-byte Spill
.LBB67_224:                             # %while.body.i4702
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1060(%rsp), %eax        # 4-byte Reload
	movl	1064(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13929, 4164(%rsp)      # imm = 0x3669
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13930, 4164(%rsp)      # imm = 0x366A
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13931, 4164(%rsp)      # imm = 0x366B
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13932, 4164(%rsp)      # imm = 0x366C
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13933, 4164(%rsp)      # imm = 0x366D
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13934, 4164(%rsp)      # imm = 0x366E
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13936, 4164(%rsp)      # imm = 0x3670
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13945, 4164(%rsp)      # imm = 0x3679
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1080(%rsp)        # 4-byte Spill
	movl	%r10d, 1060(%rsp)       # 4-byte Spill
	movl	%eax, 1064(%rsp)        # 4-byte Spill
	movl	%r11d, 1068(%rsp)       # 4-byte Spill
	jg	.LBB67_224
.LBB67_225:                             # %bsW.exit4709
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1068(%rsp), %eax        # 4-byte Reload
	movl	1080(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1076(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1056(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1072(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1056(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13947, 4164(%rsp)      # imm = 0x367B
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13951, 4164(%rsp)      # imm = 0x367F
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$21, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13954, 4164(%rsp)      # imm = 0x3682
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13957, 4164(%rsp)      # imm = 0x3685
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$13960, 4164(%rsp)      # imm = 0x3688
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1052(%rsp)        # 4-byte Spill
	movl	%r13d, 1048(%rsp)       # 4-byte Spill
	movl	%edi, 1044(%rsp)        # 4-byte Spill
	movl	%ebp, 1040(%rsp)        # 4-byte Spill
	movl	%eax, 1036(%rsp)        # 4-byte Spill
	jle	.LBB67_228
# %bb.226:                              # %while.body.lr.ph.i4667
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$13968, 4164(%rsp)      # imm = 0x3690
	movl	1052(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1032(%rsp)        # 4-byte Spill
	movl	%edx, 1028(%rsp)        # 4-byte Spill
.LBB67_227:                             # %while.body.i4676
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1028(%rsp), %eax        # 4-byte Reload
	movl	1032(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$13971, 4164(%rsp)      # imm = 0x3693
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$13972, 4164(%rsp)      # imm = 0x3694
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$13973, 4164(%rsp)      # imm = 0x3695
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$13974, 4164(%rsp)      # imm = 0x3696
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$13975, 4164(%rsp)      # imm = 0x3697
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$13976, 4164(%rsp)      # imm = 0x3698
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$13978, 4164(%rsp)      # imm = 0x369A
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$13987, 4164(%rsp)      # imm = 0x36A3
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1048(%rsp)        # 4-byte Spill
	movl	%r10d, 1028(%rsp)       # 4-byte Spill
	movl	%eax, 1032(%rsp)        # 4-byte Spill
	movl	%r11d, 1036(%rsp)       # 4-byte Spill
	jg	.LBB67_227
.LBB67_228:                             # %bsW.exit4683
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1036(%rsp), %eax        # 4-byte Reload
	movl	1048(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1044(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 1024(%rsp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1040(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	1024(%rsp), %edi        # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$13989, 4164(%rsp)      # imm = 0x36A5
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13993, 4164(%rsp)      # imm = 0x36A9
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$22, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$13996, 4164(%rsp)      # imm = 0x36AC
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$13999, 4164(%rsp)      # imm = 0x36AF
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14002, 4164(%rsp)      # imm = 0x36B2
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 1020(%rsp)        # 4-byte Spill
	movl	%r13d, 1016(%rsp)       # 4-byte Spill
	movl	%edi, 1012(%rsp)        # 4-byte Spill
	movl	%ebp, 1008(%rsp)        # 4-byte Spill
	movl	%eax, 1004(%rsp)        # 4-byte Spill
	jle	.LBB67_231
# %bb.229:                              # %while.body.lr.ph.i4641
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14010, 4164(%rsp)      # imm = 0x36BA
	movl	1020(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1000(%rsp)        # 4-byte Spill
	movl	%edx, 996(%rsp)         # 4-byte Spill
.LBB67_230:                             # %while.body.i4650
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	996(%rsp), %eax         # 4-byte Reload
	movl	1000(%rsp), %ecx        # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14013, 4164(%rsp)      # imm = 0x36BD
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14014, 4164(%rsp)      # imm = 0x36BE
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14015, 4164(%rsp)      # imm = 0x36BF
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14016, 4164(%rsp)      # imm = 0x36C0
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14017, 4164(%rsp)      # imm = 0x36C1
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14018, 4164(%rsp)      # imm = 0x36C2
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14020, 4164(%rsp)      # imm = 0x36C4
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14029, 4164(%rsp)      # imm = 0x36CD
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 1016(%rsp)        # 4-byte Spill
	movl	%r10d, 996(%rsp)        # 4-byte Spill
	movl	%eax, 1000(%rsp)        # 4-byte Spill
	movl	%r11d, 1004(%rsp)       # 4-byte Spill
	jg	.LBB67_230
.LBB67_231:                             # %bsW.exit4657
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1004(%rsp), %eax        # 4-byte Reload
	movl	1016(%rsp), %ecx        # 4-byte Reload
	movl	$32, %edx
	movl	1012(%rsp), %esi        # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 992(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	1008(%rsp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	992(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14031, 4164(%rsp)      # imm = 0x36CF
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14035, 4164(%rsp)      # imm = 0x36D3
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$23, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14038, 4164(%rsp)      # imm = 0x36D6
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14041, 4164(%rsp)      # imm = 0x36D9
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14044, 4164(%rsp)      # imm = 0x36DC
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 988(%rsp)         # 4-byte Spill
	movl	%r13d, 984(%rsp)        # 4-byte Spill
	movl	%edi, 980(%rsp)         # 4-byte Spill
	movl	%ebp, 976(%rsp)         # 4-byte Spill
	movl	%eax, 972(%rsp)         # 4-byte Spill
	jle	.LBB67_234
# %bb.232:                              # %while.body.lr.ph.i4615
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14052, 4164(%rsp)      # imm = 0x36E4
	movl	988(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 968(%rsp)         # 4-byte Spill
	movl	%edx, 964(%rsp)         # 4-byte Spill
.LBB67_233:                             # %while.body.i4624
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	964(%rsp), %eax         # 4-byte Reload
	movl	968(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14055, 4164(%rsp)      # imm = 0x36E7
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14056, 4164(%rsp)      # imm = 0x36E8
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14057, 4164(%rsp)      # imm = 0x36E9
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14058, 4164(%rsp)      # imm = 0x36EA
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14059, 4164(%rsp)      # imm = 0x36EB
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14060, 4164(%rsp)      # imm = 0x36EC
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14062, 4164(%rsp)      # imm = 0x36EE
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14071, 4164(%rsp)      # imm = 0x36F7
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 984(%rsp)         # 4-byte Spill
	movl	%r10d, 964(%rsp)        # 4-byte Spill
	movl	%eax, 968(%rsp)         # 4-byte Spill
	movl	%r11d, 972(%rsp)        # 4-byte Spill
	jg	.LBB67_233
.LBB67_234:                             # %bsW.exit4631
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	972(%rsp), %eax         # 4-byte Reload
	movl	984(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	980(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 960(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	976(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	960(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14073, 4164(%rsp)      # imm = 0x36F9
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14077, 4164(%rsp)      # imm = 0x36FD
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$24, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14080, 4164(%rsp)      # imm = 0x3700
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14083, 4164(%rsp)      # imm = 0x3703
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14086, 4164(%rsp)      # imm = 0x3706
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 956(%rsp)         # 4-byte Spill
	movl	%r13d, 952(%rsp)        # 4-byte Spill
	movl	%edi, 948(%rsp)         # 4-byte Spill
	movl	%ebp, 944(%rsp)         # 4-byte Spill
	movl	%eax, 940(%rsp)         # 4-byte Spill
	jle	.LBB67_237
# %bb.235:                              # %while.body.lr.ph.i4589
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14094, 4164(%rsp)      # imm = 0x370E
	movl	956(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 936(%rsp)         # 4-byte Spill
	movl	%edx, 932(%rsp)         # 4-byte Spill
.LBB67_236:                             # %while.body.i4598
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	932(%rsp), %eax         # 4-byte Reload
	movl	936(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14097, 4164(%rsp)      # imm = 0x3711
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14098, 4164(%rsp)      # imm = 0x3712
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14099, 4164(%rsp)      # imm = 0x3713
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14100, 4164(%rsp)      # imm = 0x3714
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14101, 4164(%rsp)      # imm = 0x3715
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14102, 4164(%rsp)      # imm = 0x3716
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14104, 4164(%rsp)      # imm = 0x3718
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14113, 4164(%rsp)      # imm = 0x3721
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 952(%rsp)         # 4-byte Spill
	movl	%r10d, 932(%rsp)        # 4-byte Spill
	movl	%eax, 936(%rsp)         # 4-byte Spill
	movl	%r11d, 940(%rsp)        # 4-byte Spill
	jg	.LBB67_236
.LBB67_237:                             # %bsW.exit4605
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	940(%rsp), %eax         # 4-byte Reload
	movl	952(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	948(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 928(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	944(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	928(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14115, 4164(%rsp)      # imm = 0x3723
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14119, 4164(%rsp)      # imm = 0x3727
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$25, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14122, 4164(%rsp)      # imm = 0x372A
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14125, 4164(%rsp)      # imm = 0x372D
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14128, 4164(%rsp)      # imm = 0x3730
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 924(%rsp)         # 4-byte Spill
	movl	%r13d, 920(%rsp)        # 4-byte Spill
	movl	%edi, 916(%rsp)         # 4-byte Spill
	movl	%ebp, 912(%rsp)         # 4-byte Spill
	movl	%eax, 908(%rsp)         # 4-byte Spill
	jle	.LBB67_240
# %bb.238:                              # %while.body.lr.ph.i4563
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14136, 4164(%rsp)      # imm = 0x3738
	movl	924(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 904(%rsp)         # 4-byte Spill
	movl	%edx, 900(%rsp)         # 4-byte Spill
.LBB67_239:                             # %while.body.i4572
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	900(%rsp), %eax         # 4-byte Reload
	movl	904(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14139, 4164(%rsp)      # imm = 0x373B
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14140, 4164(%rsp)      # imm = 0x373C
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14141, 4164(%rsp)      # imm = 0x373D
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14142, 4164(%rsp)      # imm = 0x373E
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14143, 4164(%rsp)      # imm = 0x373F
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14144, 4164(%rsp)      # imm = 0x3740
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14146, 4164(%rsp)      # imm = 0x3742
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14155, 4164(%rsp)      # imm = 0x374B
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 920(%rsp)         # 4-byte Spill
	movl	%r10d, 900(%rsp)        # 4-byte Spill
	movl	%eax, 904(%rsp)         # 4-byte Spill
	movl	%r11d, 908(%rsp)        # 4-byte Spill
	jg	.LBB67_239
.LBB67_240:                             # %bsW.exit4579
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	908(%rsp), %eax         # 4-byte Reload
	movl	920(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	916(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 896(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	912(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	896(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14157, 4164(%rsp)      # imm = 0x374D
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14161, 4164(%rsp)      # imm = 0x3751
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$26, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14164, 4164(%rsp)      # imm = 0x3754
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14167, 4164(%rsp)      # imm = 0x3757
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14170, 4164(%rsp)      # imm = 0x375A
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 892(%rsp)         # 4-byte Spill
	movl	%r13d, 888(%rsp)        # 4-byte Spill
	movl	%edi, 884(%rsp)         # 4-byte Spill
	movl	%ebp, 880(%rsp)         # 4-byte Spill
	movl	%eax, 876(%rsp)         # 4-byte Spill
	jle	.LBB67_243
# %bb.241:                              # %while.body.lr.ph.i4537
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14178, 4164(%rsp)      # imm = 0x3762
	movl	892(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 872(%rsp)         # 4-byte Spill
	movl	%edx, 868(%rsp)         # 4-byte Spill
.LBB67_242:                             # %while.body.i4546
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	868(%rsp), %eax         # 4-byte Reload
	movl	872(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14181, 4164(%rsp)      # imm = 0x3765
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14182, 4164(%rsp)      # imm = 0x3766
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14183, 4164(%rsp)      # imm = 0x3767
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14184, 4164(%rsp)      # imm = 0x3768
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14185, 4164(%rsp)      # imm = 0x3769
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14186, 4164(%rsp)      # imm = 0x376A
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14188, 4164(%rsp)      # imm = 0x376C
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14197, 4164(%rsp)      # imm = 0x3775
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 888(%rsp)         # 4-byte Spill
	movl	%r10d, 868(%rsp)        # 4-byte Spill
	movl	%eax, 872(%rsp)         # 4-byte Spill
	movl	%r11d, 876(%rsp)        # 4-byte Spill
	jg	.LBB67_242
.LBB67_243:                             # %bsW.exit4553
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	876(%rsp), %eax         # 4-byte Reload
	movl	888(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	884(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 864(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	880(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	864(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14199, 4164(%rsp)      # imm = 0x3777
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14203, 4164(%rsp)      # imm = 0x377B
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$27, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14206, 4164(%rsp)      # imm = 0x377E
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14209, 4164(%rsp)      # imm = 0x3781
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14212, 4164(%rsp)      # imm = 0x3784
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 860(%rsp)         # 4-byte Spill
	movl	%r13d, 856(%rsp)        # 4-byte Spill
	movl	%edi, 852(%rsp)         # 4-byte Spill
	movl	%ebp, 848(%rsp)         # 4-byte Spill
	movl	%eax, 844(%rsp)         # 4-byte Spill
	jle	.LBB67_246
# %bb.244:                              # %while.body.lr.ph.i4511
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14220, 4164(%rsp)      # imm = 0x378C
	movl	860(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 840(%rsp)         # 4-byte Spill
	movl	%edx, 836(%rsp)         # 4-byte Spill
.LBB67_245:                             # %while.body.i4520
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	836(%rsp), %eax         # 4-byte Reload
	movl	840(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14223, 4164(%rsp)      # imm = 0x378F
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14224, 4164(%rsp)      # imm = 0x3790
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14225, 4164(%rsp)      # imm = 0x3791
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14226, 4164(%rsp)      # imm = 0x3792
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14227, 4164(%rsp)      # imm = 0x3793
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14228, 4164(%rsp)      # imm = 0x3794
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14230, 4164(%rsp)      # imm = 0x3796
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14239, 4164(%rsp)      # imm = 0x379F
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 856(%rsp)         # 4-byte Spill
	movl	%r10d, 836(%rsp)        # 4-byte Spill
	movl	%eax, 840(%rsp)         # 4-byte Spill
	movl	%r11d, 844(%rsp)        # 4-byte Spill
	jg	.LBB67_245
.LBB67_246:                             # %bsW.exit4527
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	856(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	852(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 832(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	848(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	832(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14241, 4164(%rsp)      # imm = 0x37A1
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14245, 4164(%rsp)      # imm = 0x37A5
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$28, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14248, 4164(%rsp)      # imm = 0x37A8
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14251, 4164(%rsp)      # imm = 0x37AB
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14254, 4164(%rsp)      # imm = 0x37AE
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 828(%rsp)         # 4-byte Spill
	movl	%r13d, 824(%rsp)        # 4-byte Spill
	movl	%edi, 820(%rsp)         # 4-byte Spill
	movl	%ebp, 816(%rsp)         # 4-byte Spill
	movl	%eax, 812(%rsp)         # 4-byte Spill
	jle	.LBB67_249
# %bb.247:                              # %while.body.lr.ph.i4485
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14262, 4164(%rsp)      # imm = 0x37B6
	movl	828(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 808(%rsp)         # 4-byte Spill
	movl	%edx, 804(%rsp)         # 4-byte Spill
.LBB67_248:                             # %while.body.i4494
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	804(%rsp), %eax         # 4-byte Reload
	movl	808(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14265, 4164(%rsp)      # imm = 0x37B9
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14266, 4164(%rsp)      # imm = 0x37BA
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14267, 4164(%rsp)      # imm = 0x37BB
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14268, 4164(%rsp)      # imm = 0x37BC
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14269, 4164(%rsp)      # imm = 0x37BD
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14270, 4164(%rsp)      # imm = 0x37BE
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14272, 4164(%rsp)      # imm = 0x37C0
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14281, 4164(%rsp)      # imm = 0x37C9
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 824(%rsp)         # 4-byte Spill
	movl	%r10d, 804(%rsp)        # 4-byte Spill
	movl	%eax, 808(%rsp)         # 4-byte Spill
	movl	%r11d, 812(%rsp)        # 4-byte Spill
	jg	.LBB67_248
.LBB67_249:                             # %bsW.exit4501
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	812(%rsp), %eax         # 4-byte Reload
	movl	824(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	820(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 800(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	816(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	800(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14283, 4164(%rsp)      # imm = 0x37CB
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14287, 4164(%rsp)      # imm = 0x37CF
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$29, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14290, 4164(%rsp)      # imm = 0x37D2
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14293, 4164(%rsp)      # imm = 0x37D5
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14296, 4164(%rsp)      # imm = 0x37D8
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 796(%rsp)         # 4-byte Spill
	movl	%r13d, 792(%rsp)        # 4-byte Spill
	movl	%edi, 788(%rsp)         # 4-byte Spill
	movl	%ebp, 784(%rsp)         # 4-byte Spill
	movl	%eax, 780(%rsp)         # 4-byte Spill
	jle	.LBB67_252
# %bb.250:                              # %while.body.lr.ph.i4459
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14304, 4164(%rsp)      # imm = 0x37E0
	movl	796(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 776(%rsp)         # 4-byte Spill
	movl	%edx, 772(%rsp)         # 4-byte Spill
.LBB67_251:                             # %while.body.i4468
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	772(%rsp), %eax         # 4-byte Reload
	movl	776(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14307, 4164(%rsp)      # imm = 0x37E3
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14308, 4164(%rsp)      # imm = 0x37E4
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14309, 4164(%rsp)      # imm = 0x37E5
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14310, 4164(%rsp)      # imm = 0x37E6
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14311, 4164(%rsp)      # imm = 0x37E7
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14312, 4164(%rsp)      # imm = 0x37E8
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14314, 4164(%rsp)      # imm = 0x37EA
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14323, 4164(%rsp)      # imm = 0x37F3
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 792(%rsp)         # 4-byte Spill
	movl	%r10d, 772(%rsp)        # 4-byte Spill
	movl	%eax, 776(%rsp)         # 4-byte Spill
	movl	%r11d, 780(%rsp)        # 4-byte Spill
	jg	.LBB67_251
.LBB67_252:                             # %bsW.exit4475
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	780(%rsp), %eax         # 4-byte Reload
	movl	792(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	788(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 768(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	784(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	768(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14325, 4164(%rsp)      # imm = 0x37F5
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14329, 4164(%rsp)      # imm = 0x37F9
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$30, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14332, 4164(%rsp)      # imm = 0x37FC
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14335, 4164(%rsp)      # imm = 0x37FF
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14338, 4164(%rsp)      # imm = 0x3802
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 764(%rsp)         # 4-byte Spill
	movl	%r13d, 760(%rsp)        # 4-byte Spill
	movl	%edi, 756(%rsp)         # 4-byte Spill
	movl	%ebp, 752(%rsp)         # 4-byte Spill
	movl	%eax, 748(%rsp)         # 4-byte Spill
	jle	.LBB67_255
# %bb.253:                              # %while.body.lr.ph.i4433
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14346, 4164(%rsp)      # imm = 0x380A
	movl	764(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 744(%rsp)         # 4-byte Spill
	movl	%edx, 740(%rsp)         # 4-byte Spill
.LBB67_254:                             # %while.body.i4442
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	740(%rsp), %eax         # 4-byte Reload
	movl	744(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14349, 4164(%rsp)      # imm = 0x380D
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14350, 4164(%rsp)      # imm = 0x380E
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14351, 4164(%rsp)      # imm = 0x380F
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14352, 4164(%rsp)      # imm = 0x3810
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14353, 4164(%rsp)      # imm = 0x3811
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14354, 4164(%rsp)      # imm = 0x3812
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14356, 4164(%rsp)      # imm = 0x3814
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14365, 4164(%rsp)      # imm = 0x381D
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 760(%rsp)         # 4-byte Spill
	movl	%r10d, 740(%rsp)        # 4-byte Spill
	movl	%eax, 744(%rsp)         # 4-byte Spill
	movl	%r11d, 748(%rsp)        # 4-byte Spill
	jg	.LBB67_254
.LBB67_255:                             # %bsW.exit4449
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	748(%rsp), %eax         # 4-byte Reload
	movl	760(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	756(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 736(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	752(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	736(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14367, 4164(%rsp)      # imm = 0x381F
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14371, 4164(%rsp)      # imm = 0x3823
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$31, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14374, 4164(%rsp)      # imm = 0x3826
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14377, 4164(%rsp)      # imm = 0x3829
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14380, 4164(%rsp)      # imm = 0x382C
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 732(%rsp)         # 4-byte Spill
	movl	%r13d, 728(%rsp)        # 4-byte Spill
	movl	%edi, 724(%rsp)         # 4-byte Spill
	movl	%ebp, 720(%rsp)         # 4-byte Spill
	movl	%eax, 716(%rsp)         # 4-byte Spill
	jle	.LBB67_258
# %bb.256:                              # %while.body.lr.ph.i4407
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14388, 4164(%rsp)      # imm = 0x3834
	movl	732(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 712(%rsp)         # 4-byte Spill
	movl	%edx, 708(%rsp)         # 4-byte Spill
.LBB67_257:                             # %while.body.i4416
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	708(%rsp), %eax         # 4-byte Reload
	movl	712(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14391, 4164(%rsp)      # imm = 0x3837
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14392, 4164(%rsp)      # imm = 0x3838
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14393, 4164(%rsp)      # imm = 0x3839
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14394, 4164(%rsp)      # imm = 0x383A
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14395, 4164(%rsp)      # imm = 0x383B
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14396, 4164(%rsp)      # imm = 0x383C
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14398, 4164(%rsp)      # imm = 0x383E
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14407, 4164(%rsp)      # imm = 0x3847
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 728(%rsp)         # 4-byte Spill
	movl	%r10d, 708(%rsp)        # 4-byte Spill
	movl	%eax, 712(%rsp)         # 4-byte Spill
	movl	%r11d, 716(%rsp)        # 4-byte Spill
	jg	.LBB67_257
.LBB67_258:                             # %bsW.exit4423
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	716(%rsp), %eax         # 4-byte Reload
	movl	728(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	724(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 704(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	720(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	704(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14409, 4164(%rsp)      # imm = 0x3849
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14413, 4164(%rsp)      # imm = 0x384D
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$32, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14416, 4164(%rsp)      # imm = 0x3850
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14419, 4164(%rsp)      # imm = 0x3853
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14422, 4164(%rsp)      # imm = 0x3856
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 700(%rsp)         # 4-byte Spill
	movl	%r13d, 696(%rsp)        # 4-byte Spill
	movl	%edi, 692(%rsp)         # 4-byte Spill
	movl	%ebp, 688(%rsp)         # 4-byte Spill
	movl	%eax, 684(%rsp)         # 4-byte Spill
	jle	.LBB67_261
# %bb.259:                              # %while.body.lr.ph.i4381
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14430, 4164(%rsp)      # imm = 0x385E
	movl	700(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 680(%rsp)         # 4-byte Spill
	movl	%edx, 676(%rsp)         # 4-byte Spill
.LBB67_260:                             # %while.body.i4390
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	676(%rsp), %eax         # 4-byte Reload
	movl	680(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14433, 4164(%rsp)      # imm = 0x3861
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14434, 4164(%rsp)      # imm = 0x3862
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14435, 4164(%rsp)      # imm = 0x3863
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14436, 4164(%rsp)      # imm = 0x3864
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14437, 4164(%rsp)      # imm = 0x3865
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14438, 4164(%rsp)      # imm = 0x3866
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14440, 4164(%rsp)      # imm = 0x3868
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14449, 4164(%rsp)      # imm = 0x3871
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 696(%rsp)         # 4-byte Spill
	movl	%r10d, 676(%rsp)        # 4-byte Spill
	movl	%eax, 680(%rsp)         # 4-byte Spill
	movl	%r11d, 684(%rsp)        # 4-byte Spill
	jg	.LBB67_260
.LBB67_261:                             # %bsW.exit4397
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	684(%rsp), %eax         # 4-byte Reload
	movl	696(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	692(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 672(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	688(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	672(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14451, 4164(%rsp)      # imm = 0x3873
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14455, 4164(%rsp)      # imm = 0x3877
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$33, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14458, 4164(%rsp)      # imm = 0x387A
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14461, 4164(%rsp)      # imm = 0x387D
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14464, 4164(%rsp)      # imm = 0x3880
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 668(%rsp)         # 4-byte Spill
	movl	%r13d, 664(%rsp)        # 4-byte Spill
	movl	%edi, 660(%rsp)         # 4-byte Spill
	movl	%ebp, 656(%rsp)         # 4-byte Spill
	movl	%eax, 652(%rsp)         # 4-byte Spill
	jle	.LBB67_264
# %bb.262:                              # %while.body.lr.ph.i4355
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14472, 4164(%rsp)      # imm = 0x3888
	movl	668(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 648(%rsp)         # 4-byte Spill
	movl	%edx, 644(%rsp)         # 4-byte Spill
.LBB67_263:                             # %while.body.i4364
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	644(%rsp), %eax         # 4-byte Reload
	movl	648(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14475, 4164(%rsp)      # imm = 0x388B
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14476, 4164(%rsp)      # imm = 0x388C
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14477, 4164(%rsp)      # imm = 0x388D
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14478, 4164(%rsp)      # imm = 0x388E
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14479, 4164(%rsp)      # imm = 0x388F
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14480, 4164(%rsp)      # imm = 0x3890
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14482, 4164(%rsp)      # imm = 0x3892
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14491, 4164(%rsp)      # imm = 0x389B
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 664(%rsp)         # 4-byte Spill
	movl	%r10d, 644(%rsp)        # 4-byte Spill
	movl	%eax, 648(%rsp)         # 4-byte Spill
	movl	%r11d, 652(%rsp)        # 4-byte Spill
	jg	.LBB67_263
.LBB67_264:                             # %bsW.exit4371
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	652(%rsp), %eax         # 4-byte Reload
	movl	664(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	660(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 640(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	656(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	640(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14493, 4164(%rsp)      # imm = 0x389D
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14497, 4164(%rsp)      # imm = 0x38A1
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$34, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14500, 4164(%rsp)      # imm = 0x38A4
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14503, 4164(%rsp)      # imm = 0x38A7
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14506, 4164(%rsp)      # imm = 0x38AA
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 636(%rsp)         # 4-byte Spill
	movl	%r13d, 632(%rsp)        # 4-byte Spill
	movl	%edi, 628(%rsp)         # 4-byte Spill
	movl	%ebp, 624(%rsp)         # 4-byte Spill
	movl	%eax, 620(%rsp)         # 4-byte Spill
	jle	.LBB67_267
# %bb.265:                              # %while.body.lr.ph.i4329
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14514, 4164(%rsp)      # imm = 0x38B2
	movl	636(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 616(%rsp)         # 4-byte Spill
	movl	%edx, 612(%rsp)         # 4-byte Spill
.LBB67_266:                             # %while.body.i4338
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	612(%rsp), %eax         # 4-byte Reload
	movl	616(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14517, 4164(%rsp)      # imm = 0x38B5
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14518, 4164(%rsp)      # imm = 0x38B6
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14519, 4164(%rsp)      # imm = 0x38B7
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14520, 4164(%rsp)      # imm = 0x38B8
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14521, 4164(%rsp)      # imm = 0x38B9
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14522, 4164(%rsp)      # imm = 0x38BA
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14524, 4164(%rsp)      # imm = 0x38BC
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14533, 4164(%rsp)      # imm = 0x38C5
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 632(%rsp)         # 4-byte Spill
	movl	%r10d, 612(%rsp)        # 4-byte Spill
	movl	%eax, 616(%rsp)         # 4-byte Spill
	movl	%r11d, 620(%rsp)        # 4-byte Spill
	jg	.LBB67_266
.LBB67_267:                             # %bsW.exit4345
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	620(%rsp), %eax         # 4-byte Reload
	movl	632(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	628(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 608(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	624(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	608(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14535, 4164(%rsp)      # imm = 0x38C7
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14539, 4164(%rsp)      # imm = 0x38CB
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$35, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14542, 4164(%rsp)      # imm = 0x38CE
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14545, 4164(%rsp)      # imm = 0x38D1
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14548, 4164(%rsp)      # imm = 0x38D4
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 604(%rsp)         # 4-byte Spill
	movl	%r13d, 600(%rsp)        # 4-byte Spill
	movl	%edi, 596(%rsp)         # 4-byte Spill
	movl	%ebp, 592(%rsp)         # 4-byte Spill
	movl	%eax, 588(%rsp)         # 4-byte Spill
	jle	.LBB67_270
# %bb.268:                              # %while.body.lr.ph.i4303
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14556, 4164(%rsp)      # imm = 0x38DC
	movl	604(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 584(%rsp)         # 4-byte Spill
	movl	%edx, 580(%rsp)         # 4-byte Spill
.LBB67_269:                             # %while.body.i4312
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	580(%rsp), %eax         # 4-byte Reload
	movl	584(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14559, 4164(%rsp)      # imm = 0x38DF
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14560, 4164(%rsp)      # imm = 0x38E0
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14561, 4164(%rsp)      # imm = 0x38E1
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14562, 4164(%rsp)      # imm = 0x38E2
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14563, 4164(%rsp)      # imm = 0x38E3
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14564, 4164(%rsp)      # imm = 0x38E4
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14566, 4164(%rsp)      # imm = 0x38E6
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14575, 4164(%rsp)      # imm = 0x38EF
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 600(%rsp)         # 4-byte Spill
	movl	%r10d, 580(%rsp)        # 4-byte Spill
	movl	%eax, 584(%rsp)         # 4-byte Spill
	movl	%r11d, 588(%rsp)        # 4-byte Spill
	jg	.LBB67_269
.LBB67_270:                             # %bsW.exit4319
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	588(%rsp), %eax         # 4-byte Reload
	movl	600(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	596(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 576(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	592(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	576(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14577, 4164(%rsp)      # imm = 0x38F1
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14581, 4164(%rsp)      # imm = 0x38F5
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$36, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14584, 4164(%rsp)      # imm = 0x38F8
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14587, 4164(%rsp)      # imm = 0x38FB
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14590, 4164(%rsp)      # imm = 0x38FE
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 572(%rsp)         # 4-byte Spill
	movl	%r13d, 568(%rsp)        # 4-byte Spill
	movl	%edi, 564(%rsp)         # 4-byte Spill
	movl	%ebp, 560(%rsp)         # 4-byte Spill
	movl	%eax, 556(%rsp)         # 4-byte Spill
	jle	.LBB67_273
# %bb.271:                              # %while.body.lr.ph.i4277
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14598, 4164(%rsp)      # imm = 0x3906
	movl	572(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 552(%rsp)         # 4-byte Spill
	movl	%edx, 548(%rsp)         # 4-byte Spill
.LBB67_272:                             # %while.body.i4286
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	548(%rsp), %eax         # 4-byte Reload
	movl	552(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14601, 4164(%rsp)      # imm = 0x3909
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14602, 4164(%rsp)      # imm = 0x390A
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14603, 4164(%rsp)      # imm = 0x390B
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14604, 4164(%rsp)      # imm = 0x390C
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14605, 4164(%rsp)      # imm = 0x390D
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14606, 4164(%rsp)      # imm = 0x390E
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14608, 4164(%rsp)      # imm = 0x3910
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14617, 4164(%rsp)      # imm = 0x3919
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 568(%rsp)         # 4-byte Spill
	movl	%r10d, 548(%rsp)        # 4-byte Spill
	movl	%eax, 552(%rsp)         # 4-byte Spill
	movl	%r11d, 556(%rsp)        # 4-byte Spill
	jg	.LBB67_272
.LBB67_273:                             # %bsW.exit4293
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	556(%rsp), %eax         # 4-byte Reload
	movl	568(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	564(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 544(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	560(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	544(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14619, 4164(%rsp)      # imm = 0x391B
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14623, 4164(%rsp)      # imm = 0x391F
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$37, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14626, 4164(%rsp)      # imm = 0x3922
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14629, 4164(%rsp)      # imm = 0x3925
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14632, 4164(%rsp)      # imm = 0x3928
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 540(%rsp)         # 4-byte Spill
	movl	%r13d, 536(%rsp)        # 4-byte Spill
	movl	%edi, 532(%rsp)         # 4-byte Spill
	movl	%ebp, 528(%rsp)         # 4-byte Spill
	movl	%eax, 524(%rsp)         # 4-byte Spill
	jle	.LBB67_276
# %bb.274:                              # %while.body.lr.ph.i4251
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14640, 4164(%rsp)      # imm = 0x3930
	movl	540(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 520(%rsp)         # 4-byte Spill
	movl	%edx, 516(%rsp)         # 4-byte Spill
.LBB67_275:                             # %while.body.i4260
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	516(%rsp), %eax         # 4-byte Reload
	movl	520(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14643, 4164(%rsp)      # imm = 0x3933
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14644, 4164(%rsp)      # imm = 0x3934
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14645, 4164(%rsp)      # imm = 0x3935
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14646, 4164(%rsp)      # imm = 0x3936
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14647, 4164(%rsp)      # imm = 0x3937
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14648, 4164(%rsp)      # imm = 0x3938
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14650, 4164(%rsp)      # imm = 0x393A
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14659, 4164(%rsp)      # imm = 0x3943
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 536(%rsp)         # 4-byte Spill
	movl	%r10d, 516(%rsp)        # 4-byte Spill
	movl	%eax, 520(%rsp)         # 4-byte Spill
	movl	%r11d, 524(%rsp)        # 4-byte Spill
	jg	.LBB67_275
.LBB67_276:                             # %bsW.exit4267
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	524(%rsp), %eax         # 4-byte Reload
	movl	536(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	532(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 512(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	528(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	512(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14661, 4164(%rsp)      # imm = 0x3945
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14665, 4164(%rsp)      # imm = 0x3949
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$38, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14668, 4164(%rsp)      # imm = 0x394C
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14671, 4164(%rsp)      # imm = 0x394F
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14674, 4164(%rsp)      # imm = 0x3952
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 508(%rsp)         # 4-byte Spill
	movl	%r13d, 504(%rsp)        # 4-byte Spill
	movl	%edi, 500(%rsp)         # 4-byte Spill
	movl	%ebp, 496(%rsp)         # 4-byte Spill
	movl	%eax, 492(%rsp)         # 4-byte Spill
	jle	.LBB67_279
# %bb.277:                              # %while.body.lr.ph.i4225
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14682, 4164(%rsp)      # imm = 0x395A
	movl	508(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 488(%rsp)         # 4-byte Spill
	movl	%edx, 484(%rsp)         # 4-byte Spill
.LBB67_278:                             # %while.body.i4234
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	484(%rsp), %eax         # 4-byte Reload
	movl	488(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14685, 4164(%rsp)      # imm = 0x395D
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14686, 4164(%rsp)      # imm = 0x395E
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14687, 4164(%rsp)      # imm = 0x395F
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14688, 4164(%rsp)      # imm = 0x3960
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14689, 4164(%rsp)      # imm = 0x3961
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14690, 4164(%rsp)      # imm = 0x3962
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14692, 4164(%rsp)      # imm = 0x3964
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14701, 4164(%rsp)      # imm = 0x396D
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 504(%rsp)         # 4-byte Spill
	movl	%r10d, 484(%rsp)        # 4-byte Spill
	movl	%eax, 488(%rsp)         # 4-byte Spill
	movl	%r11d, 492(%rsp)        # 4-byte Spill
	jg	.LBB67_278
.LBB67_279:                             # %bsW.exit4241
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	492(%rsp), %eax         # 4-byte Reload
	movl	504(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	500(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 480(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	496(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	480(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14703, 4164(%rsp)      # imm = 0x396F
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14707, 4164(%rsp)      # imm = 0x3973
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$39, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14710, 4164(%rsp)      # imm = 0x3976
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14713, 4164(%rsp)      # imm = 0x3979
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14716, 4164(%rsp)      # imm = 0x397C
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 476(%rsp)         # 4-byte Spill
	movl	%r13d, 472(%rsp)        # 4-byte Spill
	movl	%edi, 468(%rsp)         # 4-byte Spill
	movl	%ebp, 464(%rsp)         # 4-byte Spill
	movl	%eax, 460(%rsp)         # 4-byte Spill
	jle	.LBB67_282
# %bb.280:                              # %while.body.lr.ph.i4199
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14724, 4164(%rsp)      # imm = 0x3984
	movl	476(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 456(%rsp)         # 4-byte Spill
	movl	%edx, 452(%rsp)         # 4-byte Spill
.LBB67_281:                             # %while.body.i4208
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	452(%rsp), %eax         # 4-byte Reload
	movl	456(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14727, 4164(%rsp)      # imm = 0x3987
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14728, 4164(%rsp)      # imm = 0x3988
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14729, 4164(%rsp)      # imm = 0x3989
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14730, 4164(%rsp)      # imm = 0x398A
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14731, 4164(%rsp)      # imm = 0x398B
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14732, 4164(%rsp)      # imm = 0x398C
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14734, 4164(%rsp)      # imm = 0x398E
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14743, 4164(%rsp)      # imm = 0x3997
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 472(%rsp)         # 4-byte Spill
	movl	%r10d, 452(%rsp)        # 4-byte Spill
	movl	%eax, 456(%rsp)         # 4-byte Spill
	movl	%r11d, 460(%rsp)        # 4-byte Spill
	jg	.LBB67_281
.LBB67_282:                             # %bsW.exit4215
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	460(%rsp), %eax         # 4-byte Reload
	movl	472(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	468(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 448(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	464(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	448(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14745, 4164(%rsp)      # imm = 0x3999
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14749, 4164(%rsp)      # imm = 0x399D
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$40, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14752, 4164(%rsp)      # imm = 0x39A0
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14755, 4164(%rsp)      # imm = 0x39A3
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14758, 4164(%rsp)      # imm = 0x39A6
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 444(%rsp)         # 4-byte Spill
	movl	%r13d, 440(%rsp)        # 4-byte Spill
	movl	%edi, 436(%rsp)         # 4-byte Spill
	movl	%ebp, 432(%rsp)         # 4-byte Spill
	movl	%eax, 428(%rsp)         # 4-byte Spill
	jle	.LBB67_285
# %bb.283:                              # %while.body.lr.ph.i4173
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14766, 4164(%rsp)      # imm = 0x39AE
	movl	444(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 424(%rsp)         # 4-byte Spill
	movl	%edx, 420(%rsp)         # 4-byte Spill
.LBB67_284:                             # %while.body.i4182
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	420(%rsp), %eax         # 4-byte Reload
	movl	424(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14769, 4164(%rsp)      # imm = 0x39B1
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14770, 4164(%rsp)      # imm = 0x39B2
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14771, 4164(%rsp)      # imm = 0x39B3
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14772, 4164(%rsp)      # imm = 0x39B4
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14773, 4164(%rsp)      # imm = 0x39B5
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14774, 4164(%rsp)      # imm = 0x39B6
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14776, 4164(%rsp)      # imm = 0x39B8
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14785, 4164(%rsp)      # imm = 0x39C1
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 440(%rsp)         # 4-byte Spill
	movl	%r10d, 420(%rsp)        # 4-byte Spill
	movl	%eax, 424(%rsp)         # 4-byte Spill
	movl	%r11d, 428(%rsp)        # 4-byte Spill
	jg	.LBB67_284
.LBB67_285:                             # %bsW.exit4189
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	428(%rsp), %eax         # 4-byte Reload
	movl	440(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	436(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 416(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	432(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	416(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14787, 4164(%rsp)      # imm = 0x39C3
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14791, 4164(%rsp)      # imm = 0x39C7
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$41, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14794, 4164(%rsp)      # imm = 0x39CA
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14797, 4164(%rsp)      # imm = 0x39CD
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14800, 4164(%rsp)      # imm = 0x39D0
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 412(%rsp)         # 4-byte Spill
	movl	%r13d, 408(%rsp)        # 4-byte Spill
	movl	%edi, 404(%rsp)         # 4-byte Spill
	movl	%ebp, 400(%rsp)         # 4-byte Spill
	movl	%eax, 396(%rsp)         # 4-byte Spill
	jle	.LBB67_288
# %bb.286:                              # %while.body.lr.ph.i4147
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14808, 4164(%rsp)      # imm = 0x39D8
	movl	412(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 392(%rsp)         # 4-byte Spill
	movl	%edx, 388(%rsp)         # 4-byte Spill
.LBB67_287:                             # %while.body.i4156
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	388(%rsp), %eax         # 4-byte Reload
	movl	392(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14811, 4164(%rsp)      # imm = 0x39DB
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14812, 4164(%rsp)      # imm = 0x39DC
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14813, 4164(%rsp)      # imm = 0x39DD
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14814, 4164(%rsp)      # imm = 0x39DE
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14815, 4164(%rsp)      # imm = 0x39DF
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14816, 4164(%rsp)      # imm = 0x39E0
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14818, 4164(%rsp)      # imm = 0x39E2
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14827, 4164(%rsp)      # imm = 0x39EB
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 408(%rsp)         # 4-byte Spill
	movl	%r10d, 388(%rsp)        # 4-byte Spill
	movl	%eax, 392(%rsp)         # 4-byte Spill
	movl	%r11d, 396(%rsp)        # 4-byte Spill
	jg	.LBB67_287
.LBB67_288:                             # %bsW.exit4163
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	396(%rsp), %eax         # 4-byte Reload
	movl	408(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	404(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 384(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	400(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	384(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14829, 4164(%rsp)      # imm = 0x39ED
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14833, 4164(%rsp)      # imm = 0x39F1
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$42, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14836, 4164(%rsp)      # imm = 0x39F4
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14839, 4164(%rsp)      # imm = 0x39F7
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14842, 4164(%rsp)      # imm = 0x39FA
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 380(%rsp)         # 4-byte Spill
	movl	%r13d, 376(%rsp)        # 4-byte Spill
	movl	%edi, 372(%rsp)         # 4-byte Spill
	movl	%ebp, 368(%rsp)         # 4-byte Spill
	movl	%eax, 364(%rsp)         # 4-byte Spill
	jle	.LBB67_291
# %bb.289:                              # %while.body.lr.ph.i4121
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14850, 4164(%rsp)      # imm = 0x3A02
	movl	380(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 360(%rsp)         # 4-byte Spill
	movl	%edx, 356(%rsp)         # 4-byte Spill
.LBB67_290:                             # %while.body.i4130
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	356(%rsp), %eax         # 4-byte Reload
	movl	360(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14853, 4164(%rsp)      # imm = 0x3A05
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14854, 4164(%rsp)      # imm = 0x3A06
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14855, 4164(%rsp)      # imm = 0x3A07
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14856, 4164(%rsp)      # imm = 0x3A08
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14857, 4164(%rsp)      # imm = 0x3A09
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14858, 4164(%rsp)      # imm = 0x3A0A
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14860, 4164(%rsp)      # imm = 0x3A0C
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14869, 4164(%rsp)      # imm = 0x3A15
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 376(%rsp)         # 4-byte Spill
	movl	%r10d, 356(%rsp)        # 4-byte Spill
	movl	%eax, 360(%rsp)         # 4-byte Spill
	movl	%r11d, 364(%rsp)        # 4-byte Spill
	jg	.LBB67_290
.LBB67_291:                             # %bsW.exit4137
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	364(%rsp), %eax         # 4-byte Reload
	movl	376(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	372(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 352(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	368(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	352(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14871, 4164(%rsp)      # imm = 0x3A17
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14875, 4164(%rsp)      # imm = 0x3A1B
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$43, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14878, 4164(%rsp)      # imm = 0x3A1E
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14881, 4164(%rsp)      # imm = 0x3A21
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14884, 4164(%rsp)      # imm = 0x3A24
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 348(%rsp)         # 4-byte Spill
	movl	%r13d, 344(%rsp)        # 4-byte Spill
	movl	%edi, 340(%rsp)         # 4-byte Spill
	movl	%ebp, 336(%rsp)         # 4-byte Spill
	movl	%eax, 332(%rsp)         # 4-byte Spill
	jle	.LBB67_294
# %bb.292:                              # %while.body.lr.ph.i4095
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14892, 4164(%rsp)      # imm = 0x3A2C
	movl	348(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 328(%rsp)         # 4-byte Spill
	movl	%edx, 324(%rsp)         # 4-byte Spill
.LBB67_293:                             # %while.body.i4104
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	324(%rsp), %eax         # 4-byte Reload
	movl	328(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14895, 4164(%rsp)      # imm = 0x3A2F
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14896, 4164(%rsp)      # imm = 0x3A30
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14897, 4164(%rsp)      # imm = 0x3A31
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14898, 4164(%rsp)      # imm = 0x3A32
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14899, 4164(%rsp)      # imm = 0x3A33
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14900, 4164(%rsp)      # imm = 0x3A34
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14902, 4164(%rsp)      # imm = 0x3A36
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14911, 4164(%rsp)      # imm = 0x3A3F
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 344(%rsp)         # 4-byte Spill
	movl	%r10d, 324(%rsp)        # 4-byte Spill
	movl	%eax, 328(%rsp)         # 4-byte Spill
	movl	%r11d, 332(%rsp)        # 4-byte Spill
	jg	.LBB67_293
.LBB67_294:                             # %bsW.exit4111
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	332(%rsp), %eax         # 4-byte Reload
	movl	344(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	340(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 320(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	336(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	320(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14913, 4164(%rsp)      # imm = 0x3A41
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14917, 4164(%rsp)      # imm = 0x3A45
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$44, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14920, 4164(%rsp)      # imm = 0x3A48
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14923, 4164(%rsp)      # imm = 0x3A4B
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14926, 4164(%rsp)      # imm = 0x3A4E
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 316(%rsp)         # 4-byte Spill
	movl	%r13d, 312(%rsp)        # 4-byte Spill
	movl	%edi, 308(%rsp)         # 4-byte Spill
	movl	%ebp, 304(%rsp)         # 4-byte Spill
	movl	%eax, 300(%rsp)         # 4-byte Spill
	jle	.LBB67_297
# %bb.295:                              # %while.body.lr.ph.i4069
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14934, 4164(%rsp)      # imm = 0x3A56
	movl	316(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 296(%rsp)         # 4-byte Spill
	movl	%edx, 292(%rsp)         # 4-byte Spill
.LBB67_296:                             # %while.body.i4078
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	292(%rsp), %eax         # 4-byte Reload
	movl	296(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14937, 4164(%rsp)      # imm = 0x3A59
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14938, 4164(%rsp)      # imm = 0x3A5A
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14939, 4164(%rsp)      # imm = 0x3A5B
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14940, 4164(%rsp)      # imm = 0x3A5C
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14941, 4164(%rsp)      # imm = 0x3A5D
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14942, 4164(%rsp)      # imm = 0x3A5E
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14944, 4164(%rsp)      # imm = 0x3A60
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14953, 4164(%rsp)      # imm = 0x3A69
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 312(%rsp)         # 4-byte Spill
	movl	%r10d, 292(%rsp)        # 4-byte Spill
	movl	%eax, 296(%rsp)         # 4-byte Spill
	movl	%r11d, 300(%rsp)        # 4-byte Spill
	jg	.LBB67_296
.LBB67_297:                             # %bsW.exit4085
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	300(%rsp), %eax         # 4-byte Reload
	movl	312(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	308(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 288(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	304(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	288(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14955, 4164(%rsp)      # imm = 0x3A6B
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$14959, 4164(%rsp)      # imm = 0x3A6F
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$45, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$14962, 4164(%rsp)      # imm = 0x3A72
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$14965, 4164(%rsp)      # imm = 0x3A75
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$14968, 4164(%rsp)      # imm = 0x3A78
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 284(%rsp)         # 4-byte Spill
	movl	%r13d, 280(%rsp)        # 4-byte Spill
	movl	%edi, 276(%rsp)         # 4-byte Spill
	movl	%ebp, 272(%rsp)         # 4-byte Spill
	movl	%eax, 268(%rsp)         # 4-byte Spill
	jle	.LBB67_300
# %bb.298:                              # %while.body.lr.ph.i4043
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$14976, 4164(%rsp)      # imm = 0x3A80
	movl	284(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 264(%rsp)         # 4-byte Spill
	movl	%edx, 260(%rsp)         # 4-byte Spill
.LBB67_299:                             # %while.body.i4052
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	260(%rsp), %eax         # 4-byte Reload
	movl	264(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$14979, 4164(%rsp)      # imm = 0x3A83
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$14980, 4164(%rsp)      # imm = 0x3A84
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$14981, 4164(%rsp)      # imm = 0x3A85
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$14982, 4164(%rsp)      # imm = 0x3A86
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$14983, 4164(%rsp)      # imm = 0x3A87
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$14984, 4164(%rsp)      # imm = 0x3A88
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$14986, 4164(%rsp)      # imm = 0x3A8A
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$14995, 4164(%rsp)      # imm = 0x3A93
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 280(%rsp)         # 4-byte Spill
	movl	%r10d, 260(%rsp)        # 4-byte Spill
	movl	%eax, 264(%rsp)         # 4-byte Spill
	movl	%r11d, 268(%rsp)        # 4-byte Spill
	jg	.LBB67_299
.LBB67_300:                             # %bsW.exit4059
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	268(%rsp), %eax         # 4-byte Reload
	movl	280(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	276(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 256(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	272(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	256(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$14997, 4164(%rsp)      # imm = 0x3A95
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$15001, 4164(%rsp)      # imm = 0x3A99
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$46, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$15004, 4164(%rsp)      # imm = 0x3A9C
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$15007, 4164(%rsp)      # imm = 0x3A9F
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$15010, 4164(%rsp)      # imm = 0x3AA2
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 252(%rsp)         # 4-byte Spill
	movl	%r13d, 248(%rsp)        # 4-byte Spill
	movl	%edi, 244(%rsp)         # 4-byte Spill
	movl	%ebp, 240(%rsp)         # 4-byte Spill
	movl	%eax, 236(%rsp)         # 4-byte Spill
	jle	.LBB67_303
# %bb.301:                              # %while.body.lr.ph.i4017
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15018, 4164(%rsp)      # imm = 0x3AAA
	movl	252(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 232(%rsp)         # 4-byte Spill
	movl	%edx, 228(%rsp)         # 4-byte Spill
.LBB67_302:                             # %while.body.i4026
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	228(%rsp), %eax         # 4-byte Reload
	movl	232(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$15021, 4164(%rsp)      # imm = 0x3AAD
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$15022, 4164(%rsp)      # imm = 0x3AAE
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$15023, 4164(%rsp)      # imm = 0x3AAF
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$15024, 4164(%rsp)      # imm = 0x3AB0
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$15025, 4164(%rsp)      # imm = 0x3AB1
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$15026, 4164(%rsp)      # imm = 0x3AB2
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$15028, 4164(%rsp)      # imm = 0x3AB4
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$15037, 4164(%rsp)      # imm = 0x3ABD
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 248(%rsp)         # 4-byte Spill
	movl	%r10d, 228(%rsp)        # 4-byte Spill
	movl	%eax, 232(%rsp)         # 4-byte Spill
	movl	%r11d, 236(%rsp)        # 4-byte Spill
	jg	.LBB67_302
.LBB67_303:                             # %bsW.exit4033
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	236(%rsp), %eax         # 4-byte Reload
	movl	248(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	244(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 224(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	240(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	224(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$15039, 4164(%rsp)      # imm = 0x3ABF
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$15043, 4164(%rsp)      # imm = 0x3AC3
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$47, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$15046, 4164(%rsp)      # imm = 0x3AC6
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$15049, 4164(%rsp)      # imm = 0x3AC9
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$15052, 4164(%rsp)      # imm = 0x3ACC
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 220(%rsp)         # 4-byte Spill
	movl	%r13d, 216(%rsp)        # 4-byte Spill
	movl	%edi, 212(%rsp)         # 4-byte Spill
	movl	%ebp, 208(%rsp)         # 4-byte Spill
	movl	%eax, 204(%rsp)         # 4-byte Spill
	jle	.LBB67_306
# %bb.304:                              # %while.body.lr.ph.i3991
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15060, 4164(%rsp)      # imm = 0x3AD4
	movl	220(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 200(%rsp)         # 4-byte Spill
	movl	%edx, 196(%rsp)         # 4-byte Spill
.LBB67_305:                             # %while.body.i4000
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	196(%rsp), %eax         # 4-byte Reload
	movl	200(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$15063, 4164(%rsp)      # imm = 0x3AD7
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$15064, 4164(%rsp)      # imm = 0x3AD8
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$15065, 4164(%rsp)      # imm = 0x3AD9
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$15066, 4164(%rsp)      # imm = 0x3ADA
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$15067, 4164(%rsp)      # imm = 0x3ADB
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$15068, 4164(%rsp)      # imm = 0x3ADC
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$15070, 4164(%rsp)      # imm = 0x3ADE
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$15079, 4164(%rsp)      # imm = 0x3AE7
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 216(%rsp)         # 4-byte Spill
	movl	%r10d, 196(%rsp)        # 4-byte Spill
	movl	%eax, 200(%rsp)         # 4-byte Spill
	movl	%r11d, 204(%rsp)        # 4-byte Spill
	jg	.LBB67_305
.LBB67_306:                             # %bsW.exit4007
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	204(%rsp), %eax         # 4-byte Reload
	movl	216(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	212(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 192(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	208(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	192(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$15081, 4164(%rsp)      # imm = 0x3AE9
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$15085, 4164(%rsp)      # imm = 0x3AED
	movl	1768(%rsp), %edi        # 4-byte Reload
	addl	$48, %edi
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$15088, 4164(%rsp)      # imm = 0x3AF0
	movzwl	%bx, %edi
	movl	%edi, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$15091, 4164(%rsp)      # imm = 0x3AF3
	movzbl	%cl, %edi
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %ebp
	movl	$15094, 4164(%rsp)      # imm = 0x3AF6
	cmpl	$7, %eax
	movl	%edx, %r13d
	movl	%edx, 188(%rsp)         # 4-byte Spill
	movl	%r13d, 184(%rsp)        # 4-byte Spill
	movl	%edi, 180(%rsp)         # 4-byte Spill
	movl	%ebp, 176(%rsp)         # 4-byte Spill
	movl	%eax, 172(%rsp)         # 4-byte Spill
	jle	.LBB67_309
# %bb.307:                              # %while.body.lr.ph.i3965
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15102, 4164(%rsp)      # imm = 0x3AFE
	movl	188(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 168(%rsp)         # 4-byte Spill
	movl	%edx, 164(%rsp)         # 4-byte Spill
.LBB67_308:                             # %while.body.i3974
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	164(%rsp), %eax         # 4-byte Reload
	movl	168(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$15105, 4164(%rsp)      # imm = 0x3B01
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$15106, 4164(%rsp)      # imm = 0x3B02
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$15107, 4164(%rsp)      # imm = 0x3B03
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$15108, 4164(%rsp)      # imm = 0x3B04
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$15109, 4164(%rsp)      # imm = 0x3B05
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$15110, 4164(%rsp)      # imm = 0x3B06
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$15112, 4164(%rsp)      # imm = 0x3B08
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$15121, 4164(%rsp)      # imm = 0x3B11
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 184(%rsp)         # 4-byte Spill
	movl	%r10d, 164(%rsp)        # 4-byte Spill
	movl	%eax, 168(%rsp)         # 4-byte Spill
	movl	%r11d, 172(%rsp)        # 4-byte Spill
	jg	.LBB67_308
.LBB67_309:                             # %bsW.exit3981
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	172(%rsp), %eax         # 4-byte Reload
	movl	184(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	180(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 160(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	176(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	160(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$15123, 4164(%rsp)      # imm = 0x3B13
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$15126, 4164(%rsp)      # imm = 0x3B16
	movl	1764(%rsp), %edi        # 4-byte Reload
	movslq	%edi, %r10
	movq	4064(%rsp), %r11        # 8-byte Reload
	movw	(%r11,%r10,2), %bx
	movl	$15129, 4164(%rsp)      # imm = 0x3B19
	movzwl	%bx, %ebp
	movl	%ebp, %r10d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	movq	1728(%rsp), %r15        # 8-byte Reload
	imulq	$258, %r15, %r12        # imm = 0x102
	addq	%r12, %r14
	addq	%r10, %r14
	movb	(%r14), %cl
	movl	$15132, 4164(%rsp)      # imm = 0x3B1C
	movzbl	%cl, %ebp
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r15, %r12       # imm = 0x408
	addq	%r12, %r14
	shlq	$2, %r10
	addq	%r10, %r14
	movl	(%r14), %r13d
	movl	$15135, 4164(%rsp)      # imm = 0x3B1F
	cmpl	$7, %eax
	movl	%edx, %ecx
	movl	%edx, 156(%rsp)         # 4-byte Spill
	movl	%ecx, 152(%rsp)         # 4-byte Spill
	movl	%ebp, 148(%rsp)         # 4-byte Spill
	movl	%r13d, 144(%rsp)        # 4-byte Spill
	movl	%eax, 140(%rsp)         # 4-byte Spill
	jle	.LBB67_312
# %bb.310:                              # %while.body.lr.ph.i3939
                                        #   in Loop: Header=BB67_159 Depth=1
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15143, 4164(%rsp)      # imm = 0x3B27
	movl	156(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 136(%rsp)         # 4-byte Spill
	movl	%edx, 132(%rsp)         # 4-byte Spill
.LBB67_311:                             # %while.body.i3948
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	132(%rsp), %eax         # 4-byte Reload
	movl	136(%rsp), %ecx         # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$15146, 4164(%rsp)      # imm = 0x3B2A
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$15147, 4164(%rsp)      # imm = 0x3B2B
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$15148, 4164(%rsp)      # imm = 0x3B2C
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$15149, 4164(%rsp)      # imm = 0x3B2D
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$15150, 4164(%rsp)      # imm = 0x3B2E
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$15151, 4164(%rsp)      # imm = 0x3B2F
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$15153, 4164(%rsp)      # imm = 0x3B31
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$15162, 4164(%rsp)      # imm = 0x3B3A
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 152(%rsp)         # 4-byte Spill
	movl	%r10d, 132(%rsp)        # 4-byte Spill
	movl	%eax, 136(%rsp)         # 4-byte Spill
	movl	%r11d, 140(%rsp)        # 4-byte Spill
	jg	.LBB67_311
.LBB67_312:                             # %bsW.exit3955
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	140(%rsp), %eax         # 4-byte Reload
	movl	152(%rsp), %ecx         # 4-byte Reload
	movl	$32, %edx
	movl	148(%rsp), %esi         # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 128(%rsp)         # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	144(%rsp), %edx         # 4-byte Reload
	shll	%cl, %edx
	movl	128(%rsp), %edi         # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$15164, 4164(%rsp)      # imm = 0x3B3C
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$15170, 4164(%rsp)      # imm = 0x3B42
	jmp	.LBB67_319
.LBB67_313:                             # %if.else2414
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1748(%rsp), %eax        # 4-byte Reload
	movl	1768(%rsp), %ecx        # 4-byte Reload
	cmpl	%ecx, %eax
	jl	.LBB67_319
# %bb.314:                              # %for.body2418.lr.ph
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1768(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movl	1748(%rsp), %edx        # 4-byte Reload
	movslq	%edx, %rsi
	movq	2760(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %r8d
	movl	$15171, 4164(%rsp)      # imm = 0x3B43
	movq	2744(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$15179, 4164(%rsp)      # imm = 0x3B4B
	movl	%r8d, 124(%rsp)         # 4-byte Spill
	movq	%rsi, 112(%rsp)         # 8-byte Spill
	movl	%r10d, 108(%rsp)        # 4-byte Spill
	movq	%rcx, 96(%rsp)          # 8-byte Spill
.LBB67_315:                             # %for.body2418
                                        #   Parent Loop BB67_159 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_317 Depth 3
	movq	96(%rsp), %rax          # 8-byte Reload
	movl	124(%rsp), %ecx         # 4-byte Reload
	movl	108(%rsp), %edx         # 4-byte Reload
	movq	1736(%rsp), %rsi        # 8-byte Reload
	movb	(%rsi), %dil
	movl	$15182, 4164(%rsp)      # imm = 0x3B4E
	movzbl	%dil, %r8d
	movl	%r8d, %r9d
	movq	4064(%rsp), %r10        # 8-byte Reload
	movw	(%r10,%rax,2), %r11w
	movl	$15185, 4164(%rsp)      # imm = 0x3B51
	movzwl	%r11w, %r8d
	movl	%r8d, %ebx
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$37708, %r14            # imm = 0x934C
	imulq	$258, %r9, %r15         # imm = 0x102
	addq	%r15, %r14
	addq	%rbx, %r14
	movb	(%r14), %dil
	movl	$15188, 4164(%rsp)      # imm = 0x3B54
	movzbl	%dil, %r8d
	movq	4088(%rsp), %r14        # 8-byte Reload
	addq	$39256, %r14            # imm = 0x9958
	imulq	$1032, %r9, %r9         # imm = 0x408
	addq	%r9, %r14
	shlq	$2, %rbx
	addq	%rbx, %r14
	movl	(%r14), %ebp
	movl	$15191, 4164(%rsp)      # imm = 0x3B57
	cmpl	$7, %ecx
	movl	%edx, %r12d
	movq	%rax, 88(%rsp)          # 8-byte Spill
	movl	%r12d, 84(%rsp)         # 4-byte Spill
	movl	%edx, 80(%rsp)          # 4-byte Spill
	movl	%r8d, 76(%rsp)          # 4-byte Spill
	movl	%ebp, 72(%rsp)          # 4-byte Spill
	movl	%ecx, 68(%rsp)          # 4-byte Spill
	jle	.LBB67_318
# %bb.316:                              # %while.body.lr.ph.i3914
                                        #   in Loop: Header=BB67_315 Depth=2
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15199, 4164(%rsp)      # imm = 0x3B5F
	movl	80(%rsp), %edx          # 4-byte Reload
	movl	%ecx, 64(%rsp)          # 4-byte Spill
	movl	%edx, 60(%rsp)          # 4-byte Spill
.LBB67_317:                             # %while.body.i3923
                                        #   Parent Loop BB67_159 Depth=1
                                        #     Parent Loop BB67_315 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	60(%rsp), %eax          # 4-byte Reload
	movl	64(%rsp), %ecx          # 4-byte Reload
	shrl	$24, %eax
	movb	%al, %dl
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %rdi
	movl	$15202, 4164(%rsp)      # imm = 0x3B62
	movslq	%ecx, %r8
	movb	%dl, (%rdi,%r8)
	movl	$15203, 4164(%rsp)      # imm = 0x3B63
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi), %eax
	movl	$15204, 4164(%rsp)      # imm = 0x3B64
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	$15205, 4164(%rsp)      # imm = 0x3B65
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %ecx
	movl	$15206, 4164(%rsp)      # imm = 0x3B66
	shll	$8, %ecx
	movl	%ecx, (%r8)
	movl	$15207, 4164(%rsp)      # imm = 0x3B67
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %r10d
	movl	$15209, 4164(%rsp)      # imm = 0x3B69
	movl	%r10d, %r11d
	addl	$-8, %r11d
	movl	%r11d, (%r9)
	movl	$15217, 4164(%rsp)      # imm = 0x3B71
	cmpl	$15, %r10d
	movl	%ecx, %r10d
	movl	%ecx, 84(%rsp)          # 4-byte Spill
	movl	%r10d, 60(%rsp)         # 4-byte Spill
	movl	%eax, 64(%rsp)          # 4-byte Spill
	movl	%r11d, 68(%rsp)         # 4-byte Spill
	jg	.LBB67_317
.LBB67_318:                             # %bsW.exit3929
                                        #   in Loop: Header=BB67_315 Depth=2
	movl	68(%rsp), %eax          # 4-byte Reload
	movl	84(%rsp), %ecx          # 4-byte Reload
	movl	$32, %edx
	movl	76(%rsp), %esi          # 4-byte Reload
	subl	%esi, %edx
	subl	%eax, %edx
	movl	%ecx, 56(%rsp)          # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: def %cl killed %ecx
	movl	72(%rsp), %edx          # 4-byte Reload
	shll	%cl, %edx
	movl	56(%rsp), %edi          # 4-byte Reload
	orl	%edi, %edx
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	%edx, (%r8)
	movl	$15218, 4164(%rsp)      # imm = 0x3B72
	addl	%esi, %eax
	movq	2760(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movl	$13044, 4164(%rsp)      # imm = 0x32F4
	movq	88(%rsp), %r10          # 8-byte Reload
	addq	$1, %r10
	movq	88(%rsp), %r11          # 8-byte Reload
	movq	112(%rsp), %rbx         # 8-byte Reload
	cmpq	%rbx, %r11
	movl	%edx, 108(%rsp)         # 4-byte Spill
	movl	%eax, 124(%rsp)         # 4-byte Spill
	movq	%r10, 96(%rsp)          # 8-byte Spill
	jl	.LBB67_315
.LBB67_319:                             # %if.end2443
                                        #   in Loop: Header=BB67_159 Depth=1
	movl	1748(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movq	1752(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	4000(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %esi
	movl	$15231, 4164(%rsp)      # imm = 0x3B7F
	cmpl	%esi, %eax
	movq	%rcx, %rdi
	movl	%esi, 1784(%rsp)        # 4-byte Spill
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%rdi, 1776(%rsp)        # 8-byte Spill
	movl	%eax, 1772(%rsp)        # 4-byte Spill
	jl	.LBB67_159
# %bb.320:                              # %while.end2446.loopexit
	movq	48(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, 1788(%rsp)        # 4-byte Spill
.LBB67_321:                             # %while.end2446
	movl	1788(%rsp), %eax        # 4-byte Reload
	movl	3224(%rsp), %ecx        # 4-byte Reload
	cmpl	%ecx, %eax
	je	.LBB67_323
# %bb.322:                              # %if.then2449
	movl	$3007, %edi             # imm = 0xBBF
	callq	BZ2_bz__AssertH__fail
.LBB67_323:                             # %if.end2450
	movq	4056(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15234, 4164(%rsp)      # imm = 0x3B82
	cmpl	$2, %ecx
	jle	.LBB67_325
# %bb.324:                              # %if.then2454
	movabsq	$.L.str.10.75, %rsi
	movq	stderr, %rdi
	movl	$15235, 4164(%rsp)      # imm = 0x3B83
	movq	2768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15244, 4164(%rsp)      # imm = 0x3B8C
	movl	1796(%rsp), %edx        # 4-byte Reload
	subl	%edx, %ecx
	movl	%ecx, %edx
	movb	$0, %al
	callq	fprintf
	movl	%eax, 44(%rsp)          # 4-byte Spill
.LBB67_325:                             # %if.end2458
	addq	$4168, %rsp             # imm = 0x1048
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB67_326:                             # %for.body1719.2
	movb	$2, 4124(%rsp)
	movl	$15249, 4164(%rsp)      # imm = 0x3B91
	movl	3984(%rsp), %eax        # 4-byte Reload
	cmpl	$3, %eax
	je	.LBB67_61
# %bb.327:                              # %for.body1719.3
	movb	$3, 4125(%rsp)
	movl	$15254, 4164(%rsp)      # imm = 0x3B96
	movl	3984(%rsp), %eax        # 4-byte Reload
	cmpl	$4, %eax
	jbe	.LBB67_61
# %bb.328:                              # %for.body1719.4
	movb	$4, 4126(%rsp)
	movl	$15259, 4164(%rsp)      # imm = 0x3B9B
	movl	3984(%rsp), %eax        # 4-byte Reload
	cmpl	$5, %eax
	je	.LBB67_61
# %bb.329:                              # %for.body1719.5
	movb	$5, 4127(%rsp)
	movl	$15271, 4164(%rsp)      # imm = 0x3BA7
	jmp	.LBB67_61
.LBB67_330:                             # %for.body116.us.2
                                        #   in Loop: Header=BB67_26 Depth=1
	xorl	%esi, %esi
	movq	3640(%rsp), %rdi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	callq	memset
	movb	3639(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB67_28
# %bb.331:                              # %for.body116.us.3
                                        #   in Loop: Header=BB67_26 Depth=1
	xorl	%esi, %esi
	movq	3624(%rsp), %rdi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	callq	memset
	movb	3623(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB67_332
	jmp	.LBB67_28
.LBB67_332:                             # %for.body116.us.4
                                        #   in Loop: Header=BB67_26 Depth=1
	xorl	%esi, %esi
	movq	3608(%rsp), %rdi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	callq	memset
	movb	3607(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB67_28
# %bb.333:                              # %for.body116.us.5
                                        #   in Loop: Header=BB67_26 Depth=1
	xorl	%esi, %esi
	movq	3488(%rsp), %rdi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	callq	memset
	jmp	.LBB67_28
.LBB67_334:                             # %for.body1147.2
                                        #   in Loop: Header=BB67_37 Depth=3
	movq	4088(%rsp), %rax        # 8-byte Reload
	movq	3328(%rsp), %rcx        # 8-byte Reload
	movb	38224(%rax,%rcx), %dl
	movl	$15275, 4164(%rsp)      # imm = 0x3BAB
	movzbl	%dl, %esi
	movw	%si, %di
	movw	3346(%rsp), %r8w        # 2-byte Reload
	addw	%di, %r8w
	movb	3783(%rsp), %dl         # 1-byte Reload
	testb	$1, %dl
	movw	3340(%rsp), %di         # 2-byte Reload
	movw	3342(%rsp), %r9w        # 2-byte Reload
	movw	3344(%rsp), %r10w       # 2-byte Reload
	movw	%r8w, %r11w
	movw	%r8w, 42(%rsp)          # 2-byte Spill
	movw	%di, 3326(%rsp)         # 2-byte Spill
	movw	%r9w, 3324(%rsp)        # 2-byte Spill
	movw	%r10w, 3322(%rsp)       # 2-byte Spill
	movw	%r11w, 3338(%rsp)       # 2-byte Spill
	jne	.LBB67_38
# %bb.335:                              # %for.body1147.3
                                        #   in Loop: Header=BB67_37 Depth=3
	movq	4088(%rsp), %rax        # 8-byte Reload
	movq	3328(%rsp), %rcx        # 8-byte Reload
	movb	38482(%rax,%rcx), %dl
	movl	$15279, 4164(%rsp)      # imm = 0x3BAF
	movzbl	%dl, %esi
	movw	%si, %di
	movw	3344(%rsp), %r8w        # 2-byte Reload
	addw	%di, %r8w
	movb	3767(%rsp), %dl         # 1-byte Reload
	testb	$1, %dl
	movw	3340(%rsp), %di         # 2-byte Reload
	movw	3342(%rsp), %r9w        # 2-byte Reload
	movw	%r8w, %r10w
	movw	42(%rsp), %r11w         # 2-byte Reload
	movw	%r8w, 40(%rsp)          # 2-byte Spill
	movw	%di, 3326(%rsp)         # 2-byte Spill
	movw	%r9w, 3324(%rsp)        # 2-byte Spill
	movw	%r10w, 3322(%rsp)       # 2-byte Spill
	movw	%r11w, 3338(%rsp)       # 2-byte Spill
	jne	.LBB67_336
	jmp	.LBB67_38
.LBB67_336:                             # %for.body1147.4
                                        #   in Loop: Header=BB67_37 Depth=3
	movq	4088(%rsp), %rax        # 8-byte Reload
	movq	3328(%rsp), %rcx        # 8-byte Reload
	movb	38740(%rax,%rcx), %dl
	movl	$15283, 4164(%rsp)      # imm = 0x3BB3
	movzbl	%dl, %esi
	movw	%si, %di
	movw	3342(%rsp), %r8w        # 2-byte Reload
	addw	%di, %r8w
	movb	3743(%rsp), %dl         # 1-byte Reload
	testb	$1, %dl
	movw	3340(%rsp), %di         # 2-byte Reload
	movw	%r8w, %r9w
	movw	40(%rsp), %r10w         # 2-byte Reload
	movw	42(%rsp), %r11w         # 2-byte Reload
	movw	%r8w, 38(%rsp)          # 2-byte Spill
	movw	%di, 3326(%rsp)         # 2-byte Spill
	movw	%r9w, 3324(%rsp)        # 2-byte Spill
	movw	%r10w, 3322(%rsp)       # 2-byte Spill
	movw	%r11w, 3338(%rsp)       # 2-byte Spill
	jne	.LBB67_38
# %bb.337:                              # %for.body1147.5
                                        #   in Loop: Header=BB67_37 Depth=3
	movq	4088(%rsp), %rax        # 8-byte Reload
	movq	3328(%rsp), %rcx        # 8-byte Reload
	movb	38998(%rax,%rcx), %dl
	movl	$15286, 4164(%rsp)      # imm = 0x3BB6
	movzbl	%dl, %esi
	movw	%si, %di
	movw	3340(%rsp), %r8w        # 2-byte Reload
	addw	%di, %r8w
	movw	38(%rsp), %di           # 2-byte Reload
	movw	40(%rsp), %r9w          # 2-byte Reload
	movw	42(%rsp), %r10w         # 2-byte Reload
	movw	%r8w, 3326(%rsp)        # 2-byte Spill
	movw	%di, 3324(%rsp)         # 2-byte Spill
	movw	%r9w, 3322(%rsp)        # 2-byte Spill
	movw	%r10w, 3338(%rsp)       # 2-byte Spill
	jmp	.LBB67_38
.LBB67_338:                             # %for.body1169.2
                                        #   in Loop: Header=BB67_33 Depth=2
	movl	$2, %eax
	movq	3712(%rsp), %rcx        # 8-byte Reload
	movw	(%rcx), %dx
	movl	$15291, 4164(%rsp)      # imm = 0x3BBB
	movw	3312(%rsp), %si         # 2-byte Reload
	cmpw	%dx, %si
	movw	%dx, %di
	cmovbw	%si, %di
	movzwl	%di, %r8d
	cmpw	%dx, %si
	movl	3308(%rsp), %r9d        # 4-byte Reload
	cmoval	%eax, %r9d
	movb	3711(%rsp), %r10b       # 1-byte Reload
	testb	$1, %r10b
	movl	%r9d, %eax
	movl	%r9d, 32(%rsp)          # 4-byte Spill
	movw	%di, 30(%rsp)           # 2-byte Spill
	movl	%r8d, 3304(%rsp)        # 4-byte Spill
	movl	%eax, 3300(%rsp)        # 4-byte Spill
	jne	.LBB67_41
# %bb.339:                              # %for.body1169.3
                                        #   in Loop: Header=BB67_33 Depth=2
	movl	$3, %eax
	movq	3696(%rsp), %rcx        # 8-byte Reload
	movw	(%rcx), %dx
	movl	$15296, 4164(%rsp)      # imm = 0x3BC0
	movw	30(%rsp), %si           # 2-byte Reload
	cmpw	%dx, %si
	movw	%dx, %di
	cmovbw	%si, %di
	movzwl	%di, %r8d
	cmpw	%dx, %si
	movl	32(%rsp), %r9d          # 4-byte Reload
	cmoval	%eax, %r9d
	movb	3695(%rsp), %r10b       # 1-byte Reload
	testb	$1, %r10b
	movl	%r9d, %eax
	movl	%r9d, 24(%rsp)          # 4-byte Spill
	movw	%di, 22(%rsp)           # 2-byte Spill
	movl	%r8d, 3304(%rsp)        # 4-byte Spill
	movl	%eax, 3300(%rsp)        # 4-byte Spill
	jne	.LBB67_340
	jmp	.LBB67_41
.LBB67_340:                             # %for.body1169.4
                                        #   in Loop: Header=BB67_33 Depth=2
	movl	$4, %eax
	movq	3680(%rsp), %rcx        # 8-byte Reload
	movw	(%rcx), %dx
	movl	$15301, 4164(%rsp)      # imm = 0x3BC5
	movw	22(%rsp), %si           # 2-byte Reload
	cmpw	%dx, %si
	movw	%dx, %di
	cmovbw	%si, %di
	movzwl	%di, %r8d
	cmpw	%dx, %si
	movl	24(%rsp), %r9d          # 4-byte Reload
	cmoval	%eax, %r9d
	movb	3671(%rsp), %r10b       # 1-byte Reload
	testb	$1, %r10b
	movl	%r9d, %eax
	movl	%r9d, 16(%rsp)          # 4-byte Spill
	movw	%di, 14(%rsp)           # 2-byte Spill
	movl	%r8d, 3304(%rsp)        # 4-byte Spill
	movl	%eax, 3300(%rsp)        # 4-byte Spill
	jne	.LBB67_41
# %bb.341:                              # %for.body1169.5
                                        #   in Loop: Header=BB67_33 Depth=2
	movl	$5, %eax
	movq	3672(%rsp), %rcx        # 8-byte Reload
	movw	(%rcx), %dx
	movl	$15312, 4164(%rsp)      # imm = 0x3BD0
	movw	14(%rsp), %si           # 2-byte Reload
	cmpw	%dx, %si
	movw	%dx, %di
	cmovbw	%si, %di
	movzwl	%di, %r8d
	cmpw	%dx, %si
	movl	16(%rsp), %r9d          # 4-byte Reload
	cmoval	%eax, %r9d
	movl	%r8d, 3304(%rsp)        # 4-byte Spill
	movl	%r9d, 3300(%rsp)        # 4-byte Spill
	jmp	.LBB67_41
.Lfunc_end67:
	.size	sendMTFValues, .Lfunc_end67-sendMTFValues
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4               # -- Begin function BZ2_decompress
.LCPI68_0:
	.byte	0                       # 0x0
	.byte	1                       # 0x1
	.byte	2                       # 0x2
	.byte	3                       # 0x3
	.byte	4                       # 0x4
	.byte	5                       # 0x5
	.byte	6                       # 0x6
	.byte	7                       # 0x7
	.byte	8                       # 0x8
	.byte	9                       # 0x9
	.byte	10                      # 0xa
	.byte	11                      # 0xb
	.byte	12                      # 0xc
	.byte	13                      # 0xd
	.byte	14                      # 0xe
	.byte	15                      # 0xf
.LCPI68_1:
	.zero	16,16
.LCPI68_2:
	.zero	16,32
.LCPI68_3:
	.zero	16,48
.LCPI68_4:
	.zero	16,64
.LCPI68_5:
	.zero	16,80
.LCPI68_6:
	.zero	16,96
.LCPI68_7:
	.zero	16,112
.LCPI68_8:
	.zero	16,128
.LCPI68_9:
	.long	32                      # 0x20
	.long	32                      # 0x20
	.long	32                      # 0x20
	.long	32                      # 0x20
	.text
	.globl	BZ2_decompress
	.p2align	4, 0x90
	.type	BZ2_decompress,@function
BZ2_decompress:                         # @BZ2_decompress
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$38600, %rsp            # imm = 0x96C8
	.cfi_def_cfa_offset 38656
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	$9999, 38596(%rsp)      # imm = 0x270F
	movq	%rdi, %rax
	movq	(%rdi), %rcx
	movl	$15314, 38596(%rsp)     # imm = 0x3BD2
	movq	%rdi, %rdx
	addq	$8, %rdx
	movl	8(%rdi), %esi
	movl	$15344, 38596(%rsp)     # imm = 0x3BF0
	movq	%rdi, %r8
	addq	$64036, %r8             # imm = 0xFA24
	cmpl	$10, %esi
	movq	%rdi, 38576(%rsp)       # 8-byte Spill
	movq	%rax, 38568(%rsp)       # 8-byte Spill
	movq	%rcx, 38560(%rsp)       # 8-byte Spill
	movq	%rdx, 38552(%rsp)       # 8-byte Spill
	movl	%esi, 38548(%rsp)       # 4-byte Spill
	movq	%r8, 38536(%rsp)        # 8-byte Spill
	jne	.LBB68_2
# %bb.1:                                # %if.end.thread
	xorl	%esi, %esi
	movl	$108, %eax
	movl	%eax, %edx
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$64040, %rcx            # imm = 0xFA28
	movq	38576(%rsp), %rdi       # 8-byte Reload
	addq	$64044, %rdi            # imm = 0xFA2C
	movq	38576(%rsp), %r8        # 8-byte Reload
	addq	$64048, %r8             # imm = 0xFA30
	movq	38576(%rsp), %r9        # 8-byte Reload
	addq	$64052, %r9             # imm = 0xFA34
	movq	38576(%rsp), %r10       # 8-byte Reload
	addq	$64056, %r10            # imm = 0xFA38
	movq	38576(%rsp), %r11       # 8-byte Reload
	addq	$64060, %r11            # imm = 0xFA3C
	movq	38576(%rsp), %rbx       # 8-byte Reload
	addq	$64064, %rbx            # imm = 0xFA40
	movq	38576(%rsp), %r14       # 8-byte Reload
	addq	$64068, %r14            # imm = 0xFA44
	movq	38576(%rsp), %r15       # 8-byte Reload
	addq	$64072, %r15            # imm = 0xFA48
	movq	38576(%rsp), %r12       # 8-byte Reload
	addq	$64076, %r12            # imm = 0xFA4C
	movq	38576(%rsp), %r13       # 8-byte Reload
	addq	$64080, %r13            # imm = 0xFA50
	movq	38576(%rsp), %rbp       # 8-byte Reload
	addq	$64084, %rbp            # imm = 0xFA54
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$64088, %rax            # imm = 0xFA58
	movq	%rax, 38528(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$64092, %rax            # imm = 0xFA5C
	movq	%rax, 38520(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$64096, %rax            # imm = 0xFA60
	movq	%rax, 38512(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$64100, %rax            # imm = 0xFA64
	movq	%rax, 38504(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$64104, %rax            # imm = 0xFA68
	movq	%rax, 38496(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$64108, %rax            # imm = 0xFA6C
	movq	%rax, 38488(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$64112, %rax            # imm = 0xFA70
	movq	%rax, 38480(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$64116, %rax            # imm = 0xFA74
	movq	%rax, 38472(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$64120, %rax            # imm = 0xFA78
	movq	%rax, 38464(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$64128, %rax            # imm = 0xFA80
	movq	%rax, 38456(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$64136, %rax            # imm = 0xFA88
	movq	%rax, 38448(%rsp)       # 8-byte Spill
	movq	38536(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 38440(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%r13, 38432(%rsp)       # 8-byte Spill
	movq	%r12, 38424(%rsp)       # 8-byte Spill
	movq	%rcx, 38416(%rsp)       # 8-byte Spill
	movq	%rbp, 38408(%rsp)       # 8-byte Spill
	movq	%r8, 38400(%rsp)        # 8-byte Spill
	movq	%r9, 38392(%rsp)        # 8-byte Spill
	movq	%r10, 38384(%rsp)       # 8-byte Spill
	movq	%r11, 38376(%rsp)       # 8-byte Spill
	movq	%rbx, 38368(%rsp)       # 8-byte Spill
	movq	%r14, 38360(%rsp)       # 8-byte Spill
	movq	%r15, 38352(%rsp)       # 8-byte Spill
	callq	memset
	movq	38552(%rsp), %rax       # 8-byte Reload
	movl	$10, (%rax)
	movl	$15346, 38596(%rsp)     # imm = 0x3BF2
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$36, %rcx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movl	36(%rdx), %esi
	movl	$15349, 38596(%rsp)     # imm = 0x3BF5
	cmpl	$7, %esi
	movq	%rcx, 38344(%rsp)       # 8-byte Spill
	movl	%esi, 38340(%rsp)       # 4-byte Spill
	jg	.LBB68_34
	jmp	.LBB68_35
.LBB68_2:                               # %if.end
	movq	38536(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15351, 38596(%rsp)     # imm = 0x3BF7
	movq	38576(%rsp), %rdx       # 8-byte Reload
	addq	$64040, %rdx            # imm = 0xFA28
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	64040(%rsi), %edi
	movl	$15353, 38596(%rsp)     # imm = 0x3BF9
	addq	$64044, %rsi            # imm = 0xFA2C
	movq	38576(%rsp), %r8        # 8-byte Reload
	movl	64044(%r8), %r9d
	movl	$15355, 38596(%rsp)     # imm = 0x3BFB
	addq	$64048, %r8             # imm = 0xFA30
	movq	38576(%rsp), %r10       # 8-byte Reload
	movl	64048(%r10), %r11d
	movl	$15357, 38596(%rsp)     # imm = 0x3BFD
	addq	$64052, %r10            # imm = 0xFA34
	movq	38576(%rsp), %rbx       # 8-byte Reload
	movl	64052(%rbx), %ebp
	movl	$15359, 38596(%rsp)     # imm = 0x3BFF
	addq	$64056, %rbx            # imm = 0xFA38
	movq	38576(%rsp), %r14       # 8-byte Reload
	movl	64056(%r14), %r15d
	movl	$15361, 38596(%rsp)     # imm = 0x3C01
	addq	$64060, %r14            # imm = 0xFA3C
	movq	38576(%rsp), %r12       # 8-byte Reload
	movl	64060(%r12), %r13d
	movl	$15363, 38596(%rsp)     # imm = 0x3C03
	addq	$64064, %r12            # imm = 0xFA40
	movq	38576(%rsp), %rax       # 8-byte Reload
	movl	64064(%rax), %eax
	movl	$15365, 38596(%rsp)     # imm = 0x3C05
	movq	%rdx, 38328(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rdx       # 8-byte Reload
	addq	$64068, %rdx            # imm = 0xFA44
	movq	%rdx, 38320(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movl	64068(%rdx), %edx
	movl	$15367, 38596(%rsp)     # imm = 0x3C07
	movq	%rsi, 38312(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$64072, %rsi            # imm = 0xFA48
	movq	%rsi, 38304(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	64072(%rsi), %esi
	movl	$15369, 38596(%rsp)     # imm = 0x3C09
	movl	%esi, 38300(%rsp)       # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$64076, %rsi            # imm = 0xFA4C
	movq	%rsi, 38288(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	64076(%rsi), %esi
	movl	$15371, 38596(%rsp)     # imm = 0x3C0B
	movl	%esi, 38284(%rsp)       # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$64080, %rsi            # imm = 0xFA50
	movq	%rsi, 38272(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	64080(%rsi), %esi
	movl	$15373, 38596(%rsp)     # imm = 0x3C0D
	movl	%esi, 38268(%rsp)       # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$64084, %rsi            # imm = 0xFA54
	movq	%rsi, 38256(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	64084(%rsi), %esi
	movl	$15375, 38596(%rsp)     # imm = 0x3C0F
	movl	%esi, 38252(%rsp)       # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$64088, %rsi            # imm = 0xFA58
	movq	%rsi, 38240(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	64088(%rsi), %esi
	movl	$15377, 38596(%rsp)     # imm = 0x3C11
	movl	%esi, 38236(%rsp)       # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$64092, %rsi            # imm = 0xFA5C
	movq	%rsi, 38224(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	64092(%rsi), %esi
	movl	$15379, 38596(%rsp)     # imm = 0x3C13
	movl	%esi, 38220(%rsp)       # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$64096, %rsi            # imm = 0xFA60
	movq	%rsi, 38208(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	64096(%rsi), %esi
	movl	$15381, 38596(%rsp)     # imm = 0x3C15
	movl	%esi, 38204(%rsp)       # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$64100, %rsi            # imm = 0xFA64
	movq	%rsi, 38192(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	64100(%rsi), %esi
	movl	$15383, 38596(%rsp)     # imm = 0x3C17
	movl	%esi, 38188(%rsp)       # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$64104, %rsi            # imm = 0xFA68
	movq	%rsi, 38176(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	64104(%rsi), %esi
	movl	$15385, 38596(%rsp)     # imm = 0x3C19
	movl	%esi, 38172(%rsp)       # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$64108, %rsi            # imm = 0xFA6C
	movq	%rsi, 38160(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	64108(%rsi), %esi
	movl	$15387, 38596(%rsp)     # imm = 0x3C1B
	movl	%esi, 38156(%rsp)       # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$64112, %rsi            # imm = 0xFA70
	movq	%rsi, 38144(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	64112(%rsi), %esi
	movl	$15389, 38596(%rsp)     # imm = 0x3C1D
	movl	%esi, 38140(%rsp)       # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$64116, %rsi            # imm = 0xFA74
	movq	%rsi, 38128(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	64116(%rsi), %esi
	movl	$15391, 38596(%rsp)     # imm = 0x3C1F
	movl	%esi, 38124(%rsp)       # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$64120, %rsi            # imm = 0xFA78
	movq	%rsi, 38112(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movq	64120(%rsi), %rsi
	movl	$15393, 38596(%rsp)     # imm = 0x3C21
	movq	%rsi, 38104(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$64128, %rsi            # imm = 0xFA80
	movq	%rsi, 38096(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movq	64128(%rsi), %rsi
	movl	$15395, 38596(%rsp)     # imm = 0x3C23
	movq	%rsi, 38088(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$64136, %rsi            # imm = 0xFA88
	movq	%rsi, 38080(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movq	64136(%rsi), %rsi
	movl	$15402, 38596(%rsp)     # imm = 0x3C2A
	movl	%eax, 38076(%rsp)       # 4-byte Spill
	movl	38548(%rsp), %eax       # 4-byte Reload
	addl	$-11, %eax
	movq	%rsi, 38064(%rsp)       # 8-byte Spill
	movl	%eax, %esi
	subl	$39, %eax
	movl	%r13d, 38060(%rsp)      # 4-byte Spill
	movl	%ecx, 38056(%rsp)       # 4-byte Spill
	movl	%edx, 38052(%rsp)       # 4-byte Spill
	movq	%rsi, 38040(%rsp)       # 8-byte Spill
	movl	%edi, 38036(%rsp)       # 4-byte Spill
	movq	%r8, 38024(%rsp)        # 8-byte Spill
	movl	%r9d, 38020(%rsp)       # 4-byte Spill
	movq	%r10, 38008(%rsp)       # 8-byte Spill
	movl	%r11d, 38004(%rsp)      # 4-byte Spill
	movq	%rbx, 37992(%rsp)       # 8-byte Spill
	movl	%ebp, 37988(%rsp)       # 4-byte Spill
	movq	%r14, 37976(%rsp)       # 8-byte Spill
	movl	%r15d, 37972(%rsp)      # 4-byte Spill
	movq	%r12, 37960(%rsp)       # 8-byte Spill
	movl	%eax, 37956(%rsp)       # 4-byte Spill
	ja	.LBB68_538
# %bb.549:                              # %if.end
	movq	38040(%rsp), %rax       # 8-byte Reload
	movq	.LJTI68_0(,%rax,8), %rcx
	movl	38036(%rsp), %edx       # 4-byte Reload
	movl	38020(%rsp), %esi       # 4-byte Reload
	movl	38004(%rsp), %edi       # 4-byte Reload
	movl	37988(%rsp), %r8d       # 4-byte Reload
	movl	37972(%rsp), %r9d       # 4-byte Reload
	movl	38060(%rsp), %r10d      # 4-byte Reload
	movl	38076(%rsp), %r11d      # 4-byte Reload
	movl	38052(%rsp), %ebx       # 4-byte Reload
	movl	38300(%rsp), %ebp       # 4-byte Reload
	movl	38284(%rsp), %r14d      # 4-byte Reload
	movl	38268(%rsp), %r15d      # 4-byte Reload
	movl	38252(%rsp), %r12d      # 4-byte Reload
	movl	38236(%rsp), %r13d      # 4-byte Reload
	movl	38220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37952(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37948(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37944(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37940(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37936(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37932(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 37920(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37912(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37904(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37896(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37888(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37880(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37872(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37864(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37856(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37848(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37840(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37832(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37824(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37816(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37808(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37800(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37792(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37784(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37776(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37768(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37760(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37752(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37744(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37736(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37728(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37720(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 37716(%rsp)       # 4-byte Spill
	movl	38056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37712(%rsp)       # 4-byte Spill
	movl	38020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37708(%rsp)       # 4-byte Spill
	movl	38004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37704(%rsp)       # 4-byte Spill
	movl	37988(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37700(%rsp)       # 4-byte Spill
	movl	37972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37696(%rsp)       # 4-byte Spill
	movl	38060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37692(%rsp)       # 4-byte Spill
	movl	38076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37688(%rsp)       # 4-byte Spill
	movl	38052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37684(%rsp)       # 4-byte Spill
	movl	38300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37680(%rsp)       # 4-byte Spill
	movl	38284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37676(%rsp)       # 4-byte Spill
	movl	38268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37672(%rsp)       # 4-byte Spill
	movl	38252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37668(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37664(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37660(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37656(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37652(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37648(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37644(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37640(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 37632(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37624(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37616(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37608(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37600(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37592(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37584(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37576(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37568(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37560(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37552(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37544(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37536(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37528(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37520(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37512(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37504(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37496(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37488(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37480(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37472(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37464(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37456(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37448(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37440(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37432(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 37428(%rsp)       # 4-byte Spill
	movl	38036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37424(%rsp)       # 4-byte Spill
	movl	38056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37420(%rsp)       # 4-byte Spill
	movl	38020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37416(%rsp)       # 4-byte Spill
	movl	37988(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37412(%rsp)       # 4-byte Spill
	movl	37972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37408(%rsp)       # 4-byte Spill
	movl	38060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37404(%rsp)       # 4-byte Spill
	movl	38076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37400(%rsp)       # 4-byte Spill
	movl	38052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37396(%rsp)       # 4-byte Spill
	movl	38300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37392(%rsp)       # 4-byte Spill
	movl	38284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37388(%rsp)       # 4-byte Spill
	movl	38268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37384(%rsp)       # 4-byte Spill
	movl	38252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37380(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37376(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37372(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37368(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37364(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37360(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37356(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37352(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 37344(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37336(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37328(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37320(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37312(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37304(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37296(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37288(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37280(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37272(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37264(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37256(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37248(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37240(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37232(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37224(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37216(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37208(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37200(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37192(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37184(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37176(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37168(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37160(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37152(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37144(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 37140(%rsp)       # 4-byte Spill
	movl	38004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37136(%rsp)       # 4-byte Spill
	movl	38036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37132(%rsp)       # 4-byte Spill
	movl	38056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37128(%rsp)       # 4-byte Spill
	movl	38020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37124(%rsp)       # 4-byte Spill
	movl	38060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37120(%rsp)       # 4-byte Spill
	movl	38076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37116(%rsp)       # 4-byte Spill
	movl	38052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37112(%rsp)       # 4-byte Spill
	movl	38300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37108(%rsp)       # 4-byte Spill
	movl	38284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37104(%rsp)       # 4-byte Spill
	movl	38268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37100(%rsp)       # 4-byte Spill
	movl	38252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37096(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37092(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37088(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37084(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37080(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37076(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37072(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37068(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 37056(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37048(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37040(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37032(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37024(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37016(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37008(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37000(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36992(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36984(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36976(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36968(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36960(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36952(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36944(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36936(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36928(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36920(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36912(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36904(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36896(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36888(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36880(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36872(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36864(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36856(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 36852(%rsp)       # 4-byte Spill
	movl	37972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36848(%rsp)       # 4-byte Spill
	movl	37988(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36844(%rsp)       # 4-byte Spill
	movl	38004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36840(%rsp)       # 4-byte Spill
	movl	38036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36836(%rsp)       # 4-byte Spill
	movl	38056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36832(%rsp)       # 4-byte Spill
	movl	38060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36828(%rsp)       # 4-byte Spill
	movl	38076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36824(%rsp)       # 4-byte Spill
	movl	38052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36820(%rsp)       # 4-byte Spill
	movl	38300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36816(%rsp)       # 4-byte Spill
	movl	38284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36812(%rsp)       # 4-byte Spill
	movl	38268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36808(%rsp)       # 4-byte Spill
	movl	38252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36804(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36800(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36796(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36792(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36788(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36784(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36780(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 36768(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36760(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36752(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36744(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36736(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36728(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36720(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36712(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36704(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36696(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36688(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36680(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36672(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36664(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36656(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36648(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36640(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36632(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36624(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36616(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36608(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36600(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36592(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36584(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36576(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36568(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 36564(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36560(%rsp)       # 4-byte Spill
	movl	37972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36556(%rsp)       # 4-byte Spill
	movl	37988(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36552(%rsp)       # 4-byte Spill
	movl	38004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36548(%rsp)       # 4-byte Spill
	movl	38020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36544(%rsp)       # 4-byte Spill
	movl	38036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36540(%rsp)       # 4-byte Spill
	movl	38056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36536(%rsp)       # 4-byte Spill
	movl	38060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36532(%rsp)       # 4-byte Spill
	movl	38076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36528(%rsp)       # 4-byte Spill
	movl	38052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36524(%rsp)       # 4-byte Spill
	movl	38300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36520(%rsp)       # 4-byte Spill
	movl	38284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36516(%rsp)       # 4-byte Spill
	movl	38268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36512(%rsp)       # 4-byte Spill
	movl	38252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36508(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36504(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36500(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36496(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36492(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36488(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36484(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 36472(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36464(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36456(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36448(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36440(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36432(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36424(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36416(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36408(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36400(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36392(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36384(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36376(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36368(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36360(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36352(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36344(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36336(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36328(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36320(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36312(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36304(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36296(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36288(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36280(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36272(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 36268(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36264(%rsp)       # 4-byte Spill
	movl	37972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36260(%rsp)       # 4-byte Spill
	movl	37988(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36256(%rsp)       # 4-byte Spill
	movl	38004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36252(%rsp)       # 4-byte Spill
	movl	38020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36248(%rsp)       # 4-byte Spill
	movl	38036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36244(%rsp)       # 4-byte Spill
	movl	38056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36240(%rsp)       # 4-byte Spill
	movl	38300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36236(%rsp)       # 4-byte Spill
	movl	38252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36232(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36228(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36224(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36220(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 36208(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36200(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36192(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36184(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36176(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36168(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36160(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36152(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36144(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36136(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36128(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36120(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36112(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36104(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36096(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36088(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36080(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36072(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36064(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36056(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36048(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36040(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36032(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36024(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36016(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 36008(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 36004(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36000(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35996(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35992(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35988(%rsp)       # 4-byte Spill
	movl	38268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35984(%rsp)       # 4-byte Spill
	movl	38284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35980(%rsp)       # 4-byte Spill
	movl	38052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35976(%rsp)       # 4-byte Spill
	movl	38076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35972(%rsp)       # 4-byte Spill
	movl	38060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35968(%rsp)       # 4-byte Spill
	movl	37972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35964(%rsp)       # 4-byte Spill
	movl	37988(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35960(%rsp)       # 4-byte Spill
	movl	38004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35956(%rsp)       # 4-byte Spill
	movl	38020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35952(%rsp)       # 4-byte Spill
	movl	38036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35948(%rsp)       # 4-byte Spill
	movl	38056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35944(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 35936(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35928(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35920(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35912(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35904(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35896(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35888(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35880(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35872(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35864(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35856(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35848(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35840(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35832(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35824(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35816(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35808(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35800(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35792(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35784(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35776(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35768(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35760(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35752(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35744(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35736(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 35732(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35728(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35724(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35720(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35716(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35712(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35708(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35704(%rsp)       # 4-byte Spill
	movl	38252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35700(%rsp)       # 4-byte Spill
	movl	38268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35696(%rsp)       # 4-byte Spill
	movl	38284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35692(%rsp)       # 4-byte Spill
	movl	38300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35688(%rsp)       # 4-byte Spill
	movl	38052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35684(%rsp)       # 4-byte Spill
	movl	38076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35680(%rsp)       # 4-byte Spill
	movl	38060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35676(%rsp)       # 4-byte Spill
	movl	37972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35672(%rsp)       # 4-byte Spill
	movl	37988(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35668(%rsp)       # 4-byte Spill
	movl	38004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35664(%rsp)       # 4-byte Spill
	movl	38020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35660(%rsp)       # 4-byte Spill
	movl	38036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35656(%rsp)       # 4-byte Spill
	movl	38056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35652(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 35640(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35632(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35624(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35616(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35608(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35600(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35592(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35584(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35576(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35568(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35560(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35552(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35544(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35536(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35528(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35520(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35512(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35504(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35496(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35488(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35480(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35472(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35464(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35456(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35448(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 35440(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 35436(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35432(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35428(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35424(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35420(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35416(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35412(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35408(%rsp)       # 4-byte Spill
	movl	38252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35404(%rsp)       # 4-byte Spill
	movl	38268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35400(%rsp)       # 4-byte Spill
	movl	38284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35396(%rsp)       # 4-byte Spill
	movl	38300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35392(%rsp)       # 4-byte Spill
	movl	38052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35388(%rsp)       # 4-byte Spill
	movl	38076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35384(%rsp)       # 4-byte Spill
	movl	38060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35380(%rsp)       # 4-byte Spill
	movl	37972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35376(%rsp)       # 4-byte Spill
	movl	37988(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35372(%rsp)       # 4-byte Spill
	movl	38004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35368(%rsp)       # 4-byte Spill
	movl	38020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35364(%rsp)       # 4-byte Spill
	movl	38036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35360(%rsp)       # 4-byte Spill
	movl	38056(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 35352(%rsp)       # 8-byte Spill
	movq	37920(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 35348(%rsp)       # 4-byte Spill
	movl	%r13d, 35344(%rsp)      # 4-byte Spill
	movl	%edx, 35340(%rsp)       # 4-byte Spill
	movl	%esi, 35336(%rsp)       # 4-byte Spill
	movl	%edi, 35332(%rsp)       # 4-byte Spill
	movl	%r8d, 35328(%rsp)       # 4-byte Spill
	movl	%r9d, 35324(%rsp)       # 4-byte Spill
	movl	%r10d, 35320(%rsp)      # 4-byte Spill
	movl	%r11d, 35316(%rsp)      # 4-byte Spill
	movl	%ebx, 35312(%rsp)       # 4-byte Spill
	movl	%ebp, 35308(%rsp)       # 4-byte Spill
	movl	%r14d, 35304(%rsp)      # 4-byte Spill
	movl	%r15d, 35300(%rsp)      # 4-byte Spill
	movl	%r12d, 35296(%rsp)      # 4-byte Spill
	jmpq	*%rcx
.LBB68_3:                               # %if.end.sw.bb275_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movl	38056(%rsp), %ecx       # 4-byte Reload
	movl	38036(%rsp), %edx       # 4-byte Reload
	movl	38020(%rsp), %esi       # 4-byte Reload
	movl	38004(%rsp), %edi       # 4-byte Reload
	movl	37988(%rsp), %r8d       # 4-byte Reload
	movl	37972(%rsp), %r9d       # 4-byte Reload
	movl	38060(%rsp), %r10d      # 4-byte Reload
	movl	38076(%rsp), %r11d      # 4-byte Reload
	movl	38052(%rsp), %ebx       # 4-byte Reload
	movl	38300(%rsp), %ebp       # 4-byte Reload
	movl	38284(%rsp), %r14d      # 4-byte Reload
	movl	38268(%rsp), %r15d      # 4-byte Reload
	movl	38252(%rsp), %r12d      # 4-byte Reload
	movl	38236(%rsp), %r13d      # 4-byte Reload
	movl	%ecx, 35292(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 35288(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 35284(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 35280(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 35276(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 35272(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 35268(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 35256(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35248(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35240(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35232(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35224(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35216(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35208(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35200(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35192(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35184(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35176(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35168(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35160(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35152(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35144(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35136(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35128(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35120(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35112(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35104(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35096(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35088(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35080(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35072(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35064(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35056(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35048(%rsp)       # 8-byte Spill
	movq	35256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 35040(%rsp)       # 8-byte Spill
	movl	%ecx, 35036(%rsp)       # 4-byte Spill
	movl	%edx, 35032(%rsp)       # 4-byte Spill
	movl	%esi, 35028(%rsp)       # 4-byte Spill
	movl	%edi, 35024(%rsp)       # 4-byte Spill
	movl	%r8d, 35020(%rsp)       # 4-byte Spill
	movl	%r9d, 35016(%rsp)       # 4-byte Spill
	movl	%r10d, 35012(%rsp)      # 4-byte Spill
	movl	%r11d, 35008(%rsp)      # 4-byte Spill
	movl	%ebx, 35004(%rsp)       # 4-byte Spill
	movl	%ebp, 35000(%rsp)       # 4-byte Spill
	movl	%r14d, 34996(%rsp)      # 4-byte Spill
	movl	%r15d, 34992(%rsp)      # 4-byte Spill
	movl	%r12d, 34988(%rsp)      # 4-byte Spill
	movl	%r13d, 34984(%rsp)      # 4-byte Spill
	jmp	.LBB68_68
.LBB68_4:                               # %if.end.sw.bb629_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movl	38056(%rsp), %ecx       # 4-byte Reload
	movl	38036(%rsp), %edx       # 4-byte Reload
	movl	38020(%rsp), %esi       # 4-byte Reload
	movl	38004(%rsp), %edi       # 4-byte Reload
	movl	37988(%rsp), %r8d       # 4-byte Reload
	movl	37972(%rsp), %r9d       # 4-byte Reload
	movl	38060(%rsp), %r10d      # 4-byte Reload
	movl	38076(%rsp), %r11d      # 4-byte Reload
	movl	38052(%rsp), %ebx       # 4-byte Reload
	movl	38300(%rsp), %ebp       # 4-byte Reload
	movl	38284(%rsp), %r14d      # 4-byte Reload
	movl	38268(%rsp), %r15d      # 4-byte Reload
	movl	38252(%rsp), %r12d      # 4-byte Reload
	movl	38236(%rsp), %r13d      # 4-byte Reload
	movl	%ecx, 34980(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34976(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34972(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34968(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34964(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34960(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34956(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 34944(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34936(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34928(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34920(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34912(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34904(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34896(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34888(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34880(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34872(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34864(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34856(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34848(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34840(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34832(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34824(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34816(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34808(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34800(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34792(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34784(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34776(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34768(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34760(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34752(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34744(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34736(%rsp)       # 8-byte Spill
	movq	34944(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34728(%rsp)       # 8-byte Spill
	movl	%ecx, 34724(%rsp)       # 4-byte Spill
	movl	%edx, 34720(%rsp)       # 4-byte Spill
	movl	%esi, 34716(%rsp)       # 4-byte Spill
	movl	%edi, 34712(%rsp)       # 4-byte Spill
	movl	%r8d, 34708(%rsp)       # 4-byte Spill
	movl	%r9d, 34704(%rsp)       # 4-byte Spill
	movl	%r10d, 34700(%rsp)      # 4-byte Spill
	movl	%r11d, 34696(%rsp)      # 4-byte Spill
	movl	%ebx, 34692(%rsp)       # 4-byte Spill
	movl	%ebp, 34688(%rsp)       # 4-byte Spill
	movl	%r14d, 34684(%rsp)      # 4-byte Spill
	movl	%r15d, 34680(%rsp)      # 4-byte Spill
	movl	%r12d, 34676(%rsp)      # 4-byte Spill
	movl	%r13d, 34672(%rsp)      # 4-byte Spill
	jmp	.LBB68_119
.LBB68_5:                               # %if.end.sw.bb3399_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15405, 38596(%rsp)     # imm = 0x3C2D
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34668(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34664(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34660(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34656(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34652(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34648(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34644(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34640(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 34632(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34624(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34616(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34608(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34600(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34592(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34584(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34576(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34568(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34560(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34552(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34544(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34536(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34528(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34520(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34512(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34504(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34496(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34488(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34480(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34472(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34464(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34456(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34448(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34440(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34432(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34424(%rsp)       # 8-byte Spill
	movq	34632(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34416(%rsp)       # 8-byte Spill
	movl	%ecx, 34412(%rsp)       # 4-byte Spill
	movl	%r13d, 34408(%rsp)      # 4-byte Spill
	movl	%esi, 34404(%rsp)       # 4-byte Spill
	movl	%edi, 34400(%rsp)       # 4-byte Spill
	movl	%r8d, 34396(%rsp)       # 4-byte Spill
	movl	%r9d, 34392(%rsp)       # 4-byte Spill
	movl	%r10d, 34388(%rsp)      # 4-byte Spill
	movl	%r11d, 34384(%rsp)      # 4-byte Spill
	movl	%ebx, 34380(%rsp)       # 4-byte Spill
	movl	%ebp, 34376(%rsp)       # 4-byte Spill
	movl	%r14d, 34372(%rsp)      # 4-byte Spill
	movl	%r15d, 34368(%rsp)      # 4-byte Spill
	movl	%r12d, 34364(%rsp)      # 4-byte Spill
	movl	%edx, 34360(%rsp)       # 4-byte Spill
	jmp	.LBB68_530
.LBB68_6:                               # %if.end.sw.bb3342_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15408, 38596(%rsp)     # imm = 0x3C30
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34356(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34352(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34348(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34344(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34340(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34336(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34332(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34328(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 34320(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34312(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34304(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34296(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34288(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34280(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34272(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34264(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34256(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34248(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34240(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34232(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34224(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34216(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34208(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34200(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34192(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34184(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34176(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34168(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34160(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34152(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34144(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34136(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34128(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34120(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34112(%rsp)       # 8-byte Spill
	movq	34320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34104(%rsp)       # 8-byte Spill
	movl	%ecx, 34100(%rsp)       # 4-byte Spill
	movl	%r13d, 34096(%rsp)      # 4-byte Spill
	movl	%esi, 34092(%rsp)       # 4-byte Spill
	movl	%edi, 34088(%rsp)       # 4-byte Spill
	movl	%r8d, 34084(%rsp)       # 4-byte Spill
	movl	%r9d, 34080(%rsp)       # 4-byte Spill
	movl	%r10d, 34076(%rsp)      # 4-byte Spill
	movl	%r11d, 34072(%rsp)      # 4-byte Spill
	movl	%ebx, 34068(%rsp)       # 4-byte Spill
	movl	%ebp, 34064(%rsp)       # 4-byte Spill
	movl	%r14d, 34060(%rsp)      # 4-byte Spill
	movl	%r15d, 34056(%rsp)      # 4-byte Spill
	movl	%r12d, 34052(%rsp)      # 4-byte Spill
	movl	%edx, 34048(%rsp)       # 4-byte Spill
	jmp	.LBB68_522
.LBB68_7:                               # %if.end.sw.bb3285_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15411, 38596(%rsp)     # imm = 0x3C33
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34044(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34040(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34036(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34032(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34028(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34024(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34020(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 34016(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 34008(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 34000(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33992(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33984(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33976(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33968(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33960(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33952(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33944(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33936(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33928(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33920(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33912(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33904(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33896(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33888(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33880(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33872(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33864(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33856(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33848(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33840(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33832(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33824(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33816(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33808(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33800(%rsp)       # 8-byte Spill
	movq	34008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33792(%rsp)       # 8-byte Spill
	movl	%ecx, 33788(%rsp)       # 4-byte Spill
	movl	%r13d, 33784(%rsp)      # 4-byte Spill
	movl	%esi, 33780(%rsp)       # 4-byte Spill
	movl	%edi, 33776(%rsp)       # 4-byte Spill
	movl	%r8d, 33772(%rsp)       # 4-byte Spill
	movl	%r9d, 33768(%rsp)       # 4-byte Spill
	movl	%r10d, 33764(%rsp)      # 4-byte Spill
	movl	%r11d, 33760(%rsp)      # 4-byte Spill
	movl	%ebx, 33756(%rsp)       # 4-byte Spill
	movl	%ebp, 33752(%rsp)       # 4-byte Spill
	movl	%r14d, 33748(%rsp)      # 4-byte Spill
	movl	%r15d, 33744(%rsp)      # 4-byte Spill
	movl	%r12d, 33740(%rsp)      # 4-byte Spill
	movl	%edx, 33736(%rsp)       # 4-byte Spill
	jmp	.LBB68_514
.LBB68_8:                               # %if.end.sw.bb3228_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15414, 38596(%rsp)     # imm = 0x3C36
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33732(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33728(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33724(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33720(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33716(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33712(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33708(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33704(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 33696(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33688(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33680(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33672(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33664(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33656(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33648(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33640(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33632(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33624(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33616(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33608(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33600(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33592(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33584(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33576(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33568(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33560(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33552(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33544(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33536(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33528(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33520(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33512(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33504(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33496(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33488(%rsp)       # 8-byte Spill
	movq	33696(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33480(%rsp)       # 8-byte Spill
	movl	%ecx, 33476(%rsp)       # 4-byte Spill
	movl	%r13d, 33472(%rsp)      # 4-byte Spill
	movl	%esi, 33468(%rsp)       # 4-byte Spill
	movl	%edi, 33464(%rsp)       # 4-byte Spill
	movl	%r8d, 33460(%rsp)       # 4-byte Spill
	movl	%r9d, 33456(%rsp)       # 4-byte Spill
	movl	%r10d, 33452(%rsp)      # 4-byte Spill
	movl	%r11d, 33448(%rsp)      # 4-byte Spill
	movl	%ebx, 33444(%rsp)       # 4-byte Spill
	movl	%ebp, 33440(%rsp)       # 4-byte Spill
	movl	%r14d, 33436(%rsp)      # 4-byte Spill
	movl	%r15d, 33432(%rsp)      # 4-byte Spill
	movl	%r12d, 33428(%rsp)      # 4-byte Spill
	movl	%edx, 33424(%rsp)       # 4-byte Spill
	jmp	.LBB68_506
.LBB68_9:                               # %if.end.sw.bb3171_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15417, 38596(%rsp)     # imm = 0x3C39
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33420(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33416(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33412(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33408(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33404(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33400(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33396(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33392(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 33384(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33376(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33368(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33360(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33352(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33344(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33336(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33328(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33320(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33312(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33304(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33296(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33288(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33280(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33272(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33264(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33256(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33248(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33240(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33232(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33224(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33216(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33208(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33200(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33192(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33184(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33176(%rsp)       # 8-byte Spill
	movq	33384(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33168(%rsp)       # 8-byte Spill
	movl	%ecx, 33164(%rsp)       # 4-byte Spill
	movl	%r13d, 33160(%rsp)      # 4-byte Spill
	movl	%esi, 33156(%rsp)       # 4-byte Spill
	movl	%edi, 33152(%rsp)       # 4-byte Spill
	movl	%r8d, 33148(%rsp)       # 4-byte Spill
	movl	%r9d, 33144(%rsp)       # 4-byte Spill
	movl	%r10d, 33140(%rsp)      # 4-byte Spill
	movl	%r11d, 33136(%rsp)      # 4-byte Spill
	movl	%ebx, 33132(%rsp)       # 4-byte Spill
	movl	%ebp, 33128(%rsp)       # 4-byte Spill
	movl	%r14d, 33124(%rsp)      # 4-byte Spill
	movl	%r15d, 33120(%rsp)      # 4-byte Spill
	movl	%r12d, 33116(%rsp)      # 4-byte Spill
	movl	%edx, 33112(%rsp)       # 4-byte Spill
	jmp	.LBB68_497
.LBB68_10:                              # %if.end.sw.bb3114_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15420, 38596(%rsp)     # imm = 0x3C3C
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33108(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33104(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33100(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33096(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33092(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33088(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33084(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 33080(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 33072(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33064(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33056(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33048(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33040(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33032(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33024(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33016(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33008(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 33000(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32992(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32984(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32976(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32968(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32960(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32952(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32944(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32936(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32928(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32920(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32912(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32904(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32896(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32888(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32880(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32872(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32864(%rsp)       # 8-byte Spill
	movq	33072(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32856(%rsp)       # 8-byte Spill
	movl	%ecx, 32852(%rsp)       # 4-byte Spill
	movl	%r13d, 32848(%rsp)      # 4-byte Spill
	movl	%esi, 32844(%rsp)       # 4-byte Spill
	movl	%edi, 32840(%rsp)       # 4-byte Spill
	movl	%r8d, 32836(%rsp)       # 4-byte Spill
	movl	%r9d, 32832(%rsp)       # 4-byte Spill
	movl	%r10d, 32828(%rsp)      # 4-byte Spill
	movl	%r11d, 32824(%rsp)      # 4-byte Spill
	movl	%ebx, 32820(%rsp)       # 4-byte Spill
	movl	%ebp, 32816(%rsp)       # 4-byte Spill
	movl	%r14d, 32812(%rsp)      # 4-byte Spill
	movl	%r15d, 32808(%rsp)      # 4-byte Spill
	movl	%r12d, 32804(%rsp)      # 4-byte Spill
	movl	%edx, 32800(%rsp)       # 4-byte Spill
	jmp	.LBB68_489
.LBB68_11:                              # %if.end.sw.bb3057_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15423, 38596(%rsp)     # imm = 0x3C3F
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32796(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32792(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32788(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32784(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32780(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32776(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32772(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32768(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 32760(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32752(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32744(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32736(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32728(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32720(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32712(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32704(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32696(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32688(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32680(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32672(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32664(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32656(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32648(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32640(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32632(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32624(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32616(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32608(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32600(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32592(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32584(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32576(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32568(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32560(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32552(%rsp)       # 8-byte Spill
	movq	32760(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32544(%rsp)       # 8-byte Spill
	movl	%ecx, 32540(%rsp)       # 4-byte Spill
	movl	%r13d, 32536(%rsp)      # 4-byte Spill
	movl	%esi, 32532(%rsp)       # 4-byte Spill
	movl	%edi, 32528(%rsp)       # 4-byte Spill
	movl	%r8d, 32524(%rsp)       # 4-byte Spill
	movl	%r9d, 32520(%rsp)       # 4-byte Spill
	movl	%r10d, 32516(%rsp)      # 4-byte Spill
	movl	%r11d, 32512(%rsp)      # 4-byte Spill
	movl	%ebx, 32508(%rsp)       # 4-byte Spill
	movl	%ebp, 32504(%rsp)       # 4-byte Spill
	movl	%r14d, 32500(%rsp)      # 4-byte Spill
	movl	%r15d, 32496(%rsp)      # 4-byte Spill
	movl	%r12d, 32492(%rsp)      # 4-byte Spill
	movl	%edx, 32488(%rsp)       # 4-byte Spill
	jmp	.LBB68_481
.LBB68_12:                              # %if.end.sw.bb3000_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15426, 38596(%rsp)     # imm = 0x3C42
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32484(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32480(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32476(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32472(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32468(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32464(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32460(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32456(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 32448(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32440(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32432(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32424(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32416(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32408(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32400(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32392(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32384(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32376(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32368(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32360(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32352(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32344(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32336(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32328(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32320(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32312(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32304(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32296(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32288(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32280(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32272(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32264(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32256(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32248(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32240(%rsp)       # 8-byte Spill
	movq	32448(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32232(%rsp)       # 8-byte Spill
	movl	%ecx, 32228(%rsp)       # 4-byte Spill
	movl	%r13d, 32224(%rsp)      # 4-byte Spill
	movl	%esi, 32220(%rsp)       # 4-byte Spill
	movl	%edi, 32216(%rsp)       # 4-byte Spill
	movl	%r8d, 32212(%rsp)       # 4-byte Spill
	movl	%r9d, 32208(%rsp)       # 4-byte Spill
	movl	%r10d, 32204(%rsp)      # 4-byte Spill
	movl	%r11d, 32200(%rsp)      # 4-byte Spill
	movl	%ebx, 32196(%rsp)       # 4-byte Spill
	movl	%ebp, 32192(%rsp)       # 4-byte Spill
	movl	%r14d, 32188(%rsp)      # 4-byte Spill
	movl	%r15d, 32184(%rsp)      # 4-byte Spill
	movl	%r12d, 32180(%rsp)      # 4-byte Spill
	movl	%edx, 32176(%rsp)       # 4-byte Spill
	jmp	.LBB68_473
.LBB68_13:                              # %if.end.sw.bb2943_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15429, 38596(%rsp)     # imm = 0x3C45
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32172(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32168(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32164(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32160(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32156(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32152(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32148(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 32144(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 32136(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32128(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32120(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32112(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32104(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32096(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32088(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32080(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32072(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32064(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32056(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32048(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32040(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32032(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32024(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32016(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32008(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 32000(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31992(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31984(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31976(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31968(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31960(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31952(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31944(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31936(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31928(%rsp)       # 8-byte Spill
	movq	32136(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31920(%rsp)       # 8-byte Spill
	movl	%ecx, 31916(%rsp)       # 4-byte Spill
	movl	%r13d, 31912(%rsp)      # 4-byte Spill
	movl	%esi, 31908(%rsp)       # 4-byte Spill
	movl	%edi, 31904(%rsp)       # 4-byte Spill
	movl	%r8d, 31900(%rsp)       # 4-byte Spill
	movl	%r9d, 31896(%rsp)       # 4-byte Spill
	movl	%r10d, 31892(%rsp)      # 4-byte Spill
	movl	%r11d, 31888(%rsp)      # 4-byte Spill
	movl	%ebx, 31884(%rsp)       # 4-byte Spill
	movl	%ebp, 31880(%rsp)       # 4-byte Spill
	movl	%r14d, 31876(%rsp)      # 4-byte Spill
	movl	%r15d, 31872(%rsp)      # 4-byte Spill
	movl	%r12d, 31868(%rsp)      # 4-byte Spill
	movl	%edx, 31864(%rsp)       # 4-byte Spill
	jmp	.LBB68_465
.LBB68_14:                              # %if.end.sw.bb1606_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15432, 38596(%rsp)     # imm = 0x3C48
	movl	38060(%rsp), %esi       # 4-byte Reload
	movl	38076(%rsp), %edi       # 4-byte Reload
	movl	38052(%rsp), %r8d       # 4-byte Reload
	movl	38300(%rsp), %r9d       # 4-byte Reload
	movl	38284(%rsp), %r10d      # 4-byte Reload
	movl	38268(%rsp), %r11d      # 4-byte Reload
	movl	38252(%rsp), %ebx       # 4-byte Reload
	movl	38236(%rsp), %ebp       # 4-byte Reload
	movl	38204(%rsp), %r14d      # 4-byte Reload
	movl	38188(%rsp), %r15d      # 4-byte Reload
	movl	38172(%rsp), %r12d      # 4-byte Reload
	movl	38156(%rsp), %r13d      # 4-byte Reload
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 31860(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 31848(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31840(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31832(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31824(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31816(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31808(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31800(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31792(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31784(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31776(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31768(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31760(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31752(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31744(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31736(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31728(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31720(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31712(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31704(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31696(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31688(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31680(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31672(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31664(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31656(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31648(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31640(%rsp)       # 8-byte Spill
	movq	31848(%rsp), %rax       # 8-byte Reload
	movl	%ecx, 31636(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 31632(%rsp)       # 4-byte Spill
	movl	37972(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 31628(%rsp)       # 4-byte Spill
	movl	37988(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 31624(%rsp)       # 4-byte Spill
	movl	38004(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 31620(%rsp)       # 4-byte Spill
	movl	38020(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 31616(%rsp)       # 4-byte Spill
	movl	38036(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 31612(%rsp)       # 4-byte Spill
	movl	38056(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 31600(%rsp)       # 8-byte Spill
	movl	%ecx, 31596(%rsp)       # 4-byte Spill
	movl	%r13d, 31592(%rsp)      # 4-byte Spill
	movl	%esi, 31588(%rsp)       # 4-byte Spill
	movl	%edi, 31584(%rsp)       # 4-byte Spill
	movl	%r8d, 31580(%rsp)       # 4-byte Spill
	movl	%r9d, 31576(%rsp)       # 4-byte Spill
	movl	%r10d, 31572(%rsp)      # 4-byte Spill
	movl	%r11d, 31568(%rsp)      # 4-byte Spill
	movl	%ebx, 31564(%rsp)       # 4-byte Spill
	movl	%ebp, 31560(%rsp)       # 4-byte Spill
	movl	%r14d, 31556(%rsp)      # 4-byte Spill
	movl	%r15d, 31552(%rsp)      # 4-byte Spill
	movl	%r12d, 31548(%rsp)      # 4-byte Spill
	movl	%edx, 31544(%rsp)       # 4-byte Spill
	jmp	.LBB68_284
.LBB68_15:                              # %if.end.sw.bb1870_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15435, 38596(%rsp)     # imm = 0x3C4B
	movl	38300(%rsp), %esi       # 4-byte Reload
	movl	38252(%rsp), %edi       # 4-byte Reload
	movl	38236(%rsp), %r8d       # 4-byte Reload
	movl	38204(%rsp), %r9d       # 4-byte Reload
	movq	38328(%rsp), %r10       # 8-byte Reload
	movq	38312(%rsp), %r11       # 8-byte Reload
	movq	38024(%rsp), %rbx       # 8-byte Reload
	movq	38008(%rsp), %r14       # 8-byte Reload
	movq	37992(%rsp), %r15       # 8-byte Reload
	movq	37976(%rsp), %r12       # 8-byte Reload
	movq	37960(%rsp), %r13       # 8-byte Reload
	movq	38320(%rsp), %rbp       # 8-byte Reload
	movq	38304(%rsp), %rcx       # 8-byte Reload
	movq	%rax, 31536(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31528(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31520(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31512(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31504(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31496(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31488(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31480(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31472(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31464(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31456(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31448(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31440(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31432(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31424(%rsp)       # 8-byte Spill
	movq	31536(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31416(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31408(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31400(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movl	%edx, 31396(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31392(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31388(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31384(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31380(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31376(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31372(%rsp)       # 4-byte Spill
	movl	38268(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31368(%rsp)       # 4-byte Spill
	movl	38284(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31364(%rsp)       # 4-byte Spill
	movl	38052(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31360(%rsp)       # 4-byte Spill
	movl	38076(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31356(%rsp)       # 4-byte Spill
	movl	38060(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31352(%rsp)       # 4-byte Spill
	movl	37972(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31348(%rsp)       # 4-byte Spill
	movl	37988(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31344(%rsp)       # 4-byte Spill
	movl	38004(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31340(%rsp)       # 4-byte Spill
	movl	38020(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31336(%rsp)       # 4-byte Spill
	movl	38036(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31332(%rsp)       # 4-byte Spill
	movl	38056(%rsp), %edx       # 4-byte Reload
	movq	%rax, 31320(%rsp)       # 8-byte Spill
	movq	%rcx, 31312(%rsp)       # 8-byte Spill
	movq	%rbp, 31304(%rsp)       # 8-byte Spill
	movl	%esi, 31300(%rsp)       # 4-byte Spill
	movl	%edi, 31296(%rsp)       # 4-byte Spill
	movl	%r8d, 31292(%rsp)       # 4-byte Spill
	movl	%r9d, 31288(%rsp)       # 4-byte Spill
	movq	%r10, 31280(%rsp)       # 8-byte Spill
	movq	%r11, 31272(%rsp)       # 8-byte Spill
	movq	%rbx, 31264(%rsp)       # 8-byte Spill
	movq	%r14, 31256(%rsp)       # 8-byte Spill
	movq	%r15, 31248(%rsp)       # 8-byte Spill
	movq	%r12, 31240(%rsp)       # 8-byte Spill
	movq	%r13, 31232(%rsp)       # 8-byte Spill
	movl	%edx, 31228(%rsp)       # 4-byte Spill
	jmp	.LBB68_321
.LBB68_16:                              # %if.end.sw.bb2063_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15438, 38596(%rsp)     # imm = 0x3C4E
	movl	38204(%rsp), %esi       # 4-byte Reload
	movq	38328(%rsp), %rdi       # 8-byte Reload
	movq	38312(%rsp), %r8        # 8-byte Reload
	movq	38024(%rsp), %r9        # 8-byte Reload
	movq	38008(%rsp), %r10       # 8-byte Reload
	movq	37992(%rsp), %r11       # 8-byte Reload
	movq	37976(%rsp), %rbx       # 8-byte Reload
	movq	37960(%rsp), %r14       # 8-byte Reload
	movq	38320(%rsp), %r15       # 8-byte Reload
	movq	38304(%rsp), %r12       # 8-byte Reload
	movq	38288(%rsp), %r13       # 8-byte Reload
	movq	38272(%rsp), %rbp       # 8-byte Reload
	movq	38256(%rsp), %rcx       # 8-byte Reload
	movq	%rax, 31216(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31208(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31200(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31192(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31184(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31176(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31168(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31160(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31152(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31144(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31136(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31128(%rsp)       # 8-byte Spill
	movq	31216(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31120(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31112(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 31104(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movl	%edx, 31100(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31096(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31092(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31088(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31084(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31080(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31076(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31072(%rsp)       # 4-byte Spill
	movl	38252(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31068(%rsp)       # 4-byte Spill
	movl	38268(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31064(%rsp)       # 4-byte Spill
	movl	38284(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31060(%rsp)       # 4-byte Spill
	movl	38300(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31056(%rsp)       # 4-byte Spill
	movl	38052(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31052(%rsp)       # 4-byte Spill
	movl	38076(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31048(%rsp)       # 4-byte Spill
	movl	38060(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31044(%rsp)       # 4-byte Spill
	movl	37972(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31040(%rsp)       # 4-byte Spill
	movl	37988(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31036(%rsp)       # 4-byte Spill
	movl	38004(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31032(%rsp)       # 4-byte Spill
	movl	38020(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31028(%rsp)       # 4-byte Spill
	movl	38036(%rsp), %edx       # 4-byte Reload
	movl	%edx, 31024(%rsp)       # 4-byte Spill
	movl	38056(%rsp), %edx       # 4-byte Reload
	movq	%rax, 31016(%rsp)       # 8-byte Spill
	movq	%rcx, 31008(%rsp)       # 8-byte Spill
	movq	%rbp, 31000(%rsp)       # 8-byte Spill
	movl	%esi, 30996(%rsp)       # 4-byte Spill
	movq	%rdi, 30984(%rsp)       # 8-byte Spill
	movq	%r8, 30976(%rsp)        # 8-byte Spill
	movq	%r9, 30968(%rsp)        # 8-byte Spill
	movq	%r10, 30960(%rsp)       # 8-byte Spill
	movq	%r11, 30952(%rsp)       # 8-byte Spill
	movq	%rbx, 30944(%rsp)       # 8-byte Spill
	movq	%r14, 30936(%rsp)       # 8-byte Spill
	movq	%r15, 30928(%rsp)       # 8-byte Spill
	movq	%r12, 30920(%rsp)       # 8-byte Spill
	movq	%r13, 30912(%rsp)       # 8-byte Spill
	movl	%edx, 30908(%rsp)       # 4-byte Spill
	jmp	.LBB68_351
.LBB68_17:                              # %if.end.sw.bb2479_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15441, 38596(%rsp)     # imm = 0x3C51
	movl	38204(%rsp), %esi       # 4-byte Reload
	movq	38328(%rsp), %rdi       # 8-byte Reload
	movq	38312(%rsp), %r8        # 8-byte Reload
	movq	38024(%rsp), %r9        # 8-byte Reload
	movq	38008(%rsp), %r10       # 8-byte Reload
	movq	37992(%rsp), %r11       # 8-byte Reload
	movq	37976(%rsp), %rbx       # 8-byte Reload
	movq	37960(%rsp), %r14       # 8-byte Reload
	movq	38320(%rsp), %r15       # 8-byte Reload
	movq	38304(%rsp), %r12       # 8-byte Reload
	movq	38288(%rsp), %r13       # 8-byte Reload
	movq	38272(%rsp), %rbp       # 8-byte Reload
	movq	38256(%rsp), %rcx       # 8-byte Reload
	movq	%rax, 30896(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30888(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30880(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30872(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30864(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30856(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30848(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30840(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30832(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30824(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30816(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30808(%rsp)       # 8-byte Spill
	movq	30896(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30800(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30792(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30784(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movl	%edx, 30780(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30776(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30772(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30768(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30764(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30760(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30756(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30752(%rsp)       # 4-byte Spill
	movl	38252(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30748(%rsp)       # 4-byte Spill
	movl	38268(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30744(%rsp)       # 4-byte Spill
	movl	38284(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30740(%rsp)       # 4-byte Spill
	movl	38300(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30736(%rsp)       # 4-byte Spill
	movl	38052(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30732(%rsp)       # 4-byte Spill
	movl	38076(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30728(%rsp)       # 4-byte Spill
	movl	38060(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30724(%rsp)       # 4-byte Spill
	movl	37972(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30720(%rsp)       # 4-byte Spill
	movl	37988(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30716(%rsp)       # 4-byte Spill
	movl	38004(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30712(%rsp)       # 4-byte Spill
	movl	38020(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30708(%rsp)       # 4-byte Spill
	movl	38036(%rsp), %edx       # 4-byte Reload
	movl	%edx, 30704(%rsp)       # 4-byte Spill
	movl	38056(%rsp), %edx       # 4-byte Reload
	movq	%rax, 30696(%rsp)       # 8-byte Spill
	movq	%rcx, 30688(%rsp)       # 8-byte Spill
	movq	%rbp, 30680(%rsp)       # 8-byte Spill
	movl	%esi, 30676(%rsp)       # 4-byte Spill
	movq	%rdi, 30664(%rsp)       # 8-byte Spill
	movq	%r8, 30656(%rsp)        # 8-byte Spill
	movq	%r9, 30648(%rsp)        # 8-byte Spill
	movq	%r10, 30640(%rsp)       # 8-byte Spill
	movq	%r11, 30632(%rsp)       # 8-byte Spill
	movq	%rbx, 30624(%rsp)       # 8-byte Spill
	movq	%r14, 30616(%rsp)       # 8-byte Spill
	movq	%r15, 30608(%rsp)       # 8-byte Spill
	movq	%r12, 30600(%rsp)       # 8-byte Spill
	movq	%r13, 30592(%rsp)       # 8-byte Spill
	movl	%edx, 30588(%rsp)       # 4-byte Spill
	jmp	.LBB68_420
.LBB68_18:                              # %if.end.sw.bb1312_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15444, 38596(%rsp)     # imm = 0x3C54
	movl	38020(%rsp), %esi       # 4-byte Reload
	movl	37972(%rsp), %edi       # 4-byte Reload
	movl	38060(%rsp), %r8d       # 4-byte Reload
	movl	38076(%rsp), %r9d       # 4-byte Reload
	movl	38052(%rsp), %r10d      # 4-byte Reload
	movl	38300(%rsp), %r11d      # 4-byte Reload
	movl	38284(%rsp), %ebx       # 4-byte Reload
	movl	38268(%rsp), %ebp       # 4-byte Reload
	movl	38252(%rsp), %r14d      # 4-byte Reload
	movl	38236(%rsp), %r15d      # 4-byte Reload
	movl	38220(%rsp), %r12d      # 4-byte Reload
	movl	38204(%rsp), %r13d      # 4-byte Reload
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 30584(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 30580(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 30576(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 30572(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 30560(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30552(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30544(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30536(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30528(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30520(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30512(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30504(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30496(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30488(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30480(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30472(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30464(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30456(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30448(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30440(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30432(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30424(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30416(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30408(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30400(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30392(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30384(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30376(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30368(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30360(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30352(%rsp)       # 8-byte Spill
	movq	30560(%rsp), %rax       # 8-byte Reload
	movl	%ecx, 30348(%rsp)       # 4-byte Spill
	movl	37988(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 30344(%rsp)       # 4-byte Spill
	movl	38004(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 30340(%rsp)       # 4-byte Spill
	movl	38036(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 30336(%rsp)       # 4-byte Spill
	movl	38056(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 30328(%rsp)       # 8-byte Spill
	movl	%ecx, 30324(%rsp)       # 4-byte Spill
	movl	%r13d, 30320(%rsp)      # 4-byte Spill
	movl	%esi, 30316(%rsp)       # 4-byte Spill
	movl	%edi, 30312(%rsp)       # 4-byte Spill
	movl	%r8d, 30308(%rsp)       # 4-byte Spill
	movl	%r9d, 30304(%rsp)       # 4-byte Spill
	movl	%r10d, 30300(%rsp)      # 4-byte Spill
	movl	%r11d, 30296(%rsp)      # 4-byte Spill
	movl	%ebx, 30292(%rsp)       # 4-byte Spill
	movl	%ebp, 30288(%rsp)       # 4-byte Spill
	movl	%r14d, 30284(%rsp)      # 4-byte Spill
	movl	%r15d, 30280(%rsp)      # 4-byte Spill
	movl	%r12d, 30276(%rsp)      # 4-byte Spill
	movl	%edx, 30272(%rsp)       # 4-byte Spill
	jmp	.LBB68_222
.LBB68_19:                              # %if.end.sw.bb1023_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15447, 38596(%rsp)     # imm = 0x3C57
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 30268(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 30264(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 30260(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 30256(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 30252(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 30248(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 30244(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 30240(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 30232(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30224(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30216(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30208(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30200(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30192(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30184(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30176(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30168(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30160(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30152(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30144(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30136(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30128(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30120(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30112(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30104(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30096(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30088(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30080(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30072(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30064(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30056(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30048(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30040(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30032(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30024(%rsp)       # 8-byte Spill
	movq	30232(%rsp), %rax       # 8-byte Reload
	movq	%rax, 30016(%rsp)       # 8-byte Spill
	movl	%ecx, 30012(%rsp)       # 4-byte Spill
	movl	%r13d, 30008(%rsp)      # 4-byte Spill
	movl	%esi, 30004(%rsp)       # 4-byte Spill
	movl	%edi, 30000(%rsp)       # 4-byte Spill
	movl	%r8d, 29996(%rsp)       # 4-byte Spill
	movl	%r9d, 29992(%rsp)       # 4-byte Spill
	movl	%r10d, 29988(%rsp)      # 4-byte Spill
	movl	%r11d, 29984(%rsp)      # 4-byte Spill
	movl	%ebx, 29980(%rsp)       # 4-byte Spill
	movl	%ebp, 29976(%rsp)       # 4-byte Spill
	movl	%r14d, 29972(%rsp)      # 4-byte Spill
	movl	%r15d, 29968(%rsp)      # 4-byte Spill
	movl	%r12d, 29964(%rsp)      # 4-byte Spill
	movl	%edx, 29960(%rsp)       # 4-byte Spill
	jmp	.LBB68_175
.LBB68_20:                              # %if.end.sw.bb966_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15450, 38596(%rsp)     # imm = 0x3C5A
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29956(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29952(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29948(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29944(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29940(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29936(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29932(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29928(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 29920(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29912(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29904(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29896(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29888(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29880(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29872(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29864(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29856(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29848(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29840(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29832(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29824(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29816(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29808(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29800(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29792(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29784(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29776(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29768(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29760(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29752(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29744(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29736(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29728(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29720(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29712(%rsp)       # 8-byte Spill
	movq	29920(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29704(%rsp)       # 8-byte Spill
	movl	%ecx, 29700(%rsp)       # 4-byte Spill
	movl	%r13d, 29696(%rsp)      # 4-byte Spill
	movl	%esi, 29692(%rsp)       # 4-byte Spill
	movl	%edi, 29688(%rsp)       # 4-byte Spill
	movl	%r8d, 29684(%rsp)       # 4-byte Spill
	movl	%r9d, 29680(%rsp)       # 4-byte Spill
	movl	%r10d, 29676(%rsp)      # 4-byte Spill
	movl	%r11d, 29672(%rsp)      # 4-byte Spill
	movl	%ebx, 29668(%rsp)       # 4-byte Spill
	movl	%ebp, 29664(%rsp)       # 4-byte Spill
	movl	%r14d, 29660(%rsp)      # 4-byte Spill
	movl	%r15d, 29656(%rsp)      # 4-byte Spill
	movl	%r12d, 29652(%rsp)      # 4-byte Spill
	movl	%edx, 29648(%rsp)       # 4-byte Spill
	jmp	.LBB68_167
.LBB68_21:                              # %if.end.sw.bb909_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15453, 38596(%rsp)     # imm = 0x3C5D
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29644(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29640(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29636(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29632(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29628(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29624(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29620(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29616(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 29608(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29600(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29592(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29584(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29576(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29568(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29560(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29552(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29544(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29536(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29528(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29520(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29512(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29504(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29496(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29488(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29480(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29472(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29464(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29456(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29448(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29440(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29432(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29424(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29416(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29408(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29400(%rsp)       # 8-byte Spill
	movq	29608(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29392(%rsp)       # 8-byte Spill
	movl	%ecx, 29388(%rsp)       # 4-byte Spill
	movl	%r13d, 29384(%rsp)      # 4-byte Spill
	movl	%esi, 29380(%rsp)       # 4-byte Spill
	movl	%edi, 29376(%rsp)       # 4-byte Spill
	movl	%r8d, 29372(%rsp)       # 4-byte Spill
	movl	%r9d, 29368(%rsp)       # 4-byte Spill
	movl	%r10d, 29364(%rsp)      # 4-byte Spill
	movl	%r11d, 29360(%rsp)      # 4-byte Spill
	movl	%ebx, 29356(%rsp)       # 4-byte Spill
	movl	%ebp, 29352(%rsp)       # 4-byte Spill
	movl	%r14d, 29348(%rsp)      # 4-byte Spill
	movl	%r15d, 29344(%rsp)      # 4-byte Spill
	movl	%r12d, 29340(%rsp)      # 4-byte Spill
	movl	%edx, 29336(%rsp)       # 4-byte Spill
	jmp	.LBB68_159
.LBB68_22:                              # %if.end.sw.bb857_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15456, 38596(%rsp)     # imm = 0x3C60
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29332(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29328(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29324(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29320(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29316(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29312(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29308(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29304(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 29296(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29288(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29280(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29272(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29264(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29256(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29248(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29240(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29232(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29224(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29216(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29208(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29200(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29192(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29184(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29176(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29168(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29160(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29152(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29144(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29136(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29128(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29120(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29112(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29104(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29096(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29088(%rsp)       # 8-byte Spill
	movq	29296(%rsp), %rax       # 8-byte Reload
	movq	%rax, 29080(%rsp)       # 8-byte Spill
	movl	%ecx, 29076(%rsp)       # 4-byte Spill
	movl	%r13d, 29072(%rsp)      # 4-byte Spill
	movl	%esi, 29068(%rsp)       # 4-byte Spill
	movl	%edi, 29064(%rsp)       # 4-byte Spill
	movl	%r8d, 29060(%rsp)       # 4-byte Spill
	movl	%r9d, 29056(%rsp)       # 4-byte Spill
	movl	%r10d, 29052(%rsp)      # 4-byte Spill
	movl	%r11d, 29048(%rsp)      # 4-byte Spill
	movl	%ebx, 29044(%rsp)       # 4-byte Spill
	movl	%ebp, 29040(%rsp)       # 4-byte Spill
	movl	%r14d, 29036(%rsp)      # 4-byte Spill
	movl	%r15d, 29032(%rsp)      # 4-byte Spill
	movl	%r12d, 29028(%rsp)      # 4-byte Spill
	movl	%edx, 29024(%rsp)       # 4-byte Spill
	jmp	.LBB68_151
.LBB68_23:                              # %if.end.sw.bb800_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15459, 38596(%rsp)     # imm = 0x3C63
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29020(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29016(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29012(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29008(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29004(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 29000(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28996(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28992(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 28984(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28976(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28968(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28960(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28952(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28944(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28936(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28928(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28920(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28912(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28904(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28896(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28888(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28880(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28872(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28864(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28856(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28848(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28840(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28832(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28824(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28816(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28808(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28800(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28792(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28784(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28776(%rsp)       # 8-byte Spill
	movq	28984(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28768(%rsp)       # 8-byte Spill
	movl	%ecx, 28764(%rsp)       # 4-byte Spill
	movl	%r13d, 28760(%rsp)      # 4-byte Spill
	movl	%esi, 28756(%rsp)       # 4-byte Spill
	movl	%edi, 28752(%rsp)       # 4-byte Spill
	movl	%r8d, 28748(%rsp)       # 4-byte Spill
	movl	%r9d, 28744(%rsp)       # 4-byte Spill
	movl	%r10d, 28740(%rsp)      # 4-byte Spill
	movl	%r11d, 28736(%rsp)      # 4-byte Spill
	movl	%ebx, 28732(%rsp)       # 4-byte Spill
	movl	%ebp, 28728(%rsp)       # 4-byte Spill
	movl	%r14d, 28724(%rsp)      # 4-byte Spill
	movl	%r15d, 28720(%rsp)      # 4-byte Spill
	movl	%r12d, 28716(%rsp)      # 4-byte Spill
	movl	%edx, 28712(%rsp)       # 4-byte Spill
	jmp	.LBB68_143
.LBB68_24:                              # %if.end.sw.bb743_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15462, 38596(%rsp)     # imm = 0x3C66
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28708(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28704(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28700(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28696(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28692(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28688(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28684(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28680(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 28672(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28664(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28656(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28648(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28640(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28632(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28624(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28616(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28608(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28600(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28592(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28584(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28576(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28568(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28560(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28552(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28544(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28536(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28528(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28520(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28512(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28504(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28496(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28488(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28480(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28472(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28464(%rsp)       # 8-byte Spill
	movq	28672(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28456(%rsp)       # 8-byte Spill
	movl	%ecx, 28452(%rsp)       # 4-byte Spill
	movl	%r13d, 28448(%rsp)      # 4-byte Spill
	movl	%esi, 28444(%rsp)       # 4-byte Spill
	movl	%edi, 28440(%rsp)       # 4-byte Spill
	movl	%r8d, 28436(%rsp)       # 4-byte Spill
	movl	%r9d, 28432(%rsp)       # 4-byte Spill
	movl	%r10d, 28428(%rsp)      # 4-byte Spill
	movl	%r11d, 28424(%rsp)      # 4-byte Spill
	movl	%ebx, 28420(%rsp)       # 4-byte Spill
	movl	%ebp, 28416(%rsp)       # 4-byte Spill
	movl	%r14d, 28412(%rsp)      # 4-byte Spill
	movl	%r15d, 28408(%rsp)      # 4-byte Spill
	movl	%r12d, 28404(%rsp)      # 4-byte Spill
	movl	%edx, 28400(%rsp)       # 4-byte Spill
	jmp	.LBB68_135
.LBB68_25:                              # %if.end.sw.bb686_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15465, 38596(%rsp)     # imm = 0x3C69
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28396(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28392(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28388(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28384(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28380(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28376(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28372(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28368(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 28360(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28352(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28344(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28336(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28328(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28320(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28312(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28304(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28296(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28288(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28280(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28272(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28264(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28256(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28248(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28240(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28232(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28224(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28216(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28208(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28200(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28192(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28184(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28176(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28168(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28160(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28152(%rsp)       # 8-byte Spill
	movq	28360(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28144(%rsp)       # 8-byte Spill
	movl	%ecx, 28140(%rsp)       # 4-byte Spill
	movl	%r13d, 28136(%rsp)      # 4-byte Spill
	movl	%esi, 28132(%rsp)       # 4-byte Spill
	movl	%edi, 28128(%rsp)       # 4-byte Spill
	movl	%r8d, 28124(%rsp)       # 4-byte Spill
	movl	%r9d, 28120(%rsp)       # 4-byte Spill
	movl	%r10d, 28116(%rsp)      # 4-byte Spill
	movl	%r11d, 28112(%rsp)      # 4-byte Spill
	movl	%ebx, 28108(%rsp)       # 4-byte Spill
	movl	%ebp, 28104(%rsp)       # 4-byte Spill
	movl	%r14d, 28100(%rsp)      # 4-byte Spill
	movl	%r15d, 28096(%rsp)      # 4-byte Spill
	movl	%r12d, 28092(%rsp)      # 4-byte Spill
	movl	%edx, 28088(%rsp)       # 4-byte Spill
	jmp	.LBB68_127
.LBB68_26:                              # %if.end.sw.bb565_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15468, 38596(%rsp)     # imm = 0x3C6C
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28084(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28080(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28076(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28072(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28068(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28064(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28060(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 28056(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 28048(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28040(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28032(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28024(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28016(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28008(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 28000(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27992(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27984(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27976(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27968(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27960(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27952(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27944(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27936(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27928(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27920(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27912(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27904(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27896(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27888(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27880(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27872(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27864(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27856(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27848(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27840(%rsp)       # 8-byte Spill
	movq	28048(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27832(%rsp)       # 8-byte Spill
	movl	%ecx, 27828(%rsp)       # 4-byte Spill
	movl	%r13d, 27824(%rsp)      # 4-byte Spill
	movl	%esi, 27820(%rsp)       # 4-byte Spill
	movl	%edi, 27816(%rsp)       # 4-byte Spill
	movl	%r8d, 27812(%rsp)       # 4-byte Spill
	movl	%r9d, 27808(%rsp)       # 4-byte Spill
	movl	%r10d, 27804(%rsp)      # 4-byte Spill
	movl	%r11d, 27800(%rsp)      # 4-byte Spill
	movl	%ebx, 27796(%rsp)       # 4-byte Spill
	movl	%ebp, 27792(%rsp)       # 4-byte Spill
	movl	%r14d, 27788(%rsp)      # 4-byte Spill
	movl	%r15d, 27784(%rsp)      # 4-byte Spill
	movl	%r12d, 27780(%rsp)      # 4-byte Spill
	movl	%edx, 27776(%rsp)       # 4-byte Spill
	jmp	.LBB68_108
.LBB68_27:                              # %if.end.sw.bb508_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15471, 38596(%rsp)     # imm = 0x3C6F
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27772(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27768(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27764(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27760(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27756(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27752(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27748(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27744(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 27736(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27728(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27720(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27712(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27704(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27696(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27688(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27680(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27672(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27664(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27656(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27648(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27640(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27632(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27624(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27616(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27608(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27600(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27592(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27584(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27576(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27568(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27560(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27552(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27544(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27536(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27528(%rsp)       # 8-byte Spill
	movq	27736(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27520(%rsp)       # 8-byte Spill
	movl	%ecx, 27516(%rsp)       # 4-byte Spill
	movl	%r13d, 27512(%rsp)      # 4-byte Spill
	movl	%esi, 27508(%rsp)       # 4-byte Spill
	movl	%edi, 27504(%rsp)       # 4-byte Spill
	movl	%r8d, 27500(%rsp)       # 4-byte Spill
	movl	%r9d, 27496(%rsp)       # 4-byte Spill
	movl	%r10d, 27492(%rsp)      # 4-byte Spill
	movl	%r11d, 27488(%rsp)      # 4-byte Spill
	movl	%ebx, 27484(%rsp)       # 4-byte Spill
	movl	%ebp, 27480(%rsp)       # 4-byte Spill
	movl	%r14d, 27476(%rsp)      # 4-byte Spill
	movl	%r15d, 27472(%rsp)      # 4-byte Spill
	movl	%r12d, 27468(%rsp)      # 4-byte Spill
	movl	%edx, 27464(%rsp)       # 4-byte Spill
	jmp	.LBB68_100
.LBB68_28:                              # %if.end.sw.bb451_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15474, 38596(%rsp)     # imm = 0x3C72
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27460(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27456(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27452(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27448(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27444(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27440(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27436(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27432(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 27424(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27416(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27408(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27400(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27392(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27384(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27376(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27368(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27360(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27352(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27344(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27336(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27328(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27320(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27312(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27304(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27296(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27288(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27280(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27272(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27264(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27256(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27248(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27240(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27232(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27224(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27216(%rsp)       # 8-byte Spill
	movq	27424(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27208(%rsp)       # 8-byte Spill
	movl	%ecx, 27204(%rsp)       # 4-byte Spill
	movl	%r13d, 27200(%rsp)      # 4-byte Spill
	movl	%esi, 27196(%rsp)       # 4-byte Spill
	movl	%edi, 27192(%rsp)       # 4-byte Spill
	movl	%r8d, 27188(%rsp)       # 4-byte Spill
	movl	%r9d, 27184(%rsp)       # 4-byte Spill
	movl	%r10d, 27180(%rsp)      # 4-byte Spill
	movl	%r11d, 27176(%rsp)      # 4-byte Spill
	movl	%ebx, 27172(%rsp)       # 4-byte Spill
	movl	%ebp, 27168(%rsp)       # 4-byte Spill
	movl	%r14d, 27164(%rsp)      # 4-byte Spill
	movl	%r15d, 27160(%rsp)      # 4-byte Spill
	movl	%r12d, 27156(%rsp)      # 4-byte Spill
	movl	%edx, 27152(%rsp)       # 4-byte Spill
	jmp	.LBB68_92
.LBB68_29:                              # %if.end.sw.bb394_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15477, 38596(%rsp)     # imm = 0x3C75
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27148(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27144(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27140(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27136(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27132(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27128(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27124(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 27120(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 27112(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27104(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27096(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27088(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27080(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27072(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27064(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27056(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27048(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27040(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27032(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27024(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27016(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27008(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 27000(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26992(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26984(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26976(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26968(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26960(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26952(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26944(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26936(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26928(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26920(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26912(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26904(%rsp)       # 8-byte Spill
	movq	27112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26896(%rsp)       # 8-byte Spill
	movl	%ecx, 26892(%rsp)       # 4-byte Spill
	movl	%r13d, 26888(%rsp)      # 4-byte Spill
	movl	%esi, 26884(%rsp)       # 4-byte Spill
	movl	%edi, 26880(%rsp)       # 4-byte Spill
	movl	%r8d, 26876(%rsp)       # 4-byte Spill
	movl	%r9d, 26872(%rsp)       # 4-byte Spill
	movl	%r10d, 26868(%rsp)      # 4-byte Spill
	movl	%r11d, 26864(%rsp)      # 4-byte Spill
	movl	%ebx, 26860(%rsp)       # 4-byte Spill
	movl	%ebp, 26856(%rsp)       # 4-byte Spill
	movl	%r14d, 26852(%rsp)      # 4-byte Spill
	movl	%r15d, 26848(%rsp)      # 4-byte Spill
	movl	%r12d, 26844(%rsp)      # 4-byte Spill
	movl	%edx, 26840(%rsp)       # 4-byte Spill
	jmp	.LBB68_84
.LBB68_30:                              # %if.end.sw.bb337_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15480, 38596(%rsp)     # imm = 0x3C78
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26836(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26832(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26828(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26824(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26820(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26816(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26812(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26808(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 26800(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26792(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26784(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26776(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26768(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26760(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26752(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26744(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26736(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26728(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26720(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26712(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26704(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26696(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26688(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26680(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26672(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26664(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26656(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26648(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26640(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26632(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26624(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26616(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26608(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26600(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26592(%rsp)       # 8-byte Spill
	movq	26800(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26584(%rsp)       # 8-byte Spill
	movl	%ecx, 26580(%rsp)       # 4-byte Spill
	movl	%r13d, 26576(%rsp)      # 4-byte Spill
	movl	%esi, 26572(%rsp)       # 4-byte Spill
	movl	%edi, 26568(%rsp)       # 4-byte Spill
	movl	%r8d, 26564(%rsp)       # 4-byte Spill
	movl	%r9d, 26560(%rsp)       # 4-byte Spill
	movl	%r10d, 26556(%rsp)      # 4-byte Spill
	movl	%r11d, 26552(%rsp)      # 4-byte Spill
	movl	%ebx, 26548(%rsp)       # 4-byte Spill
	movl	%ebp, 26544(%rsp)       # 4-byte Spill
	movl	%r14d, 26540(%rsp)      # 4-byte Spill
	movl	%r15d, 26536(%rsp)      # 4-byte Spill
	movl	%r12d, 26532(%rsp)      # 4-byte Spill
	movl	%edx, 26528(%rsp)       # 4-byte Spill
	jmp	.LBB68_76
.LBB68_31:                              # %if.end.sw.bb176_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15483, 38596(%rsp)     # imm = 0x3C7B
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26524(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26520(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26516(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26512(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26508(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26504(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26500(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26496(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 26488(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26480(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26472(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26464(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26456(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26448(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26440(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26432(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26424(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26416(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26408(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26400(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26392(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26384(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26376(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26368(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26360(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26352(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26344(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26336(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26328(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26320(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26312(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26304(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26296(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26288(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26280(%rsp)       # 8-byte Spill
	movq	26488(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26272(%rsp)       # 8-byte Spill
	movl	%ecx, 26268(%rsp)       # 4-byte Spill
	movl	%r13d, 26264(%rsp)      # 4-byte Spill
	movl	%esi, 26260(%rsp)       # 4-byte Spill
	movl	%edi, 26256(%rsp)       # 4-byte Spill
	movl	%r8d, 26252(%rsp)       # 4-byte Spill
	movl	%r9d, 26248(%rsp)       # 4-byte Spill
	movl	%r10d, 26244(%rsp)      # 4-byte Spill
	movl	%r11d, 26240(%rsp)      # 4-byte Spill
	movl	%ebx, 26236(%rsp)       # 4-byte Spill
	movl	%ebp, 26232(%rsp)       # 4-byte Spill
	movl	%r14d, 26228(%rsp)      # 4-byte Spill
	movl	%r15d, 26224(%rsp)      # 4-byte Spill
	movl	%r12d, 26220(%rsp)      # 4-byte Spill
	movl	%edx, 26216(%rsp)       # 4-byte Spill
	jmp	.LBB68_57
.LBB68_32:                              # %if.end.sw.bb119_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15486, 38596(%rsp)     # imm = 0x3C7E
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26212(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26208(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26204(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26200(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26196(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26192(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26188(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 26184(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 26176(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26168(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26160(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26152(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26144(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26136(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26128(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26120(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26112(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26104(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26096(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26088(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26080(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26072(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26064(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26056(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26048(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26040(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26032(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26024(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26016(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26008(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 26000(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25992(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25984(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25976(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25968(%rsp)       # 8-byte Spill
	movq	26176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25960(%rsp)       # 8-byte Spill
	movl	%ecx, 25956(%rsp)       # 4-byte Spill
	movl	%r13d, 25952(%rsp)      # 4-byte Spill
	movl	%esi, 25948(%rsp)       # 4-byte Spill
	movl	%edi, 25944(%rsp)       # 4-byte Spill
	movl	%r8d, 25940(%rsp)       # 4-byte Spill
	movl	%r9d, 25936(%rsp)       # 4-byte Spill
	movl	%r10d, 25932(%rsp)      # 4-byte Spill
	movl	%r11d, 25928(%rsp)      # 4-byte Spill
	movl	%ebx, 25924(%rsp)       # 4-byte Spill
	movl	%ebp, 25920(%rsp)       # 4-byte Spill
	movl	%r14d, 25916(%rsp)      # 4-byte Spill
	movl	%r15d, 25912(%rsp)      # 4-byte Spill
	movl	%r12d, 25908(%rsp)      # 4-byte Spill
	movl	%edx, 25904(%rsp)       # 4-byte Spill
	jmp	.LBB68_49
.LBB68_33:                              # %if.end.sw.bb62_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$36, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %edx
	movl	$15489, 38596(%rsp)     # imm = 0x3C81
	movl	38056(%rsp), %esi       # 4-byte Reload
	movl	38036(%rsp), %edi       # 4-byte Reload
	movl	38020(%rsp), %r8d       # 4-byte Reload
	movl	38004(%rsp), %r9d       # 4-byte Reload
	movl	37988(%rsp), %r10d      # 4-byte Reload
	movl	37972(%rsp), %r11d      # 4-byte Reload
	movl	38060(%rsp), %ebx       # 4-byte Reload
	movl	38076(%rsp), %ebp       # 4-byte Reload
	movl	38052(%rsp), %r14d      # 4-byte Reload
	movl	38300(%rsp), %r15d      # 4-byte Reload
	movl	38284(%rsp), %r12d      # 4-byte Reload
	movl	38268(%rsp), %r13d      # 4-byte Reload
	movl	38252(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 25900(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 25896(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 25892(%rsp)       # 4-byte Spill
	movl	38204(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 25888(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 25884(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 25880(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 25876(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %ecx       # 4-byte Reload
	movl	%ecx, 25872(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %ecx       # 4-byte Reload
	movq	%rax, 25864(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25856(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25848(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25840(%rsp)       # 8-byte Spill
	movq	38328(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25832(%rsp)       # 8-byte Spill
	movq	38312(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25824(%rsp)       # 8-byte Spill
	movq	38024(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25816(%rsp)       # 8-byte Spill
	movq	38008(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25808(%rsp)       # 8-byte Spill
	movq	37992(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25800(%rsp)       # 8-byte Spill
	movq	37976(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25792(%rsp)       # 8-byte Spill
	movq	37960(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25784(%rsp)       # 8-byte Spill
	movq	38320(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25776(%rsp)       # 8-byte Spill
	movq	38304(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25768(%rsp)       # 8-byte Spill
	movq	38288(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25760(%rsp)       # 8-byte Spill
	movq	38272(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25752(%rsp)       # 8-byte Spill
	movq	38256(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25744(%rsp)       # 8-byte Spill
	movq	38240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25736(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25728(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25720(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25712(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25704(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25696(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25688(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25680(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25672(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25664(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25656(%rsp)       # 8-byte Spill
	movq	25864(%rsp), %rax       # 8-byte Reload
	movq	%rax, 25648(%rsp)       # 8-byte Spill
	movl	%ecx, 25644(%rsp)       # 4-byte Spill
	movl	%r13d, 25640(%rsp)      # 4-byte Spill
	movl	%esi, 25636(%rsp)       # 4-byte Spill
	movl	%edi, 25632(%rsp)       # 4-byte Spill
	movl	%r8d, 25628(%rsp)       # 4-byte Spill
	movl	%r9d, 25624(%rsp)       # 4-byte Spill
	movl	%r10d, 25620(%rsp)      # 4-byte Spill
	movl	%r11d, 25616(%rsp)      # 4-byte Spill
	movl	%ebx, 25612(%rsp)       # 4-byte Spill
	movl	%ebp, 25608(%rsp)       # 4-byte Spill
	movl	%r14d, 25604(%rsp)      # 4-byte Spill
	movl	%r15d, 25600(%rsp)      # 4-byte Spill
	movl	%r12d, 25596(%rsp)      # 4-byte Spill
	movl	%edx, 25592(%rsp)       # 4-byte Spill
	jmp	.LBB68_41
.LBB68_34:                              # %sw.bb.if.then29_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	movl	32(%rax), %ecx
	movl	$15496, 38596(%rsp)     # imm = 0x3C88
	movl	38340(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 25588(%rsp)       # 4-byte Spill
	movl	%edx, 25584(%rsp)       # 4-byte Spill
	jmp	.LBB68_36
.LBB68_35:                              # %if.end33.lr.ph
	movq	38560(%rsp), %rax       # 8-byte Reload
	addq	$8, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movq	38560(%rsp), %rdx       # 8-byte Reload
	addq	$12, %rdx
	movq	38560(%rsp), %rsi       # 8-byte Reload
	addq	$16, %rsi
	movq	38560(%rsp), %rdi       # 8-byte Reload
	movl	8(%rdi), %r8d
	movl	$15504, 38596(%rsp)     # imm = 0x3C90
	movl	38340(%rsp), %r9d       # 4-byte Reload
	movq	%rax, 25576(%rsp)       # 8-byte Spill
	movq	%rcx, 25568(%rsp)       # 8-byte Spill
	movq	%rdx, 25560(%rsp)       # 8-byte Spill
	movq	%rsi, 25552(%rsp)       # 8-byte Spill
	movl	%r8d, 25548(%rsp)       # 4-byte Spill
	movl	%r9d, 25544(%rsp)       # 4-byte Spill
	jmp	.LBB68_37
.LBB68_36:                              # %if.then29
	movl	25584(%rsp), %eax       # 4-byte Reload
	movl	25588(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	xorl	%esi, %esi
	movl	%esi, %edi
	movl	$4294967291, %esi       # imm = 0xFFFFFFFB
	addl	$-8, %eax
	movl	%ecx, 25540(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	25540(%rsp), %r8d       # 4-byte Reload
	shrl	%cl, %r8d
	movq	38344(%rsp), %r9        # 8-byte Reload
	movl	%eax, (%r9)
	movl	$15513, 38596(%rsp)     # imm = 0x3C99
	andl	$255, %r8d
	cmpl	$66, %r8d
	movl	%edx, %r8d
	movl	%edx, %r10d
	movl	%edx, %r11d
	movl	%edx, %ebx
	movl	%edx, %ebp
	movl	%edx, %r14d
	movl	%edx, %r15d
	movl	%edx, %r12d
	movl	%edx, %r13d
	movl	%edx, %ecx
	movl	%edx, %r9d
	movl	%eax, 25536(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25640(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25900(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25896(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25892(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25888(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25884(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25880(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25876(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25872(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%esi, 25532(%rsp)       # 4-byte Spill
	movq	%rdi, %rsi
	movq	%rsi, 25856(%rsp)       # 8-byte Spill
	movq	%rdi, %rsi
	movq	%rsi, 25848(%rsp)       # 8-byte Spill
	movq	%rdi, %rsi
	movq	%rsi, 25840(%rsp)       # 8-byte Spill
	movq	38416(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25832(%rsp)       # 8-byte Spill
	movq	38440(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25824(%rsp)       # 8-byte Spill
	movq	38400(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25816(%rsp)       # 8-byte Spill
	movq	38392(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25808(%rsp)       # 8-byte Spill
	movq	38384(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25800(%rsp)       # 8-byte Spill
	movq	38376(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25792(%rsp)       # 8-byte Spill
	movq	38368(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25784(%rsp)       # 8-byte Spill
	movq	38360(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25776(%rsp)       # 8-byte Spill
	movq	38352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25768(%rsp)       # 8-byte Spill
	movq	38424(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25760(%rsp)       # 8-byte Spill
	movq	38432(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25752(%rsp)       # 8-byte Spill
	movq	38408(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25744(%rsp)       # 8-byte Spill
	movq	38528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25736(%rsp)       # 8-byte Spill
	movq	38520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25728(%rsp)       # 8-byte Spill
	movq	38512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25720(%rsp)       # 8-byte Spill
	movq	38504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25712(%rsp)       # 8-byte Spill
	movq	38496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25704(%rsp)       # 8-byte Spill
	movq	38488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25696(%rsp)       # 8-byte Spill
	movq	38480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25688(%rsp)       # 8-byte Spill
	movq	38472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25680(%rsp)       # 8-byte Spill
	movq	38464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25672(%rsp)       # 8-byte Spill
	movq	38456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25664(%rsp)       # 8-byte Spill
	movq	38448(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25656(%rsp)       # 8-byte Spill
	movq	38344(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 25644(%rsp)       # 4-byte Spill
	movl	25536(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25592(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movq	%rsi, 25648(%rsp)       # 8-byte Spill
	movq	38416(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	38440(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	38400(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	38392(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	38384(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	38376(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	38368(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	38360(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	38352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	38424(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	38432(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	38408(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	38528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	38520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	38512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	38504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	38496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	38488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	38480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	38472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	38464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	38456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	38448(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	%rdi, %rsi
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	%rdi, %rsi
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	25532(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movq	%rdi, 25232(%rsp)       # 8-byte Spill
	movl	%ecx, 25600(%rsp)       # 4-byte Spill
	movl	%r9d, 25596(%rsp)       # 4-byte Spill
	movl	%r8d, 25636(%rsp)       # 4-byte Spill
	movl	%r10d, 25632(%rsp)      # 4-byte Spill
	movl	%r11d, 25628(%rsp)      # 4-byte Spill
	movl	%ebx, 25624(%rsp)       # 4-byte Spill
	movl	%ebp, 25620(%rsp)       # 4-byte Spill
	movl	%r14d, 25616(%rsp)      # 4-byte Spill
	movl	%r15d, 25612(%rsp)      # 4-byte Spill
	movl	%r12d, 25608(%rsp)      # 4-byte Spill
	movl	%r13d, 25604(%rsp)      # 4-byte Spill
	movl	%edx, 25228(%rsp)       # 4-byte Spill
	je	.LBB68_41
	jmp	.LBB68_542
.LBB68_37:                              # %if.end33
                                        # =>This Inner Loop Header: Depth=1
	movl	25544(%rsp), %eax       # 4-byte Reload
	movl	25548(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	xorl	%esi, %esi
	movl	%esi, %edi
	cmpl	$0, %ecx
	movl	%edx, %esi
	movq	38416(%rsp), %r8        # 8-byte Reload
	movq	38440(%rsp), %r9        # 8-byte Reload
	movq	38400(%rsp), %r10       # 8-byte Reload
	movq	38392(%rsp), %r11       # 8-byte Reload
	movq	38384(%rsp), %rbx       # 8-byte Reload
	movq	38376(%rsp), %r14       # 8-byte Reload
	movq	38368(%rsp), %r15       # 8-byte Reload
	movq	38360(%rsp), %r12       # 8-byte Reload
	movq	38352(%rsp), %r13       # 8-byte Reload
	movq	38424(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	38432(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	38408(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	38528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	38520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	38512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	38504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	38496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	38488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	38480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	38472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	38464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	38456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	38448(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	%rdi, %rsi
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	%rdi, %rsi
	movl	%eax, 25224(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 25220(%rsp)       # 4-byte Spill
	movq	%rdi, 25232(%rsp)       # 8-byte Spill
	movq	%rbp, 25448(%rsp)       # 8-byte Spill
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	%r8, 25520(%rsp)        # 8-byte Spill
	movq	%r9, 25512(%rsp)        # 8-byte Spill
	movq	%r10, 25504(%rsp)       # 8-byte Spill
	movq	%r11, 25496(%rsp)       # 8-byte Spill
	movq	%rbx, 25488(%rsp)       # 8-byte Spill
	movq	%r14, 25480(%rsp)       # 8-byte Spill
	movq	%r15, 25472(%rsp)       # 8-byte Spill
	movq	%r12, 25464(%rsp)       # 8-byte Spill
	movq	%r13, 25456(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.38:                               # %if.end38
                                        #   in Loop: Header=BB68_37 Depth=1
	movq	25568(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15515, 38596(%rsp)     # imm = 0x3C9B
	shll	$8, %ecx
	movq	38560(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$15516, 38596(%rsp)     # imm = 0x3C9C
	movb	(%rsi), %dil
	movl	$15518, 38596(%rsp)     # imm = 0x3C9E
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$15519, 38596(%rsp)     # imm = 0x3C9F
	movl	25224(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	38344(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$15521, 38596(%rsp)     # imm = 0x3CA1
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$15522, 38596(%rsp)     # imm = 0x3CA2
	movl	25220(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	25576(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$15523, 38596(%rsp)     # imm = 0x3CA3
	movq	25560(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$15525, 38596(%rsp)     # imm = 0x3CA5
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$15528, 38596(%rsp)     # imm = 0x3CA8
	cmpl	$0, %ebx
	movl	%ecx, 25216(%rsp)       # 4-byte Spill
	movl	%r8d, 25212(%rsp)       # 4-byte Spill
	movl	%r10d, 25208(%rsp)      # 4-byte Spill
	jne	.LBB68_40
# %bb.39:                               # %if.then53
                                        #   in Loop: Header=BB68_37 Depth=1
	movq	25552(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15530, 38596(%rsp)     # imm = 0x3CAA
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$15583, 38596(%rsp)     # imm = 0x3CDF
.LBB68_40:                              # %if.end56
                                        #   in Loop: Header=BB68_37 Depth=1
	movl	25224(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	25216(%rsp), %ecx       # 4-byte Reload
	movl	25212(%rsp), %edx       # 4-byte Reload
	movl	25208(%rsp), %esi       # 4-byte Reload
	movl	25212(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 25588(%rsp)       # 4-byte Spill
	movl	%edx, 25584(%rsp)       # 4-byte Spill
	movl	%esi, 25548(%rsp)       # 4-byte Spill
	movl	%edi, 25544(%rsp)       # 4-byte Spill
	jg	.LBB68_36
	jmp	.LBB68_37
.LBB68_41:                              # %sw.bb62
	movl	25592(%rsp), %eax       # 4-byte Reload
	movq	25648(%rsp), %rcx       # 8-byte Reload
	movq	25656(%rsp), %rdx       # 8-byte Reload
	movq	25664(%rsp), %rsi       # 8-byte Reload
	movq	25672(%rsp), %rdi       # 8-byte Reload
	movq	25680(%rsp), %r8        # 8-byte Reload
	movq	25688(%rsp), %r9        # 8-byte Reload
	movq	25696(%rsp), %r10       # 8-byte Reload
	movq	25704(%rsp), %r11       # 8-byte Reload
	movq	25712(%rsp), %rbx       # 8-byte Reload
	movq	25720(%rsp), %r14       # 8-byte Reload
	movq	25728(%rsp), %r15       # 8-byte Reload
	movq	25736(%rsp), %r12       # 8-byte Reload
	movq	25744(%rsp), %r13       # 8-byte Reload
	movq	25752(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 25200(%rsp)       # 8-byte Spill
	movq	25760(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25192(%rsp)       # 8-byte Spill
	movq	25768(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25184(%rsp)       # 8-byte Spill
	movq	25776(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25176(%rsp)       # 8-byte Spill
	movq	25784(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25168(%rsp)       # 8-byte Spill
	movq	25792(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25160(%rsp)       # 8-byte Spill
	movq	25800(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25152(%rsp)       # 8-byte Spill
	movq	25808(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25144(%rsp)       # 8-byte Spill
	movq	25816(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25136(%rsp)       # 8-byte Spill
	movq	25824(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25128(%rsp)       # 8-byte Spill
	movq	25832(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25120(%rsp)       # 8-byte Spill
	movq	25840(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25112(%rsp)       # 8-byte Spill
	movq	25848(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25104(%rsp)       # 8-byte Spill
	movq	25856(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 25100(%rsp)       # 4-byte Spill
	movl	25644(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25096(%rsp)       # 4-byte Spill
	movl	25872(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25092(%rsp)       # 4-byte Spill
	movl	25876(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25088(%rsp)       # 4-byte Spill
	movl	25880(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25084(%rsp)       # 4-byte Spill
	movl	25884(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25080(%rsp)       # 4-byte Spill
	movl	25888(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25076(%rsp)       # 4-byte Spill
	movl	25892(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25072(%rsp)       # 4-byte Spill
	movl	25896(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25068(%rsp)       # 4-byte Spill
	movl	25900(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25064(%rsp)       # 4-byte Spill
	movl	25640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25060(%rsp)       # 4-byte Spill
	movl	25596(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25056(%rsp)       # 4-byte Spill
	movl	25600(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25052(%rsp)       # 4-byte Spill
	movl	25604(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25048(%rsp)       # 4-byte Spill
	movl	25608(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25044(%rsp)       # 4-byte Spill
	movl	25612(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25040(%rsp)       # 4-byte Spill
	movl	25616(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25036(%rsp)       # 4-byte Spill
	movl	25620(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25032(%rsp)       # 4-byte Spill
	movl	25624(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25028(%rsp)       # 4-byte Spill
	movl	25628(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25024(%rsp)       # 4-byte Spill
	movl	25632(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25020(%rsp)       # 4-byte Spill
	movl	25636(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 25008(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$11, (%rcx)
	movl	$15588, 38596(%rsp)     # imm = 0x3CE4
	movl	25100(%rsp), %ecx       # 4-byte Reload
	cmpl	$7, %ecx
	movl	%eax, 25004(%rsp)       # 4-byte Spill
	movq	%rdx, 24992(%rsp)       # 8-byte Spill
	movq	%rsi, 24984(%rsp)       # 8-byte Spill
	movq	%rdi, 24976(%rsp)       # 8-byte Spill
	movq	%r8, 24968(%rsp)        # 8-byte Spill
	movq	%r9, 24960(%rsp)        # 8-byte Spill
	movq	%r10, 24952(%rsp)       # 8-byte Spill
	movq	%r11, 24944(%rsp)       # 8-byte Spill
	movq	%rbx, 24936(%rsp)       # 8-byte Spill
	movq	%r14, 24928(%rsp)       # 8-byte Spill
	movq	%r15, 24920(%rsp)       # 8-byte Spill
	movq	%r12, 24912(%rsp)       # 8-byte Spill
	movq	%r13, 24904(%rsp)       # 8-byte Spill
	movq	%rbp, 24896(%rsp)       # 8-byte Spill
	jle	.LBB68_43
# %bb.42:                               # %sw.bb62.if.then69_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	movl	32(%rax), %ecx
	movl	$15595, 38596(%rsp)     # imm = 0x3CEB
	movl	25100(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 24892(%rsp)       # 4-byte Spill
	movl	%edx, 24888(%rsp)       # 4-byte Spill
	jmp	.LBB68_44
.LBB68_43:                              # %if.end79.lr.ph
	movq	38560(%rsp), %rax       # 8-byte Reload
	addq	$8, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movq	38560(%rsp), %rdx       # 8-byte Reload
	addq	$12, %rdx
	movq	38560(%rsp), %rsi       # 8-byte Reload
	addq	$16, %rsi
	movq	38560(%rsp), %rdi       # 8-byte Reload
	movl	8(%rdi), %r8d
	movl	$15603, 38596(%rsp)     # imm = 0x3CF3
	movl	25100(%rsp), %r9d       # 4-byte Reload
	movq	%rax, 24880(%rsp)       # 8-byte Spill
	movq	%rcx, 24872(%rsp)       # 8-byte Spill
	movq	%rdx, 24864(%rsp)       # 8-byte Spill
	movq	%rsi, 24856(%rsp)       # 8-byte Spill
	movl	%r8d, 24852(%rsp)       # 4-byte Spill
	movl	%r9d, 24848(%rsp)       # 4-byte Spill
	jmp	.LBB68_45
.LBB68_44:                              # %if.then69
	movl	24888(%rsp), %eax       # 4-byte Reload
	movl	24892(%rsp), %ecx       # 4-byte Reload
	movl	$4294967291, %edx       # imm = 0xFFFFFFFB
	addl	$-8, %eax
	movl	%ecx, 24844(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	24844(%rsp), %esi       # 4-byte Reload
	shrl	%cl, %esi
	movq	25200(%rsp), %rdi       # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$15612, 38596(%rsp)     # imm = 0x3CFC
	andl	$255, %esi
	cmpl	$90, %esi
	movl	25004(%rsp), %esi       # 4-byte Reload
	movl	25020(%rsp), %r8d       # 4-byte Reload
	movl	25024(%rsp), %r9d       # 4-byte Reload
	movl	25028(%rsp), %r10d      # 4-byte Reload
	movl	25032(%rsp), %r11d      # 4-byte Reload
	movl	25036(%rsp), %ebx       # 4-byte Reload
	movl	25040(%rsp), %ebp       # 4-byte Reload
	movl	25044(%rsp), %r14d      # 4-byte Reload
	movl	25048(%rsp), %r15d      # 4-byte Reload
	movl	25052(%rsp), %r12d      # 4-byte Reload
	movl	25056(%rsp), %r13d      # 4-byte Reload
	movl	25060(%rsp), %ecx       # 4-byte Reload
	movl	25064(%rsp), %edi       # 4-byte Reload
	movl	%eax, 24840(%rsp)       # 4-byte Spill
	movl	25068(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26208(%rsp)       # 4-byte Spill
	movl	25072(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26204(%rsp)       # 4-byte Spill
	movl	25076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26200(%rsp)       # 4-byte Spill
	movl	25080(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26196(%rsp)       # 4-byte Spill
	movl	25084(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26192(%rsp)       # 4-byte Spill
	movl	25088(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26188(%rsp)       # 4-byte Spill
	movl	25092(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26184(%rsp)       # 4-byte Spill
	movl	25096(%rsp), %eax       # 4-byte Reload
	movl	%esi, 25948(%rsp)       # 4-byte Spill
	movq	25008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26168(%rsp)       # 8-byte Spill
	movq	25104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26160(%rsp)       # 8-byte Spill
	movq	25112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26152(%rsp)       # 8-byte Spill
	movq	25120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26144(%rsp)       # 8-byte Spill
	movq	25128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26136(%rsp)       # 8-byte Spill
	movq	25136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26128(%rsp)       # 8-byte Spill
	movq	25144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26120(%rsp)       # 8-byte Spill
	movq	25152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26112(%rsp)       # 8-byte Spill
	movq	25160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26104(%rsp)       # 8-byte Spill
	movq	25168(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26096(%rsp)       # 8-byte Spill
	movq	25176(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26088(%rsp)       # 8-byte Spill
	movq	25184(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26080(%rsp)       # 8-byte Spill
	movq	25192(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26072(%rsp)       # 8-byte Spill
	movq	24896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26064(%rsp)       # 8-byte Spill
	movq	24904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26056(%rsp)       # 8-byte Spill
	movq	24912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26048(%rsp)       # 8-byte Spill
	movq	24920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26040(%rsp)       # 8-byte Spill
	movq	24928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26032(%rsp)       # 8-byte Spill
	movq	24936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26024(%rsp)       # 8-byte Spill
	movq	24944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26016(%rsp)       # 8-byte Spill
	movq	24952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26008(%rsp)       # 8-byte Spill
	movq	24960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26000(%rsp)       # 8-byte Spill
	movq	24968(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25992(%rsp)       # 8-byte Spill
	movq	24976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25984(%rsp)       # 8-byte Spill
	movq	24984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25976(%rsp)       # 8-byte Spill
	movq	24992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25968(%rsp)       # 8-byte Spill
	movq	25200(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 25956(%rsp)       # 4-byte Spill
	movl	24840(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25904(%rsp)       # 4-byte Spill
	movl	25076(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 25960(%rsp)       # 8-byte Spill
	movq	25120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	25128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	25136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	25144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	25152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	25160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	25168(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	25176(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	25184(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	25192(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	24896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	24904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	24912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	24920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	24928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	24936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	24944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	24952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	24960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	24968(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	24976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	24984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	24992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	25112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	25104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	25008(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	25096(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	25092(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	25088(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	25084(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	25080(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	25072(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	25068(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	25064(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	25060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	25056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	25052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	25048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	25044(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	25040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	25036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	25032(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	25028(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	25024(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	25020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	25004(%rsp), %eax       # 4-byte Reload
	movl	%ecx, 25952(%rsp)       # 4-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%edi, 26212(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%r8d, 25944(%rsp)       # 4-byte Spill
	movl	%r9d, 25940(%rsp)       # 4-byte Spill
	movl	%r10d, 25936(%rsp)      # 4-byte Spill
	movl	%r11d, 25932(%rsp)      # 4-byte Spill
	movl	%ebx, 25928(%rsp)       # 4-byte Spill
	movl	%ebp, 25924(%rsp)       # 4-byte Spill
	movl	%r14d, 25920(%rsp)      # 4-byte Spill
	movl	%r15d, 25916(%rsp)      # 4-byte Spill
	movl	%r12d, 25912(%rsp)      # 4-byte Spill
	movl	%r13d, 25908(%rsp)      # 4-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_49
	jmp	.LBB68_542
.LBB68_45:                              # %if.end79
                                        # =>This Inner Loop Header: Depth=1
	movl	24848(%rsp), %eax       # 4-byte Reload
	movl	24852(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	25076(%rsp), %esi       # 4-byte Reload
	movq	25120(%rsp), %rdi       # 8-byte Reload
	movq	25128(%rsp), %r8        # 8-byte Reload
	movq	25136(%rsp), %r9        # 8-byte Reload
	movq	25144(%rsp), %r10       # 8-byte Reload
	movq	25152(%rsp), %r11       # 8-byte Reload
	movq	25160(%rsp), %rbx       # 8-byte Reload
	movq	25168(%rsp), %r14       # 8-byte Reload
	movq	25176(%rsp), %r15       # 8-byte Reload
	movq	25184(%rsp), %r12       # 8-byte Reload
	movq	25192(%rsp), %r13       # 8-byte Reload
	movq	24896(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	24904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	24912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	24920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	24928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	24936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	24944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	24952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	24960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	24968(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	24976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	24984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	24992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	25112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	25104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	25008(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 24836(%rsp)       # 4-byte Spill
	movl	25096(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	25092(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	25088(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	25084(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	25080(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	25072(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	25068(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	25064(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	25060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	25056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	25052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	25048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	25044(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	25040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	25036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	25032(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	25028(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	25024(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	25020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	25004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 24832(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.46:                               # %if.end85
                                        #   in Loop: Header=BB68_45 Depth=1
	movq	24872(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15614, 38596(%rsp)     # imm = 0x3CFE
	shll	$8, %ecx
	movq	38560(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$15615, 38596(%rsp)     # imm = 0x3CFF
	movb	(%rsi), %dil
	movl	$15617, 38596(%rsp)     # imm = 0x3D01
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$15618, 38596(%rsp)     # imm = 0x3D02
	movl	24836(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	25200(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$15620, 38596(%rsp)     # imm = 0x3D04
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$15621, 38596(%rsp)     # imm = 0x3D05
	movl	24832(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	24880(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$15622, 38596(%rsp)     # imm = 0x3D06
	movq	24864(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$15624, 38596(%rsp)     # imm = 0x3D08
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$15627, 38596(%rsp)     # imm = 0x3D0B
	cmpl	$0, %ebx
	movl	%ecx, 24828(%rsp)       # 4-byte Spill
	movl	%r8d, 24824(%rsp)       # 4-byte Spill
	movl	%r10d, 24820(%rsp)      # 4-byte Spill
	jne	.LBB68_48
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB68_45 Depth=1
	movq	24856(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15629, 38596(%rsp)     # imm = 0x3D0D
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$15682, 38596(%rsp)     # imm = 0x3D42
.LBB68_48:                              # %if.end112
                                        #   in Loop: Header=BB68_45 Depth=1
	movl	24836(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	24828(%rsp), %ecx       # 4-byte Reload
	movl	24824(%rsp), %edx       # 4-byte Reload
	movl	24820(%rsp), %esi       # 4-byte Reload
	movl	24824(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 24892(%rsp)       # 4-byte Spill
	movl	%edx, 24888(%rsp)       # 4-byte Spill
	movl	%esi, 24852(%rsp)       # 4-byte Spill
	movl	%edi, 24848(%rsp)       # 4-byte Spill
	jg	.LBB68_44
	jmp	.LBB68_45
.LBB68_49:                              # %sw.bb119
	movl	25904(%rsp), %eax       # 4-byte Reload
	movq	25960(%rsp), %rcx       # 8-byte Reload
	movq	25968(%rsp), %rdx       # 8-byte Reload
	movq	25976(%rsp), %rsi       # 8-byte Reload
	movq	25984(%rsp), %rdi       # 8-byte Reload
	movq	25992(%rsp), %r8        # 8-byte Reload
	movq	26000(%rsp), %r9        # 8-byte Reload
	movq	26008(%rsp), %r10       # 8-byte Reload
	movq	26016(%rsp), %r11       # 8-byte Reload
	movq	26024(%rsp), %rbx       # 8-byte Reload
	movq	26032(%rsp), %r14       # 8-byte Reload
	movq	26040(%rsp), %r15       # 8-byte Reload
	movq	26048(%rsp), %r12       # 8-byte Reload
	movq	26056(%rsp), %r13       # 8-byte Reload
	movq	26064(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 24808(%rsp)       # 8-byte Spill
	movq	26072(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24800(%rsp)       # 8-byte Spill
	movq	26080(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24792(%rsp)       # 8-byte Spill
	movq	26088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24784(%rsp)       # 8-byte Spill
	movq	26096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24776(%rsp)       # 8-byte Spill
	movq	26104(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24768(%rsp)       # 8-byte Spill
	movq	26112(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24760(%rsp)       # 8-byte Spill
	movq	26120(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24752(%rsp)       # 8-byte Spill
	movq	26128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24744(%rsp)       # 8-byte Spill
	movq	26136(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24736(%rsp)       # 8-byte Spill
	movq	26144(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24728(%rsp)       # 8-byte Spill
	movq	26152(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24720(%rsp)       # 8-byte Spill
	movq	26160(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24712(%rsp)       # 8-byte Spill
	movq	26168(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 24708(%rsp)       # 4-byte Spill
	movl	25956(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24704(%rsp)       # 4-byte Spill
	movl	26184(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24700(%rsp)       # 4-byte Spill
	movl	26188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24696(%rsp)       # 4-byte Spill
	movl	26192(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24692(%rsp)       # 4-byte Spill
	movl	26196(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24688(%rsp)       # 4-byte Spill
	movl	26200(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24684(%rsp)       # 4-byte Spill
	movl	26204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24680(%rsp)       # 4-byte Spill
	movl	26208(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24676(%rsp)       # 4-byte Spill
	movl	26212(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24672(%rsp)       # 4-byte Spill
	movl	25952(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24668(%rsp)       # 4-byte Spill
	movl	25908(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24664(%rsp)       # 4-byte Spill
	movl	25912(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24660(%rsp)       # 4-byte Spill
	movl	25916(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24656(%rsp)       # 4-byte Spill
	movl	25920(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24652(%rsp)       # 4-byte Spill
	movl	25924(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24648(%rsp)       # 4-byte Spill
	movl	25928(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24644(%rsp)       # 4-byte Spill
	movl	25932(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24640(%rsp)       # 4-byte Spill
	movl	25936(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24636(%rsp)       # 4-byte Spill
	movl	25940(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24632(%rsp)       # 4-byte Spill
	movl	25944(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24628(%rsp)       # 4-byte Spill
	movl	25948(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 24616(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$12, (%rcx)
	movl	$15687, 38596(%rsp)     # imm = 0x3D47
	movl	24708(%rsp), %ecx       # 4-byte Reload
	cmpl	$7, %ecx
	movl	%eax, 24612(%rsp)       # 4-byte Spill
	movq	%rdx, 24600(%rsp)       # 8-byte Spill
	movq	%rsi, 24592(%rsp)       # 8-byte Spill
	movq	%rdi, 24584(%rsp)       # 8-byte Spill
	movq	%r8, 24576(%rsp)        # 8-byte Spill
	movq	%r9, 24568(%rsp)        # 8-byte Spill
	movq	%r10, 24560(%rsp)       # 8-byte Spill
	movq	%r11, 24552(%rsp)       # 8-byte Spill
	movq	%rbx, 24544(%rsp)       # 8-byte Spill
	movq	%r14, 24536(%rsp)       # 8-byte Spill
	movq	%r15, 24528(%rsp)       # 8-byte Spill
	movq	%r12, 24520(%rsp)       # 8-byte Spill
	movq	%r13, 24512(%rsp)       # 8-byte Spill
	movq	%rbp, 24504(%rsp)       # 8-byte Spill
	jle	.LBB68_51
# %bb.50:                               # %sw.bb119.if.then126_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	movl	32(%rax), %ecx
	movl	$15694, 38596(%rsp)     # imm = 0x3D4E
	movl	24708(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 24500(%rsp)       # 4-byte Spill
	movl	%edx, 24496(%rsp)       # 4-byte Spill
	jmp	.LBB68_52
.LBB68_51:                              # %if.end136.lr.ph
	movq	38560(%rsp), %rax       # 8-byte Reload
	addq	$8, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movq	38560(%rsp), %rdx       # 8-byte Reload
	addq	$12, %rdx
	movq	38560(%rsp), %rsi       # 8-byte Reload
	addq	$16, %rsi
	movq	38560(%rsp), %rdi       # 8-byte Reload
	movl	8(%rdi), %r8d
	movl	$15702, 38596(%rsp)     # imm = 0x3D56
	movl	24708(%rsp), %r9d       # 4-byte Reload
	movq	%rax, 24488(%rsp)       # 8-byte Spill
	movq	%rcx, 24480(%rsp)       # 8-byte Spill
	movq	%rdx, 24472(%rsp)       # 8-byte Spill
	movq	%rsi, 24464(%rsp)       # 8-byte Spill
	movl	%r8d, 24460(%rsp)       # 4-byte Spill
	movl	%r9d, 24456(%rsp)       # 4-byte Spill
	jmp	.LBB68_53
.LBB68_52:                              # %if.then126
	movl	24496(%rsp), %eax       # 4-byte Reload
	movl	24500(%rsp), %ecx       # 4-byte Reload
	movl	$4294967291, %edx       # imm = 0xFFFFFFFB
	addl	$-8, %eax
	movl	%ecx, 24452(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	24452(%rsp), %esi       # 4-byte Reload
	shrl	%cl, %esi
	movq	24808(%rsp), %rdi       # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$15711, 38596(%rsp)     # imm = 0x3D5F
	andl	$255, %esi
	cmpl	$104, %esi
	movl	24612(%rsp), %esi       # 4-byte Reload
	movl	24628(%rsp), %r8d       # 4-byte Reload
	movl	24632(%rsp), %r9d       # 4-byte Reload
	movl	24636(%rsp), %r10d      # 4-byte Reload
	movl	24640(%rsp), %r11d      # 4-byte Reload
	movl	24644(%rsp), %ebx       # 4-byte Reload
	movl	24648(%rsp), %ebp       # 4-byte Reload
	movl	24652(%rsp), %r14d      # 4-byte Reload
	movl	24656(%rsp), %r15d      # 4-byte Reload
	movl	24660(%rsp), %r12d      # 4-byte Reload
	movl	24664(%rsp), %r13d      # 4-byte Reload
	movl	24668(%rsp), %ecx       # 4-byte Reload
	movl	24672(%rsp), %edi       # 4-byte Reload
	movl	%eax, 24448(%rsp)       # 4-byte Spill
	movl	24676(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26520(%rsp)       # 4-byte Spill
	movl	24680(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26516(%rsp)       # 4-byte Spill
	movl	24684(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26512(%rsp)       # 4-byte Spill
	movl	24688(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26508(%rsp)       # 4-byte Spill
	movl	24692(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26504(%rsp)       # 4-byte Spill
	movl	24696(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26500(%rsp)       # 4-byte Spill
	movl	24700(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26496(%rsp)       # 4-byte Spill
	movl	24704(%rsp), %eax       # 4-byte Reload
	movl	%esi, 26260(%rsp)       # 4-byte Spill
	movq	24616(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26480(%rsp)       # 8-byte Spill
	movq	24712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26472(%rsp)       # 8-byte Spill
	movq	24720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26464(%rsp)       # 8-byte Spill
	movq	24728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26456(%rsp)       # 8-byte Spill
	movq	24736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26448(%rsp)       # 8-byte Spill
	movq	24744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26440(%rsp)       # 8-byte Spill
	movq	24752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26432(%rsp)       # 8-byte Spill
	movq	24760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26424(%rsp)       # 8-byte Spill
	movq	24768(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26416(%rsp)       # 8-byte Spill
	movq	24776(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26408(%rsp)       # 8-byte Spill
	movq	24784(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26400(%rsp)       # 8-byte Spill
	movq	24792(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26392(%rsp)       # 8-byte Spill
	movq	24800(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26384(%rsp)       # 8-byte Spill
	movq	24504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26376(%rsp)       # 8-byte Spill
	movq	24512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26368(%rsp)       # 8-byte Spill
	movq	24520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26360(%rsp)       # 8-byte Spill
	movq	24528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26352(%rsp)       # 8-byte Spill
	movq	24536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26344(%rsp)       # 8-byte Spill
	movq	24544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26336(%rsp)       # 8-byte Spill
	movq	24552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26328(%rsp)       # 8-byte Spill
	movq	24560(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26320(%rsp)       # 8-byte Spill
	movq	24568(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26312(%rsp)       # 8-byte Spill
	movq	24576(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26304(%rsp)       # 8-byte Spill
	movq	24584(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26296(%rsp)       # 8-byte Spill
	movq	24592(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26288(%rsp)       # 8-byte Spill
	movq	24600(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26280(%rsp)       # 8-byte Spill
	movq	24808(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 26268(%rsp)       # 4-byte Spill
	movl	24448(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26216(%rsp)       # 4-byte Spill
	movl	24684(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 26272(%rsp)       # 8-byte Spill
	movq	24728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	24736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	24744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	24752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	24760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	24768(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	24776(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	24784(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	24792(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	24800(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	24504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	24512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	24520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	24528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	24536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	24544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	24552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	24560(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	24568(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	24576(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	24584(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	24592(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	24600(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	24720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	24712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	24616(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	24704(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	24700(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	24696(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	24692(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	24688(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	24680(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	24676(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	24672(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	24668(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	24664(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	24660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	24656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	24652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	24648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	24644(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	24640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	24636(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	24632(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	24628(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	24612(%rsp), %eax       # 4-byte Reload
	movl	%ecx, 26264(%rsp)       # 4-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%edi, 26524(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%r8d, 26256(%rsp)       # 4-byte Spill
	movl	%r9d, 26252(%rsp)       # 4-byte Spill
	movl	%r10d, 26248(%rsp)      # 4-byte Spill
	movl	%r11d, 26244(%rsp)      # 4-byte Spill
	movl	%ebx, 26240(%rsp)       # 4-byte Spill
	movl	%ebp, 26236(%rsp)       # 4-byte Spill
	movl	%r14d, 26232(%rsp)      # 4-byte Spill
	movl	%r15d, 26228(%rsp)      # 4-byte Spill
	movl	%r12d, 26224(%rsp)      # 4-byte Spill
	movl	%r13d, 26220(%rsp)      # 4-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_57
	jmp	.LBB68_542
.LBB68_53:                              # %if.end136
                                        # =>This Inner Loop Header: Depth=1
	movl	24456(%rsp), %eax       # 4-byte Reload
	movl	24460(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	24684(%rsp), %esi       # 4-byte Reload
	movq	24728(%rsp), %rdi       # 8-byte Reload
	movq	24736(%rsp), %r8        # 8-byte Reload
	movq	24744(%rsp), %r9        # 8-byte Reload
	movq	24752(%rsp), %r10       # 8-byte Reload
	movq	24760(%rsp), %r11       # 8-byte Reload
	movq	24768(%rsp), %rbx       # 8-byte Reload
	movq	24776(%rsp), %r14       # 8-byte Reload
	movq	24784(%rsp), %r15       # 8-byte Reload
	movq	24792(%rsp), %r12       # 8-byte Reload
	movq	24800(%rsp), %r13       # 8-byte Reload
	movq	24504(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	24512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	24520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	24528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	24536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	24544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	24552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	24560(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	24568(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	24576(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	24584(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	24592(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	24600(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	24720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	24712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	24616(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 24444(%rsp)       # 4-byte Spill
	movl	24704(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	24700(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	24696(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	24692(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	24688(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	24680(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	24676(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	24672(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	24668(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	24664(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	24660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	24656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	24652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	24648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	24644(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	24640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	24636(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	24632(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	24628(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	24612(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 24440(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.54:                               # %if.end142
                                        #   in Loop: Header=BB68_53 Depth=1
	movq	24480(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15713, 38596(%rsp)     # imm = 0x3D61
	shll	$8, %ecx
	movq	38560(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$15714, 38596(%rsp)     # imm = 0x3D62
	movb	(%rsi), %dil
	movl	$15716, 38596(%rsp)     # imm = 0x3D64
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$15717, 38596(%rsp)     # imm = 0x3D65
	movl	24444(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	24808(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$15719, 38596(%rsp)     # imm = 0x3D67
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$15720, 38596(%rsp)     # imm = 0x3D68
	movl	24440(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	24488(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$15721, 38596(%rsp)     # imm = 0x3D69
	movq	24472(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$15723, 38596(%rsp)     # imm = 0x3D6B
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$15726, 38596(%rsp)     # imm = 0x3D6E
	cmpl	$0, %ebx
	movl	%ecx, 24436(%rsp)       # 4-byte Spill
	movl	%r8d, 24432(%rsp)       # 4-byte Spill
	movl	%r10d, 24428(%rsp)      # 4-byte Spill
	jne	.LBB68_56
# %bb.55:                               # %if.then165
                                        #   in Loop: Header=BB68_53 Depth=1
	movq	24464(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15728, 38596(%rsp)     # imm = 0x3D70
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$15781, 38596(%rsp)     # imm = 0x3DA5
.LBB68_56:                              # %if.end169
                                        #   in Loop: Header=BB68_53 Depth=1
	movl	24444(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	24436(%rsp), %ecx       # 4-byte Reload
	movl	24432(%rsp), %edx       # 4-byte Reload
	movl	24428(%rsp), %esi       # 4-byte Reload
	movl	24432(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 24500(%rsp)       # 4-byte Spill
	movl	%edx, 24496(%rsp)       # 4-byte Spill
	movl	%esi, 24460(%rsp)       # 4-byte Spill
	movl	%edi, 24456(%rsp)       # 4-byte Spill
	jg	.LBB68_52
	jmp	.LBB68_53
.LBB68_57:                              # %sw.bb176
	movl	26216(%rsp), %eax       # 4-byte Reload
	movq	26272(%rsp), %rcx       # 8-byte Reload
	movq	26280(%rsp), %rdx       # 8-byte Reload
	movq	26288(%rsp), %rsi       # 8-byte Reload
	movq	26296(%rsp), %rdi       # 8-byte Reload
	movq	26304(%rsp), %r8        # 8-byte Reload
	movq	26312(%rsp), %r9        # 8-byte Reload
	movq	26320(%rsp), %r10       # 8-byte Reload
	movq	26328(%rsp), %r11       # 8-byte Reload
	movq	26336(%rsp), %rbx       # 8-byte Reload
	movq	26344(%rsp), %r14       # 8-byte Reload
	movq	26352(%rsp), %r15       # 8-byte Reload
	movq	26360(%rsp), %r12       # 8-byte Reload
	movq	26368(%rsp), %r13       # 8-byte Reload
	movq	26376(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 24416(%rsp)       # 8-byte Spill
	movq	26384(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24408(%rsp)       # 8-byte Spill
	movq	26392(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24400(%rsp)       # 8-byte Spill
	movq	26400(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24392(%rsp)       # 8-byte Spill
	movq	26408(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24384(%rsp)       # 8-byte Spill
	movq	26416(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24376(%rsp)       # 8-byte Spill
	movq	26424(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24368(%rsp)       # 8-byte Spill
	movq	26432(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24360(%rsp)       # 8-byte Spill
	movq	26440(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24352(%rsp)       # 8-byte Spill
	movq	26448(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24344(%rsp)       # 8-byte Spill
	movq	26456(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24336(%rsp)       # 8-byte Spill
	movq	26464(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24328(%rsp)       # 8-byte Spill
	movq	26472(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 24320(%rsp)       # 8-byte Spill
	movq	26480(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 24316(%rsp)       # 4-byte Spill
	movl	26268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24312(%rsp)       # 4-byte Spill
	movl	26496(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24308(%rsp)       # 4-byte Spill
	movl	26500(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24304(%rsp)       # 4-byte Spill
	movl	26504(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24300(%rsp)       # 4-byte Spill
	movl	26508(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24296(%rsp)       # 4-byte Spill
	movl	26512(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24292(%rsp)       # 4-byte Spill
	movl	26516(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24288(%rsp)       # 4-byte Spill
	movl	26520(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24284(%rsp)       # 4-byte Spill
	movl	26524(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24280(%rsp)       # 4-byte Spill
	movl	26264(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24276(%rsp)       # 4-byte Spill
	movl	26220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24272(%rsp)       # 4-byte Spill
	movl	26224(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24268(%rsp)       # 4-byte Spill
	movl	26228(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24264(%rsp)       # 4-byte Spill
	movl	26232(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24260(%rsp)       # 4-byte Spill
	movl	26236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24256(%rsp)       # 4-byte Spill
	movl	26240(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24252(%rsp)       # 4-byte Spill
	movl	26244(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24248(%rsp)       # 4-byte Spill
	movl	26248(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24244(%rsp)       # 4-byte Spill
	movl	26252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24240(%rsp)       # 4-byte Spill
	movl	26256(%rsp), %eax       # 4-byte Reload
	movl	%eax, 24236(%rsp)       # 4-byte Spill
	movl	26260(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 24224(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$13, (%rcx)
	movl	$15786, 38596(%rsp)     # imm = 0x3DAA
	movl	24316(%rsp), %ecx       # 4-byte Reload
	cmpl	$7, %ecx
	movl	%eax, 24220(%rsp)       # 4-byte Spill
	movq	%rdx, 24208(%rsp)       # 8-byte Spill
	movq	%rsi, 24200(%rsp)       # 8-byte Spill
	movq	%rdi, 24192(%rsp)       # 8-byte Spill
	movq	%r8, 24184(%rsp)        # 8-byte Spill
	movq	%r9, 24176(%rsp)        # 8-byte Spill
	movq	%r10, 24168(%rsp)       # 8-byte Spill
	movq	%r11, 24160(%rsp)       # 8-byte Spill
	movq	%rbx, 24152(%rsp)       # 8-byte Spill
	movq	%r14, 24144(%rsp)       # 8-byte Spill
	movq	%r15, 24136(%rsp)       # 8-byte Spill
	movq	%r12, 24128(%rsp)       # 8-byte Spill
	movq	%r13, 24120(%rsp)       # 8-byte Spill
	movq	%rbp, 24112(%rsp)       # 8-byte Spill
	jle	.LBB68_59
# %bb.58:                               # %sw.bb176.if.then183_crit_edge
	movq	38576(%rsp), %rax       # 8-byte Reload
	movl	32(%rax), %ecx
	movl	$15793, 38596(%rsp)     # imm = 0x3DB1
	movl	24316(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 24108(%rsp)       # 4-byte Spill
	movl	%edx, 24104(%rsp)       # 4-byte Spill
	jmp	.LBB68_60
.LBB68_59:                              # %if.end192.lr.ph
	movq	38560(%rsp), %rax       # 8-byte Reload
	addq	$8, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movq	38560(%rsp), %rdx       # 8-byte Reload
	addq	$12, %rdx
	movq	38560(%rsp), %rsi       # 8-byte Reload
	addq	$16, %rsi
	movq	38560(%rsp), %rdi       # 8-byte Reload
	movl	8(%rdi), %r8d
	movl	$15802, 38596(%rsp)     # imm = 0x3DBA
	movl	24316(%rsp), %r9d       # 4-byte Reload
	movq	%rax, 24096(%rsp)       # 8-byte Spill
	movq	%rcx, 24088(%rsp)       # 8-byte Spill
	movq	%rdx, 24080(%rsp)       # 8-byte Spill
	movq	%rsi, 24072(%rsp)       # 8-byte Spill
	movl	%r8d, 24068(%rsp)       # 4-byte Spill
	movl	%r9d, 24064(%rsp)       # 4-byte Spill
	jmp	.LBB68_61
.LBB68_60:                              # %if.then183
	movl	24104(%rsp), %eax       # 4-byte Reload
	movl	24108(%rsp), %ecx       # 4-byte Reload
	movl	$4294967291, %edx       # imm = 0xFFFFFFFB
	addl	$-8, %eax
	movl	%ecx, 24060(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	24060(%rsp), %esi       # 4-byte Reload
	shrl	%cl, %esi
	andl	$255, %esi
	movq	24416(%rsp), %rdi       # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$15804, 38596(%rsp)     # imm = 0x3DBC
	movq	38576(%rsp), %r8        # 8-byte Reload
	addq	$40, %r8
	movq	38576(%rsp), %r9        # 8-byte Reload
	movl	%esi, 40(%r9)
	movl	$15813, 38596(%rsp)     # imm = 0x3DC5
	movl	%esi, %eax
	addl	$-49, %eax
	cmpl	$8, %eax
	movl	24292(%rsp), %eax       # 4-byte Reload
	movq	24336(%rsp), %r10       # 8-byte Reload
	movq	24344(%rsp), %r11       # 8-byte Reload
	movq	24352(%rsp), %rbx       # 8-byte Reload
	movq	24360(%rsp), %r14       # 8-byte Reload
	movq	24368(%rsp), %r15       # 8-byte Reload
	movq	24376(%rsp), %r12       # 8-byte Reload
	movq	24384(%rsp), %r13       # 8-byte Reload
	movq	24392(%rsp), %rbp       # 8-byte Reload
	movq	24400(%rsp), %rcx       # 8-byte Reload
	movq	24408(%rsp), %rdi       # 8-byte Reload
	movq	24112(%rsp), %r9        # 8-byte Reload
	movq	%rcx, 25456(%rsp)       # 8-byte Spill
	movq	24120(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25432(%rsp)       # 8-byte Spill
	movq	24128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25424(%rsp)       # 8-byte Spill
	movq	24136(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	24144(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	24152(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	24160(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	24168(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	24176(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	24184(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	24192(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	24200(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	24208(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	24328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	24320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	24224(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	24312(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	24308(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	24304(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	24300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	24296(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	24288(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	24284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	24280(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	24276(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	24272(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	24268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	24264(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	24260(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	24256(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	24252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	24248(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	24244(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	24240(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	24236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	24220(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25448(%rsp)       # 8-byte Spill
	movl	%esi, 24056(%rsp)       # 4-byte Spill
	movq	%r8, 24048(%rsp)        # 8-byte Spill
	movq	%r9, 25440(%rsp)        # 8-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%r10, 25520(%rsp)       # 8-byte Spill
	movq	%r11, 25512(%rsp)       # 8-byte Spill
	movq	%rbx, 25504(%rsp)       # 8-byte Spill
	movq	%r14, 25496(%rsp)       # 8-byte Spill
	movq	%r15, 25488(%rsp)       # 8-byte Spill
	movq	%r12, 25480(%rsp)       # 8-byte Spill
	movq	%r13, 25472(%rsp)       # 8-byte Spill
	movq	%rbp, 25464(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	ja	.LBB68_542
	jmp	.LBB68_65
.LBB68_61:                              # %if.end192
                                        # =>This Inner Loop Header: Depth=1
	movl	24064(%rsp), %eax       # 4-byte Reload
	movl	24068(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	24292(%rsp), %esi       # 4-byte Reload
	movq	24336(%rsp), %rdi       # 8-byte Reload
	movq	24344(%rsp), %r8        # 8-byte Reload
	movq	24352(%rsp), %r9        # 8-byte Reload
	movq	24360(%rsp), %r10       # 8-byte Reload
	movq	24368(%rsp), %r11       # 8-byte Reload
	movq	24376(%rsp), %rbx       # 8-byte Reload
	movq	24384(%rsp), %r14       # 8-byte Reload
	movq	24392(%rsp), %r15       # 8-byte Reload
	movq	24400(%rsp), %r12       # 8-byte Reload
	movq	24408(%rsp), %r13       # 8-byte Reload
	movq	24112(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	24120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	24128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	24136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	24144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	24152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	24160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	24168(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	24176(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	24184(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	24192(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	24200(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	24208(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	24328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	24320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	24224(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 24044(%rsp)       # 4-byte Spill
	movl	24312(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	24308(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	24304(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	24300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	24296(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	24288(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	24284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	24280(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	24276(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	24272(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	24268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	24264(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	24260(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	24256(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	24252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	24248(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	24244(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	24240(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	24236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	24220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 24040(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.62:                               # %if.end198
                                        #   in Loop: Header=BB68_61 Depth=1
	movq	24088(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15815, 38596(%rsp)     # imm = 0x3DC7
	shll	$8, %ecx
	movq	38560(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$15816, 38596(%rsp)     # imm = 0x3DC8
	movb	(%rsi), %dil
	movl	$15818, 38596(%rsp)     # imm = 0x3DCA
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$15819, 38596(%rsp)     # imm = 0x3DCB
	movl	24044(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	24416(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$15821, 38596(%rsp)     # imm = 0x3DCD
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$15822, 38596(%rsp)     # imm = 0x3DCE
	movl	24040(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	24096(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$15823, 38596(%rsp)     # imm = 0x3DCF
	movq	24080(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$15825, 38596(%rsp)     # imm = 0x3DD1
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$15828, 38596(%rsp)     # imm = 0x3DD4
	cmpl	$0, %ebx
	movl	%ecx, 24036(%rsp)       # 4-byte Spill
	movl	%r8d, 24032(%rsp)       # 4-byte Spill
	movl	%r10d, 24028(%rsp)      # 4-byte Spill
	jne	.LBB68_64
# %bb.63:                               # %if.then221
                                        #   in Loop: Header=BB68_61 Depth=1
	movq	24072(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15830, 38596(%rsp)     # imm = 0x3DD6
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$15835, 38596(%rsp)     # imm = 0x3DDB
.LBB68_64:                              # %if.end225
                                        #   in Loop: Header=BB68_61 Depth=1
	movl	24044(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	24036(%rsp), %ecx       # 4-byte Reload
	movl	24032(%rsp), %edx       # 4-byte Reload
	movl	24028(%rsp), %esi       # 4-byte Reload
	movl	24032(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 24108(%rsp)       # 4-byte Spill
	movl	%edx, 24104(%rsp)       # 4-byte Spill
	movl	%esi, 24068(%rsp)       # 4-byte Spill
	movl	%edi, 24064(%rsp)       # 4-byte Spill
	jg	.LBB68_60
	jmp	.LBB68_61
.LBB68_65:                              # %if.end234
	movl	24056(%rsp), %eax       # 4-byte Reload
	addl	$-48, %eax
	movq	24048(%rsp), %rcx       # 8-byte Reload
	movl	%eax, (%rcx)
	movl	$15837, 38596(%rsp)     # imm = 0x3DDD
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movb	44(%rdx), %sil
	movl	$15840, 38596(%rsp)     # imm = 0x3DE0
	movq	38560(%rsp), %rdi       # 8-byte Reload
	addq	$56, %rdi
	movq	38560(%rsp), %r8        # 8-byte Reload
	movq	56(%r8), %r9
	movl	$15842, 38596(%rsp)     # imm = 0x3DE2
	addq	$72, %r8
	movq	38560(%rsp), %r10       # 8-byte Reload
	movq	72(%r10), %r11
	movl	$15848, 38596(%rsp)     # imm = 0x3DE8
	cmpb	$0, %sil
	movl	%eax, 24024(%rsp)       # 4-byte Spill
	movq	%r11, 24016(%rsp)       # 8-byte Spill
	movq	%rdi, 24008(%rsp)       # 8-byte Spill
	movq	%r8, 24000(%rsp)        # 8-byte Spill
	movq	%r9, 23992(%rsp)        # 8-byte Spill
	je	.LBB68_67
# %bb.66:                               # %if.then237
	movl	$1, %edx
	movl	24024(%rsp), %eax       # 4-byte Reload
	imull	$200000, %eax, %esi     # imm = 0x30D40
	movq	24016(%rsp), %rdi       # 8-byte Reload
	movq	23992(%rsp), %rcx       # 8-byte Reload
	callq	*%rcx
	movl	$1, %edx
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movq	%rax, 3160(%rcx)
	movl	$15849, 38596(%rsp)     # imm = 0x3DE9
	movq	24008(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rdi
	movl	$15850, 38596(%rsp)     # imm = 0x3DEA
	movq	24000(%rsp), %r8        # 8-byte Reload
	movq	(%r8), %r9
	movl	$15851, 38596(%rsp)     # imm = 0x3DEB
	movq	24048(%rsp), %r10       # 8-byte Reload
	movl	(%r10), %esi
	movl	$15856, 38596(%rsp)     # imm = 0x3DF0
	imull	$100000, %esi, %esi     # imm = 0x186A0
	sarl	$1, %esi
	movq	%rdi, 23984(%rsp)       # 8-byte Spill
	movq	%r9, %rdi
	movq	23984(%rsp), %r9        # 8-byte Reload
	callq	*%r9
	movl	$4294967293, %edx       # imm = 0xFFFFFFFD
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movq	%rax, 3168(%rcx)
	movl	$15857, 38596(%rsp)     # imm = 0x3DF1
	movq	3160(%rcx), %rdi
	movl	$15866, 38596(%rsp)     # imm = 0x3DFA
	cmpq	$0, %rdi
	sete	%r11b
	cmpq	$0, %rax
	sete	%bl
	orb	%r11b, %bl
	testb	$1, %bl
	movl	24220(%rsp), %esi       # 4-byte Reload
	movl	24236(%rsp), %ebp       # 4-byte Reload
	movl	24240(%rsp), %r14d      # 4-byte Reload
	movl	24244(%rsp), %r15d      # 4-byte Reload
	movl	24248(%rsp), %r12d      # 4-byte Reload
	movl	24252(%rsp), %r13d      # 4-byte Reload
	movl	24256(%rsp), %edi       # 4-byte Reload
	movl	24260(%rsp), %r8d       # 4-byte Reload
	movl	24264(%rsp), %r9d       # 4-byte Reload
	movl	24268(%rsp), %r10d      # 4-byte Reload
	movl	24272(%rsp), %r11d      # 4-byte Reload
	movl	24276(%rsp), %ebx       # 4-byte Reload
	movl	24280(%rsp), %eax       # 4-byte Reload
	movl	24284(%rsp), %ecx       # 4-byte Reload
	movl	%eax, 34988(%rsp)       # 4-byte Spill
	movl	24288(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35288(%rsp)       # 4-byte Spill
	movl	24292(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35284(%rsp)       # 4-byte Spill
	movl	24296(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35280(%rsp)       # 4-byte Spill
	movl	24300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35276(%rsp)       # 4-byte Spill
	movl	24304(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35272(%rsp)       # 4-byte Spill
	movl	24308(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35268(%rsp)       # 4-byte Spill
	movl	24312(%rsp), %eax       # 4-byte Reload
	movl	%esi, 35292(%rsp)       # 4-byte Spill
	movq	24224(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35248(%rsp)       # 8-byte Spill
	movq	24320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35240(%rsp)       # 8-byte Spill
	movq	24328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35232(%rsp)       # 8-byte Spill
	movq	24336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35224(%rsp)       # 8-byte Spill
	movq	24344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35216(%rsp)       # 8-byte Spill
	movq	24352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35208(%rsp)       # 8-byte Spill
	movq	24360(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35200(%rsp)       # 8-byte Spill
	movq	24368(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35192(%rsp)       # 8-byte Spill
	movq	24376(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35184(%rsp)       # 8-byte Spill
	movq	24384(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35176(%rsp)       # 8-byte Spill
	movq	24392(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35168(%rsp)       # 8-byte Spill
	movq	24400(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35160(%rsp)       # 8-byte Spill
	movq	24408(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35152(%rsp)       # 8-byte Spill
	movq	24112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35144(%rsp)       # 8-byte Spill
	movq	24120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35136(%rsp)       # 8-byte Spill
	movq	24128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35128(%rsp)       # 8-byte Spill
	movq	24136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35120(%rsp)       # 8-byte Spill
	movq	24144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35112(%rsp)       # 8-byte Spill
	movq	24152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35104(%rsp)       # 8-byte Spill
	movq	24160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35096(%rsp)       # 8-byte Spill
	movq	24168(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35088(%rsp)       # 8-byte Spill
	movq	24176(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35080(%rsp)       # 8-byte Spill
	movq	24184(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35072(%rsp)       # 8-byte Spill
	movq	24192(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35064(%rsp)       # 8-byte Spill
	movq	24200(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35056(%rsp)       # 8-byte Spill
	movq	24208(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35048(%rsp)       # 8-byte Spill
	movq	24416(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 35036(%rsp)       # 4-byte Spill
	movl	24292(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 35040(%rsp)       # 8-byte Spill
	movq	24336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	24344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	24352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	24360(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	24368(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	24376(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	24384(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	24392(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	24400(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	24408(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	24112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	24120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	24128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	24136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	24144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	24152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	24160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	24168(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	24176(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	24184(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	24192(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	24200(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	24208(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	24328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	24320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	24224(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	24312(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	24308(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	24304(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	24300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	24296(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	24288(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	24284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	24280(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	24276(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	24272(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	24268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	24264(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	24260(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	24256(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	24252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	24248(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	24244(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	24240(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	24236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	24220(%rsp), %eax       # 4-byte Reload
	movl	%ecx, 34984(%rsp)       # 4-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%ebp, 35032(%rsp)       # 4-byte Spill
	movl	%r14d, 35028(%rsp)      # 4-byte Spill
	movl	%r15d, 35024(%rsp)      # 4-byte Spill
	movl	%r12d, 35020(%rsp)      # 4-byte Spill
	movl	%r13d, 35016(%rsp)      # 4-byte Spill
	movl	%edi, 35012(%rsp)       # 4-byte Spill
	movl	%r8d, 35008(%rsp)       # 4-byte Spill
	movl	%r9d, 35004(%rsp)       # 4-byte Spill
	movl	%r10d, 35000(%rsp)      # 4-byte Spill
	movl	%r11d, 34996(%rsp)      # 4-byte Spill
	movl	%ebx, 34992(%rsp)       # 4-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	jne	.LBB68_542
	jmp	.LBB68_68
.LBB68_67:                              # %if.else
	movl	$1, %edx
	movl	24024(%rsp), %eax       # 4-byte Reload
	imull	$400000, %eax, %esi     # imm = 0x61A80
	movq	24016(%rsp), %rdi       # 8-byte Reload
	movq	23992(%rsp), %rcx       # 8-byte Reload
	callq	*%rcx
	movl	$4294967293, %edx       # imm = 0xFFFFFFFD
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movq	%rax, 3152(%rcx)
	movl	$15917, 38596(%rsp)     # imm = 0x3E2D
	cmpq	$0, %rax
	movl	24220(%rsp), %esi       # 4-byte Reload
	movl	24236(%rsp), %r8d       # 4-byte Reload
	movl	24240(%rsp), %r9d       # 4-byte Reload
	movl	24244(%rsp), %r10d      # 4-byte Reload
	movl	24248(%rsp), %r11d      # 4-byte Reload
	movl	24252(%rsp), %ebx       # 4-byte Reload
	movl	24256(%rsp), %ebp       # 4-byte Reload
	movl	24260(%rsp), %r14d      # 4-byte Reload
	movl	24264(%rsp), %r15d      # 4-byte Reload
	movl	24268(%rsp), %r12d      # 4-byte Reload
	movl	24272(%rsp), %r13d      # 4-byte Reload
	movl	24276(%rsp), %edi       # 4-byte Reload
	movl	24280(%rsp), %eax       # 4-byte Reload
	movl	24284(%rsp), %ecx       # 4-byte Reload
	movl	%eax, 34988(%rsp)       # 4-byte Spill
	movl	24288(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35288(%rsp)       # 4-byte Spill
	movl	24292(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35284(%rsp)       # 4-byte Spill
	movl	24296(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35280(%rsp)       # 4-byte Spill
	movl	24300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35276(%rsp)       # 4-byte Spill
	movl	24304(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35272(%rsp)       # 4-byte Spill
	movl	24308(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35268(%rsp)       # 4-byte Spill
	movl	24312(%rsp), %eax       # 4-byte Reload
	movl	%esi, 35292(%rsp)       # 4-byte Spill
	movq	24224(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35248(%rsp)       # 8-byte Spill
	movq	24320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35240(%rsp)       # 8-byte Spill
	movq	24328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35232(%rsp)       # 8-byte Spill
	movq	24336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35224(%rsp)       # 8-byte Spill
	movq	24344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35216(%rsp)       # 8-byte Spill
	movq	24352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35208(%rsp)       # 8-byte Spill
	movq	24360(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35200(%rsp)       # 8-byte Spill
	movq	24368(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35192(%rsp)       # 8-byte Spill
	movq	24376(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35184(%rsp)       # 8-byte Spill
	movq	24384(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35176(%rsp)       # 8-byte Spill
	movq	24392(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35168(%rsp)       # 8-byte Spill
	movq	24400(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35160(%rsp)       # 8-byte Spill
	movq	24408(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35152(%rsp)       # 8-byte Spill
	movq	24112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35144(%rsp)       # 8-byte Spill
	movq	24120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35136(%rsp)       # 8-byte Spill
	movq	24128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35128(%rsp)       # 8-byte Spill
	movq	24136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35120(%rsp)       # 8-byte Spill
	movq	24144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35112(%rsp)       # 8-byte Spill
	movq	24152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35104(%rsp)       # 8-byte Spill
	movq	24160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35096(%rsp)       # 8-byte Spill
	movq	24168(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35088(%rsp)       # 8-byte Spill
	movq	24176(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35080(%rsp)       # 8-byte Spill
	movq	24184(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35072(%rsp)       # 8-byte Spill
	movq	24192(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35064(%rsp)       # 8-byte Spill
	movq	24200(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35056(%rsp)       # 8-byte Spill
	movq	24208(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 35048(%rsp)       # 8-byte Spill
	movq	24416(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 35036(%rsp)       # 4-byte Spill
	movl	24292(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 35040(%rsp)       # 8-byte Spill
	movq	24336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	24344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	24352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	24360(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	24368(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	24376(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	24384(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	24392(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	24400(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	24408(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	24112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	24120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	24128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	24136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	24144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	24152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	24160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	24168(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	24176(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	24184(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	24192(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	24200(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	24208(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	24328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	24320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	24224(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	24312(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	24308(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	24304(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	24300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	24296(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	24288(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	24284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	24280(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	24276(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	24272(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	24268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	24264(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	24260(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	24256(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	24252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	24248(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	24244(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	24240(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	24236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	24220(%rsp), %eax       # 4-byte Reload
	movl	%ecx, 34984(%rsp)       # 4-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%r8d, 35032(%rsp)       # 4-byte Spill
	movl	%r9d, 35028(%rsp)       # 4-byte Spill
	movl	%r10d, 35024(%rsp)      # 4-byte Spill
	movl	%r11d, 35020(%rsp)      # 4-byte Spill
	movl	%ebx, 35016(%rsp)       # 4-byte Spill
	movl	%ebp, 35012(%rsp)       # 4-byte Spill
	movl	%r14d, 35008(%rsp)      # 4-byte Spill
	movl	%r15d, 35004(%rsp)      # 4-byte Spill
	movl	%r12d, 35000(%rsp)      # 4-byte Spill
	movl	%r13d, 34996(%rsp)      # 4-byte Spill
	movl	%edi, 34992(%rsp)       # 4-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
.LBB68_68:                              # %sw.bb275
	movq	35040(%rsp), %rax       # 8-byte Reload
	movq	35048(%rsp), %rcx       # 8-byte Reload
	movq	35056(%rsp), %rdx       # 8-byte Reload
	movq	35064(%rsp), %rsi       # 8-byte Reload
	movq	35072(%rsp), %rdi       # 8-byte Reload
	movq	35080(%rsp), %r8        # 8-byte Reload
	movq	35088(%rsp), %r9        # 8-byte Reload
	movq	35096(%rsp), %r10       # 8-byte Reload
	movq	35104(%rsp), %r11       # 8-byte Reload
	movq	35112(%rsp), %rbx       # 8-byte Reload
	movq	35120(%rsp), %r14       # 8-byte Reload
	movq	35128(%rsp), %r15       # 8-byte Reload
	movq	35136(%rsp), %r12       # 8-byte Reload
	movq	35144(%rsp), %r13       # 8-byte Reload
	movq	35152(%rsp), %rbp       # 8-byte Reload
	movq	%rax, 23976(%rsp)       # 8-byte Spill
	movq	35160(%rsp), %rax       # 8-byte Reload
	movq	%rax, 23968(%rsp)       # 8-byte Spill
	movq	35168(%rsp), %rax       # 8-byte Reload
	movq	%rax, 23960(%rsp)       # 8-byte Spill
	movq	35176(%rsp), %rax       # 8-byte Reload
	movq	%rax, 23952(%rsp)       # 8-byte Spill
	movq	35184(%rsp), %rax       # 8-byte Reload
	movq	%rax, 23944(%rsp)       # 8-byte Spill
	movq	35192(%rsp), %rax       # 8-byte Reload
	movq	%rax, 23936(%rsp)       # 8-byte Spill
	movq	35200(%rsp), %rax       # 8-byte Reload
	movq	%rax, 23928(%rsp)       # 8-byte Spill
	movq	35208(%rsp), %rax       # 8-byte Reload
	movq	%rax, 23920(%rsp)       # 8-byte Spill
	movq	35216(%rsp), %rax       # 8-byte Reload
	movq	%rax, 23912(%rsp)       # 8-byte Spill
	movq	35224(%rsp), %rax       # 8-byte Reload
	movq	%rax, 23904(%rsp)       # 8-byte Spill
	movq	35232(%rsp), %rax       # 8-byte Reload
	movq	%rax, 23896(%rsp)       # 8-byte Spill
	movq	35240(%rsp), %rax       # 8-byte Reload
	movq	%rax, 23888(%rsp)       # 8-byte Spill
	movq	35248(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 23880(%rsp)       # 8-byte Spill
	movl	35036(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23876(%rsp)       # 4-byte Spill
	movl	35268(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23872(%rsp)       # 4-byte Spill
	movl	35272(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23868(%rsp)       # 4-byte Spill
	movl	35276(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23864(%rsp)       # 4-byte Spill
	movl	35280(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23860(%rsp)       # 4-byte Spill
	movl	35284(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23856(%rsp)       # 4-byte Spill
	movl	35288(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23852(%rsp)       # 4-byte Spill
	movl	34984(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23848(%rsp)       # 4-byte Spill
	movl	34988(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23844(%rsp)       # 4-byte Spill
	movl	34992(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23840(%rsp)       # 4-byte Spill
	movl	34996(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23836(%rsp)       # 4-byte Spill
	movl	35000(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23832(%rsp)       # 4-byte Spill
	movl	35004(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23828(%rsp)       # 4-byte Spill
	movl	35008(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23824(%rsp)       # 4-byte Spill
	movl	35012(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23820(%rsp)       # 4-byte Spill
	movl	35016(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23816(%rsp)       # 4-byte Spill
	movl	35020(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23812(%rsp)       # 4-byte Spill
	movl	35024(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23808(%rsp)       # 4-byte Spill
	movl	35028(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23804(%rsp)       # 4-byte Spill
	movl	35032(%rsp), %esi       # 4-byte Reload
	movl	%esi, 23800(%rsp)       # 4-byte Spill
	movl	35292(%rsp), %esi       # 4-byte Reload
	movq	%rax, 23792(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rax       # 8-byte Reload
	movl	$14, (%rax)
	movl	$15918, 38596(%rsp)     # imm = 0x3E2E
	movq	23976(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %eax
	movl	$15922, 38596(%rsp)     # imm = 0x3E32
	movq	%rcx, 23784(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	cmpl	$7, %eax
	movl	%eax, 23780(%rsp)       # 4-byte Spill
	movq	%rcx, 23768(%rsp)       # 8-byte Spill
	movq	%rdx, 23760(%rsp)       # 8-byte Spill
	movl	%esi, 23756(%rsp)       # 4-byte Spill
	movq	%rdi, 23744(%rsp)       # 8-byte Spill
	movq	%r8, 23736(%rsp)        # 8-byte Spill
	movq	%r9, 23728(%rsp)        # 8-byte Spill
	movq	%r10, 23720(%rsp)       # 8-byte Spill
	movq	%r11, 23712(%rsp)       # 8-byte Spill
	movq	%rbx, 23704(%rsp)       # 8-byte Spill
	movq	%r14, 23696(%rsp)       # 8-byte Spill
	movq	%r15, 23688(%rsp)       # 8-byte Spill
	movq	%r12, 23680(%rsp)       # 8-byte Spill
	movq	%r13, 23672(%rsp)       # 8-byte Spill
	movq	%rbp, 23664(%rsp)       # 8-byte Spill
	jle	.LBB68_70
# %bb.69:                               # %sw.bb275.if.then282_crit_edge
	movq	23768(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15924, 38596(%rsp)     # imm = 0x3E34
	movl	23780(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 23660(%rsp)       # 4-byte Spill
	movl	%edx, 23656(%rsp)       # 4-byte Spill
	jmp	.LBB68_71
.LBB68_70:                              # %if.end292.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$15926, 38596(%rsp)     # imm = 0x3E36
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$15937, 38596(%rsp)     # imm = 0x3E41
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	23780(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 23648(%rsp)       # 8-byte Spill
	movq	%rdx, 23640(%rsp)       # 8-byte Spill
	movq	%r8, 23632(%rsp)        # 8-byte Spill
	movq	%rdi, 23624(%rsp)       # 8-byte Spill
	movl	%esi, 23620(%rsp)       # 4-byte Spill
	movl	%r9d, 23616(%rsp)       # 4-byte Spill
	jmp	.LBB68_72
.LBB68_71:                              # %if.then282
	movl	23656(%rsp), %eax       # 4-byte Reload
	movl	23660(%rsp), %ecx       # 4-byte Reload
	addl	$-8, %eax
	movb	%al, %dl
	movl	%ecx, 23612(%rsp)       # 4-byte Spill
	movb	%dl, %cl
	movl	23612(%rsp), %esi       # 4-byte Reload
	shrl	%cl, %esi
	movq	23976(%rsp), %rdi       # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$15945, 38596(%rsp)     # imm = 0x3E49
	movb	%sil, %cl
	movl	$-4, %esi
	movb	%cl, %dl
	subb	$23, %dl
	movl	23756(%rsp), %r8d       # 4-byte Reload
	movl	23800(%rsp), %r9d       # 4-byte Reload
	movl	23804(%rsp), %r10d      # 4-byte Reload
	movl	23808(%rsp), %r11d      # 4-byte Reload
	movl	23812(%rsp), %ebx       # 4-byte Reload
	movl	23816(%rsp), %ebp       # 4-byte Reload
	movl	23820(%rsp), %r14d      # 4-byte Reload
	movl	23824(%rsp), %r15d      # 4-byte Reload
	movl	23828(%rsp), %r12d      # 4-byte Reload
	movl	23832(%rsp), %r13d      # 4-byte Reload
	movl	23836(%rsp), %edi       # 4-byte Reload
	movl	%eax, 23608(%rsp)       # 4-byte Spill
	movl	23840(%rsp), %eax       # 4-byte Reload
	movl	%eax, 31912(%rsp)       # 4-byte Spill
	movl	23844(%rsp), %eax       # 4-byte Reload
	movl	%eax, 32172(%rsp)       # 4-byte Spill
	movl	23848(%rsp), %eax       # 4-byte Reload
	movl	%eax, 32168(%rsp)       # 4-byte Spill
	movl	23852(%rsp), %eax       # 4-byte Reload
	movl	%eax, 32164(%rsp)       # 4-byte Spill
	movl	23856(%rsp), %eax       # 4-byte Reload
	movl	%eax, 32160(%rsp)       # 4-byte Spill
	movl	23860(%rsp), %eax       # 4-byte Reload
	movl	%eax, 32156(%rsp)       # 4-byte Spill
	movl	23864(%rsp), %eax       # 4-byte Reload
	movl	%eax, 32152(%rsp)       # 4-byte Spill
	movl	23868(%rsp), %eax       # 4-byte Reload
	movl	%eax, 32148(%rsp)       # 4-byte Spill
	movl	23872(%rsp), %eax       # 4-byte Reload
	movl	%eax, 32144(%rsp)       # 4-byte Spill
	movl	23876(%rsp), %eax       # 4-byte Reload
	movb	%cl, 23607(%rsp)        # 1-byte Spill
	movq	23792(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32128(%rsp)       # 8-byte Spill
	movq	23888(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32120(%rsp)       # 8-byte Spill
	movq	23896(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32112(%rsp)       # 8-byte Spill
	movq	23904(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32104(%rsp)       # 8-byte Spill
	movq	23912(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32096(%rsp)       # 8-byte Spill
	movq	23920(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32088(%rsp)       # 8-byte Spill
	movq	23928(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32080(%rsp)       # 8-byte Spill
	movq	23936(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32072(%rsp)       # 8-byte Spill
	movq	23944(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32064(%rsp)       # 8-byte Spill
	movq	23952(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32056(%rsp)       # 8-byte Spill
	movq	23960(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32048(%rsp)       # 8-byte Spill
	movq	23968(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32040(%rsp)       # 8-byte Spill
	movq	23664(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32032(%rsp)       # 8-byte Spill
	movq	23672(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32024(%rsp)       # 8-byte Spill
	movq	23680(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32016(%rsp)       # 8-byte Spill
	movq	23688(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32008(%rsp)       # 8-byte Spill
	movq	23696(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 32000(%rsp)       # 8-byte Spill
	movq	23704(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 31992(%rsp)       # 8-byte Spill
	movq	23712(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 31984(%rsp)       # 8-byte Spill
	movq	23720(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 31976(%rsp)       # 8-byte Spill
	movq	23728(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 31968(%rsp)       # 8-byte Spill
	movq	23736(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 31960(%rsp)       # 8-byte Spill
	movq	23744(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 31952(%rsp)       # 8-byte Spill
	movq	23880(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 31944(%rsp)       # 8-byte Spill
	movq	23760(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 31936(%rsp)       # 8-byte Spill
	movq	23784(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 31928(%rsp)       # 8-byte Spill
	movq	23976(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 31916(%rsp)       # 4-byte Spill
	movl	23608(%rsp), %eax       # 4-byte Reload
	movl	%eax, 31864(%rsp)       # 4-byte Spill
	movl	%edi, 31868(%rsp)       # 4-byte Spill
	movq	%rcx, 31920(%rsp)       # 8-byte Spill
	movl	%esi, 23600(%rsp)       # 4-byte Spill
	movb	%dl, 23599(%rsp)        # 1-byte Spill
	movl	%r8d, 31908(%rsp)       # 4-byte Spill
	movl	%r9d, 31904(%rsp)       # 4-byte Spill
	movl	%r10d, 31900(%rsp)      # 4-byte Spill
	movl	%r11d, 31896(%rsp)      # 4-byte Spill
	movl	%ebx, 31892(%rsp)       # 4-byte Spill
	movl	%ebp, 31888(%rsp)       # 4-byte Spill
	movl	%r14d, 31884(%rsp)      # 4-byte Spill
	movl	%r15d, 31880(%rsp)      # 4-byte Spill
	movl	%r12d, 31876(%rsp)      # 4-byte Spill
	movl	%r13d, 31872(%rsp)      # 4-byte Spill
	je	.LBB68_465
	jmp	.LBB68_550
.LBB68_550:                             # %if.then282
	movb	23607(%rsp), %al        # 1-byte Reload
	subb	$49, %al
	movl	23756(%rsp), %ecx       # 4-byte Reload
	movl	23800(%rsp), %edx       # 4-byte Reload
	movl	23804(%rsp), %esi       # 4-byte Reload
	movl	23808(%rsp), %edi       # 4-byte Reload
	movl	23812(%rsp), %r8d       # 4-byte Reload
	movl	23816(%rsp), %r9d       # 4-byte Reload
	movl	23820(%rsp), %r10d      # 4-byte Reload
	movl	23824(%rsp), %r11d      # 4-byte Reload
	movl	23828(%rsp), %ebx       # 4-byte Reload
	movl	23832(%rsp), %ebp       # 4-byte Reload
	movl	23836(%rsp), %r14d      # 4-byte Reload
	movl	23840(%rsp), %r15d      # 4-byte Reload
	movl	23844(%rsp), %r12d      # 4-byte Reload
	movl	23848(%rsp), %r13d      # 4-byte Reload
	movb	%al, 23598(%rsp)        # 1-byte Spill
	movl	23852(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26828(%rsp)       # 4-byte Spill
	movl	23856(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26824(%rsp)       # 4-byte Spill
	movl	23860(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26820(%rsp)       # 4-byte Spill
	movl	23864(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26816(%rsp)       # 4-byte Spill
	movl	23868(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26812(%rsp)       # 4-byte Spill
	movl	23872(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26808(%rsp)       # 4-byte Spill
	movl	23876(%rsp), %eax       # 4-byte Reload
	movl	%esi, 26564(%rsp)       # 4-byte Spill
	movq	23792(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26792(%rsp)       # 8-byte Spill
	movq	23888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26784(%rsp)       # 8-byte Spill
	movq	23896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26776(%rsp)       # 8-byte Spill
	movq	23904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26768(%rsp)       # 8-byte Spill
	movq	23912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26760(%rsp)       # 8-byte Spill
	movq	23920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26752(%rsp)       # 8-byte Spill
	movq	23928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26744(%rsp)       # 8-byte Spill
	movq	23936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26736(%rsp)       # 8-byte Spill
	movq	23944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26728(%rsp)       # 8-byte Spill
	movq	23952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26720(%rsp)       # 8-byte Spill
	movq	23960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26712(%rsp)       # 8-byte Spill
	movq	23968(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26704(%rsp)       # 8-byte Spill
	movq	23664(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26696(%rsp)       # 8-byte Spill
	movq	23672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26688(%rsp)       # 8-byte Spill
	movq	23680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26680(%rsp)       # 8-byte Spill
	movq	23688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26672(%rsp)       # 8-byte Spill
	movq	23696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26664(%rsp)       # 8-byte Spill
	movq	23704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26656(%rsp)       # 8-byte Spill
	movq	23712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26648(%rsp)       # 8-byte Spill
	movq	23720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26640(%rsp)       # 8-byte Spill
	movq	23728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26632(%rsp)       # 8-byte Spill
	movq	23736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26624(%rsp)       # 8-byte Spill
	movq	23744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26616(%rsp)       # 8-byte Spill
	movq	23880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26608(%rsp)       # 8-byte Spill
	movq	23760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26600(%rsp)       # 8-byte Spill
	movq	23784(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26592(%rsp)       # 8-byte Spill
	movq	23976(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 26580(%rsp)       # 4-byte Spill
	movl	23608(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26528(%rsp)       # 4-byte Spill
	movl	23856(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 26584(%rsp)       # 8-byte Spill
	movq	23904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	23912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	23920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	23928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	23936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	23944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	23952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	23960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	23968(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	23664(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	23672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	23680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	23688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	23696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	23704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	23712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	23720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	23728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	23736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	23744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	23880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	23760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	23784(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	23896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	23888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	23792(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	23876(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	23872(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	23868(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	23864(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	23860(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	23852(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	23848(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	23844(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	23840(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	23836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	23832(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	23828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	23824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	23820(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	23816(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	23812(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	23808(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	23804(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	23800(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	23756(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	23600(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movl	%ecx, 26572(%rsp)       # 4-byte Spill
	movl	%edx, 26568(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%edi, 26560(%rsp)       # 4-byte Spill
	movl	%r8d, 26556(%rsp)       # 4-byte Spill
	movl	%r9d, 26552(%rsp)       # 4-byte Spill
	movl	%r10d, 26548(%rsp)      # 4-byte Spill
	movl	%r11d, 26544(%rsp)      # 4-byte Spill
	movl	%ebx, 26540(%rsp)       # 4-byte Spill
	movl	%ebp, 26536(%rsp)       # 4-byte Spill
	movl	%r14d, 26532(%rsp)      # 4-byte Spill
	movl	%r15d, 26576(%rsp)      # 4-byte Spill
	movl	%r12d, 26836(%rsp)      # 4-byte Spill
	movl	%r13d, 26832(%rsp)      # 4-byte Spill
	je	.LBB68_76
	jmp	.LBB68_542
.LBB68_72:                              # %if.end292
                                        # =>This Inner Loop Header: Depth=1
	movl	23616(%rsp), %eax       # 4-byte Reload
	movl	23620(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	23856(%rsp), %esi       # 4-byte Reload
	movq	23904(%rsp), %rdi       # 8-byte Reload
	movq	23912(%rsp), %r8        # 8-byte Reload
	movq	23920(%rsp), %r9        # 8-byte Reload
	movq	23928(%rsp), %r10       # 8-byte Reload
	movq	23936(%rsp), %r11       # 8-byte Reload
	movq	23944(%rsp), %rbx       # 8-byte Reload
	movq	23952(%rsp), %r14       # 8-byte Reload
	movq	23960(%rsp), %r15       # 8-byte Reload
	movq	23968(%rsp), %r12       # 8-byte Reload
	movq	23664(%rsp), %r13       # 8-byte Reload
	movq	23672(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	23680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	23688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	23696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	23704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	23712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	23720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	23728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	23736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	23744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	23880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	23760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	23784(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	23896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	23888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	23792(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 23592(%rsp)       # 4-byte Spill
	movl	23876(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	23872(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	23868(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	23864(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	23860(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	23852(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	23848(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	23844(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	23840(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	23836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	23832(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	23828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	23824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	23820(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	23816(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	23812(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	23808(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	23804(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	23800(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	23756(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 23588(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.73:                               # %if.end298
                                        #   in Loop: Header=BB68_72 Depth=1
	movq	23768(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15947, 38596(%rsp)     # imm = 0x3E4B
	shll	$8, %ecx
	movq	23648(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$15948, 38596(%rsp)     # imm = 0x3E4C
	movb	(%rsi), %dil
	movl	$15950, 38596(%rsp)     # imm = 0x3E4E
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$15951, 38596(%rsp)     # imm = 0x3E4F
	movl	23592(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	23976(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$15953, 38596(%rsp)     # imm = 0x3E51
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$15954, 38596(%rsp)     # imm = 0x3E52
	movl	23588(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	23640(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$15955, 38596(%rsp)     # imm = 0x3E53
	movq	23624(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$15957, 38596(%rsp)     # imm = 0x3E55
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$15960, 38596(%rsp)     # imm = 0x3E58
	cmpl	$0, %ebx
	movl	%ecx, 23584(%rsp)       # 4-byte Spill
	movl	%r8d, 23580(%rsp)       # 4-byte Spill
	movl	%r10d, 23576(%rsp)      # 4-byte Spill
	jne	.LBB68_75
# %bb.74:                               # %if.then321
                                        #   in Loop: Header=BB68_72 Depth=1
	movq	23632(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$15962, 38596(%rsp)     # imm = 0x3E5A
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$16015, 38596(%rsp)     # imm = 0x3E8F
.LBB68_75:                              # %if.end325
                                        #   in Loop: Header=BB68_72 Depth=1
	movl	23592(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	23584(%rsp), %ecx       # 4-byte Reload
	movl	23580(%rsp), %edx       # 4-byte Reload
	movl	23576(%rsp), %esi       # 4-byte Reload
	movl	23580(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 23660(%rsp)       # 4-byte Spill
	movl	%edx, 23656(%rsp)       # 4-byte Spill
	movl	%esi, 23620(%rsp)       # 4-byte Spill
	movl	%edi, 23616(%rsp)       # 4-byte Spill
	jg	.LBB68_71
	jmp	.LBB68_72
.LBB68_76:                              # %sw.bb337
	movl	26528(%rsp), %eax       # 4-byte Reload
	movq	26584(%rsp), %rcx       # 8-byte Reload
	movq	26592(%rsp), %rdx       # 8-byte Reload
	movq	26600(%rsp), %rsi       # 8-byte Reload
	movq	26608(%rsp), %rdi       # 8-byte Reload
	movq	26616(%rsp), %r8        # 8-byte Reload
	movq	26624(%rsp), %r9        # 8-byte Reload
	movq	26632(%rsp), %r10       # 8-byte Reload
	movq	26640(%rsp), %r11       # 8-byte Reload
	movq	26648(%rsp), %rbx       # 8-byte Reload
	movq	26656(%rsp), %r14       # 8-byte Reload
	movq	26664(%rsp), %r15       # 8-byte Reload
	movq	26672(%rsp), %r12       # 8-byte Reload
	movq	26680(%rsp), %r13       # 8-byte Reload
	movq	26688(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 23568(%rsp)       # 8-byte Spill
	movq	26696(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23560(%rsp)       # 8-byte Spill
	movq	26704(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23552(%rsp)       # 8-byte Spill
	movq	26712(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23544(%rsp)       # 8-byte Spill
	movq	26720(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23536(%rsp)       # 8-byte Spill
	movq	26728(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23528(%rsp)       # 8-byte Spill
	movq	26736(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23520(%rsp)       # 8-byte Spill
	movq	26744(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23512(%rsp)       # 8-byte Spill
	movq	26752(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23504(%rsp)       # 8-byte Spill
	movq	26760(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23496(%rsp)       # 8-byte Spill
	movq	26768(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23488(%rsp)       # 8-byte Spill
	movq	26776(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23480(%rsp)       # 8-byte Spill
	movq	26784(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23472(%rsp)       # 8-byte Spill
	movq	26792(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 23468(%rsp)       # 4-byte Spill
	movl	26580(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23464(%rsp)       # 4-byte Spill
	movl	26808(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23460(%rsp)       # 4-byte Spill
	movl	26812(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23456(%rsp)       # 4-byte Spill
	movl	26816(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23452(%rsp)       # 4-byte Spill
	movl	26820(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23448(%rsp)       # 4-byte Spill
	movl	26824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23444(%rsp)       # 4-byte Spill
	movl	26828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23440(%rsp)       # 4-byte Spill
	movl	26832(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23436(%rsp)       # 4-byte Spill
	movl	26836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23432(%rsp)       # 4-byte Spill
	movl	26576(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23428(%rsp)       # 4-byte Spill
	movl	26532(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23424(%rsp)       # 4-byte Spill
	movl	26536(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23420(%rsp)       # 4-byte Spill
	movl	26540(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23416(%rsp)       # 4-byte Spill
	movl	26544(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23412(%rsp)       # 4-byte Spill
	movl	26548(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23408(%rsp)       # 4-byte Spill
	movl	26552(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23404(%rsp)       # 4-byte Spill
	movl	26556(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23400(%rsp)       # 4-byte Spill
	movl	26560(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23396(%rsp)       # 4-byte Spill
	movl	26564(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23392(%rsp)       # 4-byte Spill
	movl	26568(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23388(%rsp)       # 4-byte Spill
	movl	26572(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 23376(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$15, (%rcx)
	movl	$16020, 38596(%rsp)     # imm = 0x3E94
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 23372(%rsp)       # 4-byte Spill
	movl	23468(%rsp), %eax       # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 23360(%rsp)       # 8-byte Spill
	movq	%rdx, 23352(%rsp)       # 8-byte Spill
	movq	%rsi, 23344(%rsp)       # 8-byte Spill
	movq	%rdi, 23336(%rsp)       # 8-byte Spill
	movq	%r8, 23328(%rsp)        # 8-byte Spill
	movq	%r9, 23320(%rsp)        # 8-byte Spill
	movq	%r10, 23312(%rsp)       # 8-byte Spill
	movq	%r11, 23304(%rsp)       # 8-byte Spill
	movq	%rbx, 23296(%rsp)       # 8-byte Spill
	movq	%r14, 23288(%rsp)       # 8-byte Spill
	movq	%r15, 23280(%rsp)       # 8-byte Spill
	movq	%r12, 23272(%rsp)       # 8-byte Spill
	movq	%r13, 23264(%rsp)       # 8-byte Spill
	movq	%rbp, 23256(%rsp)       # 8-byte Spill
	jle	.LBB68_78
# %bb.77:                               # %sw.bb337.if.then344_crit_edge
	movq	23360(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16022, 38596(%rsp)     # imm = 0x3E96
	movl	23468(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 23252(%rsp)       # 4-byte Spill
	movl	%edx, 23248(%rsp)       # 4-byte Spill
	jmp	.LBB68_79
.LBB68_78:                              # %if.end354.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$16024, 38596(%rsp)     # imm = 0x3E98
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$16035, 38596(%rsp)     # imm = 0x3EA3
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	23468(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 23240(%rsp)       # 8-byte Spill
	movq	%rdx, 23232(%rsp)       # 8-byte Spill
	movq	%r8, 23224(%rsp)        # 8-byte Spill
	movq	%rdi, 23216(%rsp)       # 8-byte Spill
	movl	%esi, 23212(%rsp)       # 4-byte Spill
	movl	%r9d, 23208(%rsp)       # 4-byte Spill
	jmp	.LBB68_80
.LBB68_79:                              # %if.then344
	movl	23248(%rsp), %eax       # 4-byte Reload
	movl	23252(%rsp), %ecx       # 4-byte Reload
	movl	$4294967292, %edx       # imm = 0xFFFFFFFC
	addl	$-8, %eax
	movl	%ecx, 23204(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	23204(%rsp), %esi       # 4-byte Reload
	shrl	%cl, %esi
	movq	23568(%rsp), %rdi       # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$16044, 38596(%rsp)     # imm = 0x3EAC
	andl	$255, %esi
	cmpl	$65, %esi
	movl	23372(%rsp), %esi       # 4-byte Reload
	movl	23388(%rsp), %r8d       # 4-byte Reload
	movl	23392(%rsp), %r9d       # 4-byte Reload
	movl	23396(%rsp), %r10d      # 4-byte Reload
	movl	23400(%rsp), %r11d      # 4-byte Reload
	movl	23404(%rsp), %ebx       # 4-byte Reload
	movl	23408(%rsp), %ebp       # 4-byte Reload
	movl	23412(%rsp), %r14d      # 4-byte Reload
	movl	23416(%rsp), %r15d      # 4-byte Reload
	movl	23420(%rsp), %r12d      # 4-byte Reload
	movl	23424(%rsp), %r13d      # 4-byte Reload
	movl	23428(%rsp), %ecx       # 4-byte Reload
	movl	23432(%rsp), %edi       # 4-byte Reload
	movl	%eax, 23200(%rsp)       # 4-byte Spill
	movl	23436(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27144(%rsp)       # 4-byte Spill
	movl	23440(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27140(%rsp)       # 4-byte Spill
	movl	23444(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27136(%rsp)       # 4-byte Spill
	movl	23448(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27132(%rsp)       # 4-byte Spill
	movl	23452(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27128(%rsp)       # 4-byte Spill
	movl	23456(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27124(%rsp)       # 4-byte Spill
	movl	23460(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27120(%rsp)       # 4-byte Spill
	movl	23464(%rsp), %eax       # 4-byte Reload
	movl	%esi, 26884(%rsp)       # 4-byte Spill
	movq	23376(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27104(%rsp)       # 8-byte Spill
	movq	23472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27096(%rsp)       # 8-byte Spill
	movq	23480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27088(%rsp)       # 8-byte Spill
	movq	23488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27080(%rsp)       # 8-byte Spill
	movq	23496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27072(%rsp)       # 8-byte Spill
	movq	23504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27064(%rsp)       # 8-byte Spill
	movq	23512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27056(%rsp)       # 8-byte Spill
	movq	23520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27048(%rsp)       # 8-byte Spill
	movq	23528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27040(%rsp)       # 8-byte Spill
	movq	23536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27032(%rsp)       # 8-byte Spill
	movq	23544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27024(%rsp)       # 8-byte Spill
	movq	23552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27016(%rsp)       # 8-byte Spill
	movq	23560(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27008(%rsp)       # 8-byte Spill
	movq	23256(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27000(%rsp)       # 8-byte Spill
	movq	23264(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26992(%rsp)       # 8-byte Spill
	movq	23272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26984(%rsp)       # 8-byte Spill
	movq	23280(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26976(%rsp)       # 8-byte Spill
	movq	23288(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26968(%rsp)       # 8-byte Spill
	movq	23296(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26960(%rsp)       # 8-byte Spill
	movq	23304(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26952(%rsp)       # 8-byte Spill
	movq	23312(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26944(%rsp)       # 8-byte Spill
	movq	23320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26936(%rsp)       # 8-byte Spill
	movq	23328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26928(%rsp)       # 8-byte Spill
	movq	23336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26920(%rsp)       # 8-byte Spill
	movq	23344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26912(%rsp)       # 8-byte Spill
	movq	23352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 26904(%rsp)       # 8-byte Spill
	movq	23568(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 26892(%rsp)       # 4-byte Spill
	movl	23200(%rsp), %eax       # 4-byte Reload
	movl	%eax, 26840(%rsp)       # 4-byte Spill
	movl	23444(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 26896(%rsp)       # 8-byte Spill
	movq	23488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	23496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	23504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	23512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	23520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	23528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	23536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	23544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	23552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	23560(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	23256(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	23264(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	23272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	23280(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	23288(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	23296(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	23304(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	23312(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	23320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	23328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	23336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	23344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	23352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	23480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	23472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	23376(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	23464(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	23460(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	23456(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	23452(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	23448(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	23440(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	23436(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	23432(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	23428(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	23424(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	23420(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	23416(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	23412(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	23408(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	23404(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	23400(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	23396(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	23392(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	23388(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	23372(%rsp), %eax       # 4-byte Reload
	movl	%ecx, 26888(%rsp)       # 4-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%edi, 27148(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%r8d, 26880(%rsp)       # 4-byte Spill
	movl	%r9d, 26876(%rsp)       # 4-byte Spill
	movl	%r10d, 26872(%rsp)      # 4-byte Spill
	movl	%r11d, 26868(%rsp)      # 4-byte Spill
	movl	%ebx, 26864(%rsp)       # 4-byte Spill
	movl	%ebp, 26860(%rsp)       # 4-byte Spill
	movl	%r14d, 26856(%rsp)      # 4-byte Spill
	movl	%r15d, 26852(%rsp)      # 4-byte Spill
	movl	%r12d, 26848(%rsp)      # 4-byte Spill
	movl	%r13d, 26844(%rsp)      # 4-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_84
	jmp	.LBB68_542
.LBB68_80:                              # %if.end354
                                        # =>This Inner Loop Header: Depth=1
	movl	23208(%rsp), %eax       # 4-byte Reload
	movl	23212(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	23444(%rsp), %esi       # 4-byte Reload
	movq	23488(%rsp), %rdi       # 8-byte Reload
	movq	23496(%rsp), %r8        # 8-byte Reload
	movq	23504(%rsp), %r9        # 8-byte Reload
	movq	23512(%rsp), %r10       # 8-byte Reload
	movq	23520(%rsp), %r11       # 8-byte Reload
	movq	23528(%rsp), %rbx       # 8-byte Reload
	movq	23536(%rsp), %r14       # 8-byte Reload
	movq	23544(%rsp), %r15       # 8-byte Reload
	movq	23552(%rsp), %r12       # 8-byte Reload
	movq	23560(%rsp), %r13       # 8-byte Reload
	movq	23256(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	23264(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	23272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	23280(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	23288(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	23296(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	23304(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	23312(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	23320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	23328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	23336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	23344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	23352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	23480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	23472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	23376(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 23196(%rsp)       # 4-byte Spill
	movl	23464(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	23460(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	23456(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	23452(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	23448(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	23440(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	23436(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	23432(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	23428(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	23424(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	23420(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	23416(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	23412(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	23408(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	23404(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	23400(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	23396(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	23392(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	23388(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	23372(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 23192(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.81:                               # %if.end360
                                        #   in Loop: Header=BB68_80 Depth=1
	movq	23360(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16046, 38596(%rsp)     # imm = 0x3EAE
	shll	$8, %ecx
	movq	23240(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$16047, 38596(%rsp)     # imm = 0x3EAF
	movb	(%rsi), %dil
	movl	$16049, 38596(%rsp)     # imm = 0x3EB1
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$16050, 38596(%rsp)     # imm = 0x3EB2
	movl	23196(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	23568(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$16052, 38596(%rsp)     # imm = 0x3EB4
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$16053, 38596(%rsp)     # imm = 0x3EB5
	movl	23192(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	23232(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$16054, 38596(%rsp)     # imm = 0x3EB6
	movq	23216(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$16056, 38596(%rsp)     # imm = 0x3EB8
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$16059, 38596(%rsp)     # imm = 0x3EBB
	cmpl	$0, %ebx
	movl	%ecx, 23188(%rsp)       # 4-byte Spill
	movl	%r8d, 23184(%rsp)       # 4-byte Spill
	movl	%r10d, 23180(%rsp)      # 4-byte Spill
	jne	.LBB68_83
# %bb.82:                               # %if.then383
                                        #   in Loop: Header=BB68_80 Depth=1
	movq	23224(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16061, 38596(%rsp)     # imm = 0x3EBD
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$16114, 38596(%rsp)     # imm = 0x3EF2
.LBB68_83:                              # %if.end387
                                        #   in Loop: Header=BB68_80 Depth=1
	movl	23196(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	23188(%rsp), %ecx       # 4-byte Reload
	movl	23184(%rsp), %edx       # 4-byte Reload
	movl	23180(%rsp), %esi       # 4-byte Reload
	movl	23184(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 23252(%rsp)       # 4-byte Spill
	movl	%edx, 23248(%rsp)       # 4-byte Spill
	movl	%esi, 23212(%rsp)       # 4-byte Spill
	movl	%edi, 23208(%rsp)       # 4-byte Spill
	jg	.LBB68_79
	jmp	.LBB68_80
.LBB68_84:                              # %sw.bb394
	movl	26840(%rsp), %eax       # 4-byte Reload
	movq	26896(%rsp), %rcx       # 8-byte Reload
	movq	26904(%rsp), %rdx       # 8-byte Reload
	movq	26912(%rsp), %rsi       # 8-byte Reload
	movq	26920(%rsp), %rdi       # 8-byte Reload
	movq	26928(%rsp), %r8        # 8-byte Reload
	movq	26936(%rsp), %r9        # 8-byte Reload
	movq	26944(%rsp), %r10       # 8-byte Reload
	movq	26952(%rsp), %r11       # 8-byte Reload
	movq	26960(%rsp), %rbx       # 8-byte Reload
	movq	26968(%rsp), %r14       # 8-byte Reload
	movq	26976(%rsp), %r15       # 8-byte Reload
	movq	26984(%rsp), %r12       # 8-byte Reload
	movq	26992(%rsp), %r13       # 8-byte Reload
	movq	27000(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 23168(%rsp)       # 8-byte Spill
	movq	27008(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23160(%rsp)       # 8-byte Spill
	movq	27016(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23152(%rsp)       # 8-byte Spill
	movq	27024(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23144(%rsp)       # 8-byte Spill
	movq	27032(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23136(%rsp)       # 8-byte Spill
	movq	27040(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23128(%rsp)       # 8-byte Spill
	movq	27048(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23120(%rsp)       # 8-byte Spill
	movq	27056(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23112(%rsp)       # 8-byte Spill
	movq	27064(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23104(%rsp)       # 8-byte Spill
	movq	27072(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23096(%rsp)       # 8-byte Spill
	movq	27080(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23088(%rsp)       # 8-byte Spill
	movq	27088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23080(%rsp)       # 8-byte Spill
	movq	27096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 23072(%rsp)       # 8-byte Spill
	movq	27104(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 23068(%rsp)       # 4-byte Spill
	movl	26892(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23064(%rsp)       # 4-byte Spill
	movl	27120(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23060(%rsp)       # 4-byte Spill
	movl	27124(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23056(%rsp)       # 4-byte Spill
	movl	27128(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23052(%rsp)       # 4-byte Spill
	movl	27132(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23048(%rsp)       # 4-byte Spill
	movl	27136(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23044(%rsp)       # 4-byte Spill
	movl	27140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23040(%rsp)       # 4-byte Spill
	movl	27144(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23036(%rsp)       # 4-byte Spill
	movl	27148(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23032(%rsp)       # 4-byte Spill
	movl	26888(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23028(%rsp)       # 4-byte Spill
	movl	26844(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23024(%rsp)       # 4-byte Spill
	movl	26848(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23020(%rsp)       # 4-byte Spill
	movl	26852(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23016(%rsp)       # 4-byte Spill
	movl	26856(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23012(%rsp)       # 4-byte Spill
	movl	26860(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23008(%rsp)       # 4-byte Spill
	movl	26864(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23004(%rsp)       # 4-byte Spill
	movl	26868(%rsp), %eax       # 4-byte Reload
	movl	%eax, 23000(%rsp)       # 4-byte Spill
	movl	26872(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22996(%rsp)       # 4-byte Spill
	movl	26876(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22992(%rsp)       # 4-byte Spill
	movl	26880(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22988(%rsp)       # 4-byte Spill
	movl	26884(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 22976(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$16, (%rcx)
	movl	$16118, 38596(%rsp)     # imm = 0x3EF6
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 22972(%rsp)       # 4-byte Spill
	movl	23068(%rsp), %eax       # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 22960(%rsp)       # 8-byte Spill
	movq	%rdx, 22952(%rsp)       # 8-byte Spill
	movq	%rsi, 22944(%rsp)       # 8-byte Spill
	movq	%rdi, 22936(%rsp)       # 8-byte Spill
	movq	%r8, 22928(%rsp)        # 8-byte Spill
	movq	%r9, 22920(%rsp)        # 8-byte Spill
	movq	%r10, 22912(%rsp)       # 8-byte Spill
	movq	%r11, 22904(%rsp)       # 8-byte Spill
	movq	%rbx, 22896(%rsp)       # 8-byte Spill
	movq	%r14, 22888(%rsp)       # 8-byte Spill
	movq	%r15, 22880(%rsp)       # 8-byte Spill
	movq	%r12, 22872(%rsp)       # 8-byte Spill
	movq	%r13, 22864(%rsp)       # 8-byte Spill
	movq	%rbp, 22856(%rsp)       # 8-byte Spill
	jle	.LBB68_86
# %bb.85:                               # %sw.bb394.if.then401_crit_edge
	movq	22960(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16120, 38596(%rsp)     # imm = 0x3EF8
	movl	23068(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 22852(%rsp)       # 4-byte Spill
	movl	%edx, 22848(%rsp)       # 4-byte Spill
	jmp	.LBB68_87
.LBB68_86:                              # %if.end411.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$16122, 38596(%rsp)     # imm = 0x3EFA
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$16133, 38596(%rsp)     # imm = 0x3F05
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	23068(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 22840(%rsp)       # 8-byte Spill
	movq	%rdx, 22832(%rsp)       # 8-byte Spill
	movq	%r8, 22824(%rsp)        # 8-byte Spill
	movq	%rdi, 22816(%rsp)       # 8-byte Spill
	movl	%esi, 22812(%rsp)       # 4-byte Spill
	movl	%r9d, 22808(%rsp)       # 4-byte Spill
	jmp	.LBB68_88
.LBB68_87:                              # %if.then401
	movl	22848(%rsp), %eax       # 4-byte Reload
	movl	22852(%rsp), %ecx       # 4-byte Reload
	movl	$4294967292, %edx       # imm = 0xFFFFFFFC
	addl	$-8, %eax
	movl	%ecx, 22804(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	22804(%rsp), %esi       # 4-byte Reload
	shrl	%cl, %esi
	movq	23168(%rsp), %rdi       # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$16142, 38596(%rsp)     # imm = 0x3F0E
	andl	$255, %esi
	cmpl	$89, %esi
	movl	22972(%rsp), %esi       # 4-byte Reload
	movl	22988(%rsp), %r8d       # 4-byte Reload
	movl	22992(%rsp), %r9d       # 4-byte Reload
	movl	22996(%rsp), %r10d      # 4-byte Reload
	movl	23000(%rsp), %r11d      # 4-byte Reload
	movl	23004(%rsp), %ebx       # 4-byte Reload
	movl	23008(%rsp), %ebp       # 4-byte Reload
	movl	23012(%rsp), %r14d      # 4-byte Reload
	movl	23016(%rsp), %r15d      # 4-byte Reload
	movl	23020(%rsp), %r12d      # 4-byte Reload
	movl	23024(%rsp), %r13d      # 4-byte Reload
	movl	23028(%rsp), %ecx       # 4-byte Reload
	movl	23032(%rsp), %edi       # 4-byte Reload
	movl	%eax, 22800(%rsp)       # 4-byte Spill
	movl	23036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27456(%rsp)       # 4-byte Spill
	movl	23040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27452(%rsp)       # 4-byte Spill
	movl	23044(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27448(%rsp)       # 4-byte Spill
	movl	23048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27444(%rsp)       # 4-byte Spill
	movl	23052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27440(%rsp)       # 4-byte Spill
	movl	23056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27436(%rsp)       # 4-byte Spill
	movl	23060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27432(%rsp)       # 4-byte Spill
	movl	23064(%rsp), %eax       # 4-byte Reload
	movl	%esi, 27196(%rsp)       # 4-byte Spill
	movq	22976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27416(%rsp)       # 8-byte Spill
	movq	23072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27408(%rsp)       # 8-byte Spill
	movq	23080(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27400(%rsp)       # 8-byte Spill
	movq	23088(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27392(%rsp)       # 8-byte Spill
	movq	23096(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27384(%rsp)       # 8-byte Spill
	movq	23104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27376(%rsp)       # 8-byte Spill
	movq	23112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27368(%rsp)       # 8-byte Spill
	movq	23120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27360(%rsp)       # 8-byte Spill
	movq	23128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27352(%rsp)       # 8-byte Spill
	movq	23136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27344(%rsp)       # 8-byte Spill
	movq	23144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27336(%rsp)       # 8-byte Spill
	movq	23152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27328(%rsp)       # 8-byte Spill
	movq	23160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27320(%rsp)       # 8-byte Spill
	movq	22856(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27312(%rsp)       # 8-byte Spill
	movq	22864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27304(%rsp)       # 8-byte Spill
	movq	22872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27296(%rsp)       # 8-byte Spill
	movq	22880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27288(%rsp)       # 8-byte Spill
	movq	22888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27280(%rsp)       # 8-byte Spill
	movq	22896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27272(%rsp)       # 8-byte Spill
	movq	22904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27264(%rsp)       # 8-byte Spill
	movq	22912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27256(%rsp)       # 8-byte Spill
	movq	22920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27248(%rsp)       # 8-byte Spill
	movq	22928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27240(%rsp)       # 8-byte Spill
	movq	22936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27232(%rsp)       # 8-byte Spill
	movq	22944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27224(%rsp)       # 8-byte Spill
	movq	22952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27216(%rsp)       # 8-byte Spill
	movq	23168(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 27204(%rsp)       # 4-byte Spill
	movl	22800(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27152(%rsp)       # 4-byte Spill
	movl	23044(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 27208(%rsp)       # 8-byte Spill
	movq	23088(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	23096(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	23104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	23112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	23120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	23128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	23136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	23144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	23152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	23160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	22856(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	22864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	22872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	22880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	22888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	22896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	22904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	22912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	22920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	22928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	22936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	22944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	22952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	23080(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	23072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	22976(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	23064(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	23060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	23056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	23052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	23048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	23040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	23036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	23032(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	23028(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	23024(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	23020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	23016(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	23012(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	23008(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	23004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	23000(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	22996(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	22992(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	22988(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	22972(%rsp), %eax       # 4-byte Reload
	movl	%ecx, 27200(%rsp)       # 4-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%edi, 27460(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%r8d, 27192(%rsp)       # 4-byte Spill
	movl	%r9d, 27188(%rsp)       # 4-byte Spill
	movl	%r10d, 27184(%rsp)      # 4-byte Spill
	movl	%r11d, 27180(%rsp)      # 4-byte Spill
	movl	%ebx, 27176(%rsp)       # 4-byte Spill
	movl	%ebp, 27172(%rsp)       # 4-byte Spill
	movl	%r14d, 27168(%rsp)      # 4-byte Spill
	movl	%r15d, 27164(%rsp)      # 4-byte Spill
	movl	%r12d, 27160(%rsp)      # 4-byte Spill
	movl	%r13d, 27156(%rsp)      # 4-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_92
	jmp	.LBB68_542
.LBB68_88:                              # %if.end411
                                        # =>This Inner Loop Header: Depth=1
	movl	22808(%rsp), %eax       # 4-byte Reload
	movl	22812(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	23044(%rsp), %esi       # 4-byte Reload
	movq	23088(%rsp), %rdi       # 8-byte Reload
	movq	23096(%rsp), %r8        # 8-byte Reload
	movq	23104(%rsp), %r9        # 8-byte Reload
	movq	23112(%rsp), %r10       # 8-byte Reload
	movq	23120(%rsp), %r11       # 8-byte Reload
	movq	23128(%rsp), %rbx       # 8-byte Reload
	movq	23136(%rsp), %r14       # 8-byte Reload
	movq	23144(%rsp), %r15       # 8-byte Reload
	movq	23152(%rsp), %r12       # 8-byte Reload
	movq	23160(%rsp), %r13       # 8-byte Reload
	movq	22856(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	22864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	22872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	22880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	22888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	22896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	22904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	22912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	22920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	22928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	22936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	22944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	22952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	23080(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	23072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	22976(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 22796(%rsp)       # 4-byte Spill
	movl	23064(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	23060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	23056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	23052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	23048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	23040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	23036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	23032(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	23028(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	23024(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	23020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	23016(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	23012(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	23008(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	23004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	23000(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	22996(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	22992(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	22988(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	22972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 22792(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.89:                               # %if.end417
                                        #   in Loop: Header=BB68_88 Depth=1
	movq	22960(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16144, 38596(%rsp)     # imm = 0x3F10
	shll	$8, %ecx
	movq	22840(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$16145, 38596(%rsp)     # imm = 0x3F11
	movb	(%rsi), %dil
	movl	$16147, 38596(%rsp)     # imm = 0x3F13
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$16148, 38596(%rsp)     # imm = 0x3F14
	movl	22796(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	23168(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$16150, 38596(%rsp)     # imm = 0x3F16
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$16151, 38596(%rsp)     # imm = 0x3F17
	movl	22792(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	22832(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$16152, 38596(%rsp)     # imm = 0x3F18
	movq	22816(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$16154, 38596(%rsp)     # imm = 0x3F1A
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$16157, 38596(%rsp)     # imm = 0x3F1D
	cmpl	$0, %ebx
	movl	%ecx, 22788(%rsp)       # 4-byte Spill
	movl	%r8d, 22784(%rsp)       # 4-byte Spill
	movl	%r10d, 22780(%rsp)      # 4-byte Spill
	jne	.LBB68_91
# %bb.90:                               # %if.then440
                                        #   in Loop: Header=BB68_88 Depth=1
	movq	22824(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16159, 38596(%rsp)     # imm = 0x3F1F
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$16212, 38596(%rsp)     # imm = 0x3F54
.LBB68_91:                              # %if.end444
                                        #   in Loop: Header=BB68_88 Depth=1
	movl	22796(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	22788(%rsp), %ecx       # 4-byte Reload
	movl	22784(%rsp), %edx       # 4-byte Reload
	movl	22780(%rsp), %esi       # 4-byte Reload
	movl	22784(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 22852(%rsp)       # 4-byte Spill
	movl	%edx, 22848(%rsp)       # 4-byte Spill
	movl	%esi, 22812(%rsp)       # 4-byte Spill
	movl	%edi, 22808(%rsp)       # 4-byte Spill
	jg	.LBB68_87
	jmp	.LBB68_88
.LBB68_92:                              # %sw.bb451
	movl	27152(%rsp), %eax       # 4-byte Reload
	movq	27208(%rsp), %rcx       # 8-byte Reload
	movq	27216(%rsp), %rdx       # 8-byte Reload
	movq	27224(%rsp), %rsi       # 8-byte Reload
	movq	27232(%rsp), %rdi       # 8-byte Reload
	movq	27240(%rsp), %r8        # 8-byte Reload
	movq	27248(%rsp), %r9        # 8-byte Reload
	movq	27256(%rsp), %r10       # 8-byte Reload
	movq	27264(%rsp), %r11       # 8-byte Reload
	movq	27272(%rsp), %rbx       # 8-byte Reload
	movq	27280(%rsp), %r14       # 8-byte Reload
	movq	27288(%rsp), %r15       # 8-byte Reload
	movq	27296(%rsp), %r12       # 8-byte Reload
	movq	27304(%rsp), %r13       # 8-byte Reload
	movq	27312(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 22768(%rsp)       # 8-byte Spill
	movq	27320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22760(%rsp)       # 8-byte Spill
	movq	27328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22752(%rsp)       # 8-byte Spill
	movq	27336(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22744(%rsp)       # 8-byte Spill
	movq	27344(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22736(%rsp)       # 8-byte Spill
	movq	27352(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22728(%rsp)       # 8-byte Spill
	movq	27360(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22720(%rsp)       # 8-byte Spill
	movq	27368(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22712(%rsp)       # 8-byte Spill
	movq	27376(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22704(%rsp)       # 8-byte Spill
	movq	27384(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22696(%rsp)       # 8-byte Spill
	movq	27392(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22688(%rsp)       # 8-byte Spill
	movq	27400(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22680(%rsp)       # 8-byte Spill
	movq	27408(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22672(%rsp)       # 8-byte Spill
	movq	27416(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 22668(%rsp)       # 4-byte Spill
	movl	27204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22664(%rsp)       # 4-byte Spill
	movl	27432(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22660(%rsp)       # 4-byte Spill
	movl	27436(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22656(%rsp)       # 4-byte Spill
	movl	27440(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22652(%rsp)       # 4-byte Spill
	movl	27444(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22648(%rsp)       # 4-byte Spill
	movl	27448(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22644(%rsp)       # 4-byte Spill
	movl	27452(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22640(%rsp)       # 4-byte Spill
	movl	27456(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22636(%rsp)       # 4-byte Spill
	movl	27460(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22632(%rsp)       # 4-byte Spill
	movl	27200(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22628(%rsp)       # 4-byte Spill
	movl	27156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22624(%rsp)       # 4-byte Spill
	movl	27160(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22620(%rsp)       # 4-byte Spill
	movl	27164(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22616(%rsp)       # 4-byte Spill
	movl	27168(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22612(%rsp)       # 4-byte Spill
	movl	27172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22608(%rsp)       # 4-byte Spill
	movl	27176(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22604(%rsp)       # 4-byte Spill
	movl	27180(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22600(%rsp)       # 4-byte Spill
	movl	27184(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22596(%rsp)       # 4-byte Spill
	movl	27188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22592(%rsp)       # 4-byte Spill
	movl	27192(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22588(%rsp)       # 4-byte Spill
	movl	27196(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 22576(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$17, (%rcx)
	movl	$16216, 38596(%rsp)     # imm = 0x3F58
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 22572(%rsp)       # 4-byte Spill
	movl	22668(%rsp), %eax       # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 22560(%rsp)       # 8-byte Spill
	movq	%rdx, 22552(%rsp)       # 8-byte Spill
	movq	%rsi, 22544(%rsp)       # 8-byte Spill
	movq	%rdi, 22536(%rsp)       # 8-byte Spill
	movq	%r8, 22528(%rsp)        # 8-byte Spill
	movq	%r9, 22520(%rsp)        # 8-byte Spill
	movq	%r10, 22512(%rsp)       # 8-byte Spill
	movq	%r11, 22504(%rsp)       # 8-byte Spill
	movq	%rbx, 22496(%rsp)       # 8-byte Spill
	movq	%r14, 22488(%rsp)       # 8-byte Spill
	movq	%r15, 22480(%rsp)       # 8-byte Spill
	movq	%r12, 22472(%rsp)       # 8-byte Spill
	movq	%r13, 22464(%rsp)       # 8-byte Spill
	movq	%rbp, 22456(%rsp)       # 8-byte Spill
	jle	.LBB68_94
# %bb.93:                               # %sw.bb451.if.then458_crit_edge
	movq	22560(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16218, 38596(%rsp)     # imm = 0x3F5A
	movl	22668(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 22452(%rsp)       # 4-byte Spill
	movl	%edx, 22448(%rsp)       # 4-byte Spill
	jmp	.LBB68_95
.LBB68_94:                              # %if.end468.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$16220, 38596(%rsp)     # imm = 0x3F5C
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$16231, 38596(%rsp)     # imm = 0x3F67
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	22668(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 22440(%rsp)       # 8-byte Spill
	movq	%rdx, 22432(%rsp)       # 8-byte Spill
	movq	%r8, 22424(%rsp)        # 8-byte Spill
	movq	%rdi, 22416(%rsp)       # 8-byte Spill
	movl	%esi, 22412(%rsp)       # 4-byte Spill
	movl	%r9d, 22408(%rsp)       # 4-byte Spill
	jmp	.LBB68_96
.LBB68_95:                              # %if.then458
	movl	22448(%rsp), %eax       # 4-byte Reload
	movl	22452(%rsp), %ecx       # 4-byte Reload
	movl	$4294967292, %edx       # imm = 0xFFFFFFFC
	addl	$-8, %eax
	movl	%ecx, 22404(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	22404(%rsp), %esi       # 4-byte Reload
	shrl	%cl, %esi
	movq	22768(%rsp), %rdi       # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$16240, 38596(%rsp)     # imm = 0x3F70
	andl	$255, %esi
	cmpl	$38, %esi
	movl	22572(%rsp), %esi       # 4-byte Reload
	movl	22588(%rsp), %r8d       # 4-byte Reload
	movl	22592(%rsp), %r9d       # 4-byte Reload
	movl	22596(%rsp), %r10d      # 4-byte Reload
	movl	22600(%rsp), %r11d      # 4-byte Reload
	movl	22604(%rsp), %ebx       # 4-byte Reload
	movl	22608(%rsp), %ebp       # 4-byte Reload
	movl	22612(%rsp), %r14d      # 4-byte Reload
	movl	22616(%rsp), %r15d      # 4-byte Reload
	movl	22620(%rsp), %r12d      # 4-byte Reload
	movl	22624(%rsp), %r13d      # 4-byte Reload
	movl	22628(%rsp), %ecx       # 4-byte Reload
	movl	22632(%rsp), %edi       # 4-byte Reload
	movl	%eax, 22400(%rsp)       # 4-byte Spill
	movl	22636(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27768(%rsp)       # 4-byte Spill
	movl	22640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27764(%rsp)       # 4-byte Spill
	movl	22644(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27760(%rsp)       # 4-byte Spill
	movl	22648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27756(%rsp)       # 4-byte Spill
	movl	22652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27752(%rsp)       # 4-byte Spill
	movl	22656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27748(%rsp)       # 4-byte Spill
	movl	22660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27744(%rsp)       # 4-byte Spill
	movl	22664(%rsp), %eax       # 4-byte Reload
	movl	%esi, 27508(%rsp)       # 4-byte Spill
	movq	22576(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27728(%rsp)       # 8-byte Spill
	movq	22672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27720(%rsp)       # 8-byte Spill
	movq	22680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27712(%rsp)       # 8-byte Spill
	movq	22688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27704(%rsp)       # 8-byte Spill
	movq	22696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27696(%rsp)       # 8-byte Spill
	movq	22704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27688(%rsp)       # 8-byte Spill
	movq	22712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27680(%rsp)       # 8-byte Spill
	movq	22720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27672(%rsp)       # 8-byte Spill
	movq	22728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27664(%rsp)       # 8-byte Spill
	movq	22736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27656(%rsp)       # 8-byte Spill
	movq	22744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27648(%rsp)       # 8-byte Spill
	movq	22752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27640(%rsp)       # 8-byte Spill
	movq	22760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27632(%rsp)       # 8-byte Spill
	movq	22456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27624(%rsp)       # 8-byte Spill
	movq	22464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27616(%rsp)       # 8-byte Spill
	movq	22472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27608(%rsp)       # 8-byte Spill
	movq	22480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27600(%rsp)       # 8-byte Spill
	movq	22488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27592(%rsp)       # 8-byte Spill
	movq	22496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27584(%rsp)       # 8-byte Spill
	movq	22504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27576(%rsp)       # 8-byte Spill
	movq	22512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27568(%rsp)       # 8-byte Spill
	movq	22520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27560(%rsp)       # 8-byte Spill
	movq	22528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27552(%rsp)       # 8-byte Spill
	movq	22536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27544(%rsp)       # 8-byte Spill
	movq	22544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27536(%rsp)       # 8-byte Spill
	movq	22552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27528(%rsp)       # 8-byte Spill
	movq	22768(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 27516(%rsp)       # 4-byte Spill
	movl	22400(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27464(%rsp)       # 4-byte Spill
	movl	22644(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 27520(%rsp)       # 8-byte Spill
	movq	22688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	22696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	22704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	22712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	22720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	22728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	22736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	22744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	22752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	22760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	22456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	22464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	22472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	22480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	22488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	22496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	22504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	22512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	22520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	22528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	22536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	22544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	22552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	22680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	22672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	22576(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	22664(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	22660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	22656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	22652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	22648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	22640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	22636(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	22632(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	22628(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	22624(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	22620(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	22616(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	22612(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	22608(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	22604(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	22600(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	22596(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	22592(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	22588(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	22572(%rsp), %eax       # 4-byte Reload
	movl	%ecx, 27512(%rsp)       # 4-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%edi, 27772(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%r8d, 27504(%rsp)       # 4-byte Spill
	movl	%r9d, 27500(%rsp)       # 4-byte Spill
	movl	%r10d, 27496(%rsp)      # 4-byte Spill
	movl	%r11d, 27492(%rsp)      # 4-byte Spill
	movl	%ebx, 27488(%rsp)       # 4-byte Spill
	movl	%ebp, 27484(%rsp)       # 4-byte Spill
	movl	%r14d, 27480(%rsp)      # 4-byte Spill
	movl	%r15d, 27476(%rsp)      # 4-byte Spill
	movl	%r12d, 27472(%rsp)      # 4-byte Spill
	movl	%r13d, 27468(%rsp)      # 4-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_100
	jmp	.LBB68_542
.LBB68_96:                              # %if.end468
                                        # =>This Inner Loop Header: Depth=1
	movl	22408(%rsp), %eax       # 4-byte Reload
	movl	22412(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	22644(%rsp), %esi       # 4-byte Reload
	movq	22688(%rsp), %rdi       # 8-byte Reload
	movq	22696(%rsp), %r8        # 8-byte Reload
	movq	22704(%rsp), %r9        # 8-byte Reload
	movq	22712(%rsp), %r10       # 8-byte Reload
	movq	22720(%rsp), %r11       # 8-byte Reload
	movq	22728(%rsp), %rbx       # 8-byte Reload
	movq	22736(%rsp), %r14       # 8-byte Reload
	movq	22744(%rsp), %r15       # 8-byte Reload
	movq	22752(%rsp), %r12       # 8-byte Reload
	movq	22760(%rsp), %r13       # 8-byte Reload
	movq	22456(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	22464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	22472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	22480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	22488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	22496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	22504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	22512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	22520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	22528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	22536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	22544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	22552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	22680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	22672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	22576(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 22396(%rsp)       # 4-byte Spill
	movl	22664(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	22660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	22656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	22652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	22648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	22640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	22636(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	22632(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	22628(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	22624(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	22620(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	22616(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	22612(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	22608(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	22604(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	22600(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	22596(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	22592(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	22588(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	22572(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 22392(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.97:                               # %if.end474
                                        #   in Loop: Header=BB68_96 Depth=1
	movq	22560(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16242, 38596(%rsp)     # imm = 0x3F72
	shll	$8, %ecx
	movq	22440(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$16243, 38596(%rsp)     # imm = 0x3F73
	movb	(%rsi), %dil
	movl	$16245, 38596(%rsp)     # imm = 0x3F75
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$16246, 38596(%rsp)     # imm = 0x3F76
	movl	22396(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	22768(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$16248, 38596(%rsp)     # imm = 0x3F78
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$16249, 38596(%rsp)     # imm = 0x3F79
	movl	22392(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	22432(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$16250, 38596(%rsp)     # imm = 0x3F7A
	movq	22416(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$16252, 38596(%rsp)     # imm = 0x3F7C
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$16255, 38596(%rsp)     # imm = 0x3F7F
	cmpl	$0, %ebx
	movl	%ecx, 22388(%rsp)       # 4-byte Spill
	movl	%r8d, 22384(%rsp)       # 4-byte Spill
	movl	%r10d, 22380(%rsp)      # 4-byte Spill
	jne	.LBB68_99
# %bb.98:                               # %if.then497
                                        #   in Loop: Header=BB68_96 Depth=1
	movq	22424(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16257, 38596(%rsp)     # imm = 0x3F81
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$16310, 38596(%rsp)     # imm = 0x3FB6
.LBB68_99:                              # %if.end501
                                        #   in Loop: Header=BB68_96 Depth=1
	movl	22396(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	22388(%rsp), %ecx       # 4-byte Reload
	movl	22384(%rsp), %edx       # 4-byte Reload
	movl	22380(%rsp), %esi       # 4-byte Reload
	movl	22384(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 22452(%rsp)       # 4-byte Spill
	movl	%edx, 22448(%rsp)       # 4-byte Spill
	movl	%esi, 22412(%rsp)       # 4-byte Spill
	movl	%edi, 22408(%rsp)       # 4-byte Spill
	jg	.LBB68_95
	jmp	.LBB68_96
.LBB68_100:                             # %sw.bb508
	movl	27464(%rsp), %eax       # 4-byte Reload
	movq	27520(%rsp), %rcx       # 8-byte Reload
	movq	27528(%rsp), %rdx       # 8-byte Reload
	movq	27536(%rsp), %rsi       # 8-byte Reload
	movq	27544(%rsp), %rdi       # 8-byte Reload
	movq	27552(%rsp), %r8        # 8-byte Reload
	movq	27560(%rsp), %r9        # 8-byte Reload
	movq	27568(%rsp), %r10       # 8-byte Reload
	movq	27576(%rsp), %r11       # 8-byte Reload
	movq	27584(%rsp), %rbx       # 8-byte Reload
	movq	27592(%rsp), %r14       # 8-byte Reload
	movq	27600(%rsp), %r15       # 8-byte Reload
	movq	27608(%rsp), %r12       # 8-byte Reload
	movq	27616(%rsp), %r13       # 8-byte Reload
	movq	27624(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 22368(%rsp)       # 8-byte Spill
	movq	27632(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22360(%rsp)       # 8-byte Spill
	movq	27640(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22352(%rsp)       # 8-byte Spill
	movq	27648(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22344(%rsp)       # 8-byte Spill
	movq	27656(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22336(%rsp)       # 8-byte Spill
	movq	27664(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22328(%rsp)       # 8-byte Spill
	movq	27672(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22320(%rsp)       # 8-byte Spill
	movq	27680(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22312(%rsp)       # 8-byte Spill
	movq	27688(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22304(%rsp)       # 8-byte Spill
	movq	27696(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22296(%rsp)       # 8-byte Spill
	movq	27704(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22288(%rsp)       # 8-byte Spill
	movq	27712(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22280(%rsp)       # 8-byte Spill
	movq	27720(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 22272(%rsp)       # 8-byte Spill
	movq	27728(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 22268(%rsp)       # 4-byte Spill
	movl	27516(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22264(%rsp)       # 4-byte Spill
	movl	27744(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22260(%rsp)       # 4-byte Spill
	movl	27748(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22256(%rsp)       # 4-byte Spill
	movl	27752(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22252(%rsp)       # 4-byte Spill
	movl	27756(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22248(%rsp)       # 4-byte Spill
	movl	27760(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22244(%rsp)       # 4-byte Spill
	movl	27764(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22240(%rsp)       # 4-byte Spill
	movl	27768(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22236(%rsp)       # 4-byte Spill
	movl	27772(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22232(%rsp)       # 4-byte Spill
	movl	27512(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22228(%rsp)       # 4-byte Spill
	movl	27468(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22224(%rsp)       # 4-byte Spill
	movl	27472(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22220(%rsp)       # 4-byte Spill
	movl	27476(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22216(%rsp)       # 4-byte Spill
	movl	27480(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22212(%rsp)       # 4-byte Spill
	movl	27484(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22208(%rsp)       # 4-byte Spill
	movl	27488(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22204(%rsp)       # 4-byte Spill
	movl	27492(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22200(%rsp)       # 4-byte Spill
	movl	27496(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22196(%rsp)       # 4-byte Spill
	movl	27500(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22192(%rsp)       # 4-byte Spill
	movl	27504(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22188(%rsp)       # 4-byte Spill
	movl	27508(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 22176(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$18, (%rcx)
	movl	$16315, 38596(%rsp)     # imm = 0x3FBB
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 22172(%rsp)       # 4-byte Spill
	movl	22268(%rsp), %eax       # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 22160(%rsp)       # 8-byte Spill
	movq	%rdx, 22152(%rsp)       # 8-byte Spill
	movq	%rsi, 22144(%rsp)       # 8-byte Spill
	movq	%rdi, 22136(%rsp)       # 8-byte Spill
	movq	%r8, 22128(%rsp)        # 8-byte Spill
	movq	%r9, 22120(%rsp)        # 8-byte Spill
	movq	%r10, 22112(%rsp)       # 8-byte Spill
	movq	%r11, 22104(%rsp)       # 8-byte Spill
	movq	%rbx, 22096(%rsp)       # 8-byte Spill
	movq	%r14, 22088(%rsp)       # 8-byte Spill
	movq	%r15, 22080(%rsp)       # 8-byte Spill
	movq	%r12, 22072(%rsp)       # 8-byte Spill
	movq	%r13, 22064(%rsp)       # 8-byte Spill
	movq	%rbp, 22056(%rsp)       # 8-byte Spill
	jle	.LBB68_102
# %bb.101:                              # %sw.bb508.if.then515_crit_edge
	movq	22160(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16317, 38596(%rsp)     # imm = 0x3FBD
	movl	22268(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 22052(%rsp)       # 4-byte Spill
	movl	%edx, 22048(%rsp)       # 4-byte Spill
	jmp	.LBB68_103
.LBB68_102:                             # %if.end525.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$16319, 38596(%rsp)     # imm = 0x3FBF
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$16330, 38596(%rsp)     # imm = 0x3FCA
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	22268(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 22040(%rsp)       # 8-byte Spill
	movq	%rdx, 22032(%rsp)       # 8-byte Spill
	movq	%r8, 22024(%rsp)        # 8-byte Spill
	movq	%rdi, 22016(%rsp)       # 8-byte Spill
	movl	%esi, 22012(%rsp)       # 4-byte Spill
	movl	%r9d, 22008(%rsp)       # 4-byte Spill
	jmp	.LBB68_104
.LBB68_103:                             # %if.then515
	movl	22048(%rsp), %eax       # 4-byte Reload
	movl	22052(%rsp), %ecx       # 4-byte Reload
	movl	$4294967292, %edx       # imm = 0xFFFFFFFC
	addl	$-8, %eax
	movl	%ecx, 22004(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	22004(%rsp), %esi       # 4-byte Reload
	shrl	%cl, %esi
	movq	22368(%rsp), %rdi       # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$16339, 38596(%rsp)     # imm = 0x3FD3
	andl	$255, %esi
	cmpl	$83, %esi
	movl	22172(%rsp), %esi       # 4-byte Reload
	movl	22188(%rsp), %r8d       # 4-byte Reload
	movl	22192(%rsp), %r9d       # 4-byte Reload
	movl	22196(%rsp), %r10d      # 4-byte Reload
	movl	22200(%rsp), %r11d      # 4-byte Reload
	movl	22204(%rsp), %ebx       # 4-byte Reload
	movl	22208(%rsp), %ebp       # 4-byte Reload
	movl	22212(%rsp), %r14d      # 4-byte Reload
	movl	22216(%rsp), %r15d      # 4-byte Reload
	movl	22220(%rsp), %r12d      # 4-byte Reload
	movl	22224(%rsp), %r13d      # 4-byte Reload
	movl	22228(%rsp), %ecx       # 4-byte Reload
	movl	22232(%rsp), %edi       # 4-byte Reload
	movl	%eax, 22000(%rsp)       # 4-byte Spill
	movl	22236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28080(%rsp)       # 4-byte Spill
	movl	22240(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28076(%rsp)       # 4-byte Spill
	movl	22244(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28072(%rsp)       # 4-byte Spill
	movl	22248(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28068(%rsp)       # 4-byte Spill
	movl	22252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28064(%rsp)       # 4-byte Spill
	movl	22256(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28060(%rsp)       # 4-byte Spill
	movl	22260(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28056(%rsp)       # 4-byte Spill
	movl	22264(%rsp), %eax       # 4-byte Reload
	movl	%esi, 27820(%rsp)       # 4-byte Spill
	movq	22176(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28040(%rsp)       # 8-byte Spill
	movq	22272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28032(%rsp)       # 8-byte Spill
	movq	22280(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28024(%rsp)       # 8-byte Spill
	movq	22288(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28016(%rsp)       # 8-byte Spill
	movq	22296(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28008(%rsp)       # 8-byte Spill
	movq	22304(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28000(%rsp)       # 8-byte Spill
	movq	22312(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27992(%rsp)       # 8-byte Spill
	movq	22320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27984(%rsp)       # 8-byte Spill
	movq	22328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27976(%rsp)       # 8-byte Spill
	movq	22336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27968(%rsp)       # 8-byte Spill
	movq	22344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27960(%rsp)       # 8-byte Spill
	movq	22352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27952(%rsp)       # 8-byte Spill
	movq	22360(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27944(%rsp)       # 8-byte Spill
	movq	22056(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27936(%rsp)       # 8-byte Spill
	movq	22064(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27928(%rsp)       # 8-byte Spill
	movq	22072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27920(%rsp)       # 8-byte Spill
	movq	22080(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27912(%rsp)       # 8-byte Spill
	movq	22088(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27904(%rsp)       # 8-byte Spill
	movq	22096(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27896(%rsp)       # 8-byte Spill
	movq	22104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27888(%rsp)       # 8-byte Spill
	movq	22112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27880(%rsp)       # 8-byte Spill
	movq	22120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27872(%rsp)       # 8-byte Spill
	movq	22128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27864(%rsp)       # 8-byte Spill
	movq	22136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27856(%rsp)       # 8-byte Spill
	movq	22144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27848(%rsp)       # 8-byte Spill
	movq	22152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 27840(%rsp)       # 8-byte Spill
	movq	22368(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 27828(%rsp)       # 4-byte Spill
	movl	22000(%rsp), %eax       # 4-byte Reload
	movl	%eax, 27776(%rsp)       # 4-byte Spill
	movl	22244(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 27832(%rsp)       # 8-byte Spill
	movq	22288(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	22296(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	22304(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	22312(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	22320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	22328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	22336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	22344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	22352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	22360(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	22056(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	22064(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	22072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	22080(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	22088(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	22096(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	22104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	22112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	22120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	22128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	22136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	22144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	22152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	22280(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	22272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	22176(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	22264(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	22260(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	22256(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	22252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	22248(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	22240(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	22236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	22232(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	22228(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	22224(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	22220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	22216(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	22212(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	22208(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	22204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	22200(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	22196(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	22192(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	22188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	22172(%rsp), %eax       # 4-byte Reload
	movl	%ecx, 27824(%rsp)       # 4-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%edi, 28084(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%r8d, 27816(%rsp)       # 4-byte Spill
	movl	%r9d, 27812(%rsp)       # 4-byte Spill
	movl	%r10d, 27808(%rsp)      # 4-byte Spill
	movl	%r11d, 27804(%rsp)      # 4-byte Spill
	movl	%ebx, 27800(%rsp)       # 4-byte Spill
	movl	%ebp, 27796(%rsp)       # 4-byte Spill
	movl	%r14d, 27792(%rsp)      # 4-byte Spill
	movl	%r15d, 27788(%rsp)      # 4-byte Spill
	movl	%r12d, 27784(%rsp)      # 4-byte Spill
	movl	%r13d, 27780(%rsp)      # 4-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_108
	jmp	.LBB68_542
.LBB68_104:                             # %if.end525
                                        # =>This Inner Loop Header: Depth=1
	movl	22008(%rsp), %eax       # 4-byte Reload
	movl	22012(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	22244(%rsp), %esi       # 4-byte Reload
	movq	22288(%rsp), %rdi       # 8-byte Reload
	movq	22296(%rsp), %r8        # 8-byte Reload
	movq	22304(%rsp), %r9        # 8-byte Reload
	movq	22312(%rsp), %r10       # 8-byte Reload
	movq	22320(%rsp), %r11       # 8-byte Reload
	movq	22328(%rsp), %rbx       # 8-byte Reload
	movq	22336(%rsp), %r14       # 8-byte Reload
	movq	22344(%rsp), %r15       # 8-byte Reload
	movq	22352(%rsp), %r12       # 8-byte Reload
	movq	22360(%rsp), %r13       # 8-byte Reload
	movq	22056(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	22064(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	22072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	22080(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	22088(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	22096(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	22104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	22112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	22120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	22128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	22136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	22144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	22152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	22280(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	22272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	22176(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 21996(%rsp)       # 4-byte Spill
	movl	22264(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	22260(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	22256(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	22252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	22248(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	22240(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	22236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	22232(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	22228(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	22224(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	22220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	22216(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	22212(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	22208(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	22204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	22200(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	22196(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	22192(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	22188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	22172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 21992(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.105:                              # %if.end531
                                        #   in Loop: Header=BB68_104 Depth=1
	movq	22160(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16341, 38596(%rsp)     # imm = 0x3FD5
	shll	$8, %ecx
	movq	22040(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$16342, 38596(%rsp)     # imm = 0x3FD6
	movb	(%rsi), %dil
	movl	$16344, 38596(%rsp)     # imm = 0x3FD8
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$16345, 38596(%rsp)     # imm = 0x3FD9
	movl	21996(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	22368(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$16347, 38596(%rsp)     # imm = 0x3FDB
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$16348, 38596(%rsp)     # imm = 0x3FDC
	movl	21992(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	22032(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$16349, 38596(%rsp)     # imm = 0x3FDD
	movq	22016(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$16351, 38596(%rsp)     # imm = 0x3FDF
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$16354, 38596(%rsp)     # imm = 0x3FE2
	cmpl	$0, %ebx
	movl	%ecx, 21988(%rsp)       # 4-byte Spill
	movl	%r8d, 21984(%rsp)       # 4-byte Spill
	movl	%r10d, 21980(%rsp)      # 4-byte Spill
	jne	.LBB68_107
# %bb.106:                              # %if.then554
                                        #   in Loop: Header=BB68_104 Depth=1
	movq	22024(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16356, 38596(%rsp)     # imm = 0x3FE4
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$16409, 38596(%rsp)     # imm = 0x4019
.LBB68_107:                             # %if.end558
                                        #   in Loop: Header=BB68_104 Depth=1
	movl	21996(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	21988(%rsp), %ecx       # 4-byte Reload
	movl	21984(%rsp), %edx       # 4-byte Reload
	movl	21980(%rsp), %esi       # 4-byte Reload
	movl	21984(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 22052(%rsp)       # 4-byte Spill
	movl	%edx, 22048(%rsp)       # 4-byte Spill
	movl	%esi, 22012(%rsp)       # 4-byte Spill
	movl	%edi, 22008(%rsp)       # 4-byte Spill
	jg	.LBB68_103
	jmp	.LBB68_104
.LBB68_108:                             # %sw.bb565
	movl	27776(%rsp), %eax       # 4-byte Reload
	movq	27832(%rsp), %rcx       # 8-byte Reload
	movq	27840(%rsp), %rdx       # 8-byte Reload
	movq	27848(%rsp), %rsi       # 8-byte Reload
	movq	27856(%rsp), %rdi       # 8-byte Reload
	movq	27864(%rsp), %r8        # 8-byte Reload
	movq	27872(%rsp), %r9        # 8-byte Reload
	movq	27880(%rsp), %r10       # 8-byte Reload
	movq	27888(%rsp), %r11       # 8-byte Reload
	movq	27896(%rsp), %rbx       # 8-byte Reload
	movq	27904(%rsp), %r14       # 8-byte Reload
	movq	27912(%rsp), %r15       # 8-byte Reload
	movq	27920(%rsp), %r12       # 8-byte Reload
	movq	27928(%rsp), %r13       # 8-byte Reload
	movq	27936(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 21968(%rsp)       # 8-byte Spill
	movq	27944(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21960(%rsp)       # 8-byte Spill
	movq	27952(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21952(%rsp)       # 8-byte Spill
	movq	27960(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21944(%rsp)       # 8-byte Spill
	movq	27968(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21936(%rsp)       # 8-byte Spill
	movq	27976(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21928(%rsp)       # 8-byte Spill
	movq	27984(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21920(%rsp)       # 8-byte Spill
	movq	27992(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21912(%rsp)       # 8-byte Spill
	movq	28000(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21904(%rsp)       # 8-byte Spill
	movq	28008(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21896(%rsp)       # 8-byte Spill
	movq	28016(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21888(%rsp)       # 8-byte Spill
	movq	28024(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21880(%rsp)       # 8-byte Spill
	movq	28032(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21872(%rsp)       # 8-byte Spill
	movq	28040(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 21868(%rsp)       # 4-byte Spill
	movl	27828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21864(%rsp)       # 4-byte Spill
	movl	28056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21860(%rsp)       # 4-byte Spill
	movl	28060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21856(%rsp)       # 4-byte Spill
	movl	28064(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21852(%rsp)       # 4-byte Spill
	movl	28068(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21848(%rsp)       # 4-byte Spill
	movl	28072(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21844(%rsp)       # 4-byte Spill
	movl	28076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21840(%rsp)       # 4-byte Spill
	movl	28080(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21836(%rsp)       # 4-byte Spill
	movl	28084(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21832(%rsp)       # 4-byte Spill
	movl	27824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21828(%rsp)       # 4-byte Spill
	movl	27780(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21824(%rsp)       # 4-byte Spill
	movl	27784(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21820(%rsp)       # 4-byte Spill
	movl	27788(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21816(%rsp)       # 4-byte Spill
	movl	27792(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21812(%rsp)       # 4-byte Spill
	movl	27796(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21808(%rsp)       # 4-byte Spill
	movl	27800(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21804(%rsp)       # 4-byte Spill
	movl	27804(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21800(%rsp)       # 4-byte Spill
	movl	27808(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21796(%rsp)       # 4-byte Spill
	movl	27812(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21792(%rsp)       # 4-byte Spill
	movl	27816(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21788(%rsp)       # 4-byte Spill
	movl	27820(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 21776(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$19, (%rcx)
	movl	$16414, 38596(%rsp)     # imm = 0x401E
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 21772(%rsp)       # 4-byte Spill
	movl	21868(%rsp), %eax       # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 21760(%rsp)       # 8-byte Spill
	movq	%rdx, 21752(%rsp)       # 8-byte Spill
	movq	%rsi, 21744(%rsp)       # 8-byte Spill
	movq	%rdi, 21736(%rsp)       # 8-byte Spill
	movq	%r8, 21728(%rsp)        # 8-byte Spill
	movq	%r9, 21720(%rsp)        # 8-byte Spill
	movq	%r10, 21712(%rsp)       # 8-byte Spill
	movq	%r11, 21704(%rsp)       # 8-byte Spill
	movq	%rbx, 21696(%rsp)       # 8-byte Spill
	movq	%r14, 21688(%rsp)       # 8-byte Spill
	movq	%r15, 21680(%rsp)       # 8-byte Spill
	movq	%r12, 21672(%rsp)       # 8-byte Spill
	movq	%r13, 21664(%rsp)       # 8-byte Spill
	movq	%rbp, 21656(%rsp)       # 8-byte Spill
	jle	.LBB68_110
# %bb.109:                              # %sw.bb565.if.then572_crit_edge
	movq	21760(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16416, 38596(%rsp)     # imm = 0x4020
	movl	21868(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 21652(%rsp)       # 4-byte Spill
	movl	%edx, 21648(%rsp)       # 4-byte Spill
	jmp	.LBB68_111
.LBB68_110:                             # %if.end582.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$16418, 38596(%rsp)     # imm = 0x4022
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$16429, 38596(%rsp)     # imm = 0x402D
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	21868(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 21640(%rsp)       # 8-byte Spill
	movq	%rdx, 21632(%rsp)       # 8-byte Spill
	movq	%r8, 21624(%rsp)        # 8-byte Spill
	movq	%rdi, 21616(%rsp)       # 8-byte Spill
	movl	%esi, 21612(%rsp)       # 4-byte Spill
	movl	%r9d, 21608(%rsp)       # 4-byte Spill
	jmp	.LBB68_112
.LBB68_111:                             # %if.then572
	movl	21648(%rsp), %eax       # 4-byte Reload
	movl	21652(%rsp), %ecx       # 4-byte Reload
	movl	$4294967292, %edx       # imm = 0xFFFFFFFC
	addl	$-8, %eax
	movl	%ecx, 21604(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	21604(%rsp), %esi       # 4-byte Reload
	shrl	%cl, %esi
	movq	21968(%rsp), %rdi       # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$16438, 38596(%rsp)     # imm = 0x4036
	andl	$255, %esi
	cmpl	$89, %esi
	movl	21844(%rsp), %eax       # 4-byte Reload
	movq	21888(%rsp), %r8        # 8-byte Reload
	movq	21896(%rsp), %r9        # 8-byte Reload
	movq	21904(%rsp), %r10       # 8-byte Reload
	movq	21912(%rsp), %r11       # 8-byte Reload
	movq	21920(%rsp), %rbx       # 8-byte Reload
	movq	21928(%rsp), %r14       # 8-byte Reload
	movq	21936(%rsp), %r15       # 8-byte Reload
	movq	21944(%rsp), %r12       # 8-byte Reload
	movq	21952(%rsp), %r13       # 8-byte Reload
	movq	21960(%rsp), %rbp       # 8-byte Reload
	movq	21656(%rsp), %rcx       # 8-byte Reload
	movq	21664(%rsp), %rsi       # 8-byte Reload
	movq	21672(%rsp), %rdi       # 8-byte Reload
	movq	%rcx, 25440(%rsp)       # 8-byte Spill
	movq	21680(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	21688(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	21696(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	21704(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	21712(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	21720(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	21728(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	21736(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	21744(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	21752(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	21880(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	21872(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	21776(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	21864(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	21860(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	21856(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	21852(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	21848(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	21840(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	21836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	21832(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	21828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	21824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	21820(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	21816(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	21812(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	21808(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	21804(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	21800(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	21796(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	21792(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	21788(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	21772(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	%rdi, 25424(%rsp)       # 8-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%r8, 25520(%rsp)        # 8-byte Spill
	movq	%r9, 25512(%rsp)        # 8-byte Spill
	movq	%r10, 25504(%rsp)       # 8-byte Spill
	movq	%r11, 25496(%rsp)       # 8-byte Spill
	movq	%rbx, 25488(%rsp)       # 8-byte Spill
	movq	%r14, 25480(%rsp)       # 8-byte Spill
	movq	%r15, 25472(%rsp)       # 8-byte Spill
	movq	%r12, 25464(%rsp)       # 8-byte Spill
	movq	%r13, 25456(%rsp)       # 8-byte Spill
	movq	%rbp, 25448(%rsp)       # 8-byte Spill
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_116
	jmp	.LBB68_542
.LBB68_112:                             # %if.end582
                                        # =>This Inner Loop Header: Depth=1
	movl	21608(%rsp), %eax       # 4-byte Reload
	movl	21612(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	21844(%rsp), %esi       # 4-byte Reload
	movq	21888(%rsp), %rdi       # 8-byte Reload
	movq	21896(%rsp), %r8        # 8-byte Reload
	movq	21904(%rsp), %r9        # 8-byte Reload
	movq	21912(%rsp), %r10       # 8-byte Reload
	movq	21920(%rsp), %r11       # 8-byte Reload
	movq	21928(%rsp), %rbx       # 8-byte Reload
	movq	21936(%rsp), %r14       # 8-byte Reload
	movq	21944(%rsp), %r15       # 8-byte Reload
	movq	21952(%rsp), %r12       # 8-byte Reload
	movq	21960(%rsp), %r13       # 8-byte Reload
	movq	21656(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	21664(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	21672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	21680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	21688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	21696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	21704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	21712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	21720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	21728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	21736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	21744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	21752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	21880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	21872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	21776(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 21600(%rsp)       # 4-byte Spill
	movl	21864(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	21860(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	21856(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	21852(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	21848(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	21840(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	21836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	21832(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	21828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	21824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	21820(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	21816(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	21812(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	21808(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	21804(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	21800(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	21796(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	21792(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	21788(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	21772(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 21596(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.113:                              # %if.end588
                                        #   in Loop: Header=BB68_112 Depth=1
	movq	21760(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16440, 38596(%rsp)     # imm = 0x4038
	shll	$8, %ecx
	movq	21640(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$16441, 38596(%rsp)     # imm = 0x4039
	movb	(%rsi), %dil
	movl	$16443, 38596(%rsp)     # imm = 0x403B
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$16444, 38596(%rsp)     # imm = 0x403C
	movl	21600(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	21968(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$16446, 38596(%rsp)     # imm = 0x403E
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$16447, 38596(%rsp)     # imm = 0x403F
	movl	21596(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	21632(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$16448, 38596(%rsp)     # imm = 0x4040
	movq	21616(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$16450, 38596(%rsp)     # imm = 0x4042
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$16453, 38596(%rsp)     # imm = 0x4045
	cmpl	$0, %ebx
	movl	%ecx, 21592(%rsp)       # 4-byte Spill
	movl	%r8d, 21588(%rsp)       # 4-byte Spill
	movl	%r10d, 21584(%rsp)      # 4-byte Spill
	jne	.LBB68_115
# %bb.114:                              # %if.then611
                                        #   in Loop: Header=BB68_112 Depth=1
	movq	21624(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16455, 38596(%rsp)     # imm = 0x4047
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$16460, 38596(%rsp)     # imm = 0x404C
.LBB68_115:                             # %if.end615
                                        #   in Loop: Header=BB68_112 Depth=1
	movl	21600(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	21592(%rsp), %ecx       # 4-byte Reload
	movl	21588(%rsp), %edx       # 4-byte Reload
	movl	21584(%rsp), %esi       # 4-byte Reload
	movl	21588(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 21652(%rsp)       # 4-byte Spill
	movl	%edx, 21648(%rsp)       # 4-byte Spill
	movl	%esi, 21612(%rsp)       # 4-byte Spill
	movl	%edi, 21608(%rsp)       # 4-byte Spill
	jg	.LBB68_111
	jmp	.LBB68_112
.LBB68_116:                             # %if.end621
	movq	38576(%rsp), %rax       # 8-byte Reload
	movl	48(%rax), %ecx
	movl	$16462, 38596(%rsp)     # imm = 0x404E
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movl	$16464, 38596(%rsp)     # imm = 0x4050
	movl	52(%rax), %edx
	movl	$16467, 38596(%rsp)     # imm = 0x4053
	cmpl	$1, %edx
	movl	%ecx, 21580(%rsp)       # 4-byte Spill
	jle	.LBB68_118
# %bb.117:                              # %if.then625
	movabsq	$.L.str.80, %rsi
	movq	stderr, %rdi
	movl	$16471, 38596(%rsp)     # imm = 0x4057
	movl	21580(%rsp), %edx       # 4-byte Reload
	movb	$0, %al
	callq	fprintf
	movl	%eax, 21576(%rsp)       # 4-byte Spill
.LBB68_118:                             # %if.end628
	movq	38576(%rsp), %rax       # 8-byte Reload
	movl	$0, 3176(%rax)
	movl	$16522, 38596(%rsp)     # imm = 0x408A
	movl	21772(%rsp), %ecx       # 4-byte Reload
	movl	21788(%rsp), %edx       # 4-byte Reload
	movl	21792(%rsp), %esi       # 4-byte Reload
	movl	21796(%rsp), %edi       # 4-byte Reload
	movl	21800(%rsp), %r8d       # 4-byte Reload
	movl	21804(%rsp), %r9d       # 4-byte Reload
	movl	21808(%rsp), %r10d      # 4-byte Reload
	movl	21812(%rsp), %r11d      # 4-byte Reload
	movl	21816(%rsp), %ebx       # 4-byte Reload
	movl	21820(%rsp), %ebp       # 4-byte Reload
	movl	21824(%rsp), %r14d      # 4-byte Reload
	movl	21828(%rsp), %r15d      # 4-byte Reload
	movl	21832(%rsp), %r12d      # 4-byte Reload
	movl	21836(%rsp), %r13d      # 4-byte Reload
	movl	21840(%rsp), %eax       # 4-byte Reload
	movl	%eax, 34976(%rsp)       # 4-byte Spill
	movl	21844(%rsp), %eax       # 4-byte Reload
	movl	%eax, 34972(%rsp)       # 4-byte Spill
	movl	21848(%rsp), %eax       # 4-byte Reload
	movl	%eax, 34968(%rsp)       # 4-byte Spill
	movl	21852(%rsp), %eax       # 4-byte Reload
	movl	%eax, 34964(%rsp)       # 4-byte Spill
	movl	21856(%rsp), %eax       # 4-byte Reload
	movl	%eax, 34960(%rsp)       # 4-byte Spill
	movl	21860(%rsp), %eax       # 4-byte Reload
	movl	%eax, 34956(%rsp)       # 4-byte Spill
	movl	21864(%rsp), %eax       # 4-byte Reload
	movl	%esi, 34716(%rsp)       # 4-byte Spill
	movq	21776(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34936(%rsp)       # 8-byte Spill
	movq	21872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34928(%rsp)       # 8-byte Spill
	movq	21880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34920(%rsp)       # 8-byte Spill
	movq	21888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34912(%rsp)       # 8-byte Spill
	movq	21896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34904(%rsp)       # 8-byte Spill
	movq	21904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34896(%rsp)       # 8-byte Spill
	movq	21912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34888(%rsp)       # 8-byte Spill
	movq	21920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34880(%rsp)       # 8-byte Spill
	movq	21928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34872(%rsp)       # 8-byte Spill
	movq	21936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34864(%rsp)       # 8-byte Spill
	movq	21944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34856(%rsp)       # 8-byte Spill
	movq	21952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34848(%rsp)       # 8-byte Spill
	movq	21960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34840(%rsp)       # 8-byte Spill
	movq	21656(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34832(%rsp)       # 8-byte Spill
	movq	21664(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34824(%rsp)       # 8-byte Spill
	movq	21672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34816(%rsp)       # 8-byte Spill
	movq	21680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34808(%rsp)       # 8-byte Spill
	movq	21688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34800(%rsp)       # 8-byte Spill
	movq	21696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34792(%rsp)       # 8-byte Spill
	movq	21704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34784(%rsp)       # 8-byte Spill
	movq	21712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34776(%rsp)       # 8-byte Spill
	movq	21720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34768(%rsp)       # 8-byte Spill
	movq	21728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34760(%rsp)       # 8-byte Spill
	movq	21736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34752(%rsp)       # 8-byte Spill
	movq	21744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34744(%rsp)       # 8-byte Spill
	movq	21752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 34736(%rsp)       # 8-byte Spill
	movq	21968(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 34724(%rsp)       # 4-byte Spill
	movl	%ecx, 34980(%rsp)       # 4-byte Spill
	movl	%edx, 34720(%rsp)       # 4-byte Spill
	movq	%rsi, 34728(%rsp)       # 8-byte Spill
	movl	%edi, 34712(%rsp)       # 4-byte Spill
	movl	%r8d, 34708(%rsp)       # 4-byte Spill
	movl	%r9d, 34704(%rsp)       # 4-byte Spill
	movl	%r10d, 34700(%rsp)      # 4-byte Spill
	movl	%r11d, 34696(%rsp)      # 4-byte Spill
	movl	%ebx, 34692(%rsp)       # 4-byte Spill
	movl	%ebp, 34688(%rsp)       # 4-byte Spill
	movl	%r14d, 34684(%rsp)      # 4-byte Spill
	movl	%r15d, 34680(%rsp)      # 4-byte Spill
	movl	%r12d, 34676(%rsp)      # 4-byte Spill
	movl	%r13d, 34672(%rsp)      # 4-byte Spill
.LBB68_119:                             # %sw.bb629
	movq	34728(%rsp), %rax       # 8-byte Reload
	movq	34736(%rsp), %rcx       # 8-byte Reload
	movq	34744(%rsp), %rdx       # 8-byte Reload
	movq	34752(%rsp), %rsi       # 8-byte Reload
	movq	34760(%rsp), %rdi       # 8-byte Reload
	movq	34768(%rsp), %r8        # 8-byte Reload
	movq	34776(%rsp), %r9        # 8-byte Reload
	movq	34784(%rsp), %r10       # 8-byte Reload
	movq	34792(%rsp), %r11       # 8-byte Reload
	movq	34800(%rsp), %rbx       # 8-byte Reload
	movq	34808(%rsp), %r14       # 8-byte Reload
	movq	34816(%rsp), %r15       # 8-byte Reload
	movq	34824(%rsp), %r12       # 8-byte Reload
	movq	34832(%rsp), %r13       # 8-byte Reload
	movq	34840(%rsp), %rbp       # 8-byte Reload
	movq	%rax, 21568(%rsp)       # 8-byte Spill
	movq	34848(%rsp), %rax       # 8-byte Reload
	movq	%rax, 21560(%rsp)       # 8-byte Spill
	movq	34856(%rsp), %rax       # 8-byte Reload
	movq	%rax, 21552(%rsp)       # 8-byte Spill
	movq	34864(%rsp), %rax       # 8-byte Reload
	movq	%rax, 21544(%rsp)       # 8-byte Spill
	movq	34872(%rsp), %rax       # 8-byte Reload
	movq	%rax, 21536(%rsp)       # 8-byte Spill
	movq	34880(%rsp), %rax       # 8-byte Reload
	movq	%rax, 21528(%rsp)       # 8-byte Spill
	movq	34888(%rsp), %rax       # 8-byte Reload
	movq	%rax, 21520(%rsp)       # 8-byte Spill
	movq	34896(%rsp), %rax       # 8-byte Reload
	movq	%rax, 21512(%rsp)       # 8-byte Spill
	movq	34904(%rsp), %rax       # 8-byte Reload
	movq	%rax, 21504(%rsp)       # 8-byte Spill
	movq	34912(%rsp), %rax       # 8-byte Reload
	movq	%rax, 21496(%rsp)       # 8-byte Spill
	movq	34920(%rsp), %rax       # 8-byte Reload
	movq	%rax, 21488(%rsp)       # 8-byte Spill
	movq	34928(%rsp), %rax       # 8-byte Reload
	movq	%rax, 21480(%rsp)       # 8-byte Spill
	movq	34936(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 21472(%rsp)       # 8-byte Spill
	movl	34724(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21468(%rsp)       # 4-byte Spill
	movl	34956(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21464(%rsp)       # 4-byte Spill
	movl	34960(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21460(%rsp)       # 4-byte Spill
	movl	34964(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21456(%rsp)       # 4-byte Spill
	movl	34968(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21452(%rsp)       # 4-byte Spill
	movl	34972(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21448(%rsp)       # 4-byte Spill
	movl	34976(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21444(%rsp)       # 4-byte Spill
	movl	34672(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21440(%rsp)       # 4-byte Spill
	movl	34676(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21436(%rsp)       # 4-byte Spill
	movl	34680(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21432(%rsp)       # 4-byte Spill
	movl	34684(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21428(%rsp)       # 4-byte Spill
	movl	34688(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21424(%rsp)       # 4-byte Spill
	movl	34692(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21420(%rsp)       # 4-byte Spill
	movl	34696(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21416(%rsp)       # 4-byte Spill
	movl	34700(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21412(%rsp)       # 4-byte Spill
	movl	34704(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21408(%rsp)       # 4-byte Spill
	movl	34708(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21404(%rsp)       # 4-byte Spill
	movl	34712(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21400(%rsp)       # 4-byte Spill
	movl	34716(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21396(%rsp)       # 4-byte Spill
	movl	34720(%rsp), %esi       # 4-byte Reload
	movl	%esi, 21392(%rsp)       # 4-byte Spill
	movl	34980(%rsp), %esi       # 4-byte Reload
	movq	%rax, 21384(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rax       # 8-byte Reload
	movl	$20, (%rax)
	movl	$16524, 38596(%rsp)     # imm = 0x408C
	movq	21568(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %eax
	movl	$16528, 38596(%rsp)     # imm = 0x4090
	movq	%rcx, 21376(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	cmpl	$7, %eax
	movl	%eax, 21372(%rsp)       # 4-byte Spill
	movq	%rcx, 21360(%rsp)       # 8-byte Spill
	movq	%rdx, 21352(%rsp)       # 8-byte Spill
	movl	%esi, 21348(%rsp)       # 4-byte Spill
	movq	%rdi, 21336(%rsp)       # 8-byte Spill
	movq	%r8, 21328(%rsp)        # 8-byte Spill
	movq	%r9, 21320(%rsp)        # 8-byte Spill
	movq	%r10, 21312(%rsp)       # 8-byte Spill
	movq	%r11, 21304(%rsp)       # 8-byte Spill
	movq	%rbx, 21296(%rsp)       # 8-byte Spill
	movq	%r14, 21288(%rsp)       # 8-byte Spill
	movq	%r15, 21280(%rsp)       # 8-byte Spill
	movq	%r12, 21272(%rsp)       # 8-byte Spill
	movq	%r13, 21264(%rsp)       # 8-byte Spill
	movq	%rbp, 21256(%rsp)       # 8-byte Spill
	jle	.LBB68_121
# %bb.120:                              # %sw.bb629.if.then636_crit_edge
	movq	21360(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16530, 38596(%rsp)     # imm = 0x4092
	movl	21372(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 21252(%rsp)       # 4-byte Spill
	movl	%edx, 21248(%rsp)       # 4-byte Spill
	jmp	.LBB68_122
.LBB68_121:                             # %if.end646.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$16532, 38596(%rsp)     # imm = 0x4094
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$16543, 38596(%rsp)     # imm = 0x409F
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	21372(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 21240(%rsp)       # 8-byte Spill
	movq	%rdx, 21232(%rsp)       # 8-byte Spill
	movq	%r8, 21224(%rsp)        # 8-byte Spill
	movq	%rdi, 21216(%rsp)       # 8-byte Spill
	movl	%esi, 21212(%rsp)       # 4-byte Spill
	movl	%r9d, 21208(%rsp)       # 4-byte Spill
	jmp	.LBB68_123
.LBB68_122:                             # %if.then636
	movl	21248(%rsp), %eax       # 4-byte Reload
	movl	21252(%rsp), %ecx       # 4-byte Reload
	addl	$-8, %eax
	movl	%ecx, 21204(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	21204(%rsp), %edx       # 4-byte Reload
	shrl	%cl, %edx
	movq	21568(%rsp), %rsi       # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$16544, 38596(%rsp)     # imm = 0x40A0
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movl	3176(%rdi), %r8d
	movl	$16549, 38596(%rsp)     # imm = 0x40A5
	shll	$8, %r8d
	andl	$255, %edx
	orl	%edx, %r8d
	movl	%r8d, 3176(%rdi)
	movl	$16556, 38596(%rsp)     # imm = 0x40AC
	movl	21348(%rsp), %edx       # 4-byte Reload
	movl	21392(%rsp), %r8d       # 4-byte Reload
	movl	21396(%rsp), %r9d       # 4-byte Reload
	movl	21400(%rsp), %r10d      # 4-byte Reload
	movl	21404(%rsp), %r11d      # 4-byte Reload
	movl	21408(%rsp), %ebx       # 4-byte Reload
	movl	21412(%rsp), %ebp       # 4-byte Reload
	movl	21416(%rsp), %r14d      # 4-byte Reload
	movl	21420(%rsp), %r15d      # 4-byte Reload
	movl	21424(%rsp), %r12d      # 4-byte Reload
	movl	21428(%rsp), %r13d      # 4-byte Reload
	movl	21432(%rsp), %ecx       # 4-byte Reload
	movl	21436(%rsp), %esi       # 4-byte Reload
	movl	21440(%rsp), %edi       # 4-byte Reload
	movl	%eax, 21200(%rsp)       # 4-byte Spill
	movl	21444(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28388(%rsp)       # 4-byte Spill
	movl	21448(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28384(%rsp)       # 4-byte Spill
	movl	21452(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28380(%rsp)       # 4-byte Spill
	movl	21456(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28376(%rsp)       # 4-byte Spill
	movl	21460(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28372(%rsp)       # 4-byte Spill
	movl	21464(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28368(%rsp)       # 4-byte Spill
	movl	21468(%rsp), %eax       # 4-byte Reload
	movl	%esi, 28396(%rsp)       # 4-byte Spill
	movq	21384(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28352(%rsp)       # 8-byte Spill
	movq	21480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28344(%rsp)       # 8-byte Spill
	movq	21488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28336(%rsp)       # 8-byte Spill
	movq	21496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28328(%rsp)       # 8-byte Spill
	movq	21504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28320(%rsp)       # 8-byte Spill
	movq	21512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28312(%rsp)       # 8-byte Spill
	movq	21520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28304(%rsp)       # 8-byte Spill
	movq	21528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28296(%rsp)       # 8-byte Spill
	movq	21536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28288(%rsp)       # 8-byte Spill
	movq	21544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28280(%rsp)       # 8-byte Spill
	movq	21552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28272(%rsp)       # 8-byte Spill
	movq	21560(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28264(%rsp)       # 8-byte Spill
	movq	21256(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28256(%rsp)       # 8-byte Spill
	movq	21264(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28248(%rsp)       # 8-byte Spill
	movq	21272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28240(%rsp)       # 8-byte Spill
	movq	21280(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28232(%rsp)       # 8-byte Spill
	movq	21288(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28224(%rsp)       # 8-byte Spill
	movq	21296(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28216(%rsp)       # 8-byte Spill
	movq	21304(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28208(%rsp)       # 8-byte Spill
	movq	21312(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28200(%rsp)       # 8-byte Spill
	movq	21320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28192(%rsp)       # 8-byte Spill
	movq	21328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28184(%rsp)       # 8-byte Spill
	movq	21336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28176(%rsp)       # 8-byte Spill
	movq	21472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28168(%rsp)       # 8-byte Spill
	movq	21352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28160(%rsp)       # 8-byte Spill
	movq	21376(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28152(%rsp)       # 8-byte Spill
	movq	21568(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 28140(%rsp)       # 4-byte Spill
	movl	21200(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28088(%rsp)       # 4-byte Spill
	movl	%edi, 28392(%rsp)       # 4-byte Spill
	movq	%rsi, 28144(%rsp)       # 8-byte Spill
	movl	%edx, 28132(%rsp)       # 4-byte Spill
	movl	%r8d, 28128(%rsp)       # 4-byte Spill
	movl	%r9d, 28124(%rsp)       # 4-byte Spill
	movl	%r10d, 28120(%rsp)      # 4-byte Spill
	movl	%r11d, 28116(%rsp)      # 4-byte Spill
	movl	%ebx, 28112(%rsp)       # 4-byte Spill
	movl	%ebp, 28108(%rsp)       # 4-byte Spill
	movl	%r14d, 28104(%rsp)      # 4-byte Spill
	movl	%r15d, 28100(%rsp)      # 4-byte Spill
	movl	%r12d, 28096(%rsp)      # 4-byte Spill
	movl	%r13d, 28092(%rsp)      # 4-byte Spill
	movl	%ecx, 28136(%rsp)       # 4-byte Spill
	jmp	.LBB68_127
.LBB68_123:                             # %if.end646
                                        # =>This Inner Loop Header: Depth=1
	movl	21208(%rsp), %eax       # 4-byte Reload
	movl	21212(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	21448(%rsp), %esi       # 4-byte Reload
	movq	21496(%rsp), %rdi       # 8-byte Reload
	movq	21504(%rsp), %r8        # 8-byte Reload
	movq	21512(%rsp), %r9        # 8-byte Reload
	movq	21520(%rsp), %r10       # 8-byte Reload
	movq	21528(%rsp), %r11       # 8-byte Reload
	movq	21536(%rsp), %rbx       # 8-byte Reload
	movq	21544(%rsp), %r14       # 8-byte Reload
	movq	21552(%rsp), %r15       # 8-byte Reload
	movq	21560(%rsp), %r12       # 8-byte Reload
	movq	21256(%rsp), %r13       # 8-byte Reload
	movq	21264(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	21272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	21280(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	21288(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	21296(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	21304(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	21312(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	21320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	21328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	21336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	21472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	21352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	21376(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	21488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	21480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	21384(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 21196(%rsp)       # 4-byte Spill
	movl	21468(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	21464(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	21460(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	21456(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	21452(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	21444(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	21440(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	21436(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	21432(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	21428(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	21424(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	21420(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	21416(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	21412(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	21408(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	21404(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	21400(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	21396(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	21392(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	21348(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 21192(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.124:                              # %if.end652
                                        #   in Loop: Header=BB68_123 Depth=1
	movq	21360(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16558, 38596(%rsp)     # imm = 0x40AE
	shll	$8, %ecx
	movq	21240(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$16559, 38596(%rsp)     # imm = 0x40AF
	movb	(%rsi), %dil
	movl	$16561, 38596(%rsp)     # imm = 0x40B1
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$16562, 38596(%rsp)     # imm = 0x40B2
	movl	21196(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	21568(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$16564, 38596(%rsp)     # imm = 0x40B4
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$16565, 38596(%rsp)     # imm = 0x40B5
	movl	21192(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	21232(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$16566, 38596(%rsp)     # imm = 0x40B6
	movq	21216(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$16568, 38596(%rsp)     # imm = 0x40B8
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$16571, 38596(%rsp)     # imm = 0x40BB
	cmpl	$0, %ebx
	movl	%ecx, 21188(%rsp)       # 4-byte Spill
	movl	%r8d, 21184(%rsp)       # 4-byte Spill
	movl	%r10d, 21180(%rsp)      # 4-byte Spill
	jne	.LBB68_126
# %bb.125:                              # %if.then675
                                        #   in Loop: Header=BB68_123 Depth=1
	movq	21224(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16573, 38596(%rsp)     # imm = 0x40BD
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$16626, 38596(%rsp)     # imm = 0x40F2
.LBB68_126:                             # %if.end679
                                        #   in Loop: Header=BB68_123 Depth=1
	movl	21196(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	21188(%rsp), %ecx       # 4-byte Reload
	movl	21184(%rsp), %edx       # 4-byte Reload
	movl	21180(%rsp), %esi       # 4-byte Reload
	movl	21184(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 21252(%rsp)       # 4-byte Spill
	movl	%edx, 21248(%rsp)       # 4-byte Spill
	movl	%esi, 21212(%rsp)       # 4-byte Spill
	movl	%edi, 21208(%rsp)       # 4-byte Spill
	jg	.LBB68_122
	jmp	.LBB68_123
.LBB68_127:                             # %sw.bb686
	movl	28088(%rsp), %eax       # 4-byte Reload
	movq	28144(%rsp), %rcx       # 8-byte Reload
	movq	28152(%rsp), %rdx       # 8-byte Reload
	movq	28160(%rsp), %rsi       # 8-byte Reload
	movq	28168(%rsp), %rdi       # 8-byte Reload
	movq	28176(%rsp), %r8        # 8-byte Reload
	movq	28184(%rsp), %r9        # 8-byte Reload
	movq	28192(%rsp), %r10       # 8-byte Reload
	movq	28200(%rsp), %r11       # 8-byte Reload
	movq	28208(%rsp), %rbx       # 8-byte Reload
	movq	28216(%rsp), %r14       # 8-byte Reload
	movq	28224(%rsp), %r15       # 8-byte Reload
	movq	28232(%rsp), %r12       # 8-byte Reload
	movq	28240(%rsp), %r13       # 8-byte Reload
	movq	28248(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 21168(%rsp)       # 8-byte Spill
	movq	28256(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21160(%rsp)       # 8-byte Spill
	movq	28264(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21152(%rsp)       # 8-byte Spill
	movq	28272(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21144(%rsp)       # 8-byte Spill
	movq	28280(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21136(%rsp)       # 8-byte Spill
	movq	28288(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21128(%rsp)       # 8-byte Spill
	movq	28296(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21120(%rsp)       # 8-byte Spill
	movq	28304(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21112(%rsp)       # 8-byte Spill
	movq	28312(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21104(%rsp)       # 8-byte Spill
	movq	28320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21096(%rsp)       # 8-byte Spill
	movq	28328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21088(%rsp)       # 8-byte Spill
	movq	28336(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21080(%rsp)       # 8-byte Spill
	movq	28344(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 21072(%rsp)       # 8-byte Spill
	movq	28352(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 21068(%rsp)       # 4-byte Spill
	movl	28140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21064(%rsp)       # 4-byte Spill
	movl	28368(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21060(%rsp)       # 4-byte Spill
	movl	28372(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21056(%rsp)       # 4-byte Spill
	movl	28376(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21052(%rsp)       # 4-byte Spill
	movl	28380(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21048(%rsp)       # 4-byte Spill
	movl	28384(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21044(%rsp)       # 4-byte Spill
	movl	28388(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21040(%rsp)       # 4-byte Spill
	movl	28392(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21036(%rsp)       # 4-byte Spill
	movl	28396(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21032(%rsp)       # 4-byte Spill
	movl	28136(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21028(%rsp)       # 4-byte Spill
	movl	28092(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21024(%rsp)       # 4-byte Spill
	movl	28096(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21020(%rsp)       # 4-byte Spill
	movl	28100(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21016(%rsp)       # 4-byte Spill
	movl	28104(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21012(%rsp)       # 4-byte Spill
	movl	28108(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21008(%rsp)       # 4-byte Spill
	movl	28112(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21004(%rsp)       # 4-byte Spill
	movl	28116(%rsp), %eax       # 4-byte Reload
	movl	%eax, 21000(%rsp)       # 4-byte Spill
	movl	28120(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20996(%rsp)       # 4-byte Spill
	movl	28124(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20992(%rsp)       # 4-byte Spill
	movl	28128(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20988(%rsp)       # 4-byte Spill
	movl	28132(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 20976(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$21, (%rcx)
	movl	$16631, 38596(%rsp)     # imm = 0x40F7
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 20972(%rsp)       # 4-byte Spill
	movl	21068(%rsp), %eax       # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 20960(%rsp)       # 8-byte Spill
	movq	%rdx, 20952(%rsp)       # 8-byte Spill
	movq	%rsi, 20944(%rsp)       # 8-byte Spill
	movq	%rdi, 20936(%rsp)       # 8-byte Spill
	movq	%r8, 20928(%rsp)        # 8-byte Spill
	movq	%r9, 20920(%rsp)        # 8-byte Spill
	movq	%r10, 20912(%rsp)       # 8-byte Spill
	movq	%r11, 20904(%rsp)       # 8-byte Spill
	movq	%rbx, 20896(%rsp)       # 8-byte Spill
	movq	%r14, 20888(%rsp)       # 8-byte Spill
	movq	%r15, 20880(%rsp)       # 8-byte Spill
	movq	%r12, 20872(%rsp)       # 8-byte Spill
	movq	%r13, 20864(%rsp)       # 8-byte Spill
	movq	%rbp, 20856(%rsp)       # 8-byte Spill
	jle	.LBB68_129
# %bb.128:                              # %sw.bb686.if.then693_crit_edge
	movq	20960(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16633, 38596(%rsp)     # imm = 0x40F9
	movl	21068(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 20852(%rsp)       # 4-byte Spill
	movl	%edx, 20848(%rsp)       # 4-byte Spill
	jmp	.LBB68_130
.LBB68_129:                             # %if.end703.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$16635, 38596(%rsp)     # imm = 0x40FB
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$16646, 38596(%rsp)     # imm = 0x4106
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	21068(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 20840(%rsp)       # 8-byte Spill
	movq	%rdx, 20832(%rsp)       # 8-byte Spill
	movq	%r8, 20824(%rsp)        # 8-byte Spill
	movq	%rdi, 20816(%rsp)       # 8-byte Spill
	movl	%esi, 20812(%rsp)       # 4-byte Spill
	movl	%r9d, 20808(%rsp)       # 4-byte Spill
	jmp	.LBB68_131
.LBB68_130:                             # %if.then693
	movl	20848(%rsp), %eax       # 4-byte Reload
	movl	20852(%rsp), %ecx       # 4-byte Reload
	addl	$-8, %eax
	movl	%ecx, 20804(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	20804(%rsp), %edx       # 4-byte Reload
	shrl	%cl, %edx
	movq	21168(%rsp), %rsi       # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$16647, 38596(%rsp)     # imm = 0x4107
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movl	3176(%rdi), %r8d
	movl	$16652, 38596(%rsp)     # imm = 0x410C
	shll	$8, %r8d
	andl	$255, %edx
	orl	%edx, %r8d
	movl	%r8d, 3176(%rdi)
	movl	$16659, 38596(%rsp)     # imm = 0x4113
	movl	20972(%rsp), %edx       # 4-byte Reload
	movl	20988(%rsp), %r8d       # 4-byte Reload
	movl	20992(%rsp), %r9d       # 4-byte Reload
	movl	20996(%rsp), %r10d      # 4-byte Reload
	movl	21000(%rsp), %r11d      # 4-byte Reload
	movl	21004(%rsp), %ebx       # 4-byte Reload
	movl	21008(%rsp), %ebp       # 4-byte Reload
	movl	21012(%rsp), %r14d      # 4-byte Reload
	movl	21016(%rsp), %r15d      # 4-byte Reload
	movl	21020(%rsp), %r12d      # 4-byte Reload
	movl	21024(%rsp), %r13d      # 4-byte Reload
	movl	21028(%rsp), %ecx       # 4-byte Reload
	movl	21032(%rsp), %esi       # 4-byte Reload
	movl	21036(%rsp), %edi       # 4-byte Reload
	movl	%eax, 20800(%rsp)       # 4-byte Spill
	movl	21040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28700(%rsp)       # 4-byte Spill
	movl	21044(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28696(%rsp)       # 4-byte Spill
	movl	21048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28692(%rsp)       # 4-byte Spill
	movl	21052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28688(%rsp)       # 4-byte Spill
	movl	21056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28684(%rsp)       # 4-byte Spill
	movl	21060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28680(%rsp)       # 4-byte Spill
	movl	21064(%rsp), %eax       # 4-byte Reload
	movl	%esi, 28708(%rsp)       # 4-byte Spill
	movq	20976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28664(%rsp)       # 8-byte Spill
	movq	21072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28656(%rsp)       # 8-byte Spill
	movq	21080(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28648(%rsp)       # 8-byte Spill
	movq	21088(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28640(%rsp)       # 8-byte Spill
	movq	21096(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28632(%rsp)       # 8-byte Spill
	movq	21104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28624(%rsp)       # 8-byte Spill
	movq	21112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28616(%rsp)       # 8-byte Spill
	movq	21120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28608(%rsp)       # 8-byte Spill
	movq	21128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28600(%rsp)       # 8-byte Spill
	movq	21136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28592(%rsp)       # 8-byte Spill
	movq	21144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28584(%rsp)       # 8-byte Spill
	movq	21152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28576(%rsp)       # 8-byte Spill
	movq	21160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28568(%rsp)       # 8-byte Spill
	movq	20856(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28560(%rsp)       # 8-byte Spill
	movq	20864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28552(%rsp)       # 8-byte Spill
	movq	20872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28544(%rsp)       # 8-byte Spill
	movq	20880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28536(%rsp)       # 8-byte Spill
	movq	20888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28528(%rsp)       # 8-byte Spill
	movq	20896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28520(%rsp)       # 8-byte Spill
	movq	20904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28512(%rsp)       # 8-byte Spill
	movq	20912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28504(%rsp)       # 8-byte Spill
	movq	20920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28496(%rsp)       # 8-byte Spill
	movq	20928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28488(%rsp)       # 8-byte Spill
	movq	20936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28480(%rsp)       # 8-byte Spill
	movq	20944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28472(%rsp)       # 8-byte Spill
	movq	20952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28464(%rsp)       # 8-byte Spill
	movq	21168(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 28452(%rsp)       # 4-byte Spill
	movl	20800(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28400(%rsp)       # 4-byte Spill
	movl	%edi, 28704(%rsp)       # 4-byte Spill
	movq	%rsi, 28456(%rsp)       # 8-byte Spill
	movl	%edx, 28444(%rsp)       # 4-byte Spill
	movl	%r8d, 28440(%rsp)       # 4-byte Spill
	movl	%r9d, 28436(%rsp)       # 4-byte Spill
	movl	%r10d, 28432(%rsp)      # 4-byte Spill
	movl	%r11d, 28428(%rsp)      # 4-byte Spill
	movl	%ebx, 28424(%rsp)       # 4-byte Spill
	movl	%ebp, 28420(%rsp)       # 4-byte Spill
	movl	%r14d, 28416(%rsp)      # 4-byte Spill
	movl	%r15d, 28412(%rsp)      # 4-byte Spill
	movl	%r12d, 28408(%rsp)      # 4-byte Spill
	movl	%r13d, 28404(%rsp)      # 4-byte Spill
	movl	%ecx, 28448(%rsp)       # 4-byte Spill
	jmp	.LBB68_135
.LBB68_131:                             # %if.end703
                                        # =>This Inner Loop Header: Depth=1
	movl	20808(%rsp), %eax       # 4-byte Reload
	movl	20812(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	21044(%rsp), %esi       # 4-byte Reload
	movq	21088(%rsp), %rdi       # 8-byte Reload
	movq	21096(%rsp), %r8        # 8-byte Reload
	movq	21104(%rsp), %r9        # 8-byte Reload
	movq	21112(%rsp), %r10       # 8-byte Reload
	movq	21120(%rsp), %r11       # 8-byte Reload
	movq	21128(%rsp), %rbx       # 8-byte Reload
	movq	21136(%rsp), %r14       # 8-byte Reload
	movq	21144(%rsp), %r15       # 8-byte Reload
	movq	21152(%rsp), %r12       # 8-byte Reload
	movq	21160(%rsp), %r13       # 8-byte Reload
	movq	20856(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	20864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	20872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	20880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	20888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	20896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	20904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	20912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	20920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	20928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	20936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	20944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	20952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	21080(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	21072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	20976(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 20796(%rsp)       # 4-byte Spill
	movl	21064(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	21060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	21056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	21052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	21048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	21040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	21036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	21032(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	21028(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	21024(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	21020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	21016(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	21012(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	21008(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	21004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	21000(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	20996(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	20992(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	20988(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	20972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 20792(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.132:                              # %if.end709
                                        #   in Loop: Header=BB68_131 Depth=1
	movq	20960(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16661, 38596(%rsp)     # imm = 0x4115
	shll	$8, %ecx
	movq	20840(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$16662, 38596(%rsp)     # imm = 0x4116
	movb	(%rsi), %dil
	movl	$16664, 38596(%rsp)     # imm = 0x4118
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$16665, 38596(%rsp)     # imm = 0x4119
	movl	20796(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	21168(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$16667, 38596(%rsp)     # imm = 0x411B
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$16668, 38596(%rsp)     # imm = 0x411C
	movl	20792(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	20832(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$16669, 38596(%rsp)     # imm = 0x411D
	movq	20816(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$16671, 38596(%rsp)     # imm = 0x411F
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$16674, 38596(%rsp)     # imm = 0x4122
	cmpl	$0, %ebx
	movl	%ecx, 20788(%rsp)       # 4-byte Spill
	movl	%r8d, 20784(%rsp)       # 4-byte Spill
	movl	%r10d, 20780(%rsp)      # 4-byte Spill
	jne	.LBB68_134
# %bb.133:                              # %if.then732
                                        #   in Loop: Header=BB68_131 Depth=1
	movq	20824(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16676, 38596(%rsp)     # imm = 0x4124
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$16729, 38596(%rsp)     # imm = 0x4159
.LBB68_134:                             # %if.end736
                                        #   in Loop: Header=BB68_131 Depth=1
	movl	20796(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	20788(%rsp), %ecx       # 4-byte Reload
	movl	20784(%rsp), %edx       # 4-byte Reload
	movl	20780(%rsp), %esi       # 4-byte Reload
	movl	20784(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 20852(%rsp)       # 4-byte Spill
	movl	%edx, 20848(%rsp)       # 4-byte Spill
	movl	%esi, 20812(%rsp)       # 4-byte Spill
	movl	%edi, 20808(%rsp)       # 4-byte Spill
	jg	.LBB68_130
	jmp	.LBB68_131
.LBB68_135:                             # %sw.bb743
	movl	28400(%rsp), %eax       # 4-byte Reload
	movq	28456(%rsp), %rcx       # 8-byte Reload
	movq	28464(%rsp), %rdx       # 8-byte Reload
	movq	28472(%rsp), %rsi       # 8-byte Reload
	movq	28480(%rsp), %rdi       # 8-byte Reload
	movq	28488(%rsp), %r8        # 8-byte Reload
	movq	28496(%rsp), %r9        # 8-byte Reload
	movq	28504(%rsp), %r10       # 8-byte Reload
	movq	28512(%rsp), %r11       # 8-byte Reload
	movq	28520(%rsp), %rbx       # 8-byte Reload
	movq	28528(%rsp), %r14       # 8-byte Reload
	movq	28536(%rsp), %r15       # 8-byte Reload
	movq	28544(%rsp), %r12       # 8-byte Reload
	movq	28552(%rsp), %r13       # 8-byte Reload
	movq	28560(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 20768(%rsp)       # 8-byte Spill
	movq	28568(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20760(%rsp)       # 8-byte Spill
	movq	28576(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20752(%rsp)       # 8-byte Spill
	movq	28584(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20744(%rsp)       # 8-byte Spill
	movq	28592(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20736(%rsp)       # 8-byte Spill
	movq	28600(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20728(%rsp)       # 8-byte Spill
	movq	28608(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20720(%rsp)       # 8-byte Spill
	movq	28616(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20712(%rsp)       # 8-byte Spill
	movq	28624(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20704(%rsp)       # 8-byte Spill
	movq	28632(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20696(%rsp)       # 8-byte Spill
	movq	28640(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20688(%rsp)       # 8-byte Spill
	movq	28648(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20680(%rsp)       # 8-byte Spill
	movq	28656(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20672(%rsp)       # 8-byte Spill
	movq	28664(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 20668(%rsp)       # 4-byte Spill
	movl	28452(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20664(%rsp)       # 4-byte Spill
	movl	28680(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20660(%rsp)       # 4-byte Spill
	movl	28684(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20656(%rsp)       # 4-byte Spill
	movl	28688(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20652(%rsp)       # 4-byte Spill
	movl	28692(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20648(%rsp)       # 4-byte Spill
	movl	28696(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20644(%rsp)       # 4-byte Spill
	movl	28700(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20640(%rsp)       # 4-byte Spill
	movl	28704(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20636(%rsp)       # 4-byte Spill
	movl	28708(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20632(%rsp)       # 4-byte Spill
	movl	28448(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20628(%rsp)       # 4-byte Spill
	movl	28404(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20624(%rsp)       # 4-byte Spill
	movl	28408(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20620(%rsp)       # 4-byte Spill
	movl	28412(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20616(%rsp)       # 4-byte Spill
	movl	28416(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20612(%rsp)       # 4-byte Spill
	movl	28420(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20608(%rsp)       # 4-byte Spill
	movl	28424(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20604(%rsp)       # 4-byte Spill
	movl	28428(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20600(%rsp)       # 4-byte Spill
	movl	28432(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20596(%rsp)       # 4-byte Spill
	movl	28436(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20592(%rsp)       # 4-byte Spill
	movl	28440(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20588(%rsp)       # 4-byte Spill
	movl	28444(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 20576(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$22, (%rcx)
	movl	$16734, 38596(%rsp)     # imm = 0x415E
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 20572(%rsp)       # 4-byte Spill
	movl	20668(%rsp), %eax       # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 20560(%rsp)       # 8-byte Spill
	movq	%rdx, 20552(%rsp)       # 8-byte Spill
	movq	%rsi, 20544(%rsp)       # 8-byte Spill
	movq	%rdi, 20536(%rsp)       # 8-byte Spill
	movq	%r8, 20528(%rsp)        # 8-byte Spill
	movq	%r9, 20520(%rsp)        # 8-byte Spill
	movq	%r10, 20512(%rsp)       # 8-byte Spill
	movq	%r11, 20504(%rsp)       # 8-byte Spill
	movq	%rbx, 20496(%rsp)       # 8-byte Spill
	movq	%r14, 20488(%rsp)       # 8-byte Spill
	movq	%r15, 20480(%rsp)       # 8-byte Spill
	movq	%r12, 20472(%rsp)       # 8-byte Spill
	movq	%r13, 20464(%rsp)       # 8-byte Spill
	movq	%rbp, 20456(%rsp)       # 8-byte Spill
	jle	.LBB68_137
# %bb.136:                              # %sw.bb743.if.then750_crit_edge
	movq	20560(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16736, 38596(%rsp)     # imm = 0x4160
	movl	20668(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 20452(%rsp)       # 4-byte Spill
	movl	%edx, 20448(%rsp)       # 4-byte Spill
	jmp	.LBB68_138
.LBB68_137:                             # %if.end760.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$16738, 38596(%rsp)     # imm = 0x4162
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$16749, 38596(%rsp)     # imm = 0x416D
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	20668(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 20440(%rsp)       # 8-byte Spill
	movq	%rdx, 20432(%rsp)       # 8-byte Spill
	movq	%r8, 20424(%rsp)        # 8-byte Spill
	movq	%rdi, 20416(%rsp)       # 8-byte Spill
	movl	%esi, 20412(%rsp)       # 4-byte Spill
	movl	%r9d, 20408(%rsp)       # 4-byte Spill
	jmp	.LBB68_139
.LBB68_138:                             # %if.then750
	movl	20448(%rsp), %eax       # 4-byte Reload
	movl	20452(%rsp), %ecx       # 4-byte Reload
	addl	$-8, %eax
	movl	%ecx, 20404(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	20404(%rsp), %edx       # 4-byte Reload
	shrl	%cl, %edx
	movq	20768(%rsp), %rsi       # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$16750, 38596(%rsp)     # imm = 0x416E
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movl	3176(%rdi), %r8d
	movl	$16755, 38596(%rsp)     # imm = 0x4173
	shll	$8, %r8d
	andl	$255, %edx
	orl	%edx, %r8d
	movl	%r8d, 3176(%rdi)
	movl	$16762, 38596(%rsp)     # imm = 0x417A
	movl	20572(%rsp), %edx       # 4-byte Reload
	movl	20588(%rsp), %r8d       # 4-byte Reload
	movl	20592(%rsp), %r9d       # 4-byte Reload
	movl	20596(%rsp), %r10d      # 4-byte Reload
	movl	20600(%rsp), %r11d      # 4-byte Reload
	movl	20604(%rsp), %ebx       # 4-byte Reload
	movl	20608(%rsp), %ebp       # 4-byte Reload
	movl	20612(%rsp), %r14d      # 4-byte Reload
	movl	20616(%rsp), %r15d      # 4-byte Reload
	movl	20620(%rsp), %r12d      # 4-byte Reload
	movl	20624(%rsp), %r13d      # 4-byte Reload
	movl	20628(%rsp), %ecx       # 4-byte Reload
	movl	20632(%rsp), %esi       # 4-byte Reload
	movl	20636(%rsp), %edi       # 4-byte Reload
	movl	%eax, 20400(%rsp)       # 4-byte Spill
	movl	20640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29012(%rsp)       # 4-byte Spill
	movl	20644(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29008(%rsp)       # 4-byte Spill
	movl	20648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29004(%rsp)       # 4-byte Spill
	movl	20652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29000(%rsp)       # 4-byte Spill
	movl	20656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28996(%rsp)       # 4-byte Spill
	movl	20660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28992(%rsp)       # 4-byte Spill
	movl	20664(%rsp), %eax       # 4-byte Reload
	movl	%esi, 29020(%rsp)       # 4-byte Spill
	movq	20576(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28976(%rsp)       # 8-byte Spill
	movq	20672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28968(%rsp)       # 8-byte Spill
	movq	20680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28960(%rsp)       # 8-byte Spill
	movq	20688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28952(%rsp)       # 8-byte Spill
	movq	20696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28944(%rsp)       # 8-byte Spill
	movq	20704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28936(%rsp)       # 8-byte Spill
	movq	20712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28928(%rsp)       # 8-byte Spill
	movq	20720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28920(%rsp)       # 8-byte Spill
	movq	20728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28912(%rsp)       # 8-byte Spill
	movq	20736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28904(%rsp)       # 8-byte Spill
	movq	20744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28896(%rsp)       # 8-byte Spill
	movq	20752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28888(%rsp)       # 8-byte Spill
	movq	20760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28880(%rsp)       # 8-byte Spill
	movq	20456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28872(%rsp)       # 8-byte Spill
	movq	20464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28864(%rsp)       # 8-byte Spill
	movq	20472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28856(%rsp)       # 8-byte Spill
	movq	20480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28848(%rsp)       # 8-byte Spill
	movq	20488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28840(%rsp)       # 8-byte Spill
	movq	20496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28832(%rsp)       # 8-byte Spill
	movq	20504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28824(%rsp)       # 8-byte Spill
	movq	20512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28816(%rsp)       # 8-byte Spill
	movq	20520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28808(%rsp)       # 8-byte Spill
	movq	20528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28800(%rsp)       # 8-byte Spill
	movq	20536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28792(%rsp)       # 8-byte Spill
	movq	20544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28784(%rsp)       # 8-byte Spill
	movq	20552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 28776(%rsp)       # 8-byte Spill
	movq	20768(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 28764(%rsp)       # 4-byte Spill
	movl	20400(%rsp), %eax       # 4-byte Reload
	movl	%eax, 28712(%rsp)       # 4-byte Spill
	movl	%edi, 29016(%rsp)       # 4-byte Spill
	movq	%rsi, 28768(%rsp)       # 8-byte Spill
	movl	%edx, 28756(%rsp)       # 4-byte Spill
	movl	%r8d, 28752(%rsp)       # 4-byte Spill
	movl	%r9d, 28748(%rsp)       # 4-byte Spill
	movl	%r10d, 28744(%rsp)      # 4-byte Spill
	movl	%r11d, 28740(%rsp)      # 4-byte Spill
	movl	%ebx, 28736(%rsp)       # 4-byte Spill
	movl	%ebp, 28732(%rsp)       # 4-byte Spill
	movl	%r14d, 28728(%rsp)      # 4-byte Spill
	movl	%r15d, 28724(%rsp)      # 4-byte Spill
	movl	%r12d, 28720(%rsp)      # 4-byte Spill
	movl	%r13d, 28716(%rsp)      # 4-byte Spill
	movl	%ecx, 28760(%rsp)       # 4-byte Spill
	jmp	.LBB68_143
.LBB68_139:                             # %if.end760
                                        # =>This Inner Loop Header: Depth=1
	movl	20408(%rsp), %eax       # 4-byte Reload
	movl	20412(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	20644(%rsp), %esi       # 4-byte Reload
	movq	20688(%rsp), %rdi       # 8-byte Reload
	movq	20696(%rsp), %r8        # 8-byte Reload
	movq	20704(%rsp), %r9        # 8-byte Reload
	movq	20712(%rsp), %r10       # 8-byte Reload
	movq	20720(%rsp), %r11       # 8-byte Reload
	movq	20728(%rsp), %rbx       # 8-byte Reload
	movq	20736(%rsp), %r14       # 8-byte Reload
	movq	20744(%rsp), %r15       # 8-byte Reload
	movq	20752(%rsp), %r12       # 8-byte Reload
	movq	20760(%rsp), %r13       # 8-byte Reload
	movq	20456(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	20464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	20472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	20480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	20488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	20496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	20504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	20512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	20520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	20528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	20536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	20544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	20552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	20680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	20672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	20576(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 20396(%rsp)       # 4-byte Spill
	movl	20664(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	20660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	20656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	20652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	20648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	20640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	20636(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	20632(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	20628(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	20624(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	20620(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	20616(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	20612(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	20608(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	20604(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	20600(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	20596(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	20592(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	20588(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	20572(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 20392(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.140:                              # %if.end766
                                        #   in Loop: Header=BB68_139 Depth=1
	movq	20560(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16764, 38596(%rsp)     # imm = 0x417C
	shll	$8, %ecx
	movq	20440(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$16765, 38596(%rsp)     # imm = 0x417D
	movb	(%rsi), %dil
	movl	$16767, 38596(%rsp)     # imm = 0x417F
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$16768, 38596(%rsp)     # imm = 0x4180
	movl	20396(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	20768(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$16770, 38596(%rsp)     # imm = 0x4182
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$16771, 38596(%rsp)     # imm = 0x4183
	movl	20392(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	20432(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$16772, 38596(%rsp)     # imm = 0x4184
	movq	20416(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$16774, 38596(%rsp)     # imm = 0x4186
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$16777, 38596(%rsp)     # imm = 0x4189
	cmpl	$0, %ebx
	movl	%ecx, 20388(%rsp)       # 4-byte Spill
	movl	%r8d, 20384(%rsp)       # 4-byte Spill
	movl	%r10d, 20380(%rsp)      # 4-byte Spill
	jne	.LBB68_142
# %bb.141:                              # %if.then789
                                        #   in Loop: Header=BB68_139 Depth=1
	movq	20424(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16779, 38596(%rsp)     # imm = 0x418B
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$16832, 38596(%rsp)     # imm = 0x41C0
.LBB68_142:                             # %if.end793
                                        #   in Loop: Header=BB68_139 Depth=1
	movl	20396(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	20388(%rsp), %ecx       # 4-byte Reload
	movl	20384(%rsp), %edx       # 4-byte Reload
	movl	20380(%rsp), %esi       # 4-byte Reload
	movl	20384(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 20452(%rsp)       # 4-byte Spill
	movl	%edx, 20448(%rsp)       # 4-byte Spill
	movl	%esi, 20412(%rsp)       # 4-byte Spill
	movl	%edi, 20408(%rsp)       # 4-byte Spill
	jg	.LBB68_138
	jmp	.LBB68_139
.LBB68_143:                             # %sw.bb800
	movl	28712(%rsp), %eax       # 4-byte Reload
	movq	28768(%rsp), %rcx       # 8-byte Reload
	movq	28776(%rsp), %rdx       # 8-byte Reload
	movq	28784(%rsp), %rsi       # 8-byte Reload
	movq	28792(%rsp), %rdi       # 8-byte Reload
	movq	28800(%rsp), %r8        # 8-byte Reload
	movq	28808(%rsp), %r9        # 8-byte Reload
	movq	28816(%rsp), %r10       # 8-byte Reload
	movq	28824(%rsp), %r11       # 8-byte Reload
	movq	28832(%rsp), %rbx       # 8-byte Reload
	movq	28840(%rsp), %r14       # 8-byte Reload
	movq	28848(%rsp), %r15       # 8-byte Reload
	movq	28856(%rsp), %r12       # 8-byte Reload
	movq	28864(%rsp), %r13       # 8-byte Reload
	movq	28872(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 20368(%rsp)       # 8-byte Spill
	movq	28880(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20360(%rsp)       # 8-byte Spill
	movq	28888(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20352(%rsp)       # 8-byte Spill
	movq	28896(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20344(%rsp)       # 8-byte Spill
	movq	28904(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20336(%rsp)       # 8-byte Spill
	movq	28912(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20328(%rsp)       # 8-byte Spill
	movq	28920(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20320(%rsp)       # 8-byte Spill
	movq	28928(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20312(%rsp)       # 8-byte Spill
	movq	28936(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20304(%rsp)       # 8-byte Spill
	movq	28944(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20296(%rsp)       # 8-byte Spill
	movq	28952(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20288(%rsp)       # 8-byte Spill
	movq	28960(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20280(%rsp)       # 8-byte Spill
	movq	28968(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 20272(%rsp)       # 8-byte Spill
	movq	28976(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 20268(%rsp)       # 4-byte Spill
	movl	28764(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20264(%rsp)       # 4-byte Spill
	movl	28992(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20260(%rsp)       # 4-byte Spill
	movl	28996(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20256(%rsp)       # 4-byte Spill
	movl	29000(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20252(%rsp)       # 4-byte Spill
	movl	29004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20248(%rsp)       # 4-byte Spill
	movl	29008(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20244(%rsp)       # 4-byte Spill
	movl	29012(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20240(%rsp)       # 4-byte Spill
	movl	29016(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20236(%rsp)       # 4-byte Spill
	movl	29020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20232(%rsp)       # 4-byte Spill
	movl	28760(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20228(%rsp)       # 4-byte Spill
	movl	28716(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20224(%rsp)       # 4-byte Spill
	movl	28720(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20220(%rsp)       # 4-byte Spill
	movl	28724(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20216(%rsp)       # 4-byte Spill
	movl	28728(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20212(%rsp)       # 4-byte Spill
	movl	28732(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20208(%rsp)       # 4-byte Spill
	movl	28736(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20204(%rsp)       # 4-byte Spill
	movl	28740(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20200(%rsp)       # 4-byte Spill
	movl	28744(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20196(%rsp)       # 4-byte Spill
	movl	28748(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20192(%rsp)       # 4-byte Spill
	movl	28752(%rsp), %eax       # 4-byte Reload
	movl	%eax, 20188(%rsp)       # 4-byte Spill
	movl	28756(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 20176(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$23, (%rcx)
	movl	$16837, 38596(%rsp)     # imm = 0x41C5
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 20172(%rsp)       # 4-byte Spill
	movl	20268(%rsp), %eax       # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 20160(%rsp)       # 8-byte Spill
	movq	%rdx, 20152(%rsp)       # 8-byte Spill
	movq	%rsi, 20144(%rsp)       # 8-byte Spill
	movq	%rdi, 20136(%rsp)       # 8-byte Spill
	movq	%r8, 20128(%rsp)        # 8-byte Spill
	movq	%r9, 20120(%rsp)        # 8-byte Spill
	movq	%r10, 20112(%rsp)       # 8-byte Spill
	movq	%r11, 20104(%rsp)       # 8-byte Spill
	movq	%rbx, 20096(%rsp)       # 8-byte Spill
	movq	%r14, 20088(%rsp)       # 8-byte Spill
	movq	%r15, 20080(%rsp)       # 8-byte Spill
	movq	%r12, 20072(%rsp)       # 8-byte Spill
	movq	%r13, 20064(%rsp)       # 8-byte Spill
	movq	%rbp, 20056(%rsp)       # 8-byte Spill
	jle	.LBB68_145
# %bb.144:                              # %sw.bb800.if.then807_crit_edge
	movq	20160(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16839, 38596(%rsp)     # imm = 0x41C7
	movl	20268(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 20052(%rsp)       # 4-byte Spill
	movl	%edx, 20048(%rsp)       # 4-byte Spill
	jmp	.LBB68_146
.LBB68_145:                             # %if.end817.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$16841, 38596(%rsp)     # imm = 0x41C9
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$16852, 38596(%rsp)     # imm = 0x41D4
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	20268(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 20040(%rsp)       # 8-byte Spill
	movq	%rdx, 20032(%rsp)       # 8-byte Spill
	movq	%r8, 20024(%rsp)        # 8-byte Spill
	movq	%rdi, 20016(%rsp)       # 8-byte Spill
	movl	%esi, 20012(%rsp)       # 4-byte Spill
	movl	%r9d, 20008(%rsp)       # 4-byte Spill
	jmp	.LBB68_147
.LBB68_146:                             # %if.then807
	movl	20048(%rsp), %eax       # 4-byte Reload
	movl	20052(%rsp), %ecx       # 4-byte Reload
	addl	$-8, %eax
	movl	%ecx, 20004(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	20004(%rsp), %edx       # 4-byte Reload
	shrl	%cl, %edx
	movq	20368(%rsp), %rsi       # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$16853, 38596(%rsp)     # imm = 0x41D5
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movl	3176(%rdi), %r8d
	movl	$16858, 38596(%rsp)     # imm = 0x41DA
	shll	$8, %r8d
	andl	$255, %edx
	orl	%edx, %r8d
	movl	%r8d, 3176(%rdi)
	movl	$16865, 38596(%rsp)     # imm = 0x41E1
	movl	20172(%rsp), %edx       # 4-byte Reload
	movl	20188(%rsp), %r8d       # 4-byte Reload
	movl	20192(%rsp), %r9d       # 4-byte Reload
	movl	20196(%rsp), %r10d      # 4-byte Reload
	movl	20200(%rsp), %r11d      # 4-byte Reload
	movl	20204(%rsp), %ebx       # 4-byte Reload
	movl	20208(%rsp), %ebp       # 4-byte Reload
	movl	20212(%rsp), %r14d      # 4-byte Reload
	movl	20216(%rsp), %r15d      # 4-byte Reload
	movl	20220(%rsp), %r12d      # 4-byte Reload
	movl	20224(%rsp), %r13d      # 4-byte Reload
	movl	20228(%rsp), %ecx       # 4-byte Reload
	movl	20232(%rsp), %esi       # 4-byte Reload
	movl	20236(%rsp), %edi       # 4-byte Reload
	movl	%eax, 20000(%rsp)       # 4-byte Spill
	movl	20240(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29324(%rsp)       # 4-byte Spill
	movl	20244(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29320(%rsp)       # 4-byte Spill
	movl	20248(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29316(%rsp)       # 4-byte Spill
	movl	20252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29312(%rsp)       # 4-byte Spill
	movl	20256(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29308(%rsp)       # 4-byte Spill
	movl	20260(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29304(%rsp)       # 4-byte Spill
	movl	20264(%rsp), %eax       # 4-byte Reload
	movl	%esi, 29332(%rsp)       # 4-byte Spill
	movq	20176(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29288(%rsp)       # 8-byte Spill
	movq	20272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29280(%rsp)       # 8-byte Spill
	movq	20280(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29272(%rsp)       # 8-byte Spill
	movq	20288(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29264(%rsp)       # 8-byte Spill
	movq	20296(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29256(%rsp)       # 8-byte Spill
	movq	20304(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29248(%rsp)       # 8-byte Spill
	movq	20312(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29240(%rsp)       # 8-byte Spill
	movq	20320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29232(%rsp)       # 8-byte Spill
	movq	20328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29224(%rsp)       # 8-byte Spill
	movq	20336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29216(%rsp)       # 8-byte Spill
	movq	20344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29208(%rsp)       # 8-byte Spill
	movq	20352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29200(%rsp)       # 8-byte Spill
	movq	20360(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29192(%rsp)       # 8-byte Spill
	movq	20056(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29184(%rsp)       # 8-byte Spill
	movq	20064(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29176(%rsp)       # 8-byte Spill
	movq	20072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29168(%rsp)       # 8-byte Spill
	movq	20080(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29160(%rsp)       # 8-byte Spill
	movq	20088(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29152(%rsp)       # 8-byte Spill
	movq	20096(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29144(%rsp)       # 8-byte Spill
	movq	20104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29136(%rsp)       # 8-byte Spill
	movq	20112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29128(%rsp)       # 8-byte Spill
	movq	20120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29120(%rsp)       # 8-byte Spill
	movq	20128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29112(%rsp)       # 8-byte Spill
	movq	20136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29104(%rsp)       # 8-byte Spill
	movq	20144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29096(%rsp)       # 8-byte Spill
	movq	20152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29088(%rsp)       # 8-byte Spill
	movq	20368(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 29076(%rsp)       # 4-byte Spill
	movl	20000(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29024(%rsp)       # 4-byte Spill
	movl	%edi, 29328(%rsp)       # 4-byte Spill
	movq	%rsi, 29080(%rsp)       # 8-byte Spill
	movl	%edx, 29068(%rsp)       # 4-byte Spill
	movl	%r8d, 29064(%rsp)       # 4-byte Spill
	movl	%r9d, 29060(%rsp)       # 4-byte Spill
	movl	%r10d, 29056(%rsp)      # 4-byte Spill
	movl	%r11d, 29052(%rsp)      # 4-byte Spill
	movl	%ebx, 29048(%rsp)       # 4-byte Spill
	movl	%ebp, 29044(%rsp)       # 4-byte Spill
	movl	%r14d, 29040(%rsp)      # 4-byte Spill
	movl	%r15d, 29036(%rsp)      # 4-byte Spill
	movl	%r12d, 29032(%rsp)      # 4-byte Spill
	movl	%r13d, 29028(%rsp)      # 4-byte Spill
	movl	%ecx, 29072(%rsp)       # 4-byte Spill
	jmp	.LBB68_151
.LBB68_147:                             # %if.end817
                                        # =>This Inner Loop Header: Depth=1
	movl	20008(%rsp), %eax       # 4-byte Reload
	movl	20012(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	20244(%rsp), %esi       # 4-byte Reload
	movq	20288(%rsp), %rdi       # 8-byte Reload
	movq	20296(%rsp), %r8        # 8-byte Reload
	movq	20304(%rsp), %r9        # 8-byte Reload
	movq	20312(%rsp), %r10       # 8-byte Reload
	movq	20320(%rsp), %r11       # 8-byte Reload
	movq	20328(%rsp), %rbx       # 8-byte Reload
	movq	20336(%rsp), %r14       # 8-byte Reload
	movq	20344(%rsp), %r15       # 8-byte Reload
	movq	20352(%rsp), %r12       # 8-byte Reload
	movq	20360(%rsp), %r13       # 8-byte Reload
	movq	20056(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	20064(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	20072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	20080(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	20088(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	20096(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	20104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	20112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	20120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	20128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	20136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	20144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	20152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	20280(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	20272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	20176(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 19996(%rsp)       # 4-byte Spill
	movl	20264(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	20260(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	20256(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	20252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	20248(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	20240(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	20236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	20232(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	20228(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	20224(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	20220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	20216(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	20212(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	20208(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	20204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	20200(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	20196(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	20192(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	20188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	20172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 19992(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.148:                              # %if.end823
                                        #   in Loop: Header=BB68_147 Depth=1
	movq	20160(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16867, 38596(%rsp)     # imm = 0x41E3
	shll	$8, %ecx
	movq	20040(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$16868, 38596(%rsp)     # imm = 0x41E4
	movb	(%rsi), %dil
	movl	$16870, 38596(%rsp)     # imm = 0x41E6
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$16871, 38596(%rsp)     # imm = 0x41E7
	movl	19996(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	20368(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$16873, 38596(%rsp)     # imm = 0x41E9
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$16874, 38596(%rsp)     # imm = 0x41EA
	movl	19992(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	20032(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$16875, 38596(%rsp)     # imm = 0x41EB
	movq	20016(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$16877, 38596(%rsp)     # imm = 0x41ED
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$16880, 38596(%rsp)     # imm = 0x41F0
	cmpl	$0, %ebx
	movl	%ecx, 19988(%rsp)       # 4-byte Spill
	movl	%r8d, 19984(%rsp)       # 4-byte Spill
	movl	%r10d, 19980(%rsp)      # 4-byte Spill
	jne	.LBB68_150
# %bb.149:                              # %if.then846
                                        #   in Loop: Header=BB68_147 Depth=1
	movq	20024(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16882, 38596(%rsp)     # imm = 0x41F2
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$16935, 38596(%rsp)     # imm = 0x4227
.LBB68_150:                             # %if.end850
                                        #   in Loop: Header=BB68_147 Depth=1
	movl	19996(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	19988(%rsp), %ecx       # 4-byte Reload
	movl	19984(%rsp), %edx       # 4-byte Reload
	movl	19980(%rsp), %esi       # 4-byte Reload
	movl	19984(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 20052(%rsp)       # 4-byte Spill
	movl	%edx, 20048(%rsp)       # 4-byte Spill
	movl	%esi, 20012(%rsp)       # 4-byte Spill
	movl	%edi, 20008(%rsp)       # 4-byte Spill
	jg	.LBB68_146
	jmp	.LBB68_147
.LBB68_151:                             # %sw.bb857
	movl	29024(%rsp), %eax       # 4-byte Reload
	movq	29080(%rsp), %rcx       # 8-byte Reload
	movq	29088(%rsp), %rdx       # 8-byte Reload
	movq	29096(%rsp), %rsi       # 8-byte Reload
	movq	29104(%rsp), %rdi       # 8-byte Reload
	movq	29112(%rsp), %r8        # 8-byte Reload
	movq	29120(%rsp), %r9        # 8-byte Reload
	movq	29128(%rsp), %r10       # 8-byte Reload
	movq	29136(%rsp), %r11       # 8-byte Reload
	movq	29144(%rsp), %rbx       # 8-byte Reload
	movq	29152(%rsp), %r14       # 8-byte Reload
	movq	29160(%rsp), %r15       # 8-byte Reload
	movq	29168(%rsp), %r12       # 8-byte Reload
	movq	29176(%rsp), %r13       # 8-byte Reload
	movq	29184(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 19968(%rsp)       # 8-byte Spill
	movq	29192(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19960(%rsp)       # 8-byte Spill
	movq	29200(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19952(%rsp)       # 8-byte Spill
	movq	29208(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19944(%rsp)       # 8-byte Spill
	movq	29216(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19936(%rsp)       # 8-byte Spill
	movq	29224(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19928(%rsp)       # 8-byte Spill
	movq	29232(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19920(%rsp)       # 8-byte Spill
	movq	29240(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19912(%rsp)       # 8-byte Spill
	movq	29248(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19904(%rsp)       # 8-byte Spill
	movq	29256(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19896(%rsp)       # 8-byte Spill
	movq	29264(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19888(%rsp)       # 8-byte Spill
	movq	29272(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19880(%rsp)       # 8-byte Spill
	movq	29280(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19872(%rsp)       # 8-byte Spill
	movq	29288(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 19868(%rsp)       # 4-byte Spill
	movl	29076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19864(%rsp)       # 4-byte Spill
	movl	29304(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19860(%rsp)       # 4-byte Spill
	movl	29308(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19856(%rsp)       # 4-byte Spill
	movl	29312(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19852(%rsp)       # 4-byte Spill
	movl	29316(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19848(%rsp)       # 4-byte Spill
	movl	29320(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19844(%rsp)       # 4-byte Spill
	movl	29324(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19840(%rsp)       # 4-byte Spill
	movl	29328(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19836(%rsp)       # 4-byte Spill
	movl	29332(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19832(%rsp)       # 4-byte Spill
	movl	29072(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19828(%rsp)       # 4-byte Spill
	movl	29028(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19824(%rsp)       # 4-byte Spill
	movl	29032(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19820(%rsp)       # 4-byte Spill
	movl	29036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19816(%rsp)       # 4-byte Spill
	movl	29040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19812(%rsp)       # 4-byte Spill
	movl	29044(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19808(%rsp)       # 4-byte Spill
	movl	29048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19804(%rsp)       # 4-byte Spill
	movl	29052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19800(%rsp)       # 4-byte Spill
	movl	29056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19796(%rsp)       # 4-byte Spill
	movl	29060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19792(%rsp)       # 4-byte Spill
	movl	29064(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19788(%rsp)       # 4-byte Spill
	movl	29068(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 19776(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$24, (%rcx)
	movl	$16940, 38596(%rsp)     # imm = 0x422C
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 19772(%rsp)       # 4-byte Spill
	movl	19868(%rsp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	movq	%rcx, 19760(%rsp)       # 8-byte Spill
	movq	%rdx, 19752(%rsp)       # 8-byte Spill
	movq	%rsi, 19744(%rsp)       # 8-byte Spill
	movq	%rdi, 19736(%rsp)       # 8-byte Spill
	movq	%r8, 19728(%rsp)        # 8-byte Spill
	movq	%r9, 19720(%rsp)        # 8-byte Spill
	movq	%r10, 19712(%rsp)       # 8-byte Spill
	movq	%r11, 19704(%rsp)       # 8-byte Spill
	movq	%rbx, 19696(%rsp)       # 8-byte Spill
	movq	%r14, 19688(%rsp)       # 8-byte Spill
	movq	%r15, 19680(%rsp)       # 8-byte Spill
	movq	%r12, 19672(%rsp)       # 8-byte Spill
	movq	%r13, 19664(%rsp)       # 8-byte Spill
	movq	%rbp, 19656(%rsp)       # 8-byte Spill
	jle	.LBB68_153
# %bb.152:                              # %sw.bb857.if.then864_crit_edge
	movq	19760(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16942, 38596(%rsp)     # imm = 0x422E
	movl	19868(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 19652(%rsp)       # 4-byte Spill
	movl	%edx, 19648(%rsp)       # 4-byte Spill
	jmp	.LBB68_154
.LBB68_153:                             # %if.end874.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$16944, 38596(%rsp)     # imm = 0x4230
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$16955, 38596(%rsp)     # imm = 0x423B
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	19868(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 19640(%rsp)       # 8-byte Spill
	movq	%rdx, 19632(%rsp)       # 8-byte Spill
	movq	%r8, 19624(%rsp)        # 8-byte Spill
	movq	%rdi, 19616(%rsp)       # 8-byte Spill
	movl	%esi, 19612(%rsp)       # 4-byte Spill
	movl	%r9d, 19608(%rsp)       # 4-byte Spill
	jmp	.LBB68_155
.LBB68_154:                             # %if.then864
	movl	19648(%rsp), %eax       # 4-byte Reload
	movl	19652(%rsp), %ecx       # 4-byte Reload
	addl	$-1, %eax
	movl	%ecx, 19604(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	19604(%rsp), %edx       # 4-byte Reload
	shrl	%cl, %edx
	movq	19968(%rsp), %rsi       # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$16959, 38596(%rsp)     # imm = 0x423F
	movb	%dl, %cl
	andb	$1, %cl
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movb	%cl, 20(%rdi)
	movl	$16961, 38596(%rsp)     # imm = 0x4241
	movl	$0, 56(%rdi)
	movl	$16968, 38596(%rsp)     # imm = 0x4248
	movl	19772(%rsp), %edx       # 4-byte Reload
	movl	19788(%rsp), %r8d       # 4-byte Reload
	movl	19792(%rsp), %r9d       # 4-byte Reload
	movl	19796(%rsp), %r10d      # 4-byte Reload
	movl	19800(%rsp), %r11d      # 4-byte Reload
	movl	19804(%rsp), %ebx       # 4-byte Reload
	movl	19808(%rsp), %ebp       # 4-byte Reload
	movl	19812(%rsp), %r14d      # 4-byte Reload
	movl	19816(%rsp), %r15d      # 4-byte Reload
	movl	19820(%rsp), %r12d      # 4-byte Reload
	movl	19824(%rsp), %r13d      # 4-byte Reload
	movl	19828(%rsp), %ecx       # 4-byte Reload
	movl	19832(%rsp), %esi       # 4-byte Reload
	movl	19836(%rsp), %edi       # 4-byte Reload
	movl	%eax, 19600(%rsp)       # 4-byte Spill
	movl	19840(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29636(%rsp)       # 4-byte Spill
	movl	19844(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29632(%rsp)       # 4-byte Spill
	movl	19848(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29628(%rsp)       # 4-byte Spill
	movl	19852(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29624(%rsp)       # 4-byte Spill
	movl	19856(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29620(%rsp)       # 4-byte Spill
	movl	19860(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29616(%rsp)       # 4-byte Spill
	movl	19864(%rsp), %eax       # 4-byte Reload
	movl	%esi, 29644(%rsp)       # 4-byte Spill
	movq	19776(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29600(%rsp)       # 8-byte Spill
	movq	19872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29592(%rsp)       # 8-byte Spill
	movq	19880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29584(%rsp)       # 8-byte Spill
	movq	19888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29576(%rsp)       # 8-byte Spill
	movq	19896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29568(%rsp)       # 8-byte Spill
	movq	19904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29560(%rsp)       # 8-byte Spill
	movq	19912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29552(%rsp)       # 8-byte Spill
	movq	19920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29544(%rsp)       # 8-byte Spill
	movq	19928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29536(%rsp)       # 8-byte Spill
	movq	19936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29528(%rsp)       # 8-byte Spill
	movq	19944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29520(%rsp)       # 8-byte Spill
	movq	19952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29512(%rsp)       # 8-byte Spill
	movq	19960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29504(%rsp)       # 8-byte Spill
	movq	19656(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29496(%rsp)       # 8-byte Spill
	movq	19664(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29488(%rsp)       # 8-byte Spill
	movq	19672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29480(%rsp)       # 8-byte Spill
	movq	19680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29472(%rsp)       # 8-byte Spill
	movq	19688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29464(%rsp)       # 8-byte Spill
	movq	19696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29456(%rsp)       # 8-byte Spill
	movq	19704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29448(%rsp)       # 8-byte Spill
	movq	19712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29440(%rsp)       # 8-byte Spill
	movq	19720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29432(%rsp)       # 8-byte Spill
	movq	19728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29424(%rsp)       # 8-byte Spill
	movq	19736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29416(%rsp)       # 8-byte Spill
	movq	19744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29408(%rsp)       # 8-byte Spill
	movq	19752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29400(%rsp)       # 8-byte Spill
	movq	19968(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 29388(%rsp)       # 4-byte Spill
	movl	19600(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29336(%rsp)       # 4-byte Spill
	movq	%rsi, 29392(%rsp)       # 8-byte Spill
	movl	%edi, 29640(%rsp)       # 4-byte Spill
	movl	%edx, 29380(%rsp)       # 4-byte Spill
	movl	%r8d, 29376(%rsp)       # 4-byte Spill
	movl	%r9d, 29372(%rsp)       # 4-byte Spill
	movl	%r10d, 29368(%rsp)      # 4-byte Spill
	movl	%r11d, 29364(%rsp)      # 4-byte Spill
	movl	%ebx, 29360(%rsp)       # 4-byte Spill
	movl	%ebp, 29356(%rsp)       # 4-byte Spill
	movl	%r14d, 29352(%rsp)      # 4-byte Spill
	movl	%r15d, 29348(%rsp)      # 4-byte Spill
	movl	%r12d, 29344(%rsp)      # 4-byte Spill
	movl	%r13d, 29340(%rsp)      # 4-byte Spill
	movl	%ecx, 29384(%rsp)       # 4-byte Spill
	jmp	.LBB68_159
.LBB68_155:                             # %if.end874
                                        # =>This Inner Loop Header: Depth=1
	movl	19608(%rsp), %eax       # 4-byte Reload
	movl	19612(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	19844(%rsp), %esi       # 4-byte Reload
	movq	19888(%rsp), %rdi       # 8-byte Reload
	movq	19896(%rsp), %r8        # 8-byte Reload
	movq	19904(%rsp), %r9        # 8-byte Reload
	movq	19912(%rsp), %r10       # 8-byte Reload
	movq	19920(%rsp), %r11       # 8-byte Reload
	movq	19928(%rsp), %rbx       # 8-byte Reload
	movq	19936(%rsp), %r14       # 8-byte Reload
	movq	19944(%rsp), %r15       # 8-byte Reload
	movq	19952(%rsp), %r12       # 8-byte Reload
	movq	19960(%rsp), %r13       # 8-byte Reload
	movq	19656(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	19664(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	19672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	19680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	19688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	19696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	19704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	19712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	19720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	19728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	19736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	19744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	19752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	19880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	19872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	19776(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 19596(%rsp)       # 4-byte Spill
	movl	19864(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	19860(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	19856(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	19852(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	19848(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	19840(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	19836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	19832(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	19828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	19824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	19820(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	19816(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	19812(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	19808(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	19804(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	19800(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	19796(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	19792(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	19788(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	19772(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 19592(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.156:                              # %if.end880
                                        #   in Loop: Header=BB68_155 Depth=1
	movq	19760(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16970, 38596(%rsp)     # imm = 0x424A
	shll	$8, %ecx
	movq	19640(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$16971, 38596(%rsp)     # imm = 0x424B
	movb	(%rsi), %dil
	movl	$16973, 38596(%rsp)     # imm = 0x424D
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$16974, 38596(%rsp)     # imm = 0x424E
	movl	19596(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	19968(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$16976, 38596(%rsp)     # imm = 0x4250
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$16977, 38596(%rsp)     # imm = 0x4251
	movl	19592(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	19632(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$16978, 38596(%rsp)     # imm = 0x4252
	movq	19616(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$16980, 38596(%rsp)     # imm = 0x4254
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$16983, 38596(%rsp)     # imm = 0x4257
	cmpl	$0, %ebx
	movl	%ecx, 19588(%rsp)       # 4-byte Spill
	movl	%r8d, 19584(%rsp)       # 4-byte Spill
	movl	%r10d, 19580(%rsp)      # 4-byte Spill
	jne	.LBB68_158
# %bb.157:                              # %if.then903
                                        #   in Loop: Header=BB68_155 Depth=1
	movq	19624(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$16985, 38596(%rsp)     # imm = 0x4259
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$17038, 38596(%rsp)     # imm = 0x428E
.LBB68_158:                             # %if.end907
                                        #   in Loop: Header=BB68_155 Depth=1
	movl	19596(%rsp), %eax       # 4-byte Reload
	cmpl	$-8, %eax
	movl	19588(%rsp), %ecx       # 4-byte Reload
	movl	19584(%rsp), %edx       # 4-byte Reload
	movl	19580(%rsp), %esi       # 4-byte Reload
	movl	19584(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 19652(%rsp)       # 4-byte Spill
	movl	%edx, 19648(%rsp)       # 4-byte Spill
	movl	%esi, 19612(%rsp)       # 4-byte Spill
	movl	%edi, 19608(%rsp)       # 4-byte Spill
	jg	.LBB68_154
	jmp	.LBB68_155
.LBB68_159:                             # %sw.bb909
	movl	29336(%rsp), %eax       # 4-byte Reload
	movq	29392(%rsp), %rcx       # 8-byte Reload
	movq	29400(%rsp), %rdx       # 8-byte Reload
	movq	29408(%rsp), %rsi       # 8-byte Reload
	movq	29416(%rsp), %rdi       # 8-byte Reload
	movq	29424(%rsp), %r8        # 8-byte Reload
	movq	29432(%rsp), %r9        # 8-byte Reload
	movq	29440(%rsp), %r10       # 8-byte Reload
	movq	29448(%rsp), %r11       # 8-byte Reload
	movq	29456(%rsp), %rbx       # 8-byte Reload
	movq	29464(%rsp), %r14       # 8-byte Reload
	movq	29472(%rsp), %r15       # 8-byte Reload
	movq	29480(%rsp), %r12       # 8-byte Reload
	movq	29488(%rsp), %r13       # 8-byte Reload
	movq	29496(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 19568(%rsp)       # 8-byte Spill
	movq	29504(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19560(%rsp)       # 8-byte Spill
	movq	29512(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19552(%rsp)       # 8-byte Spill
	movq	29520(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19544(%rsp)       # 8-byte Spill
	movq	29528(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19536(%rsp)       # 8-byte Spill
	movq	29536(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19528(%rsp)       # 8-byte Spill
	movq	29544(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19520(%rsp)       # 8-byte Spill
	movq	29552(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19512(%rsp)       # 8-byte Spill
	movq	29560(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19504(%rsp)       # 8-byte Spill
	movq	29568(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19496(%rsp)       # 8-byte Spill
	movq	29576(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19488(%rsp)       # 8-byte Spill
	movq	29584(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19480(%rsp)       # 8-byte Spill
	movq	29592(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19472(%rsp)       # 8-byte Spill
	movq	29600(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 19468(%rsp)       # 4-byte Spill
	movl	29388(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19464(%rsp)       # 4-byte Spill
	movl	29616(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19460(%rsp)       # 4-byte Spill
	movl	29620(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19456(%rsp)       # 4-byte Spill
	movl	29624(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19452(%rsp)       # 4-byte Spill
	movl	29628(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19448(%rsp)       # 4-byte Spill
	movl	29632(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19444(%rsp)       # 4-byte Spill
	movl	29636(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19440(%rsp)       # 4-byte Spill
	movl	29640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19436(%rsp)       # 4-byte Spill
	movl	29644(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19432(%rsp)       # 4-byte Spill
	movl	29384(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19428(%rsp)       # 4-byte Spill
	movl	29340(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19424(%rsp)       # 4-byte Spill
	movl	29344(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19420(%rsp)       # 4-byte Spill
	movl	29348(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19416(%rsp)       # 4-byte Spill
	movl	29352(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19412(%rsp)       # 4-byte Spill
	movl	29356(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19408(%rsp)       # 4-byte Spill
	movl	29360(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19404(%rsp)       # 4-byte Spill
	movl	29364(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19400(%rsp)       # 4-byte Spill
	movl	29368(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19396(%rsp)       # 4-byte Spill
	movl	29372(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19392(%rsp)       # 4-byte Spill
	movl	29376(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19388(%rsp)       # 4-byte Spill
	movl	29380(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 19376(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$25, (%rcx)
	movl	$17043, 38596(%rsp)     # imm = 0x4293
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 19372(%rsp)       # 4-byte Spill
	movl	19468(%rsp), %eax       # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 19360(%rsp)       # 8-byte Spill
	movq	%rdx, 19352(%rsp)       # 8-byte Spill
	movq	%rsi, 19344(%rsp)       # 8-byte Spill
	movq	%rdi, 19336(%rsp)       # 8-byte Spill
	movq	%r8, 19328(%rsp)        # 8-byte Spill
	movq	%r9, 19320(%rsp)        # 8-byte Spill
	movq	%r10, 19312(%rsp)       # 8-byte Spill
	movq	%r11, 19304(%rsp)       # 8-byte Spill
	movq	%rbx, 19296(%rsp)       # 8-byte Spill
	movq	%r14, 19288(%rsp)       # 8-byte Spill
	movq	%r15, 19280(%rsp)       # 8-byte Spill
	movq	%r12, 19272(%rsp)       # 8-byte Spill
	movq	%r13, 19264(%rsp)       # 8-byte Spill
	movq	%rbp, 19256(%rsp)       # 8-byte Spill
	jle	.LBB68_161
# %bb.160:                              # %sw.bb909.if.then916_crit_edge
	movq	19360(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17045, 38596(%rsp)     # imm = 0x4295
	movl	19468(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 19252(%rsp)       # 4-byte Spill
	movl	%edx, 19248(%rsp)       # 4-byte Spill
	jmp	.LBB68_162
.LBB68_161:                             # %if.end926.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$17047, 38596(%rsp)     # imm = 0x4297
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$17058, 38596(%rsp)     # imm = 0x42A2
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	19468(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 19240(%rsp)       # 8-byte Spill
	movq	%rdx, 19232(%rsp)       # 8-byte Spill
	movq	%r8, 19224(%rsp)        # 8-byte Spill
	movq	%rdi, 19216(%rsp)       # 8-byte Spill
	movl	%esi, 19212(%rsp)       # 4-byte Spill
	movl	%r9d, 19208(%rsp)       # 4-byte Spill
	jmp	.LBB68_163
.LBB68_162:                             # %if.then916
	movl	19248(%rsp), %eax       # 4-byte Reload
	movl	19252(%rsp), %ecx       # 4-byte Reload
	addl	$-8, %eax
	movl	%ecx, 19204(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	19204(%rsp), %edx       # 4-byte Reload
	shrl	%cl, %edx
	movq	19568(%rsp), %rsi       # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$17060, 38596(%rsp)     # imm = 0x42A4
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movl	56(%rdi), %r8d
	movl	$17064, 38596(%rsp)     # imm = 0x42A8
	shll	$8, %r8d
	andl	$255, %edx
	orl	%edx, %r8d
	movl	%r8d, 56(%rdi)
	movl	$17071, 38596(%rsp)     # imm = 0x42AF
	movl	19372(%rsp), %edx       # 4-byte Reload
	movl	19388(%rsp), %r8d       # 4-byte Reload
	movl	19392(%rsp), %r9d       # 4-byte Reload
	movl	19396(%rsp), %r10d      # 4-byte Reload
	movl	19400(%rsp), %r11d      # 4-byte Reload
	movl	19404(%rsp), %ebx       # 4-byte Reload
	movl	19408(%rsp), %ebp       # 4-byte Reload
	movl	19412(%rsp), %r14d      # 4-byte Reload
	movl	19416(%rsp), %r15d      # 4-byte Reload
	movl	19420(%rsp), %r12d      # 4-byte Reload
	movl	19424(%rsp), %r13d      # 4-byte Reload
	movl	19428(%rsp), %ecx       # 4-byte Reload
	movl	19432(%rsp), %esi       # 4-byte Reload
	movl	19436(%rsp), %edi       # 4-byte Reload
	movl	%eax, 19200(%rsp)       # 4-byte Spill
	movl	19440(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29948(%rsp)       # 4-byte Spill
	movl	19444(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29944(%rsp)       # 4-byte Spill
	movl	19448(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29940(%rsp)       # 4-byte Spill
	movl	19452(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29936(%rsp)       # 4-byte Spill
	movl	19456(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29932(%rsp)       # 4-byte Spill
	movl	19460(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29928(%rsp)       # 4-byte Spill
	movl	19464(%rsp), %eax       # 4-byte Reload
	movl	%esi, 29956(%rsp)       # 4-byte Spill
	movq	19376(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29912(%rsp)       # 8-byte Spill
	movq	19472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29904(%rsp)       # 8-byte Spill
	movq	19480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29896(%rsp)       # 8-byte Spill
	movq	19488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29888(%rsp)       # 8-byte Spill
	movq	19496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29880(%rsp)       # 8-byte Spill
	movq	19504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29872(%rsp)       # 8-byte Spill
	movq	19512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29864(%rsp)       # 8-byte Spill
	movq	19520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29856(%rsp)       # 8-byte Spill
	movq	19528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29848(%rsp)       # 8-byte Spill
	movq	19536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29840(%rsp)       # 8-byte Spill
	movq	19544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29832(%rsp)       # 8-byte Spill
	movq	19552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29824(%rsp)       # 8-byte Spill
	movq	19560(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29816(%rsp)       # 8-byte Spill
	movq	19256(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29808(%rsp)       # 8-byte Spill
	movq	19264(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29800(%rsp)       # 8-byte Spill
	movq	19272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29792(%rsp)       # 8-byte Spill
	movq	19280(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29784(%rsp)       # 8-byte Spill
	movq	19288(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29776(%rsp)       # 8-byte Spill
	movq	19296(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29768(%rsp)       # 8-byte Spill
	movq	19304(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29760(%rsp)       # 8-byte Spill
	movq	19312(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29752(%rsp)       # 8-byte Spill
	movq	19320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29744(%rsp)       # 8-byte Spill
	movq	19328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29736(%rsp)       # 8-byte Spill
	movq	19336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29728(%rsp)       # 8-byte Spill
	movq	19344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29720(%rsp)       # 8-byte Spill
	movq	19352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 29712(%rsp)       # 8-byte Spill
	movq	19568(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 29700(%rsp)       # 4-byte Spill
	movl	19200(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29648(%rsp)       # 4-byte Spill
	movl	%edi, 29952(%rsp)       # 4-byte Spill
	movq	%rsi, 29704(%rsp)       # 8-byte Spill
	movl	%edx, 29692(%rsp)       # 4-byte Spill
	movl	%r8d, 29688(%rsp)       # 4-byte Spill
	movl	%r9d, 29684(%rsp)       # 4-byte Spill
	movl	%r10d, 29680(%rsp)      # 4-byte Spill
	movl	%r11d, 29676(%rsp)      # 4-byte Spill
	movl	%ebx, 29672(%rsp)       # 4-byte Spill
	movl	%ebp, 29668(%rsp)       # 4-byte Spill
	movl	%r14d, 29664(%rsp)      # 4-byte Spill
	movl	%r15d, 29660(%rsp)      # 4-byte Spill
	movl	%r12d, 29656(%rsp)      # 4-byte Spill
	movl	%r13d, 29652(%rsp)      # 4-byte Spill
	movl	%ecx, 29696(%rsp)       # 4-byte Spill
	jmp	.LBB68_167
.LBB68_163:                             # %if.end926
                                        # =>This Inner Loop Header: Depth=1
	movl	19208(%rsp), %eax       # 4-byte Reload
	movl	19212(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	19444(%rsp), %esi       # 4-byte Reload
	movq	19488(%rsp), %rdi       # 8-byte Reload
	movq	19496(%rsp), %r8        # 8-byte Reload
	movq	19504(%rsp), %r9        # 8-byte Reload
	movq	19512(%rsp), %r10       # 8-byte Reload
	movq	19520(%rsp), %r11       # 8-byte Reload
	movq	19528(%rsp), %rbx       # 8-byte Reload
	movq	19536(%rsp), %r14       # 8-byte Reload
	movq	19544(%rsp), %r15       # 8-byte Reload
	movq	19552(%rsp), %r12       # 8-byte Reload
	movq	19560(%rsp), %r13       # 8-byte Reload
	movq	19256(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	19264(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	19272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	19280(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	19288(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	19296(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	19304(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	19312(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	19320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	19328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	19336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	19344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	19352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	19480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	19472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	19376(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 19196(%rsp)       # 4-byte Spill
	movl	19464(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	19460(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	19456(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	19452(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	19448(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	19440(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	19436(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	19432(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	19428(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	19424(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	19420(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	19416(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	19412(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	19408(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	19404(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	19400(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	19396(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	19392(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	19388(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	19372(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 19192(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.164:                              # %if.end932
                                        #   in Loop: Header=BB68_163 Depth=1
	movq	19360(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17073, 38596(%rsp)     # imm = 0x42B1
	shll	$8, %ecx
	movq	19240(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$17074, 38596(%rsp)     # imm = 0x42B2
	movb	(%rsi), %dil
	movl	$17076, 38596(%rsp)     # imm = 0x42B4
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$17077, 38596(%rsp)     # imm = 0x42B5
	movl	19196(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	19568(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$17079, 38596(%rsp)     # imm = 0x42B7
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$17080, 38596(%rsp)     # imm = 0x42B8
	movl	19192(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	19232(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$17081, 38596(%rsp)     # imm = 0x42B9
	movq	19216(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$17083, 38596(%rsp)     # imm = 0x42BB
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$17086, 38596(%rsp)     # imm = 0x42BE
	cmpl	$0, %ebx
	movl	%ecx, 19188(%rsp)       # 4-byte Spill
	movl	%r8d, 19184(%rsp)       # 4-byte Spill
	movl	%r10d, 19180(%rsp)      # 4-byte Spill
	jne	.LBB68_166
# %bb.165:                              # %if.then955
                                        #   in Loop: Header=BB68_163 Depth=1
	movq	19224(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17088, 38596(%rsp)     # imm = 0x42C0
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$17141, 38596(%rsp)     # imm = 0x42F5
.LBB68_166:                             # %if.end959
                                        #   in Loop: Header=BB68_163 Depth=1
	movl	19196(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	19188(%rsp), %ecx       # 4-byte Reload
	movl	19184(%rsp), %edx       # 4-byte Reload
	movl	19180(%rsp), %esi       # 4-byte Reload
	movl	19184(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 19252(%rsp)       # 4-byte Spill
	movl	%edx, 19248(%rsp)       # 4-byte Spill
	movl	%esi, 19212(%rsp)       # 4-byte Spill
	movl	%edi, 19208(%rsp)       # 4-byte Spill
	jg	.LBB68_162
	jmp	.LBB68_163
.LBB68_167:                             # %sw.bb966
	movl	29648(%rsp), %eax       # 4-byte Reload
	movq	29704(%rsp), %rcx       # 8-byte Reload
	movq	29712(%rsp), %rdx       # 8-byte Reload
	movq	29720(%rsp), %rsi       # 8-byte Reload
	movq	29728(%rsp), %rdi       # 8-byte Reload
	movq	29736(%rsp), %r8        # 8-byte Reload
	movq	29744(%rsp), %r9        # 8-byte Reload
	movq	29752(%rsp), %r10       # 8-byte Reload
	movq	29760(%rsp), %r11       # 8-byte Reload
	movq	29768(%rsp), %rbx       # 8-byte Reload
	movq	29776(%rsp), %r14       # 8-byte Reload
	movq	29784(%rsp), %r15       # 8-byte Reload
	movq	29792(%rsp), %r12       # 8-byte Reload
	movq	29800(%rsp), %r13       # 8-byte Reload
	movq	29808(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 19168(%rsp)       # 8-byte Spill
	movq	29816(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19160(%rsp)       # 8-byte Spill
	movq	29824(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19152(%rsp)       # 8-byte Spill
	movq	29832(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19144(%rsp)       # 8-byte Spill
	movq	29840(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19136(%rsp)       # 8-byte Spill
	movq	29848(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19128(%rsp)       # 8-byte Spill
	movq	29856(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19120(%rsp)       # 8-byte Spill
	movq	29864(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19112(%rsp)       # 8-byte Spill
	movq	29872(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19104(%rsp)       # 8-byte Spill
	movq	29880(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19096(%rsp)       # 8-byte Spill
	movq	29888(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19088(%rsp)       # 8-byte Spill
	movq	29896(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19080(%rsp)       # 8-byte Spill
	movq	29904(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 19072(%rsp)       # 8-byte Spill
	movq	29912(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 19068(%rsp)       # 4-byte Spill
	movl	29700(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19064(%rsp)       # 4-byte Spill
	movl	29928(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19060(%rsp)       # 4-byte Spill
	movl	29932(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19056(%rsp)       # 4-byte Spill
	movl	29936(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19052(%rsp)       # 4-byte Spill
	movl	29940(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19048(%rsp)       # 4-byte Spill
	movl	29944(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19044(%rsp)       # 4-byte Spill
	movl	29948(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19040(%rsp)       # 4-byte Spill
	movl	29952(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19036(%rsp)       # 4-byte Spill
	movl	29956(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19032(%rsp)       # 4-byte Spill
	movl	29696(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19028(%rsp)       # 4-byte Spill
	movl	29652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19024(%rsp)       # 4-byte Spill
	movl	29656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19020(%rsp)       # 4-byte Spill
	movl	29660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19016(%rsp)       # 4-byte Spill
	movl	29664(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19012(%rsp)       # 4-byte Spill
	movl	29668(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19008(%rsp)       # 4-byte Spill
	movl	29672(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19004(%rsp)       # 4-byte Spill
	movl	29676(%rsp), %eax       # 4-byte Reload
	movl	%eax, 19000(%rsp)       # 4-byte Spill
	movl	29680(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18996(%rsp)       # 4-byte Spill
	movl	29684(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18992(%rsp)       # 4-byte Spill
	movl	29688(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18988(%rsp)       # 4-byte Spill
	movl	29692(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 18976(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$26, (%rcx)
	movl	$17146, 38596(%rsp)     # imm = 0x42FA
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 18972(%rsp)       # 4-byte Spill
	movl	19068(%rsp), %eax       # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 18960(%rsp)       # 8-byte Spill
	movq	%rdx, 18952(%rsp)       # 8-byte Spill
	movq	%rsi, 18944(%rsp)       # 8-byte Spill
	movq	%rdi, 18936(%rsp)       # 8-byte Spill
	movq	%r8, 18928(%rsp)        # 8-byte Spill
	movq	%r9, 18920(%rsp)        # 8-byte Spill
	movq	%r10, 18912(%rsp)       # 8-byte Spill
	movq	%r11, 18904(%rsp)       # 8-byte Spill
	movq	%rbx, 18896(%rsp)       # 8-byte Spill
	movq	%r14, 18888(%rsp)       # 8-byte Spill
	movq	%r15, 18880(%rsp)       # 8-byte Spill
	movq	%r12, 18872(%rsp)       # 8-byte Spill
	movq	%r13, 18864(%rsp)       # 8-byte Spill
	movq	%rbp, 18856(%rsp)       # 8-byte Spill
	jle	.LBB68_169
# %bb.168:                              # %sw.bb966.if.then973_crit_edge
	movq	18960(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17148, 38596(%rsp)     # imm = 0x42FC
	movl	19068(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 18852(%rsp)       # 4-byte Spill
	movl	%edx, 18848(%rsp)       # 4-byte Spill
	jmp	.LBB68_170
.LBB68_169:                             # %if.end983.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$17150, 38596(%rsp)     # imm = 0x42FE
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$17161, 38596(%rsp)     # imm = 0x4309
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	19068(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 18840(%rsp)       # 8-byte Spill
	movq	%rdx, 18832(%rsp)       # 8-byte Spill
	movq	%r8, 18824(%rsp)        # 8-byte Spill
	movq	%rdi, 18816(%rsp)       # 8-byte Spill
	movl	%esi, 18812(%rsp)       # 4-byte Spill
	movl	%r9d, 18808(%rsp)       # 4-byte Spill
	jmp	.LBB68_171
.LBB68_170:                             # %if.then973
	movl	18848(%rsp), %eax       # 4-byte Reload
	movl	18852(%rsp), %ecx       # 4-byte Reload
	addl	$-8, %eax
	movl	%ecx, 18804(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	18804(%rsp), %edx       # 4-byte Reload
	shrl	%cl, %edx
	movq	19168(%rsp), %rsi       # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$17163, 38596(%rsp)     # imm = 0x430B
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movl	56(%rdi), %r8d
	movl	$17167, 38596(%rsp)     # imm = 0x430F
	shll	$8, %r8d
	andl	$255, %edx
	orl	%edx, %r8d
	movl	%r8d, 56(%rdi)
	movl	$17174, 38596(%rsp)     # imm = 0x4316
	movl	18972(%rsp), %edx       # 4-byte Reload
	movl	18988(%rsp), %r8d       # 4-byte Reload
	movl	18992(%rsp), %r9d       # 4-byte Reload
	movl	18996(%rsp), %r10d      # 4-byte Reload
	movl	19000(%rsp), %r11d      # 4-byte Reload
	movl	19004(%rsp), %ebx       # 4-byte Reload
	movl	19008(%rsp), %ebp       # 4-byte Reload
	movl	19012(%rsp), %r14d      # 4-byte Reload
	movl	19016(%rsp), %r15d      # 4-byte Reload
	movl	19020(%rsp), %r12d      # 4-byte Reload
	movl	19024(%rsp), %r13d      # 4-byte Reload
	movl	19028(%rsp), %ecx       # 4-byte Reload
	movl	19032(%rsp), %esi       # 4-byte Reload
	movl	19036(%rsp), %edi       # 4-byte Reload
	movl	%eax, 18800(%rsp)       # 4-byte Spill
	movl	19040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 30260(%rsp)       # 4-byte Spill
	movl	19044(%rsp), %eax       # 4-byte Reload
	movl	%eax, 30256(%rsp)       # 4-byte Spill
	movl	19048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 30252(%rsp)       # 4-byte Spill
	movl	19052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 30248(%rsp)       # 4-byte Spill
	movl	19056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 30244(%rsp)       # 4-byte Spill
	movl	19060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 30240(%rsp)       # 4-byte Spill
	movl	19064(%rsp), %eax       # 4-byte Reload
	movl	%esi, 30268(%rsp)       # 4-byte Spill
	movq	18976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30224(%rsp)       # 8-byte Spill
	movq	19072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30216(%rsp)       # 8-byte Spill
	movq	19080(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30208(%rsp)       # 8-byte Spill
	movq	19088(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30200(%rsp)       # 8-byte Spill
	movq	19096(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30192(%rsp)       # 8-byte Spill
	movq	19104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30184(%rsp)       # 8-byte Spill
	movq	19112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30176(%rsp)       # 8-byte Spill
	movq	19120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30168(%rsp)       # 8-byte Spill
	movq	19128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30160(%rsp)       # 8-byte Spill
	movq	19136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30152(%rsp)       # 8-byte Spill
	movq	19144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30144(%rsp)       # 8-byte Spill
	movq	19152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30136(%rsp)       # 8-byte Spill
	movq	19160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30128(%rsp)       # 8-byte Spill
	movq	18856(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30120(%rsp)       # 8-byte Spill
	movq	18864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30112(%rsp)       # 8-byte Spill
	movq	18872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30104(%rsp)       # 8-byte Spill
	movq	18880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30096(%rsp)       # 8-byte Spill
	movq	18888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30088(%rsp)       # 8-byte Spill
	movq	18896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30080(%rsp)       # 8-byte Spill
	movq	18904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30072(%rsp)       # 8-byte Spill
	movq	18912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30064(%rsp)       # 8-byte Spill
	movq	18920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30056(%rsp)       # 8-byte Spill
	movq	18928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30048(%rsp)       # 8-byte Spill
	movq	18936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30040(%rsp)       # 8-byte Spill
	movq	18944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30032(%rsp)       # 8-byte Spill
	movq	18952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 30024(%rsp)       # 8-byte Spill
	movq	19168(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 30012(%rsp)       # 4-byte Spill
	movl	18800(%rsp), %eax       # 4-byte Reload
	movl	%eax, 29960(%rsp)       # 4-byte Spill
	movl	%edi, 30264(%rsp)       # 4-byte Spill
	movq	%rsi, 30016(%rsp)       # 8-byte Spill
	movl	%edx, 30004(%rsp)       # 4-byte Spill
	movl	%r8d, 30000(%rsp)       # 4-byte Spill
	movl	%r9d, 29996(%rsp)       # 4-byte Spill
	movl	%r10d, 29992(%rsp)      # 4-byte Spill
	movl	%r11d, 29988(%rsp)      # 4-byte Spill
	movl	%ebx, 29984(%rsp)       # 4-byte Spill
	movl	%ebp, 29980(%rsp)       # 4-byte Spill
	movl	%r14d, 29976(%rsp)      # 4-byte Spill
	movl	%r15d, 29972(%rsp)      # 4-byte Spill
	movl	%r12d, 29968(%rsp)      # 4-byte Spill
	movl	%r13d, 29964(%rsp)      # 4-byte Spill
	movl	%ecx, 30008(%rsp)       # 4-byte Spill
	jmp	.LBB68_175
.LBB68_171:                             # %if.end983
                                        # =>This Inner Loop Header: Depth=1
	movl	18808(%rsp), %eax       # 4-byte Reload
	movl	18812(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	19044(%rsp), %esi       # 4-byte Reload
	movq	19088(%rsp), %rdi       # 8-byte Reload
	movq	19096(%rsp), %r8        # 8-byte Reload
	movq	19104(%rsp), %r9        # 8-byte Reload
	movq	19112(%rsp), %r10       # 8-byte Reload
	movq	19120(%rsp), %r11       # 8-byte Reload
	movq	19128(%rsp), %rbx       # 8-byte Reload
	movq	19136(%rsp), %r14       # 8-byte Reload
	movq	19144(%rsp), %r15       # 8-byte Reload
	movq	19152(%rsp), %r12       # 8-byte Reload
	movq	19160(%rsp), %r13       # 8-byte Reload
	movq	18856(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	18864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	18872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	18880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	18888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	18896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	18904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	18912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	18920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	18928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	18936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	18944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	18952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	19080(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	19072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	18976(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 18796(%rsp)       # 4-byte Spill
	movl	19064(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	19060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	19056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	19052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	19048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	19040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	19036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	19032(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	19028(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	19024(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	19020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	19016(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	19012(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	19008(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	19004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	19000(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	18996(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	18992(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	18988(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	18972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 18792(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.172:                              # %if.end989
                                        #   in Loop: Header=BB68_171 Depth=1
	movq	18960(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17176, 38596(%rsp)     # imm = 0x4318
	shll	$8, %ecx
	movq	18840(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$17177, 38596(%rsp)     # imm = 0x4319
	movb	(%rsi), %dil
	movl	$17179, 38596(%rsp)     # imm = 0x431B
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$17180, 38596(%rsp)     # imm = 0x431C
	movl	18796(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	19168(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$17182, 38596(%rsp)     # imm = 0x431E
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$17183, 38596(%rsp)     # imm = 0x431F
	movl	18792(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	18832(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$17184, 38596(%rsp)     # imm = 0x4320
	movq	18816(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$17186, 38596(%rsp)     # imm = 0x4322
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$17189, 38596(%rsp)     # imm = 0x4325
	cmpl	$0, %ebx
	movl	%ecx, 18788(%rsp)       # 4-byte Spill
	movl	%r8d, 18784(%rsp)       # 4-byte Spill
	movl	%r10d, 18780(%rsp)      # 4-byte Spill
	jne	.LBB68_174
# %bb.173:                              # %if.then1012
                                        #   in Loop: Header=BB68_171 Depth=1
	movq	18824(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17191, 38596(%rsp)     # imm = 0x4327
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$17244, 38596(%rsp)     # imm = 0x435C
.LBB68_174:                             # %if.end1016
                                        #   in Loop: Header=BB68_171 Depth=1
	movl	18796(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	18788(%rsp), %ecx       # 4-byte Reload
	movl	18784(%rsp), %edx       # 4-byte Reload
	movl	18780(%rsp), %esi       # 4-byte Reload
	movl	18784(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 18852(%rsp)       # 4-byte Spill
	movl	%edx, 18848(%rsp)       # 4-byte Spill
	movl	%esi, 18812(%rsp)       # 4-byte Spill
	movl	%edi, 18808(%rsp)       # 4-byte Spill
	jg	.LBB68_170
	jmp	.LBB68_171
.LBB68_175:                             # %sw.bb1023
	movl	29960(%rsp), %eax       # 4-byte Reload
	movq	30016(%rsp), %rcx       # 8-byte Reload
	movq	30024(%rsp), %rdx       # 8-byte Reload
	movq	30032(%rsp), %rsi       # 8-byte Reload
	movq	30040(%rsp), %rdi       # 8-byte Reload
	movq	30048(%rsp), %r8        # 8-byte Reload
	movq	30056(%rsp), %r9        # 8-byte Reload
	movq	30064(%rsp), %r10       # 8-byte Reload
	movq	30072(%rsp), %r11       # 8-byte Reload
	movq	30080(%rsp), %rbx       # 8-byte Reload
	movq	30088(%rsp), %r14       # 8-byte Reload
	movq	30096(%rsp), %r15       # 8-byte Reload
	movq	30104(%rsp), %r12       # 8-byte Reload
	movq	30112(%rsp), %r13       # 8-byte Reload
	movq	30120(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 18768(%rsp)       # 8-byte Spill
	movq	30128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18760(%rsp)       # 8-byte Spill
	movq	30136(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18752(%rsp)       # 8-byte Spill
	movq	30144(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18744(%rsp)       # 8-byte Spill
	movq	30152(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18736(%rsp)       # 8-byte Spill
	movq	30160(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18728(%rsp)       # 8-byte Spill
	movq	30168(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18720(%rsp)       # 8-byte Spill
	movq	30176(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18712(%rsp)       # 8-byte Spill
	movq	30184(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18704(%rsp)       # 8-byte Spill
	movq	30192(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18696(%rsp)       # 8-byte Spill
	movq	30200(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18688(%rsp)       # 8-byte Spill
	movq	30208(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18680(%rsp)       # 8-byte Spill
	movq	30216(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18672(%rsp)       # 8-byte Spill
	movq	30224(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 18668(%rsp)       # 4-byte Spill
	movl	30012(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18664(%rsp)       # 4-byte Spill
	movl	30240(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18660(%rsp)       # 4-byte Spill
	movl	30244(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18656(%rsp)       # 4-byte Spill
	movl	30248(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18652(%rsp)       # 4-byte Spill
	movl	30252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18648(%rsp)       # 4-byte Spill
	movl	30256(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18644(%rsp)       # 4-byte Spill
	movl	30260(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18640(%rsp)       # 4-byte Spill
	movl	30264(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18636(%rsp)       # 4-byte Spill
	movl	30268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18632(%rsp)       # 4-byte Spill
	movl	30008(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18628(%rsp)       # 4-byte Spill
	movl	29964(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18624(%rsp)       # 4-byte Spill
	movl	29968(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18620(%rsp)       # 4-byte Spill
	movl	29972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18616(%rsp)       # 4-byte Spill
	movl	29976(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18612(%rsp)       # 4-byte Spill
	movl	29980(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18608(%rsp)       # 4-byte Spill
	movl	29984(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18604(%rsp)       # 4-byte Spill
	movl	29988(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18600(%rsp)       # 4-byte Spill
	movl	29992(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18596(%rsp)       # 4-byte Spill
	movl	29996(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18592(%rsp)       # 4-byte Spill
	movl	30000(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18588(%rsp)       # 4-byte Spill
	movl	30004(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 18576(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$27, (%rcx)
	movl	$17249, 38596(%rsp)     # imm = 0x4361
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 18572(%rsp)       # 4-byte Spill
	movl	18668(%rsp), %eax       # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 18560(%rsp)       # 8-byte Spill
	movq	%rdx, 18552(%rsp)       # 8-byte Spill
	movq	%rsi, 18544(%rsp)       # 8-byte Spill
	movq	%rdi, 18536(%rsp)       # 8-byte Spill
	movq	%r8, 18528(%rsp)        # 8-byte Spill
	movq	%r9, 18520(%rsp)        # 8-byte Spill
	movq	%r10, 18512(%rsp)       # 8-byte Spill
	movq	%r11, 18504(%rsp)       # 8-byte Spill
	movq	%rbx, 18496(%rsp)       # 8-byte Spill
	movq	%r14, 18488(%rsp)       # 8-byte Spill
	movq	%r15, 18480(%rsp)       # 8-byte Spill
	movq	%r12, 18472(%rsp)       # 8-byte Spill
	movq	%r13, 18464(%rsp)       # 8-byte Spill
	movq	%rbp, 18456(%rsp)       # 8-byte Spill
	jle	.LBB68_177
# %bb.176:                              # %sw.bb1023.if.then1030_crit_edge
	movq	18560(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17251, 38596(%rsp)     # imm = 0x4363
	movl	18668(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 18452(%rsp)       # 4-byte Spill
	movl	%edx, 18448(%rsp)       # 4-byte Spill
	jmp	.LBB68_178
.LBB68_177:                             # %if.end1040.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$17253, 38596(%rsp)     # imm = 0x4365
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$17264, 38596(%rsp)     # imm = 0x4370
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	18668(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 18440(%rsp)       # 8-byte Spill
	movq	%rdx, 18432(%rsp)       # 8-byte Spill
	movq	%r8, 18424(%rsp)        # 8-byte Spill
	movq	%rdi, 18416(%rsp)       # 8-byte Spill
	movl	%esi, 18412(%rsp)       # 4-byte Spill
	movl	%r9d, 18408(%rsp)       # 4-byte Spill
	jmp	.LBB68_179
.LBB68_178:                             # %if.then1030
	movl	18448(%rsp), %eax       # 4-byte Reload
	movl	18452(%rsp), %ecx       # 4-byte Reload
	movl	$4294967292, %edx       # imm = 0xFFFFFFFC
	addl	$-8, %eax
	movl	%ecx, 18404(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	18404(%rsp), %esi       # 4-byte Reload
	shrl	%cl, %esi
	movq	18768(%rsp), %rdi       # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$17266, 38596(%rsp)     # imm = 0x4372
	movq	38576(%rsp), %r8        # 8-byte Reload
	movl	56(%r8), %eax
	movl	$17270, 38596(%rsp)     # imm = 0x4376
	shll	$8, %eax
	andl	$255, %esi
	orl	%esi, %eax
	movl	%eax, 56(%r8)
	movl	$17278, 38596(%rsp)     # imm = 0x437E
	cmpl	$0, %eax
	movl	18644(%rsp), %esi       # 4-byte Reload
	movq	18688(%rsp), %r9        # 8-byte Reload
	movq	18696(%rsp), %r10       # 8-byte Reload
	movq	18704(%rsp), %r11       # 8-byte Reload
	movq	18712(%rsp), %rbx       # 8-byte Reload
	movq	18720(%rsp), %r14       # 8-byte Reload
	movq	18728(%rsp), %r15       # 8-byte Reload
	movq	18736(%rsp), %r12       # 8-byte Reload
	movq	18744(%rsp), %r13       # 8-byte Reload
	movq	18752(%rsp), %rbp       # 8-byte Reload
	movq	18760(%rsp), %rcx       # 8-byte Reload
	movq	18456(%rsp), %rdi       # 8-byte Reload
	movq	18464(%rsp), %r8        # 8-byte Reload
	movq	%rcx, 25448(%rsp)       # 8-byte Spill
	movq	18472(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25424(%rsp)       # 8-byte Spill
	movq	18480(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	18488(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	18496(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	18504(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	18512(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	18520(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	18528(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	18536(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	18544(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	18552(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	18680(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	18672(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	18576(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 18400(%rsp)       # 4-byte Spill
	movl	18664(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	18660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	18656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	18652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	18648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	18640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	18636(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	18632(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	18628(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	18624(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	18620(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	18616(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	18612(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	18608(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	18604(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	18600(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	18596(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	18592(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	18588(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	18572(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25440(%rsp)       # 8-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%r8, 25432(%rsp)        # 8-byte Spill
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	%r9, 25520(%rsp)        # 8-byte Spill
	movq	%r10, 25512(%rsp)       # 8-byte Spill
	movq	%r11, 25504(%rsp)       # 8-byte Spill
	movq	%rbx, 25496(%rsp)       # 8-byte Spill
	movq	%r14, 25488(%rsp)       # 8-byte Spill
	movq	%r15, 25480(%rsp)       # 8-byte Spill
	movq	%r12, 25472(%rsp)       # 8-byte Spill
	movq	%r13, 25464(%rsp)       # 8-byte Spill
	movq	%rbp, 25456(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	jl	.LBB68_542
	jmp	.LBB68_183
.LBB68_179:                             # %if.end1040
                                        # =>This Inner Loop Header: Depth=1
	movl	18408(%rsp), %eax       # 4-byte Reload
	movl	18412(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	18644(%rsp), %esi       # 4-byte Reload
	movq	18688(%rsp), %rdi       # 8-byte Reload
	movq	18696(%rsp), %r8        # 8-byte Reload
	movq	18704(%rsp), %r9        # 8-byte Reload
	movq	18712(%rsp), %r10       # 8-byte Reload
	movq	18720(%rsp), %r11       # 8-byte Reload
	movq	18728(%rsp), %rbx       # 8-byte Reload
	movq	18736(%rsp), %r14       # 8-byte Reload
	movq	18744(%rsp), %r15       # 8-byte Reload
	movq	18752(%rsp), %r12       # 8-byte Reload
	movq	18760(%rsp), %r13       # 8-byte Reload
	movq	18456(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	18464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	18472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	18480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	18488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	18496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	18504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	18512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	18520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	18528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	18536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	18544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	18552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	18680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	18672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	18576(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 18396(%rsp)       # 4-byte Spill
	movl	18664(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	18660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	18656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	18652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	18648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	18640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	18636(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	18632(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	18628(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	18624(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	18620(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	18616(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	18612(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	18608(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	18604(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	18600(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	18596(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	18592(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	18588(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	18572(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 18392(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.180:                              # %if.end1046
                                        #   in Loop: Header=BB68_179 Depth=1
	movq	18560(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17280, 38596(%rsp)     # imm = 0x4380
	shll	$8, %ecx
	movq	18440(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$17281, 38596(%rsp)     # imm = 0x4381
	movb	(%rsi), %dil
	movl	$17283, 38596(%rsp)     # imm = 0x4383
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$17284, 38596(%rsp)     # imm = 0x4384
	movl	18396(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	18768(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$17286, 38596(%rsp)     # imm = 0x4386
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$17287, 38596(%rsp)     # imm = 0x4387
	movl	18392(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	18432(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$17288, 38596(%rsp)     # imm = 0x4388
	movq	18416(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$17290, 38596(%rsp)     # imm = 0x438A
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$17293, 38596(%rsp)     # imm = 0x438D
	cmpl	$0, %ebx
	movl	%ecx, 18388(%rsp)       # 4-byte Spill
	movl	%r8d, 18384(%rsp)       # 4-byte Spill
	movl	%r10d, 18380(%rsp)      # 4-byte Spill
	jne	.LBB68_182
# %bb.181:                              # %if.then1069
                                        #   in Loop: Header=BB68_179 Depth=1
	movq	18424(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17295, 38596(%rsp)     # imm = 0x438F
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$17300, 38596(%rsp)     # imm = 0x4394
.LBB68_182:                             # %if.end1073
                                        #   in Loop: Header=BB68_179 Depth=1
	movl	18396(%rsp), %eax       # 4-byte Reload
	cmpl	$-1, %eax
	movl	18388(%rsp), %ecx       # 4-byte Reload
	movl	18384(%rsp), %edx       # 4-byte Reload
	movl	18380(%rsp), %esi       # 4-byte Reload
	movl	18384(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 18452(%rsp)       # 4-byte Spill
	movl	%edx, 18448(%rsp)       # 4-byte Spill
	movl	%esi, 18412(%rsp)       # 4-byte Spill
	movl	%edi, 18408(%rsp)       # 4-byte Spill
	jg	.LBB68_178
	jmp	.LBB68_179
.LBB68_183:                             # %if.end1084
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	xorl	%ecx, %ecx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movl	40(%rdx), %esi
	movl	$17402, 38596(%rsp)     # imm = 0x43FA
	imull	$100000, %esi, %esi     # imm = 0x186A0
	orl	$10, %esi
	movl	18400(%rsp), %edi       # 4-byte Reload
	cmpl	%esi, %edi
	movl	18588(%rsp), %esi       # 4-byte Reload
	movl	18592(%rsp), %r8d       # 4-byte Reload
	movl	18596(%rsp), %r9d       # 4-byte Reload
	movl	18600(%rsp), %r10d      # 4-byte Reload
	movl	18604(%rsp), %r11d      # 4-byte Reload
	movl	18608(%rsp), %ebx       # 4-byte Reload
	movl	18612(%rsp), %ebp       # 4-byte Reload
	movl	18616(%rsp), %r14d      # 4-byte Reload
	movl	18620(%rsp), %r15d      # 4-byte Reload
	movl	18624(%rsp), %r12d      # 4-byte Reload
	movl	18628(%rsp), %r13d      # 4-byte Reload
	movl	18632(%rsp), %edi       # 4-byte Reload
	movl	18636(%rsp), %edx       # 4-byte Reload
	movl	%eax, 18376(%rsp)       # 4-byte Spill
	movl	18640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18372(%rsp)       # 4-byte Spill
	movl	18644(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18368(%rsp)       # 4-byte Spill
	movl	18648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18364(%rsp)       # 4-byte Spill
	movl	18652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18360(%rsp)       # 4-byte Spill
	movl	18656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18356(%rsp)       # 4-byte Spill
	movl	18660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18352(%rsp)       # 4-byte Spill
	movl	18664(%rsp), %eax       # 4-byte Reload
	movl	%esi, 18348(%rsp)       # 4-byte Spill
	movq	18576(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18336(%rsp)       # 8-byte Spill
	movq	18672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18328(%rsp)       # 8-byte Spill
	movq	18680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18320(%rsp)       # 8-byte Spill
	movq	18688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18312(%rsp)       # 8-byte Spill
	movq	18696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18304(%rsp)       # 8-byte Spill
	movq	18704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18296(%rsp)       # 8-byte Spill
	movq	18712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18288(%rsp)       # 8-byte Spill
	movq	18720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18280(%rsp)       # 8-byte Spill
	movq	18728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18272(%rsp)       # 8-byte Spill
	movq	18736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18264(%rsp)       # 8-byte Spill
	movq	18744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18256(%rsp)       # 8-byte Spill
	movq	18752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18248(%rsp)       # 8-byte Spill
	movq	18760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18240(%rsp)       # 8-byte Spill
	movq	18456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18232(%rsp)       # 8-byte Spill
	movq	18464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18224(%rsp)       # 8-byte Spill
	movq	18472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18216(%rsp)       # 8-byte Spill
	movq	18480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18208(%rsp)       # 8-byte Spill
	movq	18488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18200(%rsp)       # 8-byte Spill
	movq	18496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18192(%rsp)       # 8-byte Spill
	movq	18504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18184(%rsp)       # 8-byte Spill
	movq	18512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18176(%rsp)       # 8-byte Spill
	movq	18520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18168(%rsp)       # 8-byte Spill
	movq	18528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18160(%rsp)       # 8-byte Spill
	movq	18536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18152(%rsp)       # 8-byte Spill
	movq	18544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18144(%rsp)       # 8-byte Spill
	movq	18552(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 18140(%rsp)       # 4-byte Spill
	movl	18644(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 18128(%rsp)       # 8-byte Spill
	movq	18688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	18696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	18704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	18712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	18720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	18728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	18736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	18744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	18752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	18760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	18456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	18464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	18472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	18480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	18488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	18496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	18504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	18512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	18520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	18528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	18536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	18544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	18552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	18680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	18672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	18576(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	18664(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	18660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	18656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	18652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	18648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	18640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	18636(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	18632(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	18628(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	18624(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	18620(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	18616(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	18612(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	18608(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	18604(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	18600(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	18596(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	18592(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	18588(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	18572(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	18376(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movl	%r13d, 18124(%rsp)      # 4-byte Spill
	movl	%edx, 18120(%rsp)       # 4-byte Spill
	movl	%edi, 18116(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%r8d, 18112(%rsp)       # 4-byte Spill
	movl	%r9d, 18108(%rsp)       # 4-byte Spill
	movl	%r10d, 18104(%rsp)      # 4-byte Spill
	movl	%r11d, 18100(%rsp)      # 4-byte Spill
	movl	%ebx, 18096(%rsp)       # 4-byte Spill
	movl	%ebp, 18092(%rsp)       # 4-byte Spill
	movl	%r14d, 18088(%rsp)      # 4-byte Spill
	movl	%r15d, 18084(%rsp)      # 4-byte Spill
	movl	%r12d, 18080(%rsp)      # 4-byte Spill
	movl	%ecx, 18076(%rsp)       # 4-byte Spill
	jg	.LBB68_542
.LBB68_184:                             # %for.cond
	movl	18076(%rsp), %eax       # 4-byte Reload
	movq	18128(%rsp), %rcx       # 8-byte Reload
	movq	18144(%rsp), %rdx       # 8-byte Reload
	movq	18152(%rsp), %rsi       # 8-byte Reload
	movq	18160(%rsp), %rdi       # 8-byte Reload
	movq	18168(%rsp), %r8        # 8-byte Reload
	movq	18176(%rsp), %r9        # 8-byte Reload
	movq	18184(%rsp), %r10       # 8-byte Reload
	movq	18192(%rsp), %r11       # 8-byte Reload
	movq	18200(%rsp), %rbx       # 8-byte Reload
	movq	18208(%rsp), %r14       # 8-byte Reload
	movq	18216(%rsp), %r15       # 8-byte Reload
	movq	18224(%rsp), %r12       # 8-byte Reload
	movq	18232(%rsp), %r13       # 8-byte Reload
	movq	18240(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 18064(%rsp)       # 8-byte Spill
	movq	18248(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18056(%rsp)       # 8-byte Spill
	movq	18256(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18048(%rsp)       # 8-byte Spill
	movq	18264(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18040(%rsp)       # 8-byte Spill
	movq	18272(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18032(%rsp)       # 8-byte Spill
	movq	18280(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18024(%rsp)       # 8-byte Spill
	movq	18288(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18016(%rsp)       # 8-byte Spill
	movq	18296(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18008(%rsp)       # 8-byte Spill
	movq	18304(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 18000(%rsp)       # 8-byte Spill
	movq	18312(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 17992(%rsp)       # 8-byte Spill
	movq	18320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 17984(%rsp)       # 8-byte Spill
	movq	18328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 17976(%rsp)       # 8-byte Spill
	movq	18336(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 17972(%rsp)       # 4-byte Spill
	movl	18140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17968(%rsp)       # 4-byte Spill
	movl	18352(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17964(%rsp)       # 4-byte Spill
	movl	18356(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17960(%rsp)       # 4-byte Spill
	movl	18360(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17956(%rsp)       # 4-byte Spill
	movl	18364(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17952(%rsp)       # 4-byte Spill
	movl	18368(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17948(%rsp)       # 4-byte Spill
	movl	18372(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17944(%rsp)       # 4-byte Spill
	movl	18120(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17940(%rsp)       # 4-byte Spill
	movl	18116(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17936(%rsp)       # 4-byte Spill
	movl	18124(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17932(%rsp)       # 4-byte Spill
	movl	18080(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17928(%rsp)       # 4-byte Spill
	movl	18084(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17924(%rsp)       # 4-byte Spill
	movl	18088(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17920(%rsp)       # 4-byte Spill
	movl	18092(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17916(%rsp)       # 4-byte Spill
	movl	18096(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17912(%rsp)       # 4-byte Spill
	movl	18100(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17908(%rsp)       # 4-byte Spill
	movl	18104(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17904(%rsp)       # 4-byte Spill
	movl	18108(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17900(%rsp)       # 4-byte Spill
	movl	18112(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17896(%rsp)       # 4-byte Spill
	movl	18348(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17892(%rsp)       # 4-byte Spill
	movl	17972(%rsp), %eax       # 4-byte Reload
	cmpl	$16, %eax
	movl	17892(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35340(%rsp)       # 4-byte Spill
	movl	17896(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35336(%rsp)       # 4-byte Spill
	movl	17900(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35332(%rsp)       # 4-byte Spill
	movl	17904(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35328(%rsp)       # 4-byte Spill
	movl	17908(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35324(%rsp)       # 4-byte Spill
	movl	17912(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35320(%rsp)       # 4-byte Spill
	movl	17916(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35316(%rsp)       # 4-byte Spill
	movl	17920(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35312(%rsp)       # 4-byte Spill
	movl	17924(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35308(%rsp)       # 4-byte Spill
	movl	17928(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35304(%rsp)       # 4-byte Spill
	movl	17932(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35300(%rsp)       # 4-byte Spill
	movl	17936(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35296(%rsp)       # 4-byte Spill
	movl	17940(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35344(%rsp)       # 4-byte Spill
	movl	17944(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37952(%rsp)       # 4-byte Spill
	movl	17948(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37948(%rsp)       # 4-byte Spill
	movl	17952(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37944(%rsp)       # 4-byte Spill
	movl	17956(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37940(%rsp)       # 4-byte Spill
	movl	17960(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37936(%rsp)       # 4-byte Spill
	movl	17964(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37932(%rsp)       # 4-byte Spill
	movl	17968(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 17880(%rsp)       # 8-byte Spill
	movq	%rcx, 37912(%rsp)       # 8-byte Spill
	movq	17976(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37904(%rsp)       # 8-byte Spill
	movq	17984(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37896(%rsp)       # 8-byte Spill
	movq	17992(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37888(%rsp)       # 8-byte Spill
	movq	18000(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37880(%rsp)       # 8-byte Spill
	movq	18008(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37872(%rsp)       # 8-byte Spill
	movq	18016(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37864(%rsp)       # 8-byte Spill
	movq	18024(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37856(%rsp)       # 8-byte Spill
	movq	18032(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37848(%rsp)       # 8-byte Spill
	movq	18040(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37840(%rsp)       # 8-byte Spill
	movq	18048(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37832(%rsp)       # 8-byte Spill
	movq	18056(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 37824(%rsp)       # 8-byte Spill
	movq	%rbp, %rcx
	movq	%rcx, 37816(%rsp)       # 8-byte Spill
	movq	%r13, %rcx
	movq	%rcx, 37808(%rsp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	%rcx, 37800(%rsp)       # 8-byte Spill
	movq	%r15, %rcx
	movq	%rcx, 37792(%rsp)       # 8-byte Spill
	movq	%r14, %rcx
	movq	%rcx, 37784(%rsp)       # 8-byte Spill
	movq	%rbx, %rcx
	movq	%rcx, 37776(%rsp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	%rcx, 37768(%rsp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	%rcx, 37760(%rsp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	%rcx, 37752(%rsp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	%rcx, 37744(%rsp)       # 8-byte Spill
	movq	%rdi, %rcx
	movq	%rcx, 37736(%rsp)       # 8-byte Spill
	movq	%rsi, %rcx
	movq	%rcx, 37728(%rsp)       # 8-byte Spill
	movq	%rdx, %rcx
	movq	%rcx, 37720(%rsp)       # 8-byte Spill
	movq	18064(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 37716(%rsp)       # 4-byte Spill
	movl	17972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37712(%rsp)       # 4-byte Spill
	movq	%rcx, 37632(%rsp)       # 8-byte Spill
	movq	%rdx, 17872(%rsp)       # 8-byte Spill
	movq	%rsi, 17864(%rsp)       # 8-byte Spill
	movq	%rdi, 17856(%rsp)       # 8-byte Spill
	movq	%r8, 17848(%rsp)        # 8-byte Spill
	movq	%r9, 17840(%rsp)        # 8-byte Spill
	movq	%r10, 17832(%rsp)       # 8-byte Spill
	movq	%r11, 17824(%rsp)       # 8-byte Spill
	movq	%rbx, 17816(%rsp)       # 8-byte Spill
	movq	%r14, 17808(%rsp)       # 8-byte Spill
	movq	%r15, 17800(%rsp)       # 8-byte Spill
	movq	%r12, 17792(%rsp)       # 8-byte Spill
	movq	%r13, 17784(%rsp)       # 8-byte Spill
	movq	%rbp, 17776(%rsp)       # 8-byte Spill
	jge	.LBB68_193
.LBB68_185:                             # %sw.bb1095
	movl	37712(%rsp), %eax       # 4-byte Reload
	movq	37632(%rsp), %rcx       # 8-byte Reload
	movq	37720(%rsp), %rdx       # 8-byte Reload
	movq	37728(%rsp), %rsi       # 8-byte Reload
	movq	37736(%rsp), %rdi       # 8-byte Reload
	movq	37744(%rsp), %r8        # 8-byte Reload
	movq	37752(%rsp), %r9        # 8-byte Reload
	movq	37760(%rsp), %r10       # 8-byte Reload
	movq	37768(%rsp), %r11       # 8-byte Reload
	movq	37776(%rsp), %rbx       # 8-byte Reload
	movq	37784(%rsp), %r14       # 8-byte Reload
	movq	37792(%rsp), %r15       # 8-byte Reload
	movq	37800(%rsp), %r12       # 8-byte Reload
	movq	37808(%rsp), %r13       # 8-byte Reload
	movq	37816(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 17768(%rsp)       # 8-byte Spill
	movq	37824(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 17760(%rsp)       # 8-byte Spill
	movq	37832(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 17752(%rsp)       # 8-byte Spill
	movq	37840(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 17744(%rsp)       # 8-byte Spill
	movq	37848(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 17736(%rsp)       # 8-byte Spill
	movq	37856(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 17728(%rsp)       # 8-byte Spill
	movq	37864(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 17720(%rsp)       # 8-byte Spill
	movq	37872(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 17712(%rsp)       # 8-byte Spill
	movq	37880(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 17704(%rsp)       # 8-byte Spill
	movq	37888(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 17696(%rsp)       # 8-byte Spill
	movq	37896(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 17688(%rsp)       # 8-byte Spill
	movq	37904(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 17680(%rsp)       # 8-byte Spill
	movq	37912(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 17676(%rsp)       # 4-byte Spill
	movl	37716(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17672(%rsp)       # 4-byte Spill
	movl	37932(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17668(%rsp)       # 4-byte Spill
	movl	37936(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17664(%rsp)       # 4-byte Spill
	movl	37940(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17660(%rsp)       # 4-byte Spill
	movl	37944(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17656(%rsp)       # 4-byte Spill
	movl	37948(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17652(%rsp)       # 4-byte Spill
	movl	37952(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17648(%rsp)       # 4-byte Spill
	movl	35344(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17644(%rsp)       # 4-byte Spill
	movl	35296(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17640(%rsp)       # 4-byte Spill
	movl	35300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17636(%rsp)       # 4-byte Spill
	movl	35304(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17632(%rsp)       # 4-byte Spill
	movl	35308(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17628(%rsp)       # 4-byte Spill
	movl	35312(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17624(%rsp)       # 4-byte Spill
	movl	35316(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17620(%rsp)       # 4-byte Spill
	movl	35320(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17616(%rsp)       # 4-byte Spill
	movl	35324(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17612(%rsp)       # 4-byte Spill
	movl	35328(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17608(%rsp)       # 4-byte Spill
	movl	35332(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17604(%rsp)       # 4-byte Spill
	movl	35336(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17600(%rsp)       # 4-byte Spill
	movl	35340(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 17592(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$28, (%rcx)
	movl	$17405, 38596(%rsp)     # imm = 0x43FD
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$36, %rcx
	movq	%rcx, 17584(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	36(%rcx), %ecx
	movl	$17409, 38596(%rsp)     # imm = 0x4401
	movq	%rdx, 17576(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rdx       # 8-byte Reload
	addq	$32, %rdx
	cmpl	$0, %ecx
	movl	%eax, 17572(%rsp)       # 4-byte Spill
	movl	%ecx, 17568(%rsp)       # 4-byte Spill
	movq	%rdx, 17560(%rsp)       # 8-byte Spill
	movq	%rsi, 17552(%rsp)       # 8-byte Spill
	movq	%rdi, 17544(%rsp)       # 8-byte Spill
	movq	%r8, 17536(%rsp)        # 8-byte Spill
	movq	%r9, 17528(%rsp)        # 8-byte Spill
	movq	%r10, 17520(%rsp)       # 8-byte Spill
	movq	%r11, 17512(%rsp)       # 8-byte Spill
	movq	%rbx, 17504(%rsp)       # 8-byte Spill
	movq	%r14, 17496(%rsp)       # 8-byte Spill
	movq	%r15, 17488(%rsp)       # 8-byte Spill
	movq	%r12, 17480(%rsp)       # 8-byte Spill
	movq	%r13, 17472(%rsp)       # 8-byte Spill
	movq	%rbp, 17464(%rsp)       # 8-byte Spill
	jle	.LBB68_187
# %bb.186:                              # %sw.bb1095.if.then1102_crit_edge
	movq	17560(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17411, 38596(%rsp)     # imm = 0x4403
	movl	17568(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 17460(%rsp)       # 4-byte Spill
	movl	%edx, 17456(%rsp)       # 4-byte Spill
	jmp	.LBB68_188
.LBB68_187:                             # %if.end1112.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$17413, 38596(%rsp)     # imm = 0x4405
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$17423, 38596(%rsp)     # imm = 0x440F
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	17568(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 17448(%rsp)       # 8-byte Spill
	movq	%rdx, 17440(%rsp)       # 8-byte Spill
	movq	%r8, 17432(%rsp)        # 8-byte Spill
	movq	%rdi, 17424(%rsp)       # 8-byte Spill
	movl	%esi, 17420(%rsp)       # 4-byte Spill
	movl	%r9d, 17416(%rsp)       # 4-byte Spill
	jmp	.LBB68_189
.LBB68_188:                             # %if.then1102
	movl	17456(%rsp), %eax       # 4-byte Reload
	movl	17460(%rsp), %ecx       # 4-byte Reload
	movl	$1, %edx
	addl	$-1, %eax
	movq	17584(%rsp), %rsi       # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$17430, 38596(%rsp)     # imm = 0x4416
	movl	%ecx, 17412(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	17412(%rsp), %eax       # 4-byte Reload
	andl	%edx, %eax
	cmpl	$0, %eax
	setne	%cl
	movl	17676(%rsp), %eax       # 4-byte Reload
	movslq	%eax, %rdi
	andb	$1, %cl
	movq	38576(%rsp), %r8        # 8-byte Reload
	movb	%cl, 3452(%r8,%rdi)
	movl	$17437, 38596(%rsp)     # imm = 0x441D
	addl	$1, %eax
	movl	17572(%rsp), %edx       # 4-byte Reload
	movl	17600(%rsp), %r9d       # 4-byte Reload
	movl	17604(%rsp), %r10d      # 4-byte Reload
	movl	17608(%rsp), %r11d      # 4-byte Reload
	movl	17612(%rsp), %ebx       # 4-byte Reload
	movl	17616(%rsp), %ebp       # 4-byte Reload
	movl	17620(%rsp), %r14d      # 4-byte Reload
	movl	17624(%rsp), %r15d      # 4-byte Reload
	movl	17628(%rsp), %r12d      # 4-byte Reload
	movl	17632(%rsp), %r13d      # 4-byte Reload
	movl	17636(%rsp), %ecx       # 4-byte Reload
	movl	17640(%rsp), %esi       # 4-byte Reload
	movl	17644(%rsp), %edi       # 4-byte Reload
	movl	17648(%rsp), %r8d       # 4-byte Reload
	movl	%eax, 17408(%rsp)       # 4-byte Spill
	movl	17652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18368(%rsp)       # 4-byte Spill
	movl	17656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18364(%rsp)       # 4-byte Spill
	movl	17660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18360(%rsp)       # 4-byte Spill
	movl	17664(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18356(%rsp)       # 4-byte Spill
	movl	17668(%rsp), %eax       # 4-byte Reload
	movl	%eax, 18352(%rsp)       # 4-byte Spill
	movl	17672(%rsp), %eax       # 4-byte Reload
	movl	%esi, 18116(%rsp)       # 4-byte Spill
	movq	17592(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18336(%rsp)       # 8-byte Spill
	movq	17680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18328(%rsp)       # 8-byte Spill
	movq	17688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18320(%rsp)       # 8-byte Spill
	movq	17696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18312(%rsp)       # 8-byte Spill
	movq	17704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18304(%rsp)       # 8-byte Spill
	movq	17712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18296(%rsp)       # 8-byte Spill
	movq	17720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18288(%rsp)       # 8-byte Spill
	movq	17728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18280(%rsp)       # 8-byte Spill
	movq	17736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18272(%rsp)       # 8-byte Spill
	movq	17744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18264(%rsp)       # 8-byte Spill
	movq	17752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18256(%rsp)       # 8-byte Spill
	movq	17760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18248(%rsp)       # 8-byte Spill
	movq	17464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18240(%rsp)       # 8-byte Spill
	movq	17472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18232(%rsp)       # 8-byte Spill
	movq	17480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18224(%rsp)       # 8-byte Spill
	movq	17488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18216(%rsp)       # 8-byte Spill
	movq	17496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18208(%rsp)       # 8-byte Spill
	movq	17504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18200(%rsp)       # 8-byte Spill
	movq	17512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18192(%rsp)       # 8-byte Spill
	movq	17520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18184(%rsp)       # 8-byte Spill
	movq	17528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18176(%rsp)       # 8-byte Spill
	movq	17536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18168(%rsp)       # 8-byte Spill
	movq	17544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18160(%rsp)       # 8-byte Spill
	movq	17552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18152(%rsp)       # 8-byte Spill
	movq	17576(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 18144(%rsp)       # 8-byte Spill
	movq	17768(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 18140(%rsp)       # 4-byte Spill
	movl	17408(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 18128(%rsp)       # 8-byte Spill
	movl	%r8d, 18372(%rsp)       # 4-byte Spill
	movl	%eax, 18076(%rsp)       # 4-byte Spill
	movl	%edx, 18348(%rsp)       # 4-byte Spill
	movl	%r9d, 18112(%rsp)       # 4-byte Spill
	movl	%r10d, 18108(%rsp)      # 4-byte Spill
	movl	%r11d, 18104(%rsp)      # 4-byte Spill
	movl	%ebx, 18100(%rsp)       # 4-byte Spill
	movl	%ebp, 18096(%rsp)       # 4-byte Spill
	movl	%r14d, 18092(%rsp)      # 4-byte Spill
	movl	%r15d, 18088(%rsp)      # 4-byte Spill
	movl	%r12d, 18084(%rsp)      # 4-byte Spill
	movl	%r13d, 18080(%rsp)      # 4-byte Spill
	movl	%ecx, 18124(%rsp)       # 4-byte Spill
	movl	%edi, 18120(%rsp)       # 4-byte Spill
	jmp	.LBB68_184
.LBB68_189:                             # %if.end1112
                                        # =>This Inner Loop Header: Depth=1
	movl	17416(%rsp), %eax       # 4-byte Reload
	movl	17420(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	17652(%rsp), %esi       # 4-byte Reload
	movq	17696(%rsp), %rdi       # 8-byte Reload
	movq	17704(%rsp), %r8        # 8-byte Reload
	movq	17712(%rsp), %r9        # 8-byte Reload
	movq	17720(%rsp), %r10       # 8-byte Reload
	movq	17728(%rsp), %r11       # 8-byte Reload
	movq	17736(%rsp), %rbx       # 8-byte Reload
	movq	17744(%rsp), %r14       # 8-byte Reload
	movq	17752(%rsp), %r15       # 8-byte Reload
	movq	17760(%rsp), %r12       # 8-byte Reload
	movq	17464(%rsp), %r13       # 8-byte Reload
	movq	17472(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	17480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	17488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	17496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	17504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	17512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	17520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	17528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	17536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	17544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	17552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	17576(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	17768(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	17688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	17680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	17592(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 17404(%rsp)       # 4-byte Spill
	movl	17672(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	17668(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	17664(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	17660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	17656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	17648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	17644(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	17640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	17636(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	17632(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	17628(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	17624(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	17620(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	17616(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	17612(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	17608(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	17604(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	17600(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	17572(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	17676(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 17400(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.190:                              # %if.end1118
                                        #   in Loop: Header=BB68_189 Depth=1
	movq	17560(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17439, 38596(%rsp)     # imm = 0x441F
	shll	$8, %ecx
	movq	17448(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$17440, 38596(%rsp)     # imm = 0x4420
	movb	(%rsi), %dil
	movl	$17442, 38596(%rsp)     # imm = 0x4422
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$17443, 38596(%rsp)     # imm = 0x4423
	movl	17404(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	17584(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$17445, 38596(%rsp)     # imm = 0x4425
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$17446, 38596(%rsp)     # imm = 0x4426
	movl	17400(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	17440(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$17447, 38596(%rsp)     # imm = 0x4427
	movq	17424(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$17449, 38596(%rsp)     # imm = 0x4429
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$17452, 38596(%rsp)     # imm = 0x442C
	cmpl	$0, %ebx
	movl	%ecx, 17396(%rsp)       # 4-byte Spill
	movl	%r8d, 17392(%rsp)       # 4-byte Spill
	movl	%r10d, 17388(%rsp)      # 4-byte Spill
	jne	.LBB68_192
# %bb.191:                              # %if.then1141
                                        #   in Loop: Header=BB68_189 Depth=1
	movq	17432(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17454, 38596(%rsp)     # imm = 0x442E
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$17559, 38596(%rsp)     # imm = 0x4497
.LBB68_192:                             # %if.end1145
                                        #   in Loop: Header=BB68_189 Depth=1
	movl	17404(%rsp), %eax       # 4-byte Reload
	cmpl	$-8, %eax
	movl	17396(%rsp), %ecx       # 4-byte Reload
	movl	17392(%rsp), %edx       # 4-byte Reload
	movl	17388(%rsp), %esi       # 4-byte Reload
	movl	17392(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 17460(%rsp)       # 4-byte Spill
	movl	%edx, 17456(%rsp)       # 4-byte Spill
	movl	%esi, 17420(%rsp)       # 4-byte Spill
	movl	%edi, 17416(%rsp)       # 4-byte Spill
	jg	.LBB68_188
	jmp	.LBB68_189
.LBB68_193:                             # %for.end
	xorl	%eax, %eax
	movl	$256, %ecx              # imm = 0x100
	movl	%ecx, %edx
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$3196, %rsi             # imm = 0xC7C
	movq	%rsi, %rdi
	movl	%eax, %esi
	movl	%eax, 17384(%rsp)       # 4-byte Spill
	callq	memset
	movl	17896(%rsp), %eax       # 4-byte Reload
	movl	17900(%rsp), %ecx       # 4-byte Reload
	movl	17904(%rsp), %esi       # 4-byte Reload
	movl	17908(%rsp), %r8d       # 4-byte Reload
	movl	17912(%rsp), %r9d       # 4-byte Reload
	movl	17916(%rsp), %r10d      # 4-byte Reload
	movl	17920(%rsp), %r11d      # 4-byte Reload
	movl	17924(%rsp), %ebx       # 4-byte Reload
	movl	17928(%rsp), %ebp       # 4-byte Reload
	movl	17932(%rsp), %r14d      # 4-byte Reload
	movl	17936(%rsp), %r15d      # 4-byte Reload
	movl	17940(%rsp), %r12d      # 4-byte Reload
	movl	17944(%rsp), %r13d      # 4-byte Reload
	movl	17948(%rsp), %edi       # 4-byte Reload
	movl	17952(%rsp), %edx       # 4-byte Reload
	movl	%eax, 17380(%rsp)       # 4-byte Spill
	movl	17956(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17376(%rsp)       # 4-byte Spill
	movl	17960(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17372(%rsp)       # 4-byte Spill
	movl	17964(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17368(%rsp)       # 4-byte Spill
	movl	17968(%rsp), %eax       # 4-byte Reload
	movl	%esi, 17364(%rsp)       # 4-byte Spill
	movq	17880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17352(%rsp)       # 8-byte Spill
	movq	17976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17344(%rsp)       # 8-byte Spill
	movq	17984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17336(%rsp)       # 8-byte Spill
	movq	17992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17328(%rsp)       # 8-byte Spill
	movq	18000(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17320(%rsp)       # 8-byte Spill
	movq	18008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17312(%rsp)       # 8-byte Spill
	movq	18016(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17304(%rsp)       # 8-byte Spill
	movq	18024(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17296(%rsp)       # 8-byte Spill
	movq	18032(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17288(%rsp)       # 8-byte Spill
	movq	18040(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17280(%rsp)       # 8-byte Spill
	movq	18048(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17272(%rsp)       # 8-byte Spill
	movq	18056(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17264(%rsp)       # 8-byte Spill
	movq	17776(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17256(%rsp)       # 8-byte Spill
	movq	17784(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17248(%rsp)       # 8-byte Spill
	movq	17792(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17240(%rsp)       # 8-byte Spill
	movq	17800(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17232(%rsp)       # 8-byte Spill
	movq	17808(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17224(%rsp)       # 8-byte Spill
	movq	17816(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17216(%rsp)       # 8-byte Spill
	movq	17824(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17208(%rsp)       # 8-byte Spill
	movq	17832(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17200(%rsp)       # 8-byte Spill
	movq	17840(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17192(%rsp)       # 8-byte Spill
	movq	17848(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17184(%rsp)       # 8-byte Spill
	movq	17856(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17176(%rsp)       # 8-byte Spill
	movq	17864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17168(%rsp)       # 8-byte Spill
	movq	17872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 17160(%rsp)       # 8-byte Spill
	movq	18064(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 17156(%rsp)       # 4-byte Spill
	movl	17892(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17152(%rsp)       # 4-byte Spill
	movl	17384(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17148(%rsp)       # 4-byte Spill
	movl	%ecx, 17144(%rsp)       # 4-byte Spill
	movq	%rsi, 17136(%rsp)       # 8-byte Spill
	movl	%r8d, 17132(%rsp)       # 4-byte Spill
	movl	%r9d, 17128(%rsp)       # 4-byte Spill
	movl	%r10d, 17124(%rsp)      # 4-byte Spill
	movl	%r11d, 17120(%rsp)      # 4-byte Spill
	movl	%ebx, 17116(%rsp)       # 4-byte Spill
	movl	%ebp, 17112(%rsp)       # 4-byte Spill
	movl	%r14d, 17108(%rsp)      # 4-byte Spill
	movl	%r15d, 17104(%rsp)      # 4-byte Spill
	movl	%r12d, 17100(%rsp)      # 4-byte Spill
	movl	%r13d, 17096(%rsp)      # 4-byte Spill
	movl	%edi, 17092(%rsp)       # 4-byte Spill
	movl	%edx, 17088(%rsp)       # 4-byte Spill
.LBB68_194:                             # %for.cond1166
	movl	17148(%rsp), %eax       # 4-byte Reload
	movl	17152(%rsp), %ecx       # 4-byte Reload
	movq	17136(%rsp), %rdx       # 8-byte Reload
	movq	17160(%rsp), %rsi       # 8-byte Reload
	movq	17168(%rsp), %rdi       # 8-byte Reload
	movq	17176(%rsp), %r8        # 8-byte Reload
	movq	17184(%rsp), %r9        # 8-byte Reload
	movq	17192(%rsp), %r10       # 8-byte Reload
	movq	17200(%rsp), %r11       # 8-byte Reload
	movq	17208(%rsp), %rbx       # 8-byte Reload
	movq	17216(%rsp), %r14       # 8-byte Reload
	movq	17224(%rsp), %r15       # 8-byte Reload
	movq	17232(%rsp), %r12       # 8-byte Reload
	movq	17240(%rsp), %r13       # 8-byte Reload
	movq	17248(%rsp), %rbp       # 8-byte Reload
	movq	%rdx, 17080(%rsp)       # 8-byte Spill
	movq	17256(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17072(%rsp)       # 8-byte Spill
	movq	17264(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17064(%rsp)       # 8-byte Spill
	movq	17272(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17056(%rsp)       # 8-byte Spill
	movq	17280(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17048(%rsp)       # 8-byte Spill
	movq	17288(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17040(%rsp)       # 8-byte Spill
	movq	17296(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17032(%rsp)       # 8-byte Spill
	movq	17304(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17024(%rsp)       # 8-byte Spill
	movq	17312(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17016(%rsp)       # 8-byte Spill
	movq	17320(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17008(%rsp)       # 8-byte Spill
	movq	17328(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17000(%rsp)       # 8-byte Spill
	movq	17336(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16992(%rsp)       # 8-byte Spill
	movq	17344(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16984(%rsp)       # 8-byte Spill
	movq	17352(%rsp), %rdx       # 8-byte Reload
	movl	%eax, 16980(%rsp)       # 4-byte Spill
	movl	17156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16976(%rsp)       # 4-byte Spill
	movl	17368(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16972(%rsp)       # 4-byte Spill
	movl	17372(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16968(%rsp)       # 4-byte Spill
	movl	17376(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16964(%rsp)       # 4-byte Spill
	movl	17088(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16960(%rsp)       # 4-byte Spill
	movl	17092(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16956(%rsp)       # 4-byte Spill
	movl	17096(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16952(%rsp)       # 4-byte Spill
	movl	17100(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16948(%rsp)       # 4-byte Spill
	movl	17104(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16944(%rsp)       # 4-byte Spill
	movl	17108(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16940(%rsp)       # 4-byte Spill
	movl	17112(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16936(%rsp)       # 4-byte Spill
	movl	17116(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16932(%rsp)       # 4-byte Spill
	movl	17120(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16928(%rsp)       # 4-byte Spill
	movl	17124(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16924(%rsp)       # 4-byte Spill
	movl	17128(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16920(%rsp)       # 4-byte Spill
	movl	17132(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16916(%rsp)       # 4-byte Spill
	movl	17364(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16912(%rsp)       # 4-byte Spill
	movl	17144(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16908(%rsp)       # 4-byte Spill
	movl	17380(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16904(%rsp)       # 4-byte Spill
	movl	16980(%rsp), %eax       # 4-byte Reload
	cmpl	$16, %eax
	movl	%ecx, 16900(%rsp)       # 4-byte Spill
	movq	%rdx, 16888(%rsp)       # 8-byte Spill
	movq	%rsi, 16880(%rsp)       # 8-byte Spill
	movq	%rdi, 16872(%rsp)       # 8-byte Spill
	movq	%r8, 16864(%rsp)        # 8-byte Spill
	movq	%r9, 16856(%rsp)        # 8-byte Spill
	movq	%r10, 16848(%rsp)       # 8-byte Spill
	movq	%r11, 16840(%rsp)       # 8-byte Spill
	movq	%rbx, 16832(%rsp)       # 8-byte Spill
	movq	%r14, 16824(%rsp)       # 8-byte Spill
	movq	%r15, 16816(%rsp)       # 8-byte Spill
	movq	%r12, 16808(%rsp)       # 8-byte Spill
	movq	%r13, 16800(%rsp)       # 8-byte Spill
	movq	%rbp, 16792(%rsp)       # 8-byte Spill
	jge	.LBB68_208
# %bb.195:                              # %for.body1169
	xorl	%eax, %eax
	movl	16980(%rsp), %ecx       # 4-byte Reload
	movslq	%ecx, %rdx
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movb	3452(%rsi,%rdx), %dil
	movl	$17659, 38596(%rsp)     # imm = 0x44FB
	cmpb	$0, %dil
	movl	16904(%rsp), %r8d       # 4-byte Reload
	movl	16908(%rsp), %r9d       # 4-byte Reload
	movl	16912(%rsp), %r10d      # 4-byte Reload
	movl	16916(%rsp), %r11d      # 4-byte Reload
	movl	16920(%rsp), %ebx       # 4-byte Reload
	movl	16924(%rsp), %ebp       # 4-byte Reload
	movl	16928(%rsp), %r14d      # 4-byte Reload
	movl	16932(%rsp), %r15d      # 4-byte Reload
	movl	16936(%rsp), %r12d      # 4-byte Reload
	movl	16940(%rsp), %r13d      # 4-byte Reload
	movl	16944(%rsp), %ecx       # 4-byte Reload
	movl	16948(%rsp), %esi       # 4-byte Reload
	movl	16952(%rsp), %edi       # 4-byte Reload
	movl	16956(%rsp), %edx       # 4-byte Reload
	movl	%eax, 16788(%rsp)       # 4-byte Spill
	movl	16960(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16784(%rsp)       # 4-byte Spill
	movl	16964(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16780(%rsp)       # 4-byte Spill
	movl	16968(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16776(%rsp)       # 4-byte Spill
	movl	16972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16772(%rsp)       # 4-byte Spill
	movl	16976(%rsp), %eax       # 4-byte Reload
	movl	%esi, 16768(%rsp)       # 4-byte Spill
	movq	16888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16760(%rsp)       # 8-byte Spill
	movq	16984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16752(%rsp)       # 8-byte Spill
	movq	16992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16744(%rsp)       # 8-byte Spill
	movq	17000(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16736(%rsp)       # 8-byte Spill
	movq	17008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16728(%rsp)       # 8-byte Spill
	movq	17016(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16720(%rsp)       # 8-byte Spill
	movq	17024(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16712(%rsp)       # 8-byte Spill
	movq	17032(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16704(%rsp)       # 8-byte Spill
	movq	17040(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16696(%rsp)       # 8-byte Spill
	movq	17048(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16688(%rsp)       # 8-byte Spill
	movq	17056(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16680(%rsp)       # 8-byte Spill
	movq	17064(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16672(%rsp)       # 8-byte Spill
	movq	17072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16664(%rsp)       # 8-byte Spill
	movq	16792(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16656(%rsp)       # 8-byte Spill
	movq	16800(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16648(%rsp)       # 8-byte Spill
	movq	16808(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16640(%rsp)       # 8-byte Spill
	movq	16816(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16632(%rsp)       # 8-byte Spill
	movq	16824(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16624(%rsp)       # 8-byte Spill
	movq	16832(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16616(%rsp)       # 8-byte Spill
	movq	16840(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16608(%rsp)       # 8-byte Spill
	movq	16848(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16600(%rsp)       # 8-byte Spill
	movq	16856(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16592(%rsp)       # 8-byte Spill
	movq	16864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16584(%rsp)       # 8-byte Spill
	movq	16872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16576(%rsp)       # 8-byte Spill
	movq	16880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16568(%rsp)       # 8-byte Spill
	movq	17080(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 16564(%rsp)       # 4-byte Spill
	movl	16788(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16560(%rsp)       # 4-byte Spill
	movl	16980(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16556(%rsp)       # 4-byte Spill
	movl	16904(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16552(%rsp)       # 4-byte Spill
	movl	16908(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16548(%rsp)       # 4-byte Spill
	movl	16912(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16544(%rsp)       # 4-byte Spill
	movl	16916(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16540(%rsp)       # 4-byte Spill
	movl	16920(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16536(%rsp)       # 4-byte Spill
	movl	16924(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16532(%rsp)       # 4-byte Spill
	movl	16928(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16528(%rsp)       # 4-byte Spill
	movl	16932(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16524(%rsp)       # 4-byte Spill
	movl	16936(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16520(%rsp)       # 4-byte Spill
	movl	16940(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16516(%rsp)       # 4-byte Spill
	movl	16944(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16512(%rsp)       # 4-byte Spill
	movl	16948(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16508(%rsp)       # 4-byte Spill
	movl	16952(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16504(%rsp)       # 4-byte Spill
	movl	16956(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16500(%rsp)       # 4-byte Spill
	movl	16960(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16496(%rsp)       # 4-byte Spill
	movl	16964(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16492(%rsp)       # 4-byte Spill
	movl	16968(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16488(%rsp)       # 4-byte Spill
	movl	16972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16484(%rsp)       # 4-byte Spill
	movl	16976(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 16472(%rsp)       # 8-byte Spill
	movq	16888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16464(%rsp)       # 8-byte Spill
	movq	16984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16456(%rsp)       # 8-byte Spill
	movq	16992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16448(%rsp)       # 8-byte Spill
	movq	17000(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16440(%rsp)       # 8-byte Spill
	movq	17008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16432(%rsp)       # 8-byte Spill
	movq	17016(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16424(%rsp)       # 8-byte Spill
	movq	17024(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16416(%rsp)       # 8-byte Spill
	movq	17032(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16408(%rsp)       # 8-byte Spill
	movq	17040(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16400(%rsp)       # 8-byte Spill
	movq	17048(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16392(%rsp)       # 8-byte Spill
	movq	17056(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16384(%rsp)       # 8-byte Spill
	movq	17064(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16376(%rsp)       # 8-byte Spill
	movq	17072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16368(%rsp)       # 8-byte Spill
	movq	16792(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16360(%rsp)       # 8-byte Spill
	movq	16800(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16352(%rsp)       # 8-byte Spill
	movq	16808(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16344(%rsp)       # 8-byte Spill
	movq	16816(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16336(%rsp)       # 8-byte Spill
	movq	16824(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16328(%rsp)       # 8-byte Spill
	movq	16832(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16320(%rsp)       # 8-byte Spill
	movq	16840(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16312(%rsp)       # 8-byte Spill
	movq	16848(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16304(%rsp)       # 8-byte Spill
	movq	16856(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16296(%rsp)       # 8-byte Spill
	movq	16864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16288(%rsp)       # 8-byte Spill
	movq	16872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16280(%rsp)       # 8-byte Spill
	movq	16880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16272(%rsp)       # 8-byte Spill
	movq	17080(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 16268(%rsp)       # 4-byte Spill
	movl	16900(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16264(%rsp)       # 4-byte Spill
	movl	16980(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16260(%rsp)       # 4-byte Spill
	movl	%ecx, 16256(%rsp)       # 4-byte Spill
	movq	%rsi, 16248(%rsp)       # 8-byte Spill
	movl	%r8d, 16244(%rsp)       # 4-byte Spill
	movl	%r9d, 16240(%rsp)       # 4-byte Spill
	movl	%r10d, 16236(%rsp)      # 4-byte Spill
	movl	%r11d, 16232(%rsp)      # 4-byte Spill
	movl	%ebx, 16228(%rsp)       # 4-byte Spill
	movl	%ebp, 16224(%rsp)       # 4-byte Spill
	movl	%r14d, 16220(%rsp)      # 4-byte Spill
	movl	%r15d, 16216(%rsp)      # 4-byte Spill
	movl	%r12d, 16212(%rsp)      # 4-byte Spill
	movl	%r13d, 16208(%rsp)      # 4-byte Spill
	movl	%edi, 16204(%rsp)       # 4-byte Spill
	movl	%edx, 16200(%rsp)       # 4-byte Spill
	je	.LBB68_207
.LBB68_196:                             # %for.cond1175
	movl	16556(%rsp), %eax       # 4-byte Reload
	movl	16560(%rsp), %ecx       # 4-byte Reload
	movq	16472(%rsp), %rdx       # 8-byte Reload
	movq	16568(%rsp), %rsi       # 8-byte Reload
	movq	16576(%rsp), %rdi       # 8-byte Reload
	movq	16584(%rsp), %r8        # 8-byte Reload
	movq	16592(%rsp), %r9        # 8-byte Reload
	movq	16600(%rsp), %r10       # 8-byte Reload
	movq	16608(%rsp), %r11       # 8-byte Reload
	movq	16616(%rsp), %rbx       # 8-byte Reload
	movq	16624(%rsp), %r14       # 8-byte Reload
	movq	16632(%rsp), %r15       # 8-byte Reload
	movq	16640(%rsp), %r12       # 8-byte Reload
	movq	16648(%rsp), %r13       # 8-byte Reload
	movq	16656(%rsp), %rbp       # 8-byte Reload
	movq	%rdx, 16192(%rsp)       # 8-byte Spill
	movq	16664(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16184(%rsp)       # 8-byte Spill
	movq	16672(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16176(%rsp)       # 8-byte Spill
	movq	16680(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16168(%rsp)       # 8-byte Spill
	movq	16688(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16160(%rsp)       # 8-byte Spill
	movq	16696(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16152(%rsp)       # 8-byte Spill
	movq	16704(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16144(%rsp)       # 8-byte Spill
	movq	16712(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16136(%rsp)       # 8-byte Spill
	movq	16720(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16128(%rsp)       # 8-byte Spill
	movq	16728(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16120(%rsp)       # 8-byte Spill
	movq	16736(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16112(%rsp)       # 8-byte Spill
	movq	16744(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16104(%rsp)       # 8-byte Spill
	movq	16752(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16096(%rsp)       # 8-byte Spill
	movq	16760(%rsp), %rdx       # 8-byte Reload
	movl	%eax, 16092(%rsp)       # 4-byte Spill
	movl	16564(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16088(%rsp)       # 4-byte Spill
	movl	16772(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16084(%rsp)       # 4-byte Spill
	movl	16776(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16080(%rsp)       # 4-byte Spill
	movl	16780(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16076(%rsp)       # 4-byte Spill
	movl	16784(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16072(%rsp)       # 4-byte Spill
	movl	16200(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16068(%rsp)       # 4-byte Spill
	movl	16204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16064(%rsp)       # 4-byte Spill
	movl	16768(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16060(%rsp)       # 4-byte Spill
	movl	16256(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16056(%rsp)       # 4-byte Spill
	movl	16208(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16052(%rsp)       # 4-byte Spill
	movl	16212(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16048(%rsp)       # 4-byte Spill
	movl	16216(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16044(%rsp)       # 4-byte Spill
	movl	16220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16040(%rsp)       # 4-byte Spill
	movl	16224(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16036(%rsp)       # 4-byte Spill
	movl	16228(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16032(%rsp)       # 4-byte Spill
	movl	16232(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16028(%rsp)       # 4-byte Spill
	movl	16236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16024(%rsp)       # 4-byte Spill
	movl	16240(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16020(%rsp)       # 4-byte Spill
	movl	16244(%rsp), %eax       # 4-byte Reload
	cmpl	$16, %ecx
	movl	%eax, 16016(%rsp)       # 4-byte Spill
	movl	%eax, 37708(%rsp)       # 4-byte Spill
	movl	16020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37704(%rsp)       # 4-byte Spill
	movl	16024(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37700(%rsp)       # 4-byte Spill
	movl	16028(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37696(%rsp)       # 4-byte Spill
	movl	16032(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37692(%rsp)       # 4-byte Spill
	movl	16036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37688(%rsp)       # 4-byte Spill
	movl	16040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37684(%rsp)       # 4-byte Spill
	movl	16044(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37680(%rsp)       # 4-byte Spill
	movl	16048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37676(%rsp)       # 4-byte Spill
	movl	16052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37672(%rsp)       # 4-byte Spill
	movl	16056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37668(%rsp)       # 4-byte Spill
	movl	16060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37664(%rsp)       # 4-byte Spill
	movl	16064(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37660(%rsp)       # 4-byte Spill
	movl	16068(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37656(%rsp)       # 4-byte Spill
	movl	16072(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37652(%rsp)       # 4-byte Spill
	movl	16076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37648(%rsp)       # 4-byte Spill
	movl	16080(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37644(%rsp)       # 4-byte Spill
	movl	16084(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37640(%rsp)       # 4-byte Spill
	movl	16088(%rsp), %eax       # 4-byte Reload
	movq	%rdx, 16008(%rsp)       # 8-byte Spill
	movq	%rdx, 37624(%rsp)       # 8-byte Spill
	movq	16096(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 37616(%rsp)       # 8-byte Spill
	movq	16104(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 37608(%rsp)       # 8-byte Spill
	movq	16112(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 37600(%rsp)       # 8-byte Spill
	movq	16120(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 37592(%rsp)       # 8-byte Spill
	movq	16128(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 37584(%rsp)       # 8-byte Spill
	movq	16136(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 37576(%rsp)       # 8-byte Spill
	movq	16144(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 37568(%rsp)       # 8-byte Spill
	movq	16152(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 37560(%rsp)       # 8-byte Spill
	movq	16160(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 37552(%rsp)       # 8-byte Spill
	movq	16168(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 37544(%rsp)       # 8-byte Spill
	movq	16176(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 37536(%rsp)       # 8-byte Spill
	movq	16184(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 37528(%rsp)       # 8-byte Spill
	movq	%rbp, %rdx
	movq	%rdx, 37520(%rsp)       # 8-byte Spill
	movq	%r13, %rdx
	movq	%rdx, 37512(%rsp)       # 8-byte Spill
	movq	%r12, %rdx
	movq	%rdx, 37504(%rsp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	%rdx, 37496(%rsp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rdx, 37488(%rsp)       # 8-byte Spill
	movq	%rbx, %rdx
	movq	%rdx, 37480(%rsp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	%rdx, 37472(%rsp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	%rdx, 37464(%rsp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rdx, 37456(%rsp)       # 8-byte Spill
	movq	%r8, %rdx
	movq	%rdx, 37448(%rsp)       # 8-byte Spill
	movq	%rdi, %rdx
	movq	%rdx, 37440(%rsp)       # 8-byte Spill
	movq	%rsi, %rdx
	movq	%rdx, 37432(%rsp)       # 8-byte Spill
	movq	16192(%rsp), %rdx       # 8-byte Reload
	movl	%eax, 37428(%rsp)       # 4-byte Spill
	movl	%ecx, %eax
	movl	%eax, 37424(%rsp)       # 4-byte Spill
	movl	16092(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37420(%rsp)       # 4-byte Spill
	movl	16016(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16552(%rsp)       # 4-byte Spill
	movl	16020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16548(%rsp)       # 4-byte Spill
	movl	16024(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16544(%rsp)       # 4-byte Spill
	movl	16028(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16540(%rsp)       # 4-byte Spill
	movl	16032(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16536(%rsp)       # 4-byte Spill
	movl	16036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16532(%rsp)       # 4-byte Spill
	movl	16040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16528(%rsp)       # 4-byte Spill
	movl	16044(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16524(%rsp)       # 4-byte Spill
	movl	16048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16520(%rsp)       # 4-byte Spill
	movl	16052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16516(%rsp)       # 4-byte Spill
	movl	16056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16512(%rsp)       # 4-byte Spill
	movl	16060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16508(%rsp)       # 4-byte Spill
	movl	16064(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16504(%rsp)       # 4-byte Spill
	movl	16068(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16500(%rsp)       # 4-byte Spill
	movl	16072(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16496(%rsp)       # 4-byte Spill
	movl	16076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16492(%rsp)       # 4-byte Spill
	movl	16080(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16488(%rsp)       # 4-byte Spill
	movl	16084(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16484(%rsp)       # 4-byte Spill
	movl	16088(%rsp), %eax       # 4-byte Reload
	movq	%rdx, 37344(%rsp)       # 8-byte Spill
	movq	16008(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16464(%rsp)       # 8-byte Spill
	movq	16096(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16456(%rsp)       # 8-byte Spill
	movq	16104(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16448(%rsp)       # 8-byte Spill
	movq	16112(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16440(%rsp)       # 8-byte Spill
	movq	16120(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16432(%rsp)       # 8-byte Spill
	movq	16128(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16424(%rsp)       # 8-byte Spill
	movq	16136(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16416(%rsp)       # 8-byte Spill
	movq	16144(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16408(%rsp)       # 8-byte Spill
	movq	16152(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16400(%rsp)       # 8-byte Spill
	movq	16160(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16392(%rsp)       # 8-byte Spill
	movq	16168(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16384(%rsp)       # 8-byte Spill
	movq	16176(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16376(%rsp)       # 8-byte Spill
	movq	16184(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 16368(%rsp)       # 8-byte Spill
	movq	16192(%rsp), %rdx       # 8-byte Reload
	movl	%eax, 16268(%rsp)       # 4-byte Spill
	movl	16092(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16260(%rsp)       # 4-byte Spill
	movq	%rsi, 16272(%rsp)       # 8-byte Spill
	movq	%rdx, 16248(%rsp)       # 8-byte Spill
	movq	%rdi, 16280(%rsp)       # 8-byte Spill
	movq	%r8, 16288(%rsp)        # 8-byte Spill
	movq	%r9, 16296(%rsp)        # 8-byte Spill
	movq	%r10, 16304(%rsp)       # 8-byte Spill
	movq	%r11, 16312(%rsp)       # 8-byte Spill
	movq	%rbx, 16320(%rsp)       # 8-byte Spill
	movq	%r14, 16328(%rsp)       # 8-byte Spill
	movq	%r15, 16336(%rsp)       # 8-byte Spill
	movq	%r12, 16344(%rsp)       # 8-byte Spill
	movq	%r13, 16352(%rsp)       # 8-byte Spill
	movq	%rbp, 16360(%rsp)       # 8-byte Spill
	movl	%ecx, 16264(%rsp)       # 4-byte Spill
	jge	.LBB68_207
.LBB68_197:                             # %sw.bb1179
	movl	37420(%rsp), %eax       # 4-byte Reload
	movl	37424(%rsp), %ecx       # 4-byte Reload
	movq	37344(%rsp), %rdx       # 8-byte Reload
	movq	37432(%rsp), %rsi       # 8-byte Reload
	movq	37440(%rsp), %rdi       # 8-byte Reload
	movq	37448(%rsp), %r8        # 8-byte Reload
	movq	37456(%rsp), %r9        # 8-byte Reload
	movq	37464(%rsp), %r10       # 8-byte Reload
	movq	37472(%rsp), %r11       # 8-byte Reload
	movq	37480(%rsp), %rbx       # 8-byte Reload
	movq	37488(%rsp), %r14       # 8-byte Reload
	movq	37496(%rsp), %r15       # 8-byte Reload
	movq	37504(%rsp), %r12       # 8-byte Reload
	movq	37512(%rsp), %r13       # 8-byte Reload
	movq	37520(%rsp), %rbp       # 8-byte Reload
	movq	%rdx, 16000(%rsp)       # 8-byte Spill
	movq	37528(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15992(%rsp)       # 8-byte Spill
	movq	37536(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15984(%rsp)       # 8-byte Spill
	movq	37544(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15976(%rsp)       # 8-byte Spill
	movq	37552(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15968(%rsp)       # 8-byte Spill
	movq	37560(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15960(%rsp)       # 8-byte Spill
	movq	37568(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15952(%rsp)       # 8-byte Spill
	movq	37576(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15944(%rsp)       # 8-byte Spill
	movq	37584(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15936(%rsp)       # 8-byte Spill
	movq	37592(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15928(%rsp)       # 8-byte Spill
	movq	37600(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15920(%rsp)       # 8-byte Spill
	movq	37608(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15912(%rsp)       # 8-byte Spill
	movq	37616(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15904(%rsp)       # 8-byte Spill
	movq	37624(%rsp), %rdx       # 8-byte Reload
	movl	%eax, 15900(%rsp)       # 4-byte Spill
	movl	37428(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15896(%rsp)       # 4-byte Spill
	movl	37640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15892(%rsp)       # 4-byte Spill
	movl	37644(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15888(%rsp)       # 4-byte Spill
	movl	37648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15884(%rsp)       # 4-byte Spill
	movl	37652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15880(%rsp)       # 4-byte Spill
	movl	37656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15876(%rsp)       # 4-byte Spill
	movl	37660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15872(%rsp)       # 4-byte Spill
	movl	37664(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15868(%rsp)       # 4-byte Spill
	movl	37668(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15864(%rsp)       # 4-byte Spill
	movl	37672(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15860(%rsp)       # 4-byte Spill
	movl	37676(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15856(%rsp)       # 4-byte Spill
	movl	37680(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15852(%rsp)       # 4-byte Spill
	movl	37684(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15848(%rsp)       # 4-byte Spill
	movl	37688(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15844(%rsp)       # 4-byte Spill
	movl	37692(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15840(%rsp)       # 4-byte Spill
	movl	37696(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15836(%rsp)       # 4-byte Spill
	movl	37700(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15832(%rsp)       # 4-byte Spill
	movl	37704(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15828(%rsp)       # 4-byte Spill
	movl	37708(%rsp), %eax       # 4-byte Reload
	movq	%rdx, 15816(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rdx       # 8-byte Reload
	movl	$29, (%rdx)
	movl	$17662, 38596(%rsp)     # imm = 0x44FE
	movq	38576(%rsp), %rdx       # 8-byte Reload
	addq	$36, %rdx
	movq	%rdx, 15808(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movl	36(%rdx), %edx
	movl	$17667, 38596(%rsp)     # imm = 0x4503
	movq	%rsi, 15800(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$32, %rsi
	cmpl	$0, %edx
	movl	%eax, 15796(%rsp)       # 4-byte Spill
	movl	%ecx, 15792(%rsp)       # 4-byte Spill
	movl	%edx, 15788(%rsp)       # 4-byte Spill
	movq	%rsi, 15776(%rsp)       # 8-byte Spill
	movq	%rdi, 15768(%rsp)       # 8-byte Spill
	movq	%r8, 15760(%rsp)        # 8-byte Spill
	movq	%r9, 15752(%rsp)        # 8-byte Spill
	movq	%r10, 15744(%rsp)       # 8-byte Spill
	movq	%r11, 15736(%rsp)       # 8-byte Spill
	movq	%rbx, 15728(%rsp)       # 8-byte Spill
	movq	%r14, 15720(%rsp)       # 8-byte Spill
	movq	%r15, 15712(%rsp)       # 8-byte Spill
	movq	%r12, 15704(%rsp)       # 8-byte Spill
	movq	%r13, 15696(%rsp)       # 8-byte Spill
	movq	%rbp, 15688(%rsp)       # 8-byte Spill
	jg	.LBB68_199
# %bb.198:                              # %if.end1196.preheader
	movl	15788(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15684(%rsp)       # 4-byte Spill
	jmp	.LBB68_201
.LBB68_199:                             # %sw.bb1179.if.then1186_crit_edge
	movq	15776(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17674, 38596(%rsp)     # imm = 0x450A
	movl	15788(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 15680(%rsp)       # 4-byte Spill
	movl	%edx, 15676(%rsp)       # 4-byte Spill
.LBB68_200:                             # %if.then1186
	movl	15676(%rsp), %eax       # 4-byte Reload
	movl	15680(%rsp), %ecx       # 4-byte Reload
	movl	$1, %edx
	addl	$-1, %eax
	movq	15808(%rsp), %rsi       # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$17680, 38596(%rsp)     # imm = 0x4510
	movl	%ecx, 15672(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	15672(%rsp), %eax       # 4-byte Reload
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB68_206
	jmp	.LBB68_205
.LBB68_201:                             # %if.end1196
                                        # =>This Inner Loop Header: Depth=1
	movl	15684(%rsp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$17682, 38596(%rsp)     # imm = 0x4512
	movq	%rsi, %rdi
	addq	$8, %rdi
	movl	8(%rsi), %r8d
	movl	$17685, 38596(%rsp)     # imm = 0x4515
	cmpl	$0, %r8d
	movl	15876(%rsp), %r9d       # 4-byte Reload
	movq	15920(%rsp), %r10       # 8-byte Reload
	movq	15928(%rsp), %r11       # 8-byte Reload
	movq	15936(%rsp), %rbx       # 8-byte Reload
	movq	15944(%rsp), %r14       # 8-byte Reload
	movq	15952(%rsp), %r15       # 8-byte Reload
	movq	15960(%rsp), %r12       # 8-byte Reload
	movq	15968(%rsp), %r13       # 8-byte Reload
	movq	15976(%rsp), %rbp       # 8-byte Reload
	movq	15984(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25456(%rsp)       # 8-byte Spill
	movq	15992(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25448(%rsp)       # 8-byte Spill
	movq	15688(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25440(%rsp)       # 8-byte Spill
	movq	15696(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25432(%rsp)       # 8-byte Spill
	movq	15704(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25424(%rsp)       # 8-byte Spill
	movq	15712(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25416(%rsp)       # 8-byte Spill
	movq	15720(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25408(%rsp)       # 8-byte Spill
	movq	15728(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25400(%rsp)       # 8-byte Spill
	movq	15736(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25392(%rsp)       # 8-byte Spill
	movq	15744(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25384(%rsp)       # 8-byte Spill
	movq	15752(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25376(%rsp)       # 8-byte Spill
	movq	15760(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25368(%rsp)       # 8-byte Spill
	movq	15768(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25360(%rsp)       # 8-byte Spill
	movq	15800(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25352(%rsp)       # 8-byte Spill
	movq	16000(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25344(%rsp)       # 8-byte Spill
	movq	15912(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25336(%rsp)       # 8-byte Spill
	movq	15904(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25248(%rsp)       # 8-byte Spill
	movq	15816(%rsp), %rdx       # 8-byte Reload
	movl	%eax, 15668(%rsp)       # 4-byte Spill
	movl	15896(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	15892(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	15888(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	15884(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	15880(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	15872(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	15868(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	15864(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	15860(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	15856(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	15852(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	15848(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	15844(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	15840(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	15836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	15832(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	15828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	15796(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	15792(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	15900(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%rbp, 25464(%rsp)       # 8-byte Spill
	movq	%rdx, 25232(%rsp)       # 8-byte Spill
	movq	%rsi, 15656(%rsp)       # 8-byte Spill
	movq	%rdi, 15648(%rsp)       # 8-byte Spill
	movl	%r8d, 15644(%rsp)       # 4-byte Spill
	movl	%r9d, 25332(%rsp)       # 4-byte Spill
	movq	%r10, 25520(%rsp)       # 8-byte Spill
	movq	%r11, 25512(%rsp)       # 8-byte Spill
	movq	%rbx, 25504(%rsp)       # 8-byte Spill
	movq	%r14, 25496(%rsp)       # 8-byte Spill
	movq	%r15, 25488(%rsp)       # 8-byte Spill
	movq	%r12, 25480(%rsp)       # 8-byte Spill
	movq	%r13, 25472(%rsp)       # 8-byte Spill
	movl	%ecx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.202:                              # %if.end1202
                                        #   in Loop: Header=BB68_201 Depth=1
	movq	15776(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17688, 38596(%rsp)     # imm = 0x4518
	shll	$8, %ecx
	movq	15656(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$17689, 38596(%rsp)     # imm = 0x4519
	movb	(%rsi), %dil
	movl	$17691, 38596(%rsp)     # imm = 0x451B
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$17692, 38596(%rsp)     # imm = 0x451C
	movl	15668(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	15808(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$17694, 38596(%rsp)     # imm = 0x451E
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$17696, 38596(%rsp)     # imm = 0x4520
	movl	15644(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	15648(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$17698, 38596(%rsp)     # imm = 0x4522
	movl	12(%rdx), %r10d
	movl	$17700, 38596(%rsp)     # imm = 0x4524
	addl	$1, %r10d
	movl	%r10d, 12(%rdx)
	movl	$17704, 38596(%rsp)     # imm = 0x4528
	cmpl	$0, %r10d
	movl	%ecx, 15640(%rsp)       # 4-byte Spill
	movl	%r8d, 15636(%rsp)       # 4-byte Spill
	jne	.LBB68_204
# %bb.203:                              # %if.then1225
                                        #   in Loop: Header=BB68_201 Depth=1
	movq	15656(%rsp), %rax       # 8-byte Reload
	movl	16(%rax), %ecx
	movl	$17706, 38596(%rsp)     # imm = 0x452A
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movl	$17714, 38596(%rsp)     # imm = 0x4532
.LBB68_204:                             # %if.end1229
                                        #   in Loop: Header=BB68_201 Depth=1
	movl	15668(%rsp), %eax       # 4-byte Reload
	cmpl	$-8, %eax
	movl	15640(%rsp), %ecx       # 4-byte Reload
	movl	15636(%rsp), %edx       # 4-byte Reload
	movl	15636(%rsp), %esi       # 4-byte Reload
	movl	%ecx, 15680(%rsp)       # 4-byte Spill
	movl	%edx, 15676(%rsp)       # 4-byte Spill
	movl	%esi, 15684(%rsp)       # 4-byte Spill
	jg	.LBB68_200
	jmp	.LBB68_201
.LBB68_205:                             # %if.then1234
	movl	15900(%rsp), %eax       # 4-byte Reload
	shll	$4, %eax
	movl	15792(%rsp), %ecx       # 4-byte Reload
	addl	%ecx, %eax
	movslq	%eax, %rdx
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movb	$1, 3196(%rsi,%rdx)
	movl	$17720, 38596(%rsp)     # imm = 0x4538
.LBB68_206:                             # %for.inc1241
	movl	15792(%rsp), %eax       # 4-byte Reload
	addl	$1, %eax
	movl	15796(%rsp), %ecx       # 4-byte Reload
	movl	15828(%rsp), %edx       # 4-byte Reload
	movl	15832(%rsp), %esi       # 4-byte Reload
	movl	15836(%rsp), %edi       # 4-byte Reload
	movl	15840(%rsp), %r8d       # 4-byte Reload
	movl	15844(%rsp), %r9d       # 4-byte Reload
	movl	15848(%rsp), %r10d      # 4-byte Reload
	movl	15852(%rsp), %r11d      # 4-byte Reload
	movl	15856(%rsp), %ebx       # 4-byte Reload
	movl	15860(%rsp), %ebp       # 4-byte Reload
	movl	15864(%rsp), %r14d      # 4-byte Reload
	movl	15868(%rsp), %r15d      # 4-byte Reload
	movl	15872(%rsp), %r12d      # 4-byte Reload
	movl	15876(%rsp), %r13d      # 4-byte Reload
	movl	%eax, 15632(%rsp)       # 4-byte Spill
	movl	15880(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16784(%rsp)       # 4-byte Spill
	movl	15884(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16780(%rsp)       # 4-byte Spill
	movl	15888(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16776(%rsp)       # 4-byte Spill
	movl	15892(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16772(%rsp)       # 4-byte Spill
	movl	15896(%rsp), %eax       # 4-byte Reload
	movl	%esi, 16236(%rsp)       # 4-byte Spill
	movq	15816(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16760(%rsp)       # 8-byte Spill
	movq	15904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16752(%rsp)       # 8-byte Spill
	movq	15912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16744(%rsp)       # 8-byte Spill
	movq	15920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16736(%rsp)       # 8-byte Spill
	movq	15928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16728(%rsp)       # 8-byte Spill
	movq	15936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16720(%rsp)       # 8-byte Spill
	movq	15944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16712(%rsp)       # 8-byte Spill
	movq	15952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16704(%rsp)       # 8-byte Spill
	movq	15960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16696(%rsp)       # 8-byte Spill
	movq	15968(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16688(%rsp)       # 8-byte Spill
	movq	15976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16680(%rsp)       # 8-byte Spill
	movq	15984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16672(%rsp)       # 8-byte Spill
	movq	15992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16664(%rsp)       # 8-byte Spill
	movq	15688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16656(%rsp)       # 8-byte Spill
	movq	15696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16648(%rsp)       # 8-byte Spill
	movq	15704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16640(%rsp)       # 8-byte Spill
	movq	15712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16632(%rsp)       # 8-byte Spill
	movq	15720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16624(%rsp)       # 8-byte Spill
	movq	15728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16616(%rsp)       # 8-byte Spill
	movq	15736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16608(%rsp)       # 8-byte Spill
	movq	15744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16600(%rsp)       # 8-byte Spill
	movq	15752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16592(%rsp)       # 8-byte Spill
	movq	15760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16584(%rsp)       # 8-byte Spill
	movq	15768(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16576(%rsp)       # 8-byte Spill
	movq	15800(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 16568(%rsp)       # 8-byte Spill
	movq	16000(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 16564(%rsp)       # 4-byte Spill
	movl	15632(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16560(%rsp)       # 4-byte Spill
	movl	15900(%rsp), %eax       # 4-byte Reload
	movl	%eax, 16556(%rsp)       # 4-byte Spill
	movl	%ecx, 16244(%rsp)       # 4-byte Spill
	movl	%edx, 16240(%rsp)       # 4-byte Spill
	movq	%rsi, 16472(%rsp)       # 8-byte Spill
	movl	%edi, 16232(%rsp)       # 4-byte Spill
	movl	%r8d, 16228(%rsp)       # 4-byte Spill
	movl	%r9d, 16224(%rsp)       # 4-byte Spill
	movl	%r10d, 16220(%rsp)      # 4-byte Spill
	movl	%r11d, 16216(%rsp)      # 4-byte Spill
	movl	%ebx, 16212(%rsp)       # 4-byte Spill
	movl	%ebp, 16208(%rsp)       # 4-byte Spill
	movl	%r14d, 16256(%rsp)      # 4-byte Spill
	movl	%r15d, 16768(%rsp)      # 4-byte Spill
	movl	%r12d, 16204(%rsp)      # 4-byte Spill
	movl	%r13d, 16200(%rsp)      # 4-byte Spill
	jmp	.LBB68_196
.LBB68_207:                             # %for.inc1245
	movl	16260(%rsp), %eax       # 4-byte Reload
	movl	16264(%rsp), %ecx       # 4-byte Reload
	movq	16248(%rsp), %rdx       # 8-byte Reload
	movq	16272(%rsp), %rsi       # 8-byte Reload
	movq	16280(%rsp), %rdi       # 8-byte Reload
	movq	16288(%rsp), %r8        # 8-byte Reload
	movq	16296(%rsp), %r9        # 8-byte Reload
	movq	16304(%rsp), %r10       # 8-byte Reload
	movq	16312(%rsp), %r11       # 8-byte Reload
	movq	16320(%rsp), %rbx       # 8-byte Reload
	movq	16328(%rsp), %r14       # 8-byte Reload
	movq	16336(%rsp), %r15       # 8-byte Reload
	movq	16344(%rsp), %r12       # 8-byte Reload
	movq	16352(%rsp), %r13       # 8-byte Reload
	movq	16360(%rsp), %rbp       # 8-byte Reload
	movq	%rdx, 15624(%rsp)       # 8-byte Spill
	movq	16368(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15616(%rsp)       # 8-byte Spill
	movq	16376(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15608(%rsp)       # 8-byte Spill
	movq	16384(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15600(%rsp)       # 8-byte Spill
	movq	16392(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15592(%rsp)       # 8-byte Spill
	movq	16400(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15584(%rsp)       # 8-byte Spill
	movq	16408(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15576(%rsp)       # 8-byte Spill
	movq	16416(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15568(%rsp)       # 8-byte Spill
	movq	16424(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15560(%rsp)       # 8-byte Spill
	movq	16432(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15552(%rsp)       # 8-byte Spill
	movq	16440(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15544(%rsp)       # 8-byte Spill
	movq	16448(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15536(%rsp)       # 8-byte Spill
	movq	16456(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 15528(%rsp)       # 8-byte Spill
	movq	16464(%rsp), %rdx       # 8-byte Reload
	movl	%eax, 15524(%rsp)       # 4-byte Spill
	movl	16268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15520(%rsp)       # 4-byte Spill
	movl	16484(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15516(%rsp)       # 4-byte Spill
	movl	16488(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15512(%rsp)       # 4-byte Spill
	movl	16492(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15508(%rsp)       # 4-byte Spill
	movl	16496(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15504(%rsp)       # 4-byte Spill
	movl	16500(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15500(%rsp)       # 4-byte Spill
	movl	16504(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15496(%rsp)       # 4-byte Spill
	movl	16508(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15492(%rsp)       # 4-byte Spill
	movl	16512(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15488(%rsp)       # 4-byte Spill
	movl	16516(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15484(%rsp)       # 4-byte Spill
	movl	16520(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15480(%rsp)       # 4-byte Spill
	movl	16524(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15476(%rsp)       # 4-byte Spill
	movl	16528(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15472(%rsp)       # 4-byte Spill
	movl	16532(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15468(%rsp)       # 4-byte Spill
	movl	16536(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15464(%rsp)       # 4-byte Spill
	movl	16540(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15460(%rsp)       # 4-byte Spill
	movl	16544(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15456(%rsp)       # 4-byte Spill
	movl	16548(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15452(%rsp)       # 4-byte Spill
	movl	16552(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15448(%rsp)       # 4-byte Spill
	movl	15524(%rsp), %eax       # 4-byte Reload
	addl	$1, %eax
	movl	%eax, 15444(%rsp)       # 4-byte Spill
	movl	15448(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17380(%rsp)       # 4-byte Spill
	movl	15452(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17144(%rsp)       # 4-byte Spill
	movl	15456(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17364(%rsp)       # 4-byte Spill
	movl	15460(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17132(%rsp)       # 4-byte Spill
	movl	15464(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17128(%rsp)       # 4-byte Spill
	movl	15468(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17124(%rsp)       # 4-byte Spill
	movl	15472(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17120(%rsp)       # 4-byte Spill
	movl	15476(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17116(%rsp)       # 4-byte Spill
	movl	15480(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17112(%rsp)       # 4-byte Spill
	movl	15484(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17108(%rsp)       # 4-byte Spill
	movl	15488(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17104(%rsp)       # 4-byte Spill
	movl	15492(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17100(%rsp)       # 4-byte Spill
	movl	15496(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17096(%rsp)       # 4-byte Spill
	movl	15500(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17092(%rsp)       # 4-byte Spill
	movl	15504(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17088(%rsp)       # 4-byte Spill
	movl	15508(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17376(%rsp)       # 4-byte Spill
	movl	15512(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17372(%rsp)       # 4-byte Spill
	movl	15516(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17368(%rsp)       # 4-byte Spill
	movl	15520(%rsp), %eax       # 4-byte Reload
	movq	%rdx, 17352(%rsp)       # 8-byte Spill
	movq	15528(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17344(%rsp)       # 8-byte Spill
	movq	15536(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17336(%rsp)       # 8-byte Spill
	movq	15544(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17328(%rsp)       # 8-byte Spill
	movq	15552(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17320(%rsp)       # 8-byte Spill
	movq	15560(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17312(%rsp)       # 8-byte Spill
	movq	15568(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17304(%rsp)       # 8-byte Spill
	movq	15576(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17296(%rsp)       # 8-byte Spill
	movq	15584(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17288(%rsp)       # 8-byte Spill
	movq	15592(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17280(%rsp)       # 8-byte Spill
	movq	15600(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17272(%rsp)       # 8-byte Spill
	movq	15608(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17264(%rsp)       # 8-byte Spill
	movq	15616(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 17256(%rsp)       # 8-byte Spill
	movq	15624(%rsp), %rdx       # 8-byte Reload
	movl	%eax, 17156(%rsp)       # 4-byte Spill
	movl	15444(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17148(%rsp)       # 4-byte Spill
	movq	%rsi, 17160(%rsp)       # 8-byte Spill
	movq	%rdx, 17136(%rsp)       # 8-byte Spill
	movq	%rdi, 17168(%rsp)       # 8-byte Spill
	movq	%r8, 17176(%rsp)        # 8-byte Spill
	movq	%r9, 17184(%rsp)        # 8-byte Spill
	movq	%r10, 17192(%rsp)       # 8-byte Spill
	movq	%r11, 17200(%rsp)       # 8-byte Spill
	movq	%rbx, 17208(%rsp)       # 8-byte Spill
	movq	%r14, 17216(%rsp)       # 8-byte Spill
	movq	%r15, 17224(%rsp)       # 8-byte Spill
	movq	%r12, 17232(%rsp)       # 8-byte Spill
	movq	%r13, 17240(%rsp)       # 8-byte Spill
	movq	%rbp, 17248(%rsp)       # 8-byte Spill
	movl	%ecx, 17152(%rsp)       # 4-byte Spill
	jmp	.LBB68_194
.LBB68_208:                             # %for.end1247
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$3192, %rsi             # imm = 0xC78
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movl	$0, 3192(%rdi)
	movl	$17729, 38596(%rsp)     # imm = 0x4541
	movl	%eax, %ecx
	movq	%rdx, 15432(%rsp)       # 8-byte Spill
	movl	%ecx, 15428(%rsp)       # 4-byte Spill
	movq	%rsi, 15416(%rsp)       # 8-byte Spill
	movl	%eax, 15412(%rsp)       # 4-byte Spill
.LBB68_209:                             # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	15412(%rsp), %eax       # 4-byte Reload
	movq	15432(%rsp), %rcx       # 8-byte Reload
	movl	15428(%rsp), %edx       # 4-byte Reload
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movb	3196(%rsi,%rcx), %dil
	movl	$17735, 38596(%rsp)     # imm = 0x4547
	cmpb	$0, %dil
	movl	%edx, %r8d
	movl	%eax, 15408(%rsp)       # 4-byte Spill
	movq	%rcx, 15400(%rsp)       # 8-byte Spill
	movl	%edx, 15396(%rsp)       # 4-byte Spill
	movl	%r8d, 15392(%rsp)       # 4-byte Spill
	je	.LBB68_211
# %bb.210:                              # %if.then.i
                                        #   in Loop: Header=BB68_209 Depth=1
	movl	15408(%rsp), %eax       # 4-byte Reload
	movb	%al, %cl
	movl	15396(%rsp), %edx       # 4-byte Reload
	movslq	%edx, %rsi
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movb	%cl, 3468(%rdi,%rsi)
	movl	$17736, 38596(%rsp)     # imm = 0x4548
	movq	15416(%rsp), %rsi       # 8-byte Reload
	movl	(%rsi), %r8d
	movl	$17738, 38596(%rsp)     # imm = 0x454A
	addl	$1, %r8d
	movl	%r8d, (%rsi)
	movl	$17743, 38596(%rsp)     # imm = 0x454F
	movl	%r8d, 15392(%rsp)       # 4-byte Spill
.LBB68_211:                             # %for.inc.i
                                        #   in Loop: Header=BB68_209 Depth=1
	movl	15392(%rsp), %eax       # 4-byte Reload
	movq	15400(%rsp), %rcx       # 8-byte Reload
	orq	$1, %rcx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movb	3196(%rdx,%rcx), %sil
	movl	$17797, 38596(%rsp)     # imm = 0x4585
	cmpb	$0, %sil
	movl	%eax, %edi
	movl	%eax, 15388(%rsp)       # 4-byte Spill
	movl	%edi, 15384(%rsp)       # 4-byte Spill
	je	.LBB68_548
	jmp	.LBB68_547
.LBB68_212:                             # %makeMaps_d.exit
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movl	15380(%rsp), %ecx       # 4-byte Reload
	cmpl	$0, %ecx
	movl	16956(%rsp), %edx       # 4-byte Reload
	movq	17000(%rsp), %rsi       # 8-byte Reload
	movq	17008(%rsp), %rdi       # 8-byte Reload
	movq	17016(%rsp), %r8        # 8-byte Reload
	movq	17024(%rsp), %r9        # 8-byte Reload
	movq	17032(%rsp), %r10       # 8-byte Reload
	movq	17040(%rsp), %r11       # 8-byte Reload
	movq	17048(%rsp), %rbx       # 8-byte Reload
	movq	17056(%rsp), %r14       # 8-byte Reload
	movq	17064(%rsp), %r15       # 8-byte Reload
	movq	17072(%rsp), %r12       # 8-byte Reload
	movq	16792(%rsp), %r13       # 8-byte Reload
	movq	16800(%rsp), %rbp       # 8-byte Reload
	movq	16808(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25424(%rsp)       # 8-byte Spill
	movq	16816(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	16824(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	16832(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	16840(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	16848(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	16856(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	16864(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	16872(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	16880(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	17080(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	16992(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	16984(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	16888(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 15376(%rsp)       # 4-byte Spill
	movl	16976(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	16972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	16968(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	16964(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	16960(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	16952(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	16948(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	16944(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	16940(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	16936(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	16932(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	16928(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	16924(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	16920(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	16916(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	16912(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	16908(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	16904(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	16900(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	16980(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	15376(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movl	%edx, 25332(%rsp)       # 4-byte Spill
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	%rdi, 25512(%rsp)       # 8-byte Spill
	movq	%r8, 25504(%rsp)        # 8-byte Spill
	movq	%r9, 25496(%rsp)        # 8-byte Spill
	movq	%r10, 25488(%rsp)       # 8-byte Spill
	movq	%r11, 25480(%rsp)       # 8-byte Spill
	movq	%rbx, 25472(%rsp)       # 8-byte Spill
	movq	%r14, 25464(%rsp)       # 8-byte Spill
	movq	%r15, 25456(%rsp)       # 8-byte Spill
	movq	%r12, 25448(%rsp)       # 8-byte Spill
	movq	%r13, 25440(%rsp)       # 8-byte Spill
	movq	%rbp, 25432(%rsp)       # 8-byte Spill
	je	.LBB68_542
# %bb.213:                              # %if.end1251
	movl	15380(%rsp), %eax       # 4-byte Reload
	addl	$2, %eax
	movl	16904(%rsp), %ecx       # 4-byte Reload
	movl	16912(%rsp), %edx       # 4-byte Reload
	movl	16916(%rsp), %esi       # 4-byte Reload
	movl	16920(%rsp), %edi       # 4-byte Reload
	movl	16924(%rsp), %r8d       # 4-byte Reload
	movl	16928(%rsp), %r9d       # 4-byte Reload
	movl	16932(%rsp), %r10d      # 4-byte Reload
	movl	16936(%rsp), %r11d      # 4-byte Reload
	movl	16940(%rsp), %ebx       # 4-byte Reload
	movl	16944(%rsp), %ebp       # 4-byte Reload
	movl	16948(%rsp), %r14d      # 4-byte Reload
	movl	16952(%rsp), %r15d      # 4-byte Reload
	movl	16956(%rsp), %r12d      # 4-byte Reload
	movl	16960(%rsp), %r13d      # 4-byte Reload
	movl	%eax, 15372(%rsp)       # 4-byte Spill
	movl	16964(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37360(%rsp)       # 4-byte Spill
	movl	16968(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37356(%rsp)       # 4-byte Spill
	movl	16972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37352(%rsp)       # 4-byte Spill
	movl	16976(%rsp), %eax       # 4-byte Reload
	movl	%esi, 37408(%rsp)       # 4-byte Spill
	movq	16888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37336(%rsp)       # 8-byte Spill
	movq	16984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37328(%rsp)       # 8-byte Spill
	movq	16992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37320(%rsp)       # 8-byte Spill
	movq	17000(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37312(%rsp)       # 8-byte Spill
	movq	17008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37304(%rsp)       # 8-byte Spill
	movq	17016(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37296(%rsp)       # 8-byte Spill
	movq	17024(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37288(%rsp)       # 8-byte Spill
	movq	17032(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37280(%rsp)       # 8-byte Spill
	movq	17040(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37272(%rsp)       # 8-byte Spill
	movq	17048(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37264(%rsp)       # 8-byte Spill
	movq	17056(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37256(%rsp)       # 8-byte Spill
	movq	17064(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37248(%rsp)       # 8-byte Spill
	movq	17072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37240(%rsp)       # 8-byte Spill
	movq	16792(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37232(%rsp)       # 8-byte Spill
	movq	16800(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37224(%rsp)       # 8-byte Spill
	movq	16808(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37216(%rsp)       # 8-byte Spill
	movq	16816(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37208(%rsp)       # 8-byte Spill
	movq	16824(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37200(%rsp)       # 8-byte Spill
	movq	16832(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37192(%rsp)       # 8-byte Spill
	movq	16840(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37184(%rsp)       # 8-byte Spill
	movq	16848(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37176(%rsp)       # 8-byte Spill
	movq	16856(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37168(%rsp)       # 8-byte Spill
	movq	16864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37160(%rsp)       # 8-byte Spill
	movq	16872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37152(%rsp)       # 8-byte Spill
	movq	16880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37144(%rsp)       # 8-byte Spill
	movq	17080(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 37140(%rsp)       # 4-byte Spill
	movl	15372(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37136(%rsp)       # 4-byte Spill
	movl	16900(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37132(%rsp)       # 4-byte Spill
	movl	16980(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37128(%rsp)       # 4-byte Spill
	movl	%ecx, 37416(%rsp)       # 4-byte Spill
	movl	%edx, 37412(%rsp)       # 4-byte Spill
	movq	%rsi, 37056(%rsp)       # 8-byte Spill
	movl	%edi, 37404(%rsp)       # 4-byte Spill
	movl	%r8d, 37400(%rsp)       # 4-byte Spill
	movl	%r9d, 37396(%rsp)       # 4-byte Spill
	movl	%r10d, 37392(%rsp)      # 4-byte Spill
	movl	%r11d, 37388(%rsp)      # 4-byte Spill
	movl	%ebx, 37384(%rsp)       # 4-byte Spill
	movl	%ebp, 37380(%rsp)       # 4-byte Spill
	movl	%r14d, 37376(%rsp)      # 4-byte Spill
	movl	%r15d, 37372(%rsp)      # 4-byte Spill
	movl	%r12d, 37368(%rsp)      # 4-byte Spill
	movl	%r13d, 37364(%rsp)      # 4-byte Spill
.LBB68_214:                             # %sw.bb1254
	movl	37128(%rsp), %eax       # 4-byte Reload
	movl	37132(%rsp), %ecx       # 4-byte Reload
	movl	37136(%rsp), %edx       # 4-byte Reload
	movq	37056(%rsp), %rsi       # 8-byte Reload
	movq	37144(%rsp), %rdi       # 8-byte Reload
	movq	37152(%rsp), %r8        # 8-byte Reload
	movq	37160(%rsp), %r9        # 8-byte Reload
	movq	37168(%rsp), %r10       # 8-byte Reload
	movq	37176(%rsp), %r11       # 8-byte Reload
	movq	37184(%rsp), %rbx       # 8-byte Reload
	movq	37192(%rsp), %r14       # 8-byte Reload
	movq	37200(%rsp), %r15       # 8-byte Reload
	movq	37208(%rsp), %r12       # 8-byte Reload
	movq	37216(%rsp), %r13       # 8-byte Reload
	movq	37224(%rsp), %rbp       # 8-byte Reload
	movq	%rsi, 15360(%rsp)       # 8-byte Spill
	movq	37232(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 15352(%rsp)       # 8-byte Spill
	movq	37240(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 15344(%rsp)       # 8-byte Spill
	movq	37248(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 15336(%rsp)       # 8-byte Spill
	movq	37256(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 15328(%rsp)       # 8-byte Spill
	movq	37264(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 15320(%rsp)       # 8-byte Spill
	movq	37272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 15312(%rsp)       # 8-byte Spill
	movq	37280(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 15304(%rsp)       # 8-byte Spill
	movq	37288(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 15296(%rsp)       # 8-byte Spill
	movq	37296(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 15288(%rsp)       # 8-byte Spill
	movq	37304(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 15280(%rsp)       # 8-byte Spill
	movq	37312(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 15272(%rsp)       # 8-byte Spill
	movq	37320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 15264(%rsp)       # 8-byte Spill
	movq	37328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 15256(%rsp)       # 8-byte Spill
	movq	37336(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 15252(%rsp)       # 4-byte Spill
	movl	37140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15248(%rsp)       # 4-byte Spill
	movl	37352(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15244(%rsp)       # 4-byte Spill
	movl	37356(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15240(%rsp)       # 4-byte Spill
	movl	37360(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15236(%rsp)       # 4-byte Spill
	movl	37364(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15232(%rsp)       # 4-byte Spill
	movl	37368(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15228(%rsp)       # 4-byte Spill
	movl	37372(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15224(%rsp)       # 4-byte Spill
	movl	37376(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15220(%rsp)       # 4-byte Spill
	movl	37380(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15216(%rsp)       # 4-byte Spill
	movl	37384(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15212(%rsp)       # 4-byte Spill
	movl	37388(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15208(%rsp)       # 4-byte Spill
	movl	37392(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15204(%rsp)       # 4-byte Spill
	movl	37396(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15200(%rsp)       # 4-byte Spill
	movl	37400(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15196(%rsp)       # 4-byte Spill
	movl	37404(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15192(%rsp)       # 4-byte Spill
	movl	37408(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15188(%rsp)       # 4-byte Spill
	movl	37412(%rsp), %eax       # 4-byte Reload
	movl	%eax, 15184(%rsp)       # 4-byte Spill
	movl	37416(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 15176(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rsi       # 8-byte Reload
	movl	$30, (%rsi)
	movl	$17799, 38596(%rsp)     # imm = 0x4587
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$36, %rsi
	movq	%rsi, 15168(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	36(%rsi), %esi
	movl	$17803, 38596(%rsp)     # imm = 0x458B
	movl	%esi, 15164(%rsp)       # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$32, %rsi
	movl	%eax, 15160(%rsp)       # 4-byte Spill
	movl	15164(%rsp), %eax       # 4-byte Reload
	cmpl	$2, %eax
	movl	%ecx, 15156(%rsp)       # 4-byte Spill
	movl	%edx, 15152(%rsp)       # 4-byte Spill
	movq	%rsi, 15144(%rsp)       # 8-byte Spill
	movq	%rdi, 15136(%rsp)       # 8-byte Spill
	movq	%r8, 15128(%rsp)        # 8-byte Spill
	movq	%r9, 15120(%rsp)        # 8-byte Spill
	movq	%r10, 15112(%rsp)       # 8-byte Spill
	movq	%r11, 15104(%rsp)       # 8-byte Spill
	movq	%rbx, 15096(%rsp)       # 8-byte Spill
	movq	%r14, 15088(%rsp)       # 8-byte Spill
	movq	%r15, 15080(%rsp)       # 8-byte Spill
	movq	%r12, 15072(%rsp)       # 8-byte Spill
	movq	%r13, 15064(%rsp)       # 8-byte Spill
	movq	%rbp, 15056(%rsp)       # 8-byte Spill
	jle	.LBB68_216
# %bb.215:                              # %sw.bb1254.if.then1261_crit_edge
	movq	15144(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17805, 38596(%rsp)     # imm = 0x458D
	movl	15164(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 15052(%rsp)       # 4-byte Spill
	movl	%edx, 15048(%rsp)       # 4-byte Spill
	jmp	.LBB68_217
.LBB68_216:                             # %if.end1270.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$17807, 38596(%rsp)     # imm = 0x458F
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$17819, 38596(%rsp)     # imm = 0x459B
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	15164(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 15040(%rsp)       # 8-byte Spill
	movq	%rdx, 15032(%rsp)       # 8-byte Spill
	movq	%r8, 15024(%rsp)        # 8-byte Spill
	movq	%rdi, 15016(%rsp)       # 8-byte Spill
	movl	%esi, 15012(%rsp)       # 4-byte Spill
	movl	%r9d, 15008(%rsp)       # 4-byte Spill
	jmp	.LBB68_218
.LBB68_217:                             # %if.then1261
	movl	15048(%rsp), %eax       # 4-byte Reload
	movl	15052(%rsp), %ecx       # 4-byte Reload
	addl	$-3, %eax
	movb	%al, %dl
	movl	%ecx, 15004(%rsp)       # 4-byte Spill
	movb	%dl, %cl
	movl	15004(%rsp), %esi       # 4-byte Reload
	shrl	%cl, %esi
	movl	%esi, %edi
	andl	$7, %edi
	movq	15168(%rsp), %r8        # 8-byte Reload
	movl	%eax, (%r8)
	movl	$17827, 38596(%rsp)     # imm = 0x45A3
	movb	%sil, %cl
	movl	$-4, %esi
	addb	$1, %cl
	andb	$7, %cl
	subb	$3, %cl
	movl	15160(%rsp), %r9d       # 4-byte Reload
	movl	15188(%rsp), %r10d      # 4-byte Reload
	movl	15192(%rsp), %r11d      # 4-byte Reload
	movl	15196(%rsp), %ebx       # 4-byte Reload
	movl	15200(%rsp), %ebp       # 4-byte Reload
	movl	15204(%rsp), %r14d      # 4-byte Reload
	movl	15208(%rsp), %r15d      # 4-byte Reload
	movl	15212(%rsp), %r12d      # 4-byte Reload
	movl	15216(%rsp), %r13d      # 4-byte Reload
	movl	15220(%rsp), %edx       # 4-byte Reload
	movl	15224(%rsp), %r8d       # 4-byte Reload
	movl	%eax, 15000(%rsp)       # 4-byte Spill
	movl	15228(%rsp), %eax       # 4-byte Reload
	movl	%eax, 30320(%rsp)       # 4-byte Spill
	movl	15232(%rsp), %eax       # 4-byte Reload
	movl	%eax, 30584(%rsp)       # 4-byte Spill
	movl	15236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 30580(%rsp)       # 4-byte Spill
	movl	15240(%rsp), %eax       # 4-byte Reload
	movl	%eax, 30576(%rsp)       # 4-byte Spill
	movl	15244(%rsp), %eax       # 4-byte Reload
	movl	%eax, 30572(%rsp)       # 4-byte Spill
	movl	15248(%rsp), %eax       # 4-byte Reload
	movb	%cl, 14999(%rsp)        # 1-byte Spill
	movq	15176(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30552(%rsp)       # 8-byte Spill
	movq	15256(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30544(%rsp)       # 8-byte Spill
	movq	15264(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30536(%rsp)       # 8-byte Spill
	movq	15272(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30528(%rsp)       # 8-byte Spill
	movq	15280(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30520(%rsp)       # 8-byte Spill
	movq	15288(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30512(%rsp)       # 8-byte Spill
	movq	15296(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30504(%rsp)       # 8-byte Spill
	movq	15304(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30496(%rsp)       # 8-byte Spill
	movq	15312(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30488(%rsp)       # 8-byte Spill
	movq	15320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30480(%rsp)       # 8-byte Spill
	movq	15328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30472(%rsp)       # 8-byte Spill
	movq	15336(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30464(%rsp)       # 8-byte Spill
	movq	15344(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30456(%rsp)       # 8-byte Spill
	movq	15352(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30448(%rsp)       # 8-byte Spill
	movq	15056(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30440(%rsp)       # 8-byte Spill
	movq	15064(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30432(%rsp)       # 8-byte Spill
	movq	15072(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30424(%rsp)       # 8-byte Spill
	movq	15080(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30416(%rsp)       # 8-byte Spill
	movq	15088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30408(%rsp)       # 8-byte Spill
	movq	15096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30400(%rsp)       # 8-byte Spill
	movq	15104(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30392(%rsp)       # 8-byte Spill
	movq	15112(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30384(%rsp)       # 8-byte Spill
	movq	15120(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30376(%rsp)       # 8-byte Spill
	movq	15128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30368(%rsp)       # 8-byte Spill
	movq	15136(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30360(%rsp)       # 8-byte Spill
	movq	15360(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 30352(%rsp)       # 8-byte Spill
	movq	15168(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 30348(%rsp)       # 4-byte Spill
	movl	15000(%rsp), %eax       # 4-byte Reload
	movl	%eax, 30272(%rsp)       # 4-byte Spill
	movl	%edi, %eax
	movl	%eax, 30344(%rsp)       # 4-byte Spill
	movl	15152(%rsp), %eax       # 4-byte Reload
	movl	%eax, 30340(%rsp)       # 4-byte Spill
	movl	15156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 30336(%rsp)       # 4-byte Spill
	movl	15252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 30324(%rsp)       # 4-byte Spill
	movl	15228(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 30328(%rsp)       # 8-byte Spill
	movq	15272(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25520(%rsp)       # 8-byte Spill
	movq	15280(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25512(%rsp)       # 8-byte Spill
	movq	15288(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25504(%rsp)       # 8-byte Spill
	movq	15296(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25496(%rsp)       # 8-byte Spill
	movq	15304(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25488(%rsp)       # 8-byte Spill
	movq	15312(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25480(%rsp)       # 8-byte Spill
	movq	15320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25472(%rsp)       # 8-byte Spill
	movq	15328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25464(%rsp)       # 8-byte Spill
	movq	15336(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25456(%rsp)       # 8-byte Spill
	movq	15344(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25448(%rsp)       # 8-byte Spill
	movq	15352(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25440(%rsp)       # 8-byte Spill
	movq	15056(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25432(%rsp)       # 8-byte Spill
	movq	15064(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25424(%rsp)       # 8-byte Spill
	movq	15072(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	15080(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	15088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	15096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	15104(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	15112(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	15120(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	15128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	15136(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	15360(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	15264(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	15256(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	15176(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	15248(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	15244(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	15240(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	15236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	15232(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	15224(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	15220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	15216(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	15212(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	15208(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	15204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	15200(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	15196(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	15192(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	15188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	15152(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	15160(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	15156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	15252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%r8d, 30276(%rsp)       # 4-byte Spill
	movl	%edx, 30280(%rsp)       # 4-byte Spill
	movl	%edi, 25268(%rsp)       # 4-byte Spill
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movl	%r9d, 30316(%rsp)       # 4-byte Spill
	movl	%r10d, 30312(%rsp)      # 4-byte Spill
	movl	%r11d, 30308(%rsp)      # 4-byte Spill
	movl	%ebx, 30304(%rsp)       # 4-byte Spill
	movl	%ebp, 30300(%rsp)       # 4-byte Spill
	movl	%r14d, 30296(%rsp)      # 4-byte Spill
	movl	%r15d, 30292(%rsp)      # 4-byte Spill
	movl	%r12d, 30288(%rsp)      # 4-byte Spill
	movl	%r13d, 30284(%rsp)      # 4-byte Spill
	movl	%esi, 25244(%rsp)       # 4-byte Spill
	jb	.LBB68_542
	jmp	.LBB68_222
.LBB68_218:                             # %if.end1270
                                        # =>This Inner Loop Header: Depth=1
	movl	15008(%rsp), %eax       # 4-byte Reload
	movl	15012(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	15228(%rsp), %esi       # 4-byte Reload
	movq	15272(%rsp), %rdi       # 8-byte Reload
	movq	15280(%rsp), %r8        # 8-byte Reload
	movq	15288(%rsp), %r9        # 8-byte Reload
	movq	15296(%rsp), %r10       # 8-byte Reload
	movq	15304(%rsp), %r11       # 8-byte Reload
	movq	15312(%rsp), %rbx       # 8-byte Reload
	movq	15320(%rsp), %r14       # 8-byte Reload
	movq	15328(%rsp), %r15       # 8-byte Reload
	movq	15336(%rsp), %r12       # 8-byte Reload
	movq	15344(%rsp), %r13       # 8-byte Reload
	movq	15352(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	15056(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	15064(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	15072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	15080(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	15088(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	15096(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	15104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	15112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	15120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	15128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	15136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	15360(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	15264(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	15256(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	15176(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 14992(%rsp)       # 4-byte Spill
	movl	15248(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	15244(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	15240(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	15236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	15232(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	15224(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	15220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	15216(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	15212(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	15208(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	15204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	15200(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	15196(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	15192(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	15188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	15184(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	15152(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	15160(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	15156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	15252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 14988(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.219:                              # %if.end1276
                                        #   in Loop: Header=BB68_218 Depth=1
	movq	15144(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17829, 38596(%rsp)     # imm = 0x45A5
	shll	$8, %ecx
	movq	15040(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$17830, 38596(%rsp)     # imm = 0x45A6
	movb	(%rsi), %dil
	movl	$17832, 38596(%rsp)     # imm = 0x45A8
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$17833, 38596(%rsp)     # imm = 0x45A9
	movl	14992(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	15168(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$17835, 38596(%rsp)     # imm = 0x45AB
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$17836, 38596(%rsp)     # imm = 0x45AC
	movl	14988(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	15032(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$17837, 38596(%rsp)     # imm = 0x45AD
	movq	15016(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$17839, 38596(%rsp)     # imm = 0x45AF
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$17842, 38596(%rsp)     # imm = 0x45B2
	cmpl	$0, %ebx
	movl	%ecx, 14984(%rsp)       # 4-byte Spill
	movl	%r8d, 14980(%rsp)       # 4-byte Spill
	movl	%r10d, 14976(%rsp)      # 4-byte Spill
	jne	.LBB68_221
# %bb.220:                              # %if.then1299
                                        #   in Loop: Header=BB68_218 Depth=1
	movq	15024(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17844, 38596(%rsp)     # imm = 0x45B4
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$17897, 38596(%rsp)     # imm = 0x45E9
.LBB68_221:                             # %if.end1303
                                        #   in Loop: Header=BB68_218 Depth=1
	movl	14992(%rsp), %eax       # 4-byte Reload
	cmpl	$-6, %eax
	movl	14984(%rsp), %ecx       # 4-byte Reload
	movl	14980(%rsp), %edx       # 4-byte Reload
	movl	14976(%rsp), %esi       # 4-byte Reload
	movl	14980(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 15052(%rsp)       # 4-byte Spill
	movl	%edx, 15048(%rsp)       # 4-byte Spill
	movl	%esi, 15012(%rsp)       # 4-byte Spill
	movl	%edi, 15008(%rsp)       # 4-byte Spill
	jg	.LBB68_217
	jmp	.LBB68_218
.LBB68_222:                             # %sw.bb1312
	movl	30324(%rsp), %eax       # 4-byte Reload
	movl	30336(%rsp), %ecx       # 4-byte Reload
	movl	30340(%rsp), %edx       # 4-byte Reload
	movl	30344(%rsp), %esi       # 4-byte Reload
	movl	30272(%rsp), %edi       # 4-byte Reload
	movq	30328(%rsp), %r8        # 8-byte Reload
	movq	30352(%rsp), %r9        # 8-byte Reload
	movq	30360(%rsp), %r10       # 8-byte Reload
	movq	30368(%rsp), %r11       # 8-byte Reload
	movq	30376(%rsp), %rbx       # 8-byte Reload
	movq	30384(%rsp), %r14       # 8-byte Reload
	movq	30392(%rsp), %r15       # 8-byte Reload
	movq	30400(%rsp), %r12       # 8-byte Reload
	movq	30408(%rsp), %r13       # 8-byte Reload
	movq	30416(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 14972(%rsp)       # 4-byte Spill
	movq	30424(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14960(%rsp)       # 8-byte Spill
	movq	30432(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14952(%rsp)       # 8-byte Spill
	movq	30440(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14944(%rsp)       # 8-byte Spill
	movq	30448(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14936(%rsp)       # 8-byte Spill
	movq	30456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14928(%rsp)       # 8-byte Spill
	movq	30464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14920(%rsp)       # 8-byte Spill
	movq	30472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14912(%rsp)       # 8-byte Spill
	movq	30480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14904(%rsp)       # 8-byte Spill
	movq	30488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14896(%rsp)       # 8-byte Spill
	movq	30496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14888(%rsp)       # 8-byte Spill
	movq	30504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14880(%rsp)       # 8-byte Spill
	movq	30512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14872(%rsp)       # 8-byte Spill
	movq	30520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14864(%rsp)       # 8-byte Spill
	movq	30528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14856(%rsp)       # 8-byte Spill
	movq	30536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14848(%rsp)       # 8-byte Spill
	movq	30544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14840(%rsp)       # 8-byte Spill
	movq	30552(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 14836(%rsp)       # 4-byte Spill
	movl	30348(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14832(%rsp)       # 4-byte Spill
	movl	30572(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14828(%rsp)       # 4-byte Spill
	movl	30576(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14824(%rsp)       # 4-byte Spill
	movl	30580(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14820(%rsp)       # 4-byte Spill
	movl	30584(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14816(%rsp)       # 4-byte Spill
	movl	30320(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14812(%rsp)       # 4-byte Spill
	movl	30276(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14808(%rsp)       # 4-byte Spill
	movl	30280(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14804(%rsp)       # 4-byte Spill
	movl	30284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14800(%rsp)       # 4-byte Spill
	movl	30288(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14796(%rsp)       # 4-byte Spill
	movl	30292(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14792(%rsp)       # 4-byte Spill
	movl	30296(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14788(%rsp)       # 4-byte Spill
	movl	30300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14784(%rsp)       # 4-byte Spill
	movl	30304(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14780(%rsp)       # 4-byte Spill
	movl	30308(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14776(%rsp)       # 4-byte Spill
	movl	30312(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14772(%rsp)       # 4-byte Spill
	movl	30316(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 14760(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rsi       # 8-byte Reload
	movl	$31, (%rsi)
	movl	$17902, 38596(%rsp)     # imm = 0x45EE
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$32, %rsi
	cmpl	$14, %edi
	movl	%eax, 14756(%rsp)       # 4-byte Spill
	movl	%ecx, 14752(%rsp)       # 4-byte Spill
	movl	%edx, 14748(%rsp)       # 4-byte Spill
	movq	%rsi, 14736(%rsp)       # 8-byte Spill
	movl	%edi, 14732(%rsp)       # 4-byte Spill
	movq	%r8, 14720(%rsp)        # 8-byte Spill
	movq	%r9, 14712(%rsp)        # 8-byte Spill
	movq	%r10, 14704(%rsp)       # 8-byte Spill
	movq	%r11, 14696(%rsp)       # 8-byte Spill
	movq	%rbx, 14688(%rsp)       # 8-byte Spill
	movq	%r14, 14680(%rsp)       # 8-byte Spill
	movq	%r15, 14672(%rsp)       # 8-byte Spill
	movq	%r12, 14664(%rsp)       # 8-byte Spill
	movq	%r13, 14656(%rsp)       # 8-byte Spill
	movq	%rbp, 14648(%rsp)       # 8-byte Spill
	jle	.LBB68_224
# %bb.223:                              # %sw.bb1312.if.then1319_crit_edge
	movq	14736(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17904, 38596(%rsp)     # imm = 0x45F0
	movl	14732(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 14644(%rsp)       # 4-byte Spill
	movl	%edx, 14640(%rsp)       # 4-byte Spill
	jmp	.LBB68_225
.LBB68_224:                             # %if.end1328.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$17906, 38596(%rsp)     # imm = 0x45F2
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$17918, 38596(%rsp)     # imm = 0x45FE
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	14732(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 14632(%rsp)       # 8-byte Spill
	movq	%rdx, 14624(%rsp)       # 8-byte Spill
	movq	%r8, 14616(%rsp)        # 8-byte Spill
	movq	%rdi, 14608(%rsp)       # 8-byte Spill
	movl	%esi, 14604(%rsp)       # 4-byte Spill
	movl	%r9d, 14600(%rsp)       # 4-byte Spill
	jmp	.LBB68_226
.LBB68_225:                             # %if.then1319
	movl	14640(%rsp), %eax       # 4-byte Reload
	movl	14644(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	movl	$4294967292, %esi       # imm = 0xFFFFFFFC
	addl	$-15, %eax
	movl	%ecx, 14596(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	14596(%rsp), %edi       # 4-byte Reload
	shrl	%cl, %edi
	andl	$32767, %edi            # imm = 0x7FFF
	movq	14720(%rsp), %r8        # 8-byte Reload
	movl	%eax, (%r8)
	movl	$17926, 38596(%rsp)     # imm = 0x4606
	cmpl	$0, %edi
	movl	14756(%rsp), %eax       # 4-byte Reload
	movl	14776(%rsp), %r9d       # 4-byte Reload
	movl	14780(%rsp), %r10d      # 4-byte Reload
	movl	14784(%rsp), %r11d      # 4-byte Reload
	movl	14788(%rsp), %ebx       # 4-byte Reload
	movl	14792(%rsp), %ebp       # 4-byte Reload
	movl	14796(%rsp), %r14d      # 4-byte Reload
	movl	14800(%rsp), %r15d      # 4-byte Reload
	movl	14804(%rsp), %r12d      # 4-byte Reload
	movl	14808(%rsp), %r13d      # 4-byte Reload
	movl	14812(%rsp), %ecx       # 4-byte Reload
	movl	14816(%rsp), %r8d       # 4-byte Reload
	movl	%eax, 14592(%rsp)       # 4-byte Spill
	movl	14820(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14588(%rsp)       # 4-byte Spill
	movl	14824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14584(%rsp)       # 4-byte Spill
	movl	14828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14580(%rsp)       # 4-byte Spill
	movl	14832(%rsp), %eax       # 4-byte Reload
	movl	%esi, 14576(%rsp)       # 4-byte Spill
	movq	14760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14568(%rsp)       # 8-byte Spill
	movq	14840(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14560(%rsp)       # 8-byte Spill
	movq	14848(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14552(%rsp)       # 8-byte Spill
	movq	14856(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14544(%rsp)       # 8-byte Spill
	movq	14864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14536(%rsp)       # 8-byte Spill
	movq	14872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14528(%rsp)       # 8-byte Spill
	movq	14880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14520(%rsp)       # 8-byte Spill
	movq	14888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14512(%rsp)       # 8-byte Spill
	movq	14896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14504(%rsp)       # 8-byte Spill
	movq	14904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14496(%rsp)       # 8-byte Spill
	movq	14912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14488(%rsp)       # 8-byte Spill
	movq	14920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14480(%rsp)       # 8-byte Spill
	movq	14928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14472(%rsp)       # 8-byte Spill
	movq	14936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14464(%rsp)       # 8-byte Spill
	movq	14944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14456(%rsp)       # 8-byte Spill
	movq	14952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14448(%rsp)       # 8-byte Spill
	movq	14960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14440(%rsp)       # 8-byte Spill
	movq	14648(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14432(%rsp)       # 8-byte Spill
	movq	14656(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14424(%rsp)       # 8-byte Spill
	movq	14664(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14416(%rsp)       # 8-byte Spill
	movq	14672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14408(%rsp)       # 8-byte Spill
	movq	14680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14400(%rsp)       # 8-byte Spill
	movq	14688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14392(%rsp)       # 8-byte Spill
	movq	14696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14384(%rsp)       # 8-byte Spill
	movq	14704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14376(%rsp)       # 8-byte Spill
	movq	14712(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 14372(%rsp)       # 4-byte Spill
	movl	14972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14368(%rsp)       # 4-byte Spill
	movl	14748(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14364(%rsp)       # 4-byte Spill
	movl	14752(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14360(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 14356(%rsp)       # 4-byte Spill
	movl	14812(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 14344(%rsp)       # 8-byte Spill
	movq	14856(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	14864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	14872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	14880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	14888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	14896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	14904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	14912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	14920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	14928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	14936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	14944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	14952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	14960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	14648(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	14656(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	14664(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	14672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	14680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	14688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	14696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	14704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	14712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	14848(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	14840(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	14760(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	14832(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	14828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	14824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	14820(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	14816(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	14808(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	14804(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	14800(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	14796(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	14792(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	14788(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	14784(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	14780(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	14776(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	14972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	14748(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	14756(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	14752(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	14836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	14576(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%r8d, 14340(%rsp)       # 4-byte Spill
	movl	%edi, 14336(%rsp)       # 4-byte Spill
	movl	%ecx, 14332(%rsp)       # 4-byte Spill
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movl	%r9d, 14328(%rsp)       # 4-byte Spill
	movl	%r10d, 14324(%rsp)      # 4-byte Spill
	movl	%r11d, 14320(%rsp)      # 4-byte Spill
	movl	%ebx, 14316(%rsp)       # 4-byte Spill
	movl	%ebp, 14312(%rsp)       # 4-byte Spill
	movl	%r14d, 14308(%rsp)      # 4-byte Spill
	movl	%r15d, 14304(%rsp)      # 4-byte Spill
	movl	%r12d, 14300(%rsp)      # 4-byte Spill
	movl	%r13d, 14296(%rsp)      # 4-byte Spill
	movl	%edx, 25272(%rsp)       # 4-byte Spill
	je	.LBB68_542
	jmp	.LBB68_230
.LBB68_226:                             # %if.end1328
                                        # =>This Inner Loop Header: Depth=1
	movl	14600(%rsp), %eax       # 4-byte Reload
	movl	14604(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	14812(%rsp), %esi       # 4-byte Reload
	movq	14856(%rsp), %rdi       # 8-byte Reload
	movq	14864(%rsp), %r8        # 8-byte Reload
	movq	14872(%rsp), %r9        # 8-byte Reload
	movq	14880(%rsp), %r10       # 8-byte Reload
	movq	14888(%rsp), %r11       # 8-byte Reload
	movq	14896(%rsp), %rbx       # 8-byte Reload
	movq	14904(%rsp), %r14       # 8-byte Reload
	movq	14912(%rsp), %r15       # 8-byte Reload
	movq	14920(%rsp), %r12       # 8-byte Reload
	movq	14928(%rsp), %r13       # 8-byte Reload
	movq	14936(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	14944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	14952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	14960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	14648(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	14656(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	14664(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	14672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	14680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	14688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	14696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	14704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	14712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	14848(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	14840(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	14760(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 14292(%rsp)       # 4-byte Spill
	movl	14832(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	14828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	14824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	14820(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	14816(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	14808(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	14804(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	14800(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	14796(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	14792(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	14788(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	14784(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	14780(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	14776(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	14772(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	14972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	14748(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	14756(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	14752(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	14836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 14288(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.227:                              # %if.end1334
                                        #   in Loop: Header=BB68_226 Depth=1
	movq	14736(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17928, 38596(%rsp)     # imm = 0x4608
	shll	$8, %ecx
	movq	14632(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$17929, 38596(%rsp)     # imm = 0x4609
	movb	(%rsi), %dil
	movl	$17931, 38596(%rsp)     # imm = 0x460B
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$17932, 38596(%rsp)     # imm = 0x460C
	movl	14292(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	14720(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$17934, 38596(%rsp)     # imm = 0x460E
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$17935, 38596(%rsp)     # imm = 0x460F
	movl	14288(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	14624(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$17936, 38596(%rsp)     # imm = 0x4610
	movq	14608(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$17938, 38596(%rsp)     # imm = 0x4612
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$17941, 38596(%rsp)     # imm = 0x4615
	cmpl	$0, %ebx
	movl	%ecx, 14284(%rsp)       # 4-byte Spill
	movl	%r8d, 14280(%rsp)       # 4-byte Spill
	movl	%r10d, 14276(%rsp)      # 4-byte Spill
	jne	.LBB68_229
# %bb.228:                              # %if.then1357
                                        #   in Loop: Header=BB68_226 Depth=1
	movq	14616(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$17943, 38596(%rsp)     # imm = 0x4617
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$18049, 38596(%rsp)     # imm = 0x4681
.LBB68_229:                             # %if.end1361
                                        #   in Loop: Header=BB68_226 Depth=1
	movl	14292(%rsp), %eax       # 4-byte Reload
	cmpl	$6, %eax
	movl	14284(%rsp), %ecx       # 4-byte Reload
	movl	14280(%rsp), %edx       # 4-byte Reload
	movl	14276(%rsp), %esi       # 4-byte Reload
	movl	14280(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 14644(%rsp)       # 4-byte Spill
	movl	%edx, 14640(%rsp)       # 4-byte Spill
	movl	%esi, 14604(%rsp)       # 4-byte Spill
	movl	%edi, 14600(%rsp)       # 4-byte Spill
	jg	.LBB68_225
	jmp	.LBB68_226
.LBB68_230:                             # %for.cond1367
	movl	14356(%rsp), %eax       # 4-byte Reload
	movl	14360(%rsp), %ecx       # 4-byte Reload
	movl	14364(%rsp), %edx       # 4-byte Reload
	movl	14368(%rsp), %esi       # 4-byte Reload
	movl	14336(%rsp), %edi       # 4-byte Reload
	movq	14344(%rsp), %r8        # 8-byte Reload
	movq	14376(%rsp), %r9        # 8-byte Reload
	movq	14384(%rsp), %r10       # 8-byte Reload
	movq	14392(%rsp), %r11       # 8-byte Reload
	movq	14400(%rsp), %rbx       # 8-byte Reload
	movq	14408(%rsp), %r14       # 8-byte Reload
	movq	14416(%rsp), %r15       # 8-byte Reload
	movq	14424(%rsp), %r12       # 8-byte Reload
	movq	14432(%rsp), %r13       # 8-byte Reload
	movq	14440(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 14272(%rsp)       # 4-byte Spill
	movq	14448(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14264(%rsp)       # 8-byte Spill
	movq	14456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14256(%rsp)       # 8-byte Spill
	movq	14464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14248(%rsp)       # 8-byte Spill
	movq	14472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14240(%rsp)       # 8-byte Spill
	movq	14480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14232(%rsp)       # 8-byte Spill
	movq	14488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14224(%rsp)       # 8-byte Spill
	movq	14496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14216(%rsp)       # 8-byte Spill
	movq	14504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14208(%rsp)       # 8-byte Spill
	movq	14512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14200(%rsp)       # 8-byte Spill
	movq	14520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14192(%rsp)       # 8-byte Spill
	movq	14528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14184(%rsp)       # 8-byte Spill
	movq	14536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14176(%rsp)       # 8-byte Spill
	movq	14544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14168(%rsp)       # 8-byte Spill
	movq	14552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14160(%rsp)       # 8-byte Spill
	movq	14560(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14152(%rsp)       # 8-byte Spill
	movq	14568(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 14148(%rsp)       # 4-byte Spill
	movl	14372(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14144(%rsp)       # 4-byte Spill
	movl	14580(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14140(%rsp)       # 4-byte Spill
	movl	14584(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14136(%rsp)       # 4-byte Spill
	movl	14588(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14132(%rsp)       # 4-byte Spill
	movl	14340(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14128(%rsp)       # 4-byte Spill
	movl	14332(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14124(%rsp)       # 4-byte Spill
	movl	14296(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14120(%rsp)       # 4-byte Spill
	movl	14300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14116(%rsp)       # 4-byte Spill
	movl	14304(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14112(%rsp)       # 4-byte Spill
	movl	14308(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14108(%rsp)       # 4-byte Spill
	movl	14312(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14104(%rsp)       # 4-byte Spill
	movl	14316(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14100(%rsp)       # 4-byte Spill
	movl	14320(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14096(%rsp)       # 4-byte Spill
	movl	14324(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14092(%rsp)       # 4-byte Spill
	movl	14328(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14088(%rsp)       # 4-byte Spill
	movl	14592(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14084(%rsp)       # 4-byte Spill
	xorl	%eax, %eax
	movl	%eax, 14080(%rsp)       # 4-byte Spill
	movl	14148(%rsp), %eax       # 4-byte Reload
	cmpl	%edi, %eax
	movl	14084(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37124(%rsp)       # 4-byte Spill
	movl	14088(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37120(%rsp)       # 4-byte Spill
	movl	14092(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37116(%rsp)       # 4-byte Spill
	movl	14096(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37112(%rsp)       # 4-byte Spill
	movl	14100(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37108(%rsp)       # 4-byte Spill
	movl	14104(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37104(%rsp)       # 4-byte Spill
	movl	14108(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37100(%rsp)       # 4-byte Spill
	movl	14112(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37096(%rsp)       # 4-byte Spill
	movl	14116(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37092(%rsp)       # 4-byte Spill
	movl	14120(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37088(%rsp)       # 4-byte Spill
	movl	14124(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37084(%rsp)       # 4-byte Spill
	movl	14128(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37080(%rsp)       # 4-byte Spill
	movl	14132(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37076(%rsp)       # 4-byte Spill
	movl	14136(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37072(%rsp)       # 4-byte Spill
	movl	14140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 37068(%rsp)       # 4-byte Spill
	movl	14144(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 14072(%rsp)       # 8-byte Spill
	movq	%rsi, 37048(%rsp)       # 8-byte Spill
	movq	14152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37040(%rsp)       # 8-byte Spill
	movq	14160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37032(%rsp)       # 8-byte Spill
	movq	14168(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37024(%rsp)       # 8-byte Spill
	movq	14176(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37016(%rsp)       # 8-byte Spill
	movq	14184(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37008(%rsp)       # 8-byte Spill
	movq	14192(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 37000(%rsp)       # 8-byte Spill
	movq	14200(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36992(%rsp)       # 8-byte Spill
	movq	14208(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36984(%rsp)       # 8-byte Spill
	movq	14216(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36976(%rsp)       # 8-byte Spill
	movq	14224(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36968(%rsp)       # 8-byte Spill
	movq	14232(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36960(%rsp)       # 8-byte Spill
	movq	14240(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36952(%rsp)       # 8-byte Spill
	movq	14248(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36944(%rsp)       # 8-byte Spill
	movq	14256(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36936(%rsp)       # 8-byte Spill
	movq	14264(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36928(%rsp)       # 8-byte Spill
	movq	%rbp, %rsi
	movq	%rsi, 36920(%rsp)       # 8-byte Spill
	movq	%r13, %rsi
	movq	%rsi, 36912(%rsp)       # 8-byte Spill
	movq	%r12, %rsi
	movq	%rsi, 36904(%rsp)       # 8-byte Spill
	movq	%r15, %rsi
	movq	%rsi, 36896(%rsp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rsi, 36888(%rsp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rsi, 36880(%rsp)       # 8-byte Spill
	movq	%r11, %rsi
	movq	%rsi, 36872(%rsp)       # 8-byte Spill
	movq	%r10, %rsi
	movq	%rsi, 36864(%rsp)       # 8-byte Spill
	movq	%r9, %rsi
	movq	%rsi, 36856(%rsp)       # 8-byte Spill
	movq	%r8, %rsi
	movl	%eax, 36852(%rsp)       # 4-byte Spill
	movl	%edi, %eax
	movl	%eax, 36848(%rsp)       # 4-byte Spill
	movl	14272(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36844(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 36840(%rsp)       # 4-byte Spill
	movl	14080(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36836(%rsp)       # 4-byte Spill
	movl	14148(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36832(%rsp)       # 4-byte Spill
	movl	%ecx, 14068(%rsp)       # 4-byte Spill
	movl	%edx, 14064(%rsp)       # 4-byte Spill
	movq	%rsi, 36768(%rsp)       # 8-byte Spill
	movl	%edi, 14060(%rsp)       # 4-byte Spill
	movq	%r8, 14048(%rsp)        # 8-byte Spill
	movq	%r9, 14040(%rsp)        # 8-byte Spill
	movq	%r10, 14032(%rsp)       # 8-byte Spill
	movq	%r11, 14024(%rsp)       # 8-byte Spill
	movq	%rbx, 14016(%rsp)       # 8-byte Spill
	movq	%r14, 14008(%rsp)       # 8-byte Spill
	movq	%r15, 14000(%rsp)       # 8-byte Spill
	movq	%r12, 13992(%rsp)       # 8-byte Spill
	movq	%r13, 13984(%rsp)       # 8-byte Spill
	movq	%rbp, 13976(%rsp)       # 8-byte Spill
	jge	.LBB68_242
.LBB68_231:                             # %sw.bb1373.preheader
	movl	36832(%rsp), %eax       # 4-byte Reload
	movl	36836(%rsp), %ecx       # 4-byte Reload
	movl	36840(%rsp), %edx       # 4-byte Reload
	movl	36844(%rsp), %esi       # 4-byte Reload
	movl	36848(%rsp), %edi       # 4-byte Reload
	movq	36768(%rsp), %r8        # 8-byte Reload
	movq	36856(%rsp), %r9        # 8-byte Reload
	movq	36864(%rsp), %r10       # 8-byte Reload
	movq	36872(%rsp), %r11       # 8-byte Reload
	movq	36880(%rsp), %rbx       # 8-byte Reload
	movq	36888(%rsp), %r14       # 8-byte Reload
	movq	36896(%rsp), %r15       # 8-byte Reload
	movq	36904(%rsp), %r12       # 8-byte Reload
	movq	36912(%rsp), %r13       # 8-byte Reload
	movq	36920(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 13972(%rsp)       # 4-byte Spill
	movq	36928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13960(%rsp)       # 8-byte Spill
	movq	36936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13952(%rsp)       # 8-byte Spill
	movq	36944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13944(%rsp)       # 8-byte Spill
	movq	36952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13936(%rsp)       # 8-byte Spill
	movq	36960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13928(%rsp)       # 8-byte Spill
	movq	36968(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13920(%rsp)       # 8-byte Spill
	movq	36976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13912(%rsp)       # 8-byte Spill
	movq	36984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13904(%rsp)       # 8-byte Spill
	movq	36992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13896(%rsp)       # 8-byte Spill
	movq	37000(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13888(%rsp)       # 8-byte Spill
	movq	37008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13880(%rsp)       # 8-byte Spill
	movq	37016(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13872(%rsp)       # 8-byte Spill
	movq	37024(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13864(%rsp)       # 8-byte Spill
	movq	37032(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13856(%rsp)       # 8-byte Spill
	movq	37040(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13848(%rsp)       # 8-byte Spill
	movq	37048(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 13844(%rsp)       # 4-byte Spill
	movl	36852(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13840(%rsp)       # 4-byte Spill
	movl	37068(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13836(%rsp)       # 4-byte Spill
	movl	37072(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13832(%rsp)       # 4-byte Spill
	movl	37076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13828(%rsp)       # 4-byte Spill
	movl	37080(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13824(%rsp)       # 4-byte Spill
	movl	37084(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13820(%rsp)       # 4-byte Spill
	movl	37088(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13816(%rsp)       # 4-byte Spill
	movl	37092(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13812(%rsp)       # 4-byte Spill
	movl	37096(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13808(%rsp)       # 4-byte Spill
	movl	37100(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13804(%rsp)       # 4-byte Spill
	movl	37104(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13800(%rsp)       # 4-byte Spill
	movl	37108(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13796(%rsp)       # 4-byte Spill
	movl	37112(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13792(%rsp)       # 4-byte Spill
	movl	37116(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13788(%rsp)       # 4-byte Spill
	movl	37120(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13784(%rsp)       # 4-byte Spill
	movl	37124(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 13776(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$36, %rsi
	movq	%rsi, 13768(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$32, %rsi
	movl	%eax, 13764(%rsp)       # 4-byte Spill
	movq	%rbp, 13752(%rsp)       # 8-byte Spill
	movl	%edx, 13748(%rsp)       # 4-byte Spill
	movq	%rsi, 13736(%rsp)       # 8-byte Spill
	movl	%edi, 13732(%rsp)       # 4-byte Spill
	movq	%r8, 13720(%rsp)        # 8-byte Spill
	movq	%r9, 13712(%rsp)        # 8-byte Spill
	movq	%r10, 13704(%rsp)       # 8-byte Spill
	movq	%r11, 13696(%rsp)       # 8-byte Spill
	movq	%rbx, 13688(%rsp)       # 8-byte Spill
	movq	%r14, 13680(%rsp)       # 8-byte Spill
	movq	%r15, 13672(%rsp)       # 8-byte Spill
	movq	%r12, 13664(%rsp)       # 8-byte Spill
	movq	%r13, 13656(%rsp)       # 8-byte Spill
	movl	%ecx, 13652(%rsp)       # 4-byte Spill
.LBB68_232:                             # %sw.bb1373
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_236 Depth 2
	movl	13652(%rsp), %eax       # 4-byte Reload
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$32, (%rcx)
	movl	$18050, 38596(%rsp)     # imm = 0x4682
	movq	13768(%rsp), %rdx       # 8-byte Reload
	movl	(%rdx), %esi
	movl	$18054, 38596(%rsp)     # imm = 0x4686
	cmpl	$0, %esi
	movl	%eax, 13648(%rsp)       # 4-byte Spill
	movl	%esi, 13644(%rsp)       # 4-byte Spill
	jg	.LBB68_234
# %bb.233:                              # %if.end1390.preheader
                                        #   in Loop: Header=BB68_232 Depth=1
	movl	13644(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13640(%rsp)       # 4-byte Spill
	jmp	.LBB68_236
.LBB68_234:                             # %sw.bb1373.if.then1380_crit_edge
                                        #   in Loop: Header=BB68_232 Depth=1
	movq	13736(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$18061, 38596(%rsp)     # imm = 0x468D
	movl	13644(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 13636(%rsp)       # 4-byte Spill
	movl	%edx, 13632(%rsp)       # 4-byte Spill
.LBB68_235:                             # %if.then1380
                                        #   in Loop: Header=BB68_232 Depth=1
	movl	13632(%rsp), %eax       # 4-byte Reload
	movl	13636(%rsp), %ecx       # 4-byte Reload
	movl	$1, %edx
	addl	$-1, %eax
	movq	13768(%rsp), %rsi       # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$18067, 38596(%rsp)     # imm = 0x4693
	movl	%ecx, 13628(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	13628(%rsp), %eax       # 4-byte Reload
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB68_241
	jmp	.LBB68_240
.LBB68_236:                             # %if.end1390
                                        #   Parent Loop BB68_232 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	13640(%rsp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$18069, 38596(%rsp)     # imm = 0x4695
	movq	%rsi, %rdi
	addq	$8, %rdi
	movl	8(%rsi), %r8d
	movl	$18072, 38596(%rsp)     # imm = 0x4698
	cmpl	$0, %r8d
	movl	13820(%rsp), %r9d       # 4-byte Reload
	movq	13864(%rsp), %r10       # 8-byte Reload
	movq	13872(%rsp), %r11       # 8-byte Reload
	movq	13880(%rsp), %rbx       # 8-byte Reload
	movq	13888(%rsp), %r14       # 8-byte Reload
	movq	13896(%rsp), %r15       # 8-byte Reload
	movq	13904(%rsp), %r12       # 8-byte Reload
	movq	13912(%rsp), %r13       # 8-byte Reload
	movq	13920(%rsp), %rbp       # 8-byte Reload
	movq	13928(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25456(%rsp)       # 8-byte Spill
	movq	13936(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25448(%rsp)       # 8-byte Spill
	movq	13944(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25440(%rsp)       # 8-byte Spill
	movq	13952(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25432(%rsp)       # 8-byte Spill
	movq	13960(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25424(%rsp)       # 8-byte Spill
	movq	13752(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25416(%rsp)       # 8-byte Spill
	movq	13656(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25408(%rsp)       # 8-byte Spill
	movq	13664(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25400(%rsp)       # 8-byte Spill
	movq	13672(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25392(%rsp)       # 8-byte Spill
	movq	13680(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25384(%rsp)       # 8-byte Spill
	movq	13688(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25376(%rsp)       # 8-byte Spill
	movq	13696(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25368(%rsp)       # 8-byte Spill
	movq	13704(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25360(%rsp)       # 8-byte Spill
	movq	13712(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25352(%rsp)       # 8-byte Spill
	movq	13720(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25344(%rsp)       # 8-byte Spill
	movq	13856(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25336(%rsp)       # 8-byte Spill
	movq	13848(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25248(%rsp)       # 8-byte Spill
	movq	13776(%rsp), %rdx       # 8-byte Reload
	movl	%eax, 13624(%rsp)       # 4-byte Spill
	movl	13840(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	13836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	13832(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	13828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	13824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	13816(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	13812(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	13808(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	13804(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	13800(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	13796(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	13792(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	13788(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	13784(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	13732(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	13972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	13748(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	13764(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	13648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	13844(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%rbp, 25464(%rsp)       # 8-byte Spill
	movq	%rdx, 25232(%rsp)       # 8-byte Spill
	movq	%rsi, 13616(%rsp)       # 8-byte Spill
	movq	%rdi, 13608(%rsp)       # 8-byte Spill
	movl	%r8d, 13604(%rsp)       # 4-byte Spill
	movl	%r9d, 25332(%rsp)       # 4-byte Spill
	movq	%r10, 25520(%rsp)       # 8-byte Spill
	movq	%r11, 25512(%rsp)       # 8-byte Spill
	movq	%rbx, 25504(%rsp)       # 8-byte Spill
	movq	%r14, 25496(%rsp)       # 8-byte Spill
	movq	%r15, 25488(%rsp)       # 8-byte Spill
	movq	%r12, 25480(%rsp)       # 8-byte Spill
	movq	%r13, 25472(%rsp)       # 8-byte Spill
	movl	%ecx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.237:                              # %if.end1396
                                        #   in Loop: Header=BB68_236 Depth=2
	movq	13736(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$18075, 38596(%rsp)     # imm = 0x469B
	shll	$8, %ecx
	movq	13616(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$18076, 38596(%rsp)     # imm = 0x469C
	movb	(%rsi), %dil
	movl	$18078, 38596(%rsp)     # imm = 0x469E
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$18079, 38596(%rsp)     # imm = 0x469F
	movl	13624(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	13768(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$18081, 38596(%rsp)     # imm = 0x46A1
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$18083, 38596(%rsp)     # imm = 0x46A3
	movl	13604(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	13608(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$18085, 38596(%rsp)     # imm = 0x46A5
	movl	12(%rdx), %r10d
	movl	$18087, 38596(%rsp)     # imm = 0x46A7
	addl	$1, %r10d
	movl	%r10d, 12(%rdx)
	movl	$18091, 38596(%rsp)     # imm = 0x46AB
	cmpl	$0, %r10d
	movl	%ecx, 13600(%rsp)       # 4-byte Spill
	movl	%r8d, 13596(%rsp)       # 4-byte Spill
	jne	.LBB68_239
# %bb.238:                              # %if.then1419
                                        #   in Loop: Header=BB68_236 Depth=2
	movq	13616(%rsp), %rax       # 8-byte Reload
	movl	16(%rax), %ecx
	movl	$18093, 38596(%rsp)     # imm = 0x46AD
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movl	$18102, 38596(%rsp)     # imm = 0x46B6
.LBB68_239:                             # %if.end1423
                                        #   in Loop: Header=BB68_236 Depth=2
	movl	13624(%rsp), %eax       # 4-byte Reload
	cmpl	$-8, %eax
	movl	13600(%rsp), %ecx       # 4-byte Reload
	movl	13596(%rsp), %edx       # 4-byte Reload
	movl	13596(%rsp), %esi       # 4-byte Reload
	movl	%ecx, 13636(%rsp)       # 4-byte Spill
	movl	%edx, 13632(%rsp)       # 4-byte Spill
	movl	%esi, 13640(%rsp)       # 4-byte Spill
	jg	.LBB68_235
	jmp	.LBB68_236
.LBB68_240:                             # %if.end1429
                                        #   in Loop: Header=BB68_232 Depth=1
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movl	13648(%rsp), %ecx       # 4-byte Reload
	addl	$1, %ecx
	movl	13972(%rsp), %edx       # 4-byte Reload
	cmpl	%edx, %ecx
	movl	%ecx, %esi
	movl	13820(%rsp), %edi       # 4-byte Reload
	movq	13864(%rsp), %r8        # 8-byte Reload
	movq	13872(%rsp), %r9        # 8-byte Reload
	movq	13880(%rsp), %r10       # 8-byte Reload
	movq	13888(%rsp), %r11       # 8-byte Reload
	movq	13896(%rsp), %rbx       # 8-byte Reload
	movq	13904(%rsp), %r14       # 8-byte Reload
	movq	13912(%rsp), %r15       # 8-byte Reload
	movq	13920(%rsp), %r12       # 8-byte Reload
	movq	13928(%rsp), %r13       # 8-byte Reload
	movq	13936(%rsp), %rbp       # 8-byte Reload
	movq	13944(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25440(%rsp)       # 8-byte Spill
	movq	13952(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25432(%rsp)       # 8-byte Spill
	movq	13960(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25424(%rsp)       # 8-byte Spill
	movq	13752(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25416(%rsp)       # 8-byte Spill
	movq	13656(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25408(%rsp)       # 8-byte Spill
	movq	13664(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25400(%rsp)       # 8-byte Spill
	movq	13672(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25392(%rsp)       # 8-byte Spill
	movq	13680(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25384(%rsp)       # 8-byte Spill
	movq	13688(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25376(%rsp)       # 8-byte Spill
	movq	13696(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25368(%rsp)       # 8-byte Spill
	movq	13704(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25360(%rsp)       # 8-byte Spill
	movq	13712(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25352(%rsp)       # 8-byte Spill
	movq	13720(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25344(%rsp)       # 8-byte Spill
	movq	13856(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25336(%rsp)       # 8-byte Spill
	movq	13848(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25248(%rsp)       # 8-byte Spill
	movq	13776(%rsp), %rdx       # 8-byte Reload
	movl	%eax, 13592(%rsp)       # 4-byte Spill
	movl	13840(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	13836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	13832(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	13828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	13824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	13816(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	13812(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	13808(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	13804(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	13800(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	13796(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	13792(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	13788(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	13784(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	13732(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	13972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	13748(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	13764(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	13844(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	13592(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movq	%rbp, 25448(%rsp)       # 8-byte Spill
	movq	%rdx, 25232(%rsp)       # 8-byte Spill
	movl	%esi, 13652(%rsp)       # 4-byte Spill
	movl	%edi, 25332(%rsp)       # 4-byte Spill
	movq	%r8, 25520(%rsp)        # 8-byte Spill
	movq	%r9, 25512(%rsp)        # 8-byte Spill
	movq	%r10, 25504(%rsp)       # 8-byte Spill
	movq	%r11, 25496(%rsp)       # 8-byte Spill
	movq	%rbx, 25488(%rsp)       # 8-byte Spill
	movq	%r14, 25480(%rsp)       # 8-byte Spill
	movq	%r15, 25472(%rsp)       # 8-byte Spill
	movq	%r12, 25464(%rsp)       # 8-byte Spill
	movq	%r13, 25456(%rsp)       # 8-byte Spill
	movl	%ecx, 25256(%rsp)       # 4-byte Spill
	jl	.LBB68_232
	jmp	.LBB68_542
.LBB68_241:                             # %while.end1435
	movl	13648(%rsp), %eax       # 4-byte Reload
	movb	%al, %cl
	movl	13844(%rsp), %edx       # 4-byte Reload
	movslq	%edx, %rsi
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movb	%cl, 25886(%rdi,%rsi)
	movl	$18137, 38596(%rsp)     # imm = 0x46D9
	addl	$1, %edx
	movl	13764(%rsp), %r8d       # 4-byte Reload
	movl	13784(%rsp), %r9d       # 4-byte Reload
	movl	13788(%rsp), %r10d      # 4-byte Reload
	movl	13792(%rsp), %r11d      # 4-byte Reload
	movl	13796(%rsp), %ebx       # 4-byte Reload
	movl	13800(%rsp), %ebp       # 4-byte Reload
	movl	13804(%rsp), %r14d      # 4-byte Reload
	movl	13808(%rsp), %r15d      # 4-byte Reload
	movl	13812(%rsp), %r12d      # 4-byte Reload
	movl	13816(%rsp), %r13d      # 4-byte Reload
	movl	13820(%rsp), %eax       # 4-byte Reload
	movl	13824(%rsp), %ecx       # 4-byte Reload
	movl	13828(%rsp), %esi       # 4-byte Reload
	movl	13832(%rsp), %edi       # 4-byte Reload
	movl	%eax, 14332(%rsp)       # 4-byte Spill
	movl	13836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14580(%rsp)       # 4-byte Spill
	movl	13840(%rsp), %eax       # 4-byte Reload
	movl	%esi, 14588(%rsp)       # 4-byte Spill
	movq	13776(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14568(%rsp)       # 8-byte Spill
	movq	13848(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14560(%rsp)       # 8-byte Spill
	movq	13856(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14552(%rsp)       # 8-byte Spill
	movq	13864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14544(%rsp)       # 8-byte Spill
	movq	13872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14536(%rsp)       # 8-byte Spill
	movq	13880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14528(%rsp)       # 8-byte Spill
	movq	13888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14520(%rsp)       # 8-byte Spill
	movq	13896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14512(%rsp)       # 8-byte Spill
	movq	13904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14504(%rsp)       # 8-byte Spill
	movq	13912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14496(%rsp)       # 8-byte Spill
	movq	13920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14488(%rsp)       # 8-byte Spill
	movq	13928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14480(%rsp)       # 8-byte Spill
	movq	13936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14472(%rsp)       # 8-byte Spill
	movq	13944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14464(%rsp)       # 8-byte Spill
	movq	13952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14456(%rsp)       # 8-byte Spill
	movq	13960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14448(%rsp)       # 8-byte Spill
	movq	13752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14440(%rsp)       # 8-byte Spill
	movq	13656(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14432(%rsp)       # 8-byte Spill
	movq	13664(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14424(%rsp)       # 8-byte Spill
	movq	13672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14416(%rsp)       # 8-byte Spill
	movq	13680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14408(%rsp)       # 8-byte Spill
	movq	13688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14400(%rsp)       # 8-byte Spill
	movq	13696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14392(%rsp)       # 8-byte Spill
	movq	13704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14384(%rsp)       # 8-byte Spill
	movq	13712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 14376(%rsp)       # 8-byte Spill
	movq	13720(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 14372(%rsp)       # 4-byte Spill
	movl	13732(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14336(%rsp)       # 4-byte Spill
	movl	13972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14368(%rsp)       # 4-byte Spill
	movl	13748(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14364(%rsp)       # 4-byte Spill
	movl	13648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 14360(%rsp)       # 4-byte Spill
	movl	%edi, 14584(%rsp)       # 4-byte Spill
	movq	%rsi, 14344(%rsp)       # 8-byte Spill
	movl	%r8d, 14592(%rsp)       # 4-byte Spill
	movl	%r9d, 14328(%rsp)       # 4-byte Spill
	movl	%r10d, 14324(%rsp)      # 4-byte Spill
	movl	%r11d, 14320(%rsp)      # 4-byte Spill
	movl	%ebx, 14316(%rsp)       # 4-byte Spill
	movl	%ebp, 14312(%rsp)       # 4-byte Spill
	movl	%r14d, 14308(%rsp)      # 4-byte Spill
	movl	%r15d, 14304(%rsp)      # 4-byte Spill
	movl	%r12d, 14300(%rsp)      # 4-byte Spill
	movl	%r13d, 14296(%rsp)      # 4-byte Spill
	movl	%ecx, 14340(%rsp)       # 4-byte Spill
	movl	%edx, 14356(%rsp)       # 4-byte Spill
	jmp	.LBB68_230
.LBB68_242:                             # %for.end1441
	leaq	38590(%rsp), %rax
	movl	14272(%rsp), %ecx       # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 13584(%rsp)       # 8-byte Spill
	jle	.LBB68_254
# %bb.243:                              # %for.body1447.lr.ph
	xorl	%eax, %eax
	movb	%al, %cl
	movl	14272(%rsp), %eax       # 4-byte Reload
	cmpl	$32, %eax
	movb	%cl, 13583(%rsp)        # 1-byte Spill
	jb	.LBB68_252
# %bb.244:                              # %vector.scevcheck
	xorl	%eax, %eax
	movb	%al, %cl
	movl	14272(%rsp), %eax       # 4-byte Reload
	addl	$-1, %eax
	movb	%al, %dl
	cmpb	$-1, %dl
	sete	%dl
	cmpl	$255, %eax
	seta	%sil
	orb	%sil, %dl
	testb	$1, %dl
	movb	%cl, 13583(%rsp)        # 1-byte Spill
	jne	.LBB68_252
# %bb.245:                              # %vector.ph
	movl	14272(%rsp), %eax       # 4-byte Reload
	andl	$-32, %eax
	movb	%al, %cl
	movl	%eax, %edx
	addl	$-32, %edx
	movl	%edx, %esi
	shrl	$5, %esi
	addl	$1, %esi
	movl	%esi, %edi
	andl	$3, %edi
	movaps	.LCPI68_0(%rip), %xmm0  # xmm0 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
	xorl	%r8d, %r8d
	subl	$96, %edx
	movl	%eax, 13576(%rsp)       # 4-byte Spill
	movb	%cl, 13575(%rsp)        # 1-byte Spill
	movl	%edx, 13568(%rsp)       # 4-byte Spill
	movl	%esi, 13564(%rsp)       # 4-byte Spill
	movl	%edi, 13560(%rsp)       # 4-byte Spill
	movl	%r8d, 13556(%rsp)       # 4-byte Spill
	movaps	%xmm0, 13536(%rsp)      # 16-byte Spill
	jb	.LBB68_248
	jmp	.LBB68_246
.LBB68_246:                             # %vector.ph.new
	movl	13564(%rsp), %eax       # 4-byte Reload
	movl	13560(%rsp), %ecx       # 4-byte Reload
	subl	%ecx, %eax
	movaps	.LCPI68_0(%rip), %xmm0  # xmm0 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
	xorl	%edx, %edx
	movaps	%xmm0, 13520(%rsp)      # 16-byte Spill
	movl	%edx, 13516(%rsp)       # 4-byte Spill
	movl	%eax, 13512(%rsp)       # 4-byte Spill
	jmp	.LBB68_247
.LBB68_247:                             # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	movl	13512(%rsp), %eax       # 4-byte Reload
	movaps	13520(%rsp), %xmm0      # 16-byte Reload
	movl	13516(%rsp), %ecx       # 4-byte Reload
	movaps	.LCPI68_1(%rip), %xmm1  # xmm1 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	movaps	%xmm0, %xmm2
	paddb	%xmm1, %xmm2
	movl	%ecx, %edx
	andl	$128, %edx
	movl	%edx, %esi
	movups	%xmm0, 38590(%rsp,%rsi)
	movl	$18140, 38596(%rsp)     # imm = 0x46DC
	movups	%xmm2, 38606(%rsp,%rsi)
	movl	$18148, 38596(%rsp)     # imm = 0x46E4
	movaps	.LCPI68_2(%rip), %xmm1  # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movaps	%xmm0, %xmm2
	paddb	%xmm1, %xmm2
	movaps	.LCPI68_3(%rip), %xmm1  # xmm1 = [48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48]
	movaps	%xmm0, %xmm3
	paddb	%xmm1, %xmm3
	movl	%edx, %edi
	orl	$32, %edi
	movl	%edi, %esi
	movups	%xmm2, 38590(%rsp,%rsi)
	movl	$18151, 38596(%rsp)     # imm = 0x46E7
	movups	%xmm3, 38606(%rsp,%rsi)
	movl	$18159, 38596(%rsp)     # imm = 0x46EF
	movaps	.LCPI68_4(%rip), %xmm1  # xmm1 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	movaps	%xmm0, %xmm2
	paddb	%xmm1, %xmm2
	movaps	.LCPI68_5(%rip), %xmm1  # xmm1 = [80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80]
	movaps	%xmm0, %xmm3
	paddb	%xmm1, %xmm3
	movl	%edx, %edi
	orl	$64, %edi
	movl	%edi, %esi
	movups	%xmm2, 38590(%rsp,%rsi)
	movl	$18162, 38596(%rsp)     # imm = 0x46F2
	movups	%xmm3, 38606(%rsp,%rsi)
	movl	$18170, 38596(%rsp)     # imm = 0x46FA
	movaps	.LCPI68_6(%rip), %xmm1  # xmm1 = [96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96]
	movaps	%xmm0, %xmm2
	paddb	%xmm1, %xmm2
	movaps	.LCPI68_7(%rip), %xmm1  # xmm1 = [112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112]
	movaps	%xmm0, %xmm3
	paddb	%xmm1, %xmm3
	orl	$96, %edx
	movl	%edx, %esi
	movups	%xmm2, 38590(%rsp,%rsi)
	movl	$18173, 38596(%rsp)     # imm = 0x46FD
	movups	%xmm3, 38606(%rsp,%rsi)
	movl	$18192, 38596(%rsp)     # imm = 0x4710
	subl	$-128, %ecx
	movaps	.LCPI68_8(%rip), %xmm1  # xmm1 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pxor	%xmm1, %xmm0
	addl	$-4, %eax
	cmpl	$0, %eax
	movl	%ecx, %edx
	movaps	%xmm0, %xmm1
	movl	%eax, 13512(%rsp)       # 4-byte Spill
	movl	%ecx, 13556(%rsp)       # 4-byte Spill
	movaps	%xmm1, 13520(%rsp)      # 16-byte Spill
	movl	%edx, 13516(%rsp)       # 4-byte Spill
	movaps	%xmm0, 13536(%rsp)      # 16-byte Spill
	jne	.LBB68_247
.LBB68_248:                             # %middle.block.unr-lcssa
	movaps	13536(%rsp), %xmm0      # 16-byte Reload
	movl	13556(%rsp), %eax       # 4-byte Reload
	movl	13560(%rsp), %ecx       # 4-byte Reload
	cmpl	$0, %ecx
	movaps	%xmm0, 13488(%rsp)      # 16-byte Spill
	movl	%eax, 13484(%rsp)       # 4-byte Spill
	je	.LBB68_251
# %bb.249:                              # %vector.body.epil.preheader
	movl	13484(%rsp), %eax       # 4-byte Reload
	movaps	13488(%rsp), %xmm0      # 16-byte Reload
	movl	13560(%rsp), %ecx       # 4-byte Reload
	movl	%eax, 13480(%rsp)       # 4-byte Spill
	movaps	%xmm0, 13456(%rsp)      # 16-byte Spill
	movl	%ecx, 13452(%rsp)       # 4-byte Spill
	jmp	.LBB68_250
.LBB68_250:                             # %vector.body.epil
                                        # =>This Inner Loop Header: Depth=1
	movl	13452(%rsp), %eax       # 4-byte Reload
	movaps	13456(%rsp), %xmm0      # 16-byte Reload
	movl	13480(%rsp), %ecx       # 4-byte Reload
	movaps	.LCPI68_1(%rip), %xmm1  # xmm1 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	movaps	%xmm0, %xmm2
	paddb	%xmm1, %xmm2
	movl	%ecx, %edx
	andl	$224, %edx
	movl	%edx, %esi
	movups	%xmm0, 38590(%rsp,%rsi)
	movl	$18195, 38596(%rsp)     # imm = 0x4713
	movups	%xmm2, 38606(%rsp,%rsi)
	movl	$18206, 38596(%rsp)     # imm = 0x471E
	addl	$32, %ecx
	movaps	.LCPI68_2(%rip), %xmm1  # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	paddb	%xmm1, %xmm0
	addl	$-1, %eax
	cmpl	$0, %eax
	movaps	%xmm0, 13456(%rsp)      # 16-byte Spill
	movl	%ecx, 13480(%rsp)       # 4-byte Spill
	movl	%eax, 13452(%rsp)       # 4-byte Spill
	jne	.LBB68_250
.LBB68_251:                             # %middle.block
	movl	14272(%rsp), %eax       # 4-byte Reload
	movl	13576(%rsp), %ecx       # 4-byte Reload
	cmpl	%ecx, %eax
	movb	13575(%rsp), %dl        # 1-byte Reload
	movb	%dl, 13583(%rsp)        # 1-byte Spill
	je	.LBB68_254
.LBB68_252:                             # %for.body1447.preheader
	movb	13583(%rsp), %al        # 1-byte Reload
	movb	%al, 13451(%rsp)        # 1-byte Spill
.LBB68_253:                             # %for.body1447
                                        # =>This Inner Loop Header: Depth=1
	movb	13451(%rsp), %al        # 1-byte Reload
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movb	%al, 38590(%rsp,%rdx)
	movl	$18217, 38596(%rsp)     # imm = 0x4729
	addb	$1, %al
	movzbl	%al, %ecx
	movl	14272(%rsp), %esi       # 4-byte Reload
	cmpl	%ecx, %esi
	movb	%al, 13451(%rsp)        # 1-byte Spill
	jg	.LBB68_253
.LBB68_254:                             # %for.end1452
	xorl	%eax, %eax
	movl	14060(%rsp), %ecx       # 4-byte Reload
	cmpl	$0, %ecx
	movl	%eax, 13444(%rsp)       # 4-byte Spill
	jle	.LBB68_264
# %bb.255:                              # %for.body1456.lr.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	14060(%rsp), %eax       # 4-byte Reload
	movl	%eax, %edx
	movl	%edx, %esi
	movq	%rsi, 13432(%rsp)       # 8-byte Spill
	movq	%rcx, 13424(%rsp)       # 8-byte Spill
.LBB68_256:                             # %for.body1456
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_259 Depth 2
                                        #     Child Loop BB68_262 Depth 2
	movq	13424(%rsp), %rax       # 8-byte Reload
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movb	25886(%rcx,%rax), %dl
	movl	$18220, 38596(%rsp)     # imm = 0x472C
	movzbl	%dl, %esi
	movl	%esi, %edi
	movb	38590(%rsp,%rdi), %r8b
	movl	$18233, 38596(%rsp)     # imm = 0x4739
	cmpb	$0, %dl
	movq	%rax, 13416(%rsp)       # 8-byte Spill
	movb	%dl, 13415(%rsp)        # 1-byte Spill
	movq	%rdi, 13400(%rsp)       # 8-byte Spill
	movb	%r8b, 13399(%rsp)       # 1-byte Spill
	je	.LBB68_263
# %bb.257:                              # %while.body1466.preheader
                                        #   in Loop: Header=BB68_256 Depth=1
	movb	13415(%rsp), %al        # 1-byte Reload
	addb	$-1, %al
	movb	13415(%rsp), %cl        # 1-byte Reload
	andb	$3, %cl
	cmpb	$0, %cl
	movq	13400(%rsp), %rdx       # 8-byte Reload
	movb	%al, 13398(%rsp)        # 1-byte Spill
	movb	%cl, 13397(%rsp)        # 1-byte Spill
	movq	%rdx, 13384(%rsp)       # 8-byte Spill
	je	.LBB68_260
# %bb.258:                              # %while.body1466.prol.preheader
                                        #   in Loop: Header=BB68_256 Depth=1
	movq	13400(%rsp), %rax       # 8-byte Reload
	movb	13397(%rsp), %cl        # 1-byte Reload
	movq	%rax, 13376(%rsp)       # 8-byte Spill
	movb	%cl, 13375(%rsp)        # 1-byte Spill
	jmp	.LBB68_259
.LBB68_259:                             # %while.body1466.prol
                                        #   Parent Loop BB68_256 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	13375(%rsp), %al        # 1-byte Reload
	movq	13376(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, %rdx
	addq	$-1, %rdx
	movb	38589(%rsp,%rcx), %sil
	movl	$18235, 38596(%rsp)     # imm = 0x473B
	movb	%sil, 38590(%rsp,%rcx)
	movl	$18246, 38596(%rsp)     # imm = 0x4746
	addb	$-1, %al
	cmpb	$0, %al
	movq	%rdx, %rcx
	movb	%al, 13375(%rsp)        # 1-byte Spill
	movq	%rcx, 13376(%rsp)       # 8-byte Spill
	movq	%rdx, 13384(%rsp)       # 8-byte Spill
	jne	.LBB68_259
.LBB68_260:                             # %while.body1466.prol.loopexit
                                        #   in Loop: Header=BB68_256 Depth=1
	movq	13384(%rsp), %rax       # 8-byte Reload
	movb	13398(%rsp), %cl        # 1-byte Reload
	cmpb	$3, %cl
	movq	%rax, 13360(%rsp)       # 8-byte Spill
	jb	.LBB68_263
# %bb.261:                              # %while.body1466.preheader.new
                                        #   in Loop: Header=BB68_256 Depth=1
	movq	13360(%rsp), %rax       # 8-byte Reload
	movq	%rax, 13352(%rsp)       # 8-byte Spill
	jmp	.LBB68_262
.LBB68_262:                             # %while.body1466
                                        #   Parent Loop BB68_256 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	13352(%rsp), %rax       # 8-byte Reload
	movb	38589(%rsp,%rax), %cl
	movl	$18248, 38596(%rsp)     # imm = 0x4748
	movb	%cl, 38590(%rsp,%rax)
	movl	$18251, 38596(%rsp)     # imm = 0x474B
	movb	38588(%rsp,%rax), %cl
	movl	$18253, 38596(%rsp)     # imm = 0x474D
	movb	%cl, 38589(%rsp,%rax)
	movl	$18256, 38596(%rsp)     # imm = 0x4750
	movq	%rax, %rdx
	addq	$-3, %rdx
	movb	38587(%rsp,%rax), %cl
	movl	$18258, 38596(%rsp)     # imm = 0x4752
	movb	%cl, 38588(%rsp,%rax)
	movl	$18260, 38596(%rsp)     # imm = 0x4754
	movq	%rax, %rsi
	addq	$-4, %rsi
	movb	38586(%rsp,%rax), %cl
	movl	$18262, 38596(%rsp)     # imm = 0x4756
	movb	%cl, 38587(%rsp,%rax)
	movl	$18266, 38596(%rsp)     # imm = 0x475A
	movb	%dl, %cl
	cmpb	$1, %cl
	movq	%rsi, 13352(%rsp)       # 8-byte Spill
	jne	.LBB68_262
.LBB68_263:                             # %while.end1474
                                        #   in Loop: Header=BB68_256 Depth=1
	movq	13584(%rsp), %rax       # 8-byte Reload
	movb	13399(%rsp), %cl        # 1-byte Reload
	movb	%cl, (%rax)
	movl	$18268, 38596(%rsp)     # imm = 0x475C
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movq	13416(%rsp), %rsi       # 8-byte Reload
	movb	%cl, 7884(%rdx,%rsi)
	movl	$18417, 38596(%rsp)     # imm = 0x47F1
	addq	$1, %rsi
	movq	13432(%rsp), %rdi       # 8-byte Reload
	cmpq	%rdi, %rsi
	movl	14060(%rsp), %r8d       # 4-byte Reload
	movq	%rsi, 13424(%rsp)       # 8-byte Spill
	movl	%r8d, 13444(%rsp)       # 4-byte Spill
	jne	.LBB68_256
.LBB68_264:                             # %for.end1480
	movl	13444(%rsp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movl	14088(%rsp), %edx       # 4-byte Reload
	movl	14092(%rsp), %esi       # 4-byte Reload
	movl	14096(%rsp), %edi       # 4-byte Reload
	movl	14100(%rsp), %r8d       # 4-byte Reload
	movl	14104(%rsp), %r9d       # 4-byte Reload
	movl	14108(%rsp), %r10d      # 4-byte Reload
	movl	14112(%rsp), %r11d      # 4-byte Reload
	movl	14116(%rsp), %ebx       # 4-byte Reload
	movl	14124(%rsp), %ebp       # 4-byte Reload
	movl	14128(%rsp), %r14d      # 4-byte Reload
	movl	14132(%rsp), %r15d      # 4-byte Reload
	movl	14136(%rsp), %r12d      # 4-byte Reload
	movl	14140(%rsp), %r13d      # 4-byte Reload
	movl	%eax, 13348(%rsp)       # 4-byte Spill
	movl	14144(%rsp), %eax       # 4-byte Reload
	movl	%esi, 13344(%rsp)       # 4-byte Spill
	movq	14072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13336(%rsp)       # 8-byte Spill
	movq	14152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13328(%rsp)       # 8-byte Spill
	movq	14160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13320(%rsp)       # 8-byte Spill
	movq	14168(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13312(%rsp)       # 8-byte Spill
	movq	14176(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13304(%rsp)       # 8-byte Spill
	movq	14184(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13296(%rsp)       # 8-byte Spill
	movq	14192(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13288(%rsp)       # 8-byte Spill
	movq	14200(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13280(%rsp)       # 8-byte Spill
	movq	14208(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13272(%rsp)       # 8-byte Spill
	movq	14216(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13264(%rsp)       # 8-byte Spill
	movq	14224(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13256(%rsp)       # 8-byte Spill
	movq	14232(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13248(%rsp)       # 8-byte Spill
	movq	14240(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13240(%rsp)       # 8-byte Spill
	movq	14248(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13232(%rsp)       # 8-byte Spill
	movq	14256(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13224(%rsp)       # 8-byte Spill
	movq	14264(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13216(%rsp)       # 8-byte Spill
	movq	13976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13208(%rsp)       # 8-byte Spill
	movq	13984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13200(%rsp)       # 8-byte Spill
	movq	13992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13192(%rsp)       # 8-byte Spill
	movq	14000(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13184(%rsp)       # 8-byte Spill
	movq	14008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13176(%rsp)       # 8-byte Spill
	movq	14016(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13168(%rsp)       # 8-byte Spill
	movq	14024(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13160(%rsp)       # 8-byte Spill
	movq	14032(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13152(%rsp)       # 8-byte Spill
	movq	14040(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13144(%rsp)       # 8-byte Spill
	movq	14048(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 13140(%rsp)       # 4-byte Spill
	movl	14120(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13136(%rsp)       # 4-byte Spill
	movl	14060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13132(%rsp)       # 4-byte Spill
	movl	14272(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13128(%rsp)       # 4-byte Spill
	movl	14064(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13124(%rsp)       # 4-byte Spill
	movl	14068(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13120(%rsp)       # 4-byte Spill
	movl	13348(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13116(%rsp)       # 4-byte Spill
	movl	%r13d, 13112(%rsp)      # 4-byte Spill
	movl	%edx, 13108(%rsp)       # 4-byte Spill
	movq	%rsi, 13096(%rsp)       # 8-byte Spill
	movl	%edi, 13092(%rsp)       # 4-byte Spill
	movl	%r8d, 13088(%rsp)       # 4-byte Spill
	movl	%r9d, 13084(%rsp)       # 4-byte Spill
	movl	%r10d, 13080(%rsp)      # 4-byte Spill
	movl	%r11d, 13076(%rsp)      # 4-byte Spill
	movl	%ebx, 13072(%rsp)       # 4-byte Spill
	movl	%ebp, 13068(%rsp)       # 4-byte Spill
	movl	%r14d, 13064(%rsp)      # 4-byte Spill
	movl	%r15d, 13060(%rsp)      # 4-byte Spill
	movl	%r12d, 13056(%rsp)      # 4-byte Spill
	movl	%ecx, 13052(%rsp)       # 4-byte Spill
.LBB68_265:                             # %for.cond1481
	movl	13116(%rsp), %eax       # 4-byte Reload
	movl	13120(%rsp), %ecx       # 4-byte Reload
	movl	13052(%rsp), %edx       # 4-byte Reload
	movl	13124(%rsp), %esi       # 4-byte Reload
	movl	13128(%rsp), %edi       # 4-byte Reload
	movl	13132(%rsp), %r8d       # 4-byte Reload
	movl	13136(%rsp), %r9d       # 4-byte Reload
	movq	13096(%rsp), %r10       # 8-byte Reload
	movq	13144(%rsp), %r11       # 8-byte Reload
	movq	13152(%rsp), %rbx       # 8-byte Reload
	movq	13160(%rsp), %r14       # 8-byte Reload
	movq	13168(%rsp), %r15       # 8-byte Reload
	movq	13176(%rsp), %r12       # 8-byte Reload
	movq	13184(%rsp), %r13       # 8-byte Reload
	movq	13192(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 13048(%rsp)       # 4-byte Spill
	movq	13200(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13040(%rsp)       # 8-byte Spill
	movq	13208(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13032(%rsp)       # 8-byte Spill
	movq	13216(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13024(%rsp)       # 8-byte Spill
	movq	13224(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13016(%rsp)       # 8-byte Spill
	movq	13232(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13008(%rsp)       # 8-byte Spill
	movq	13240(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13000(%rsp)       # 8-byte Spill
	movq	13248(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12992(%rsp)       # 8-byte Spill
	movq	13256(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12984(%rsp)       # 8-byte Spill
	movq	13264(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12976(%rsp)       # 8-byte Spill
	movq	13272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12968(%rsp)       # 8-byte Spill
	movq	13280(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12960(%rsp)       # 8-byte Spill
	movq	13288(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12952(%rsp)       # 8-byte Spill
	movq	13296(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12944(%rsp)       # 8-byte Spill
	movq	13304(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12936(%rsp)       # 8-byte Spill
	movq	13312(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12928(%rsp)       # 8-byte Spill
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12920(%rsp)       # 8-byte Spill
	movq	13328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12912(%rsp)       # 8-byte Spill
	movq	13336(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 12908(%rsp)       # 4-byte Spill
	movl	13140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12904(%rsp)       # 4-byte Spill
	movl	13112(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12900(%rsp)       # 4-byte Spill
	movl	13056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12896(%rsp)       # 4-byte Spill
	movl	13060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12892(%rsp)       # 4-byte Spill
	movl	13064(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12888(%rsp)       # 4-byte Spill
	movl	13068(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12884(%rsp)       # 4-byte Spill
	movl	13072(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12880(%rsp)       # 4-byte Spill
	movl	13076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12876(%rsp)       # 4-byte Spill
	movl	13080(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12872(%rsp)       # 4-byte Spill
	movl	13084(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12868(%rsp)       # 4-byte Spill
	movl	13088(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12864(%rsp)       # 4-byte Spill
	movl	13092(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12860(%rsp)       # 4-byte Spill
	movl	13344(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12856(%rsp)       # 4-byte Spill
	movl	13108(%rsp), %eax       # 4-byte Reload
	cmpl	%edi, %edx
	movl	%eax, 36828(%rsp)       # 4-byte Spill
	movl	12856(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36824(%rsp)       # 4-byte Spill
	movl	12860(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36820(%rsp)       # 4-byte Spill
	movl	12864(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36816(%rsp)       # 4-byte Spill
	movl	12868(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36812(%rsp)       # 4-byte Spill
	movl	12872(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36808(%rsp)       # 4-byte Spill
	movl	12876(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36804(%rsp)       # 4-byte Spill
	movl	12880(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36800(%rsp)       # 4-byte Spill
	movl	12884(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36796(%rsp)       # 4-byte Spill
	movl	12888(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36792(%rsp)       # 4-byte Spill
	movl	12892(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36788(%rsp)       # 4-byte Spill
	movl	12896(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36784(%rsp)       # 4-byte Spill
	movl	12900(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36780(%rsp)       # 4-byte Spill
	movl	12904(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 12848(%rsp)       # 8-byte Spill
	movq	%rsi, 36760(%rsp)       # 8-byte Spill
	movq	12912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36752(%rsp)       # 8-byte Spill
	movq	12920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36744(%rsp)       # 8-byte Spill
	movq	12928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36736(%rsp)       # 8-byte Spill
	movq	12936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36728(%rsp)       # 8-byte Spill
	movq	12944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36720(%rsp)       # 8-byte Spill
	movq	12952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36712(%rsp)       # 8-byte Spill
	movq	12960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36704(%rsp)       # 8-byte Spill
	movq	12968(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36696(%rsp)       # 8-byte Spill
	movq	12976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36688(%rsp)       # 8-byte Spill
	movq	12984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36680(%rsp)       # 8-byte Spill
	movq	12992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36672(%rsp)       # 8-byte Spill
	movq	13000(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36664(%rsp)       # 8-byte Spill
	movq	13008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36656(%rsp)       # 8-byte Spill
	movq	13016(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36648(%rsp)       # 8-byte Spill
	movq	13024(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36640(%rsp)       # 8-byte Spill
	movq	13032(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36632(%rsp)       # 8-byte Spill
	movq	13040(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36624(%rsp)       # 8-byte Spill
	movq	%rbp, %rsi
	movq	%rsi, 36616(%rsp)       # 8-byte Spill
	movq	%r13, %rsi
	movq	%rsi, 36608(%rsp)       # 8-byte Spill
	movq	%r12, %rsi
	movq	%rsi, 36600(%rsp)       # 8-byte Spill
	movq	%r15, %rsi
	movq	%rsi, 36592(%rsp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rsi, 36584(%rsp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rsi, 36576(%rsp)       # 8-byte Spill
	movq	%r11, %rsi
	movq	%rsi, 36568(%rsp)       # 8-byte Spill
	movq	%r10, %rsi
	movl	%eax, 36564(%rsp)       # 4-byte Spill
	movl	%r9d, %eax
	movl	%eax, 36560(%rsp)       # 4-byte Spill
	movl	%r8d, %eax
	movl	%eax, 36556(%rsp)       # 4-byte Spill
	movl	%edi, %eax
	movl	%eax, 36552(%rsp)       # 4-byte Spill
	movl	13048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36548(%rsp)       # 4-byte Spill
	movl	%ecx, %eax
	movl	%eax, 36540(%rsp)       # 4-byte Spill
	movl	12908(%rsp), %eax       # 4-byte Reload
	movq	%rbp, 12840(%rsp)       # 8-byte Spill
	movl	%ecx, 12836(%rsp)       # 4-byte Spill
	movl	%eax, 36536(%rsp)       # 4-byte Spill
	movq	%rsi, 36472(%rsp)       # 8-byte Spill
	movl	%edi, 12832(%rsp)       # 4-byte Spill
	movl	%r8d, 12828(%rsp)       # 4-byte Spill
	movl	%r9d, 12824(%rsp)       # 4-byte Spill
	movq	%r10, 12816(%rsp)       # 8-byte Spill
	movq	%r11, 12808(%rsp)       # 8-byte Spill
	movq	%rbx, 12800(%rsp)       # 8-byte Spill
	movq	%r14, 12792(%rsp)       # 8-byte Spill
	movq	%r15, 12784(%rsp)       # 8-byte Spill
	movq	%r12, 12776(%rsp)       # 8-byte Spill
	movq	%r13, 12768(%rsp)       # 8-byte Spill
	movl	%edx, 36544(%rsp)       # 4-byte Spill
	jge	.LBB68_294
.LBB68_266:                             # %sw.bb1485
	movl	36536(%rsp), %eax       # 4-byte Reload
	movl	36540(%rsp), %ecx       # 4-byte Reload
	movl	36544(%rsp), %edx       # 4-byte Reload
	movl	36548(%rsp), %esi       # 4-byte Reload
	movl	36552(%rsp), %edi       # 4-byte Reload
	movl	36556(%rsp), %r8d       # 4-byte Reload
	movl	36560(%rsp), %r9d       # 4-byte Reload
	movq	36472(%rsp), %r10       # 8-byte Reload
	movq	36568(%rsp), %r11       # 8-byte Reload
	movq	36576(%rsp), %rbx       # 8-byte Reload
	movq	36584(%rsp), %r14       # 8-byte Reload
	movq	36592(%rsp), %r15       # 8-byte Reload
	movq	36600(%rsp), %r12       # 8-byte Reload
	movq	36608(%rsp), %r13       # 8-byte Reload
	movq	36616(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 12764(%rsp)       # 4-byte Spill
	movq	36624(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12752(%rsp)       # 8-byte Spill
	movq	36632(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12744(%rsp)       # 8-byte Spill
	movq	36640(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12736(%rsp)       # 8-byte Spill
	movq	36648(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12728(%rsp)       # 8-byte Spill
	movq	36656(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12720(%rsp)       # 8-byte Spill
	movq	36664(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12712(%rsp)       # 8-byte Spill
	movq	36672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12704(%rsp)       # 8-byte Spill
	movq	36680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12696(%rsp)       # 8-byte Spill
	movq	36688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12688(%rsp)       # 8-byte Spill
	movq	36696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12680(%rsp)       # 8-byte Spill
	movq	36704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12672(%rsp)       # 8-byte Spill
	movq	36712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12664(%rsp)       # 8-byte Spill
	movq	36720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12656(%rsp)       # 8-byte Spill
	movq	36728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12648(%rsp)       # 8-byte Spill
	movq	36736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12640(%rsp)       # 8-byte Spill
	movq	36744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12632(%rsp)       # 8-byte Spill
	movq	36752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12624(%rsp)       # 8-byte Spill
	movq	36760(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 12620(%rsp)       # 4-byte Spill
	movl	36564(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12616(%rsp)       # 4-byte Spill
	movl	36780(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12612(%rsp)       # 4-byte Spill
	movl	36784(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12608(%rsp)       # 4-byte Spill
	movl	36788(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12604(%rsp)       # 4-byte Spill
	movl	36792(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12600(%rsp)       # 4-byte Spill
	movl	36796(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12596(%rsp)       # 4-byte Spill
	movl	36800(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12592(%rsp)       # 4-byte Spill
	movl	36804(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12588(%rsp)       # 4-byte Spill
	movl	36808(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12584(%rsp)       # 4-byte Spill
	movl	36812(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12580(%rsp)       # 4-byte Spill
	movl	36816(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12576(%rsp)       # 4-byte Spill
	movl	36820(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12572(%rsp)       # 4-byte Spill
	movl	36824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12568(%rsp)       # 4-byte Spill
	movl	36828(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 12560(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rsi       # 8-byte Reload
	movl	$33, (%rsi)
	movl	$18420, 38596(%rsp)     # imm = 0x47F4
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$36, %rsi
	movq	%rsi, 12552(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	36(%rsi), %esi
	movl	$18424, 38596(%rsp)     # imm = 0x47F8
	movl	%esi, 12548(%rsp)       # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$32, %rsi
	movl	%eax, 12544(%rsp)       # 4-byte Spill
	movl	12548(%rsp), %eax       # 4-byte Reload
	cmpl	$4, %eax
	movl	%ecx, 12540(%rsp)       # 4-byte Spill
	movl	%edx, 12536(%rsp)       # 4-byte Spill
	movq	%rsi, 12528(%rsp)       # 8-byte Spill
	movl	%edi, 12524(%rsp)       # 4-byte Spill
	movl	%r8d, 12520(%rsp)       # 4-byte Spill
	movl	%r9d, 12516(%rsp)       # 4-byte Spill
	movq	%r10, 12504(%rsp)       # 8-byte Spill
	movq	%r11, 12496(%rsp)       # 8-byte Spill
	movq	%rbx, 12488(%rsp)       # 8-byte Spill
	movq	%r14, 12480(%rsp)       # 8-byte Spill
	movq	%r15, 12472(%rsp)       # 8-byte Spill
	movq	%r12, 12464(%rsp)       # 8-byte Spill
	movq	%r13, 12456(%rsp)       # 8-byte Spill
	movq	%rbp, 12448(%rsp)       # 8-byte Spill
	jle	.LBB68_268
# %bb.267:                              # %sw.bb1485.if.then1492_crit_edge
	movq	12528(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$18426, 38596(%rsp)     # imm = 0x47FA
	movl	12548(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 12444(%rsp)       # 4-byte Spill
	movl	%edx, 12440(%rsp)       # 4-byte Spill
	jmp	.LBB68_269
.LBB68_268:                             # %if.end1501.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$18428, 38596(%rsp)     # imm = 0x47FC
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$18440, 38596(%rsp)     # imm = 0x4808
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	12548(%rsp), %r9d       # 4-byte Reload
	movq	%rcx, 12432(%rsp)       # 8-byte Spill
	movq	%rdx, 12424(%rsp)       # 8-byte Spill
	movq	%r8, 12416(%rsp)        # 8-byte Spill
	movq	%rdi, 12408(%rsp)       # 8-byte Spill
	movl	%esi, 12404(%rsp)       # 4-byte Spill
	movl	%r9d, 12400(%rsp)       # 4-byte Spill
	jmp	.LBB68_270
.LBB68_269:                             # %if.then1492
	movl	12440(%rsp), %eax       # 4-byte Reload
	movl	12444(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	addl	$-5, %eax
	movl	%ecx, 12396(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	12396(%rsp), %esi       # 4-byte Reload
	shrl	%cl, %esi
	andl	$31, %esi
	movq	12552(%rsp), %rdi       # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$18447, 38596(%rsp)     # imm = 0x480F
	movl	12544(%rsp), %eax       # 4-byte Reload
	movl	12568(%rsp), %r8d       # 4-byte Reload
	movl	12572(%rsp), %r9d       # 4-byte Reload
	movl	12576(%rsp), %r10d      # 4-byte Reload
	movl	12580(%rsp), %r11d      # 4-byte Reload
	movl	12584(%rsp), %ebx       # 4-byte Reload
	movl	12588(%rsp), %ebp       # 4-byte Reload
	movl	12592(%rsp), %r14d      # 4-byte Reload
	movl	12596(%rsp), %r15d      # 4-byte Reload
	movl	12600(%rsp), %r12d      # 4-byte Reload
	movl	12604(%rsp), %r13d      # 4-byte Reload
	movl	12608(%rsp), %ecx       # 4-byte Reload
	movl	12612(%rsp), %edi       # 4-byte Reload
	movl	%eax, 12392(%rsp)       # 4-byte Spill
	movl	12616(%rsp), %eax       # 4-byte Reload
	movl	%esi, 12388(%rsp)       # 4-byte Spill
	movq	12560(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12376(%rsp)       # 8-byte Spill
	movq	12624(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12368(%rsp)       # 8-byte Spill
	movq	12632(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12360(%rsp)       # 8-byte Spill
	movq	12640(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12352(%rsp)       # 8-byte Spill
	movq	12648(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12344(%rsp)       # 8-byte Spill
	movq	12656(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12336(%rsp)       # 8-byte Spill
	movq	12664(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12328(%rsp)       # 8-byte Spill
	movq	12672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12320(%rsp)       # 8-byte Spill
	movq	12680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12312(%rsp)       # 8-byte Spill
	movq	12688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12304(%rsp)       # 8-byte Spill
	movq	12696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12296(%rsp)       # 8-byte Spill
	movq	12704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12288(%rsp)       # 8-byte Spill
	movq	12712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12280(%rsp)       # 8-byte Spill
	movq	12720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12272(%rsp)       # 8-byte Spill
	movq	12728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12264(%rsp)       # 8-byte Spill
	movq	12736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12256(%rsp)       # 8-byte Spill
	movq	12744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12248(%rsp)       # 8-byte Spill
	movq	12752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12240(%rsp)       # 8-byte Spill
	movq	12448(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12232(%rsp)       # 8-byte Spill
	movq	12456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12224(%rsp)       # 8-byte Spill
	movq	12464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12216(%rsp)       # 8-byte Spill
	movq	12472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12208(%rsp)       # 8-byte Spill
	movq	12480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12200(%rsp)       # 8-byte Spill
	movq	12488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12192(%rsp)       # 8-byte Spill
	movq	12496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12184(%rsp)       # 8-byte Spill
	movq	12504(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 12180(%rsp)       # 4-byte Spill
	movl	12388(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12176(%rsp)       # 4-byte Spill
	movl	12520(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12172(%rsp)       # 4-byte Spill
	movl	12524(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12168(%rsp)       # 4-byte Spill
	movl	12764(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12164(%rsp)       # 4-byte Spill
	movl	12536(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12160(%rsp)       # 4-byte Spill
	movl	12540(%rsp), %eax       # 4-byte Reload
	movl	%ecx, 12156(%rsp)       # 4-byte Spill
	movl	%edi, 12152(%rsp)       # 4-byte Spill
	movq	%rsi, 12144(%rsp)       # 8-byte Spill
	movl	%eax, 12140(%rsp)       # 4-byte Spill
	movl	%r8d, 12136(%rsp)       # 4-byte Spill
	movl	%r9d, 12132(%rsp)       # 4-byte Spill
	movl	%r10d, 12128(%rsp)      # 4-byte Spill
	movl	%r11d, 12124(%rsp)      # 4-byte Spill
	movl	%ebx, 12120(%rsp)       # 4-byte Spill
	movl	%ebp, 12116(%rsp)       # 4-byte Spill
	movl	%r14d, 12112(%rsp)      # 4-byte Spill
	movl	%r15d, 12108(%rsp)      # 4-byte Spill
	movl	%r12d, 12104(%rsp)      # 4-byte Spill
	movl	%r13d, 12100(%rsp)      # 4-byte Spill
	movl	%edx, 12096(%rsp)       # 4-byte Spill
	jmp	.LBB68_274
.LBB68_270:                             # %if.end1501
                                        # =>This Inner Loop Header: Depth=1
	movl	12400(%rsp), %eax       # 4-byte Reload
	movl	12404(%rsp), %ecx       # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	12596(%rsp), %esi       # 4-byte Reload
	movq	12640(%rsp), %rdi       # 8-byte Reload
	movq	12648(%rsp), %r8        # 8-byte Reload
	movq	12656(%rsp), %r9        # 8-byte Reload
	movq	12664(%rsp), %r10       # 8-byte Reload
	movq	12672(%rsp), %r11       # 8-byte Reload
	movq	12680(%rsp), %rbx       # 8-byte Reload
	movq	12688(%rsp), %r14       # 8-byte Reload
	movq	12696(%rsp), %r15       # 8-byte Reload
	movq	12704(%rsp), %r12       # 8-byte Reload
	movq	12712(%rsp), %r13       # 8-byte Reload
	movq	12720(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	12728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	12736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	12744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	12752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	12448(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	12456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	12464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	12472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	12480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	12488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	12496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	12504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	12632(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	12624(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	12560(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 12092(%rsp)       # 4-byte Spill
	movl	12616(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	12612(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	12608(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	12604(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	12600(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	12516(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	12592(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	12588(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	12584(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	12580(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	12576(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	12572(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	12568(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	12544(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	12520(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	12524(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	12764(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	12536(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	12540(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	12620(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 12088(%rsp)       # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.271:                              # %if.end1507
                                        #   in Loop: Header=BB68_270 Depth=1
	movq	12528(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$18449, 38596(%rsp)     # imm = 0x4811
	shll	$8, %ecx
	movq	12432(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$18450, 38596(%rsp)     # imm = 0x4812
	movb	(%rsi), %dil
	movl	$18452, 38596(%rsp)     # imm = 0x4814
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$18453, 38596(%rsp)     # imm = 0x4815
	movl	12092(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	12552(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$18455, 38596(%rsp)     # imm = 0x4817
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$18456, 38596(%rsp)     # imm = 0x4818
	movl	12088(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	12424(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$18457, 38596(%rsp)     # imm = 0x4819
	movq	12408(%rsp), %r11       # 8-byte Reload
	movl	(%r11), %ebx
	movl	$18459, 38596(%rsp)     # imm = 0x481B
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$18462, 38596(%rsp)     # imm = 0x481E
	cmpl	$0, %ebx
	movl	%ecx, 12084(%rsp)       # 4-byte Spill
	movl	%r8d, 12080(%rsp)       # 4-byte Spill
	movl	%r10d, 12076(%rsp)      # 4-byte Spill
	jne	.LBB68_273
# %bb.272:                              # %if.then1530
                                        #   in Loop: Header=BB68_270 Depth=1
	movq	12416(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$18464, 38596(%rsp)     # imm = 0x4820
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$18616, 38596(%rsp)     # imm = 0x48B8
.LBB68_273:                             # %if.end1534
                                        #   in Loop: Header=BB68_270 Depth=1
	movl	12092(%rsp), %eax       # 4-byte Reload
	cmpl	$-4, %eax
	movl	12084(%rsp), %ecx       # 4-byte Reload
	movl	12080(%rsp), %edx       # 4-byte Reload
	movl	12076(%rsp), %esi       # 4-byte Reload
	movl	12080(%rsp), %edi       # 4-byte Reload
	movl	%ecx, 12444(%rsp)       # 4-byte Spill
	movl	%edx, 12440(%rsp)       # 4-byte Spill
	movl	%esi, 12404(%rsp)       # 4-byte Spill
	movl	%edi, 12400(%rsp)       # 4-byte Spill
	jg	.LBB68_269
	jmp	.LBB68_270
.LBB68_274:                             # %for.cond1536
	movl	12096(%rsp), %eax       # 4-byte Reload
	movl	12140(%rsp), %ecx       # 4-byte Reload
	movl	12160(%rsp), %edx       # 4-byte Reload
	movl	12164(%rsp), %esi       # 4-byte Reload
	movl	12168(%rsp), %edi       # 4-byte Reload
	movl	12172(%rsp), %r8d       # 4-byte Reload
	movl	12176(%rsp), %r9d       # 4-byte Reload
	movq	12144(%rsp), %r10       # 8-byte Reload
	movq	12184(%rsp), %r11       # 8-byte Reload
	movq	12192(%rsp), %rbx       # 8-byte Reload
	movq	12200(%rsp), %r14       # 8-byte Reload
	movq	12208(%rsp), %r15       # 8-byte Reload
	movq	12216(%rsp), %r12       # 8-byte Reload
	movq	12224(%rsp), %r13       # 8-byte Reload
	movq	12232(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 12072(%rsp)       # 4-byte Spill
	movq	12240(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12064(%rsp)       # 8-byte Spill
	movq	12248(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12056(%rsp)       # 8-byte Spill
	movq	12256(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12048(%rsp)       # 8-byte Spill
	movq	12264(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12040(%rsp)       # 8-byte Spill
	movq	12272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12032(%rsp)       # 8-byte Spill
	movq	12280(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12024(%rsp)       # 8-byte Spill
	movq	12288(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12016(%rsp)       # 8-byte Spill
	movq	12296(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12008(%rsp)       # 8-byte Spill
	movq	12304(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12000(%rsp)       # 8-byte Spill
	movq	12312(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11992(%rsp)       # 8-byte Spill
	movq	12320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11984(%rsp)       # 8-byte Spill
	movq	12328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11976(%rsp)       # 8-byte Spill
	movq	12336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11968(%rsp)       # 8-byte Spill
	movq	12344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11960(%rsp)       # 8-byte Spill
	movq	12352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11952(%rsp)       # 8-byte Spill
	movq	12360(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11944(%rsp)       # 8-byte Spill
	movq	12368(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11936(%rsp)       # 8-byte Spill
	movq	12376(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 11932(%rsp)       # 4-byte Spill
	movl	12180(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11928(%rsp)       # 4-byte Spill
	movl	12152(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11924(%rsp)       # 4-byte Spill
	movl	12156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11920(%rsp)       # 4-byte Spill
	movl	12100(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11916(%rsp)       # 4-byte Spill
	movl	12104(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11912(%rsp)       # 4-byte Spill
	movl	12108(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11908(%rsp)       # 4-byte Spill
	movl	12112(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11904(%rsp)       # 4-byte Spill
	movl	12116(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11900(%rsp)       # 4-byte Spill
	movl	12120(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11896(%rsp)       # 4-byte Spill
	movl	12124(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11892(%rsp)       # 4-byte Spill
	movl	12128(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11888(%rsp)       # 4-byte Spill
	movl	12132(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11884(%rsp)       # 4-byte Spill
	movl	12136(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11880(%rsp)       # 4-byte Spill
	movl	12392(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11876(%rsp)       # 4-byte Spill
	movl	11932(%rsp), %eax       # 4-byte Reload
	movl	%ecx, 11872(%rsp)       # 4-byte Spill
	movl	12072(%rsp), %ecx       # 4-byte Reload
	cmpl	%ecx, %eax
	movl	11876(%rsp), %eax       # 4-byte Reload
	movl	11880(%rsp), %ecx       # 4-byte Reload
	movl	%eax, 11868(%rsp)       # 4-byte Spill
	movl	11884(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11864(%rsp)       # 4-byte Spill
	movl	11888(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11860(%rsp)       # 4-byte Spill
	movl	11892(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11856(%rsp)       # 4-byte Spill
	movl	11896(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11852(%rsp)       # 4-byte Spill
	movl	11900(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11848(%rsp)       # 4-byte Spill
	movl	11904(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11844(%rsp)       # 4-byte Spill
	movl	11908(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11840(%rsp)       # 4-byte Spill
	movl	11912(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11836(%rsp)       # 4-byte Spill
	movl	11916(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11832(%rsp)       # 4-byte Spill
	movl	11920(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11828(%rsp)       # 4-byte Spill
	movl	11924(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11824(%rsp)       # 4-byte Spill
	movl	11928(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 11816(%rsp)       # 8-byte Spill
	movq	%rsi, 11808(%rsp)       # 8-byte Spill
	movq	11936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11800(%rsp)       # 8-byte Spill
	movq	11944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11792(%rsp)       # 8-byte Spill
	movq	11952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11784(%rsp)       # 8-byte Spill
	movq	11960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11776(%rsp)       # 8-byte Spill
	movq	11968(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11768(%rsp)       # 8-byte Spill
	movq	11976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11760(%rsp)       # 8-byte Spill
	movq	11984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11752(%rsp)       # 8-byte Spill
	movq	11992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11744(%rsp)       # 8-byte Spill
	movq	12000(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11736(%rsp)       # 8-byte Spill
	movq	12008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11728(%rsp)       # 8-byte Spill
	movq	12016(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11720(%rsp)       # 8-byte Spill
	movq	12024(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11712(%rsp)       # 8-byte Spill
	movq	12032(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11704(%rsp)       # 8-byte Spill
	movq	12040(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11696(%rsp)       # 8-byte Spill
	movq	12048(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11688(%rsp)       # 8-byte Spill
	movq	12056(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11680(%rsp)       # 8-byte Spill
	movq	12064(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11672(%rsp)       # 8-byte Spill
	movq	%rbp, %rsi
	movq	%rsi, 11664(%rsp)       # 8-byte Spill
	movq	%r13, %rsi
	movq	%rsi, 11656(%rsp)       # 8-byte Spill
	movq	%r12, %rsi
	movq	%rsi, 11648(%rsp)       # 8-byte Spill
	movq	%r15, %rsi
	movq	%rsi, 11640(%rsp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rsi, 11632(%rsp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rsi, 11624(%rsp)       # 8-byte Spill
	movq	%r11, %rsi
	movq	%rsi, 11616(%rsp)       # 8-byte Spill
	movq	%r10, %rsi
	movl	%eax, 11612(%rsp)       # 4-byte Spill
	movl	%r9d, %eax
	movl	%eax, 11608(%rsp)       # 4-byte Spill
	movl	%r8d, %eax
	movl	%eax, 11604(%rsp)       # 4-byte Spill
	movl	%edi, %eax
	movl	%eax, 11600(%rsp)       # 4-byte Spill
	movl	12072(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11596(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 11592(%rsp)       # 4-byte Spill
	movl	11872(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11588(%rsp)       # 4-byte Spill
	movl	11932(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11584(%rsp)       # 4-byte Spill
	movl	%ecx, 11580(%rsp)       # 4-byte Spill
	movl	%edx, 11576(%rsp)       # 4-byte Spill
	movq	%rsi, 11568(%rsp)       # 8-byte Spill
	movl	%edi, 11564(%rsp)       # 4-byte Spill
	movl	%r8d, 11560(%rsp)       # 4-byte Spill
	movl	%r9d, 11556(%rsp)       # 4-byte Spill
	movq	%r10, 11544(%rsp)       # 8-byte Spill
	movq	%r11, 11536(%rsp)       # 8-byte Spill
	movq	%rbx, 11528(%rsp)       # 8-byte Spill
	movq	%r14, 11520(%rsp)       # 8-byte Spill
	movq	%r15, 11512(%rsp)       # 8-byte Spill
	movq	%r12, 11504(%rsp)       # 8-byte Spill
	movq	%r13, 11496(%rsp)       # 8-byte Spill
	movq	%rbp, 11488(%rsp)       # 8-byte Spill
	jge	.LBB68_293
.LBB68_275:                             # %while.cond1540
	movl	11584(%rsp), %eax       # 4-byte Reload
	movl	11588(%rsp), %ecx       # 4-byte Reload
	movl	11592(%rsp), %edx       # 4-byte Reload
	movl	11596(%rsp), %esi       # 4-byte Reload
	movl	11600(%rsp), %edi       # 4-byte Reload
	movl	11604(%rsp), %r8d       # 4-byte Reload
	movl	11608(%rsp), %r9d       # 4-byte Reload
	movq	11568(%rsp), %r10       # 8-byte Reload
	movq	11616(%rsp), %r11       # 8-byte Reload
	movq	11624(%rsp), %rbx       # 8-byte Reload
	movq	11632(%rsp), %r14       # 8-byte Reload
	movq	11640(%rsp), %r15       # 8-byte Reload
	movq	11648(%rsp), %r12       # 8-byte Reload
	movq	11656(%rsp), %r13       # 8-byte Reload
	movq	11664(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 11484(%rsp)       # 4-byte Spill
	movq	11672(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11472(%rsp)       # 8-byte Spill
	movq	11680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11464(%rsp)       # 8-byte Spill
	movq	11688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11456(%rsp)       # 8-byte Spill
	movq	11696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11448(%rsp)       # 8-byte Spill
	movq	11704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11440(%rsp)       # 8-byte Spill
	movq	11712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11432(%rsp)       # 8-byte Spill
	movq	11720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11424(%rsp)       # 8-byte Spill
	movq	11728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11416(%rsp)       # 8-byte Spill
	movq	11736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11408(%rsp)       # 8-byte Spill
	movq	11744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11400(%rsp)       # 8-byte Spill
	movq	11752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11392(%rsp)       # 8-byte Spill
	movq	11760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11384(%rsp)       # 8-byte Spill
	movq	11768(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11376(%rsp)       # 8-byte Spill
	movq	11776(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11368(%rsp)       # 8-byte Spill
	movq	11784(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11360(%rsp)       # 8-byte Spill
	movq	11792(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11352(%rsp)       # 8-byte Spill
	movq	11800(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11344(%rsp)       # 8-byte Spill
	movq	11808(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 11340(%rsp)       # 4-byte Spill
	movl	11612(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11336(%rsp)       # 4-byte Spill
	movl	11824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11332(%rsp)       # 4-byte Spill
	movl	11828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11328(%rsp)       # 4-byte Spill
	movl	11832(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11324(%rsp)       # 4-byte Spill
	movl	11836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11320(%rsp)       # 4-byte Spill
	movl	11840(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11316(%rsp)       # 4-byte Spill
	movl	11844(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11312(%rsp)       # 4-byte Spill
	movl	11848(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11308(%rsp)       # 4-byte Spill
	movl	11852(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11304(%rsp)       # 4-byte Spill
	movl	11856(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11300(%rsp)       # 4-byte Spill
	movl	11860(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11296(%rsp)       # 4-byte Spill
	movl	11864(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11292(%rsp)       # 4-byte Spill
	movl	11580(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11288(%rsp)       # 4-byte Spill
	movl	11868(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11284(%rsp)       # 4-byte Spill
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movl	%eax, 11280(%rsp)       # 4-byte Spill
	movl	%r9d, %eax
	addl	$-1, %eax
	cmpl	$19, %eax
	movl	11284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36532(%rsp)       # 4-byte Spill
	movl	11288(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36528(%rsp)       # 4-byte Spill
	movl	11292(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36524(%rsp)       # 4-byte Spill
	movl	11296(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36520(%rsp)       # 4-byte Spill
	movl	11300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36516(%rsp)       # 4-byte Spill
	movl	11304(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36512(%rsp)       # 4-byte Spill
	movl	11308(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36508(%rsp)       # 4-byte Spill
	movl	11312(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36504(%rsp)       # 4-byte Spill
	movl	11316(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36500(%rsp)       # 4-byte Spill
	movl	11320(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36496(%rsp)       # 4-byte Spill
	movl	11324(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36492(%rsp)       # 4-byte Spill
	movl	11328(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36488(%rsp)       # 4-byte Spill
	movl	11332(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36484(%rsp)       # 4-byte Spill
	movl	11336(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 11272(%rsp)       # 8-byte Spill
	movq	%rsi, 36464(%rsp)       # 8-byte Spill
	movq	11344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36456(%rsp)       # 8-byte Spill
	movq	11352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36448(%rsp)       # 8-byte Spill
	movq	11360(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36440(%rsp)       # 8-byte Spill
	movq	11368(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36432(%rsp)       # 8-byte Spill
	movq	11376(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36424(%rsp)       # 8-byte Spill
	movq	11384(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36416(%rsp)       # 8-byte Spill
	movq	11392(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36408(%rsp)       # 8-byte Spill
	movq	11400(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36400(%rsp)       # 8-byte Spill
	movq	11408(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36392(%rsp)       # 8-byte Spill
	movq	11416(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36384(%rsp)       # 8-byte Spill
	movq	11424(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36376(%rsp)       # 8-byte Spill
	movq	11432(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36368(%rsp)       # 8-byte Spill
	movq	11440(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36360(%rsp)       # 8-byte Spill
	movq	11448(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36352(%rsp)       # 8-byte Spill
	movq	11456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36344(%rsp)       # 8-byte Spill
	movq	11464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36336(%rsp)       # 8-byte Spill
	movq	11472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36328(%rsp)       # 8-byte Spill
	movq	%rbp, %rsi
	movq	%rsi, 36320(%rsp)       # 8-byte Spill
	movq	%r13, %rsi
	movq	%rsi, 36312(%rsp)       # 8-byte Spill
	movq	%r12, %rsi
	movq	%rsi, 36304(%rsp)       # 8-byte Spill
	movq	%r15, %rsi
	movq	%rsi, 36296(%rsp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rsi, 36288(%rsp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rsi, 36280(%rsp)       # 8-byte Spill
	movq	%r11, %rsi
	movq	%rsi, 36272(%rsp)       # 8-byte Spill
	movq	%r10, %rsi
	movl	%eax, 36268(%rsp)       # 4-byte Spill
	movl	%r9d, %eax
	movl	%eax, 36264(%rsp)       # 4-byte Spill
	movl	%r8d, %eax
	movl	%eax, 36260(%rsp)       # 4-byte Spill
	movl	%edi, %eax
	movl	%eax, 36256(%rsp)       # 4-byte Spill
	movl	11484(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36252(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 36248(%rsp)       # 4-byte Spill
	movl	%ecx, %eax
	movl	%eax, 36244(%rsp)       # 4-byte Spill
	movl	11340(%rsp), %eax       # 4-byte Reload
	movl	%eax, 36240(%rsp)       # 4-byte Spill
	movl	11316(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 36208(%rsp)       # 8-byte Spill
	movq	11360(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	11368(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	11376(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	11384(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	11392(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	11400(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	11408(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	11416(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	11424(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	11432(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	11440(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	11448(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	11456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	11464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	11472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	11352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	11344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	11272(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	11336(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	11332(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	11328(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	11324(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	11320(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	11312(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	11308(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	11304(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	11300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	11296(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	11292(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	11288(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	11284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	11484(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	11340(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	11280(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movl	%edx, 25260(%rsp)       # 4-byte Spill
	movl	%edi, 25268(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%r8d, 25272(%rsp)       # 4-byte Spill
	movl	%r9d, 25308(%rsp)       # 4-byte Spill
	movq	%r10, 25344(%rsp)       # 8-byte Spill
	movq	%r11, 25352(%rsp)       # 8-byte Spill
	movq	%rbx, 25360(%rsp)       # 8-byte Spill
	movq	%r14, 25368(%rsp)       # 8-byte Spill
	movq	%r15, 25376(%rsp)       # 8-byte Spill
	movq	%r12, 25384(%rsp)       # 8-byte Spill
	movq	%r13, 25392(%rsp)       # 8-byte Spill
	movq	%rbp, 25400(%rsp)       # 8-byte Spill
	movl	%ecx, 25256(%rsp)       # 4-byte Spill
	ja	.LBB68_542
.LBB68_276:                             # %sw.bb1549
	movl	36240(%rsp), %eax       # 4-byte Reload
	movl	36244(%rsp), %ecx       # 4-byte Reload
	movl	36248(%rsp), %edx       # 4-byte Reload
	movl	36252(%rsp), %esi       # 4-byte Reload
	movl	36256(%rsp), %edi       # 4-byte Reload
	movl	36260(%rsp), %r8d       # 4-byte Reload
	movl	36264(%rsp), %r9d       # 4-byte Reload
	movq	36208(%rsp), %r10       # 8-byte Reload
	movq	36272(%rsp), %r11       # 8-byte Reload
	movq	36280(%rsp), %rbx       # 8-byte Reload
	movq	36288(%rsp), %r14       # 8-byte Reload
	movq	36296(%rsp), %r15       # 8-byte Reload
	movq	36304(%rsp), %r12       # 8-byte Reload
	movq	36312(%rsp), %r13       # 8-byte Reload
	movq	36320(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 11268(%rsp)       # 4-byte Spill
	movq	36328(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11256(%rsp)       # 8-byte Spill
	movq	36336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11248(%rsp)       # 8-byte Spill
	movq	36344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11240(%rsp)       # 8-byte Spill
	movq	36352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11232(%rsp)       # 8-byte Spill
	movq	36360(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11224(%rsp)       # 8-byte Spill
	movq	36368(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11216(%rsp)       # 8-byte Spill
	movq	36376(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11208(%rsp)       # 8-byte Spill
	movq	36384(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11200(%rsp)       # 8-byte Spill
	movq	36392(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11192(%rsp)       # 8-byte Spill
	movq	36400(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11184(%rsp)       # 8-byte Spill
	movq	36408(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11176(%rsp)       # 8-byte Spill
	movq	36416(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11168(%rsp)       # 8-byte Spill
	movq	36424(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11160(%rsp)       # 8-byte Spill
	movq	36432(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11152(%rsp)       # 8-byte Spill
	movq	36440(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11144(%rsp)       # 8-byte Spill
	movq	36448(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11136(%rsp)       # 8-byte Spill
	movq	36456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11128(%rsp)       # 8-byte Spill
	movq	36464(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 11124(%rsp)       # 4-byte Spill
	movl	36268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11120(%rsp)       # 4-byte Spill
	movl	36484(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11116(%rsp)       # 4-byte Spill
	movl	36488(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11112(%rsp)       # 4-byte Spill
	movl	36492(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11108(%rsp)       # 4-byte Spill
	movl	36496(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11104(%rsp)       # 4-byte Spill
	movl	36500(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11100(%rsp)       # 4-byte Spill
	movl	36504(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11096(%rsp)       # 4-byte Spill
	movl	36508(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11092(%rsp)       # 4-byte Spill
	movl	36512(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11088(%rsp)       # 4-byte Spill
	movl	36516(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11084(%rsp)       # 4-byte Spill
	movl	36520(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11080(%rsp)       # 4-byte Spill
	movl	36524(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11076(%rsp)       # 4-byte Spill
	movl	36528(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11072(%rsp)       # 4-byte Spill
	movl	36532(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 11064(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rsi       # 8-byte Reload
	movl	$34, (%rsi)
	movl	$18619, 38596(%rsp)     # imm = 0x48BB
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$36, %rsi
	movq	%rsi, 11056(%rsp)       # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	36(%rsi), %esi
	movl	$18624, 38596(%rsp)     # imm = 0x48C0
	movl	%esi, 11052(%rsp)       # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$32, %rsi
	movl	%eax, 11048(%rsp)       # 4-byte Spill
	movl	11052(%rsp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	movl	%ecx, 11044(%rsp)       # 4-byte Spill
	movl	%edx, 11040(%rsp)       # 4-byte Spill
	movq	%rsi, 11032(%rsp)       # 8-byte Spill
	movl	%edi, 11028(%rsp)       # 4-byte Spill
	movl	%r8d, 11024(%rsp)       # 4-byte Spill
	movl	%r9d, 11020(%rsp)       # 4-byte Spill
	movq	%r10, 11008(%rsp)       # 8-byte Spill
	movq	%r11, 11000(%rsp)       # 8-byte Spill
	movq	%rbx, 10992(%rsp)       # 8-byte Spill
	movq	%r14, 10984(%rsp)       # 8-byte Spill
	movq	%r15, 10976(%rsp)       # 8-byte Spill
	movq	%r12, 10968(%rsp)       # 8-byte Spill
	movq	%r13, 10960(%rsp)       # 8-byte Spill
	movq	%rbp, 10952(%rsp)       # 8-byte Spill
	jg	.LBB68_278
# %bb.277:                              # %if.end1566.preheader
	movl	11052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 10948(%rsp)       # 4-byte Spill
	jmp	.LBB68_280
.LBB68_278:                             # %sw.bb1549.if.then1556_crit_edge
	movq	11032(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$18631, 38596(%rsp)     # imm = 0x48C7
	movl	11052(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 10944(%rsp)       # 4-byte Spill
	movl	%edx, 10940(%rsp)       # 4-byte Spill
.LBB68_279:                             # %if.then1556
	movl	10940(%rsp), %eax       # 4-byte Reload
	movl	10944(%rsp), %ecx       # 4-byte Reload
	movl	$1, %edx
	addl	$-1, %eax
	movq	11056(%rsp), %rsi       # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$18637, 38596(%rsp)     # imm = 0x48CD
	movl	%ecx, 10936(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movl	10936(%rsp), %edi       # 4-byte Reload
	andl	%edx, %edi
	cmpl	$0, %edi
	movl	11048(%rsp), %edx       # 4-byte Reload
	movl	11072(%rsp), %edi       # 4-byte Reload
	movl	11076(%rsp), %r8d       # 4-byte Reload
	movl	11080(%rsp), %r9d       # 4-byte Reload
	movl	11084(%rsp), %r10d      # 4-byte Reload
	movl	11088(%rsp), %r11d      # 4-byte Reload
	movl	11092(%rsp), %ebx       # 4-byte Reload
	movl	11096(%rsp), %ebp       # 4-byte Reload
	movl	11100(%rsp), %r14d      # 4-byte Reload
	movl	11104(%rsp), %r15d      # 4-byte Reload
	movl	11108(%rsp), %r12d      # 4-byte Reload
	movl	11112(%rsp), %r13d      # 4-byte Reload
	movl	11116(%rsp), %ecx       # 4-byte Reload
	movl	11120(%rsp), %esi       # 4-byte Reload
	movl	%esi, 31636(%rsp)       # 4-byte Spill
	movq	11064(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31840(%rsp)       # 8-byte Spill
	movq	11128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31832(%rsp)       # 8-byte Spill
	movq	11136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31824(%rsp)       # 8-byte Spill
	movq	11144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31816(%rsp)       # 8-byte Spill
	movq	11152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31808(%rsp)       # 8-byte Spill
	movq	11160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31800(%rsp)       # 8-byte Spill
	movq	11168(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31792(%rsp)       # 8-byte Spill
	movq	11176(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31784(%rsp)       # 8-byte Spill
	movq	11184(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31776(%rsp)       # 8-byte Spill
	movq	11192(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31768(%rsp)       # 8-byte Spill
	movq	11200(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31760(%rsp)       # 8-byte Spill
	movq	11208(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31752(%rsp)       # 8-byte Spill
	movq	11216(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31744(%rsp)       # 8-byte Spill
	movq	11224(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31736(%rsp)       # 8-byte Spill
	movq	11232(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31728(%rsp)       # 8-byte Spill
	movq	11240(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31720(%rsp)       # 8-byte Spill
	movq	11248(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31712(%rsp)       # 8-byte Spill
	movq	11256(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31704(%rsp)       # 8-byte Spill
	movq	10952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31696(%rsp)       # 8-byte Spill
	movq	10960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31688(%rsp)       # 8-byte Spill
	movq	10968(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31680(%rsp)       # 8-byte Spill
	movq	10976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31672(%rsp)       # 8-byte Spill
	movq	10984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31664(%rsp)       # 8-byte Spill
	movq	10992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31656(%rsp)       # 8-byte Spill
	movq	11000(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31648(%rsp)       # 8-byte Spill
	movq	11008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 31640(%rsp)       # 8-byte Spill
	movq	11056(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 31544(%rsp)       # 4-byte Spill
	movl	11020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 31632(%rsp)       # 4-byte Spill
	movl	11024(%rsp), %eax       # 4-byte Reload
	movl	%eax, 31628(%rsp)       # 4-byte Spill
	movl	11028(%rsp), %eax       # 4-byte Reload
	movl	%eax, 31624(%rsp)       # 4-byte Spill
	movl	11268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 31620(%rsp)       # 4-byte Spill
	movl	11040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 31616(%rsp)       # 4-byte Spill
	movl	11044(%rsp), %eax       # 4-byte Reload
	movl	%eax, 31612(%rsp)       # 4-byte Spill
	movl	11124(%rsp), %eax       # 4-byte Reload
	movl	%ecx, 31860(%rsp)       # 4-byte Spill
	movq	%rsi, 31600(%rsp)       # 8-byte Spill
	movl	%edx, 31588(%rsp)       # 4-byte Spill
	movl	%edi, 31584(%rsp)       # 4-byte Spill
	movl	%r8d, 31580(%rsp)       # 4-byte Spill
	movl	%r9d, 31576(%rsp)       # 4-byte Spill
	movl	%r10d, 31572(%rsp)      # 4-byte Spill
	movl	%r11d, 31568(%rsp)      # 4-byte Spill
	movl	%ebx, 31564(%rsp)       # 4-byte Spill
	movl	%ebp, 31560(%rsp)       # 4-byte Spill
	movl	%r14d, 31556(%rsp)      # 4-byte Spill
	movl	%r15d, 31552(%rsp)      # 4-byte Spill
	movl	%r12d, 31548(%rsp)      # 4-byte Spill
	movl	%r13d, 31592(%rsp)      # 4-byte Spill
	movl	%eax, 31596(%rsp)       # 4-byte Spill
	je	.LBB68_292
	jmp	.LBB68_284
.LBB68_280:                             # %if.end1566
                                        # =>This Inner Loop Header: Depth=1
	movl	10948(%rsp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$18639, 38596(%rsp)     # imm = 0x48CF
	movq	%rsi, %rdi
	addq	$8, %rdi
	movl	8(%rsi), %r8d
	movl	$18642, 38596(%rsp)     # imm = 0x48D2
	cmpl	$0, %r8d
	movl	11100(%rsp), %r9d       # 4-byte Reload
	movq	11144(%rsp), %r10       # 8-byte Reload
	movq	11152(%rsp), %r11       # 8-byte Reload
	movq	11160(%rsp), %rbx       # 8-byte Reload
	movq	11168(%rsp), %r14       # 8-byte Reload
	movq	11176(%rsp), %r15       # 8-byte Reload
	movq	11184(%rsp), %r12       # 8-byte Reload
	movq	11192(%rsp), %r13       # 8-byte Reload
	movq	11200(%rsp), %rbp       # 8-byte Reload
	movq	11208(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25456(%rsp)       # 8-byte Spill
	movq	11216(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25448(%rsp)       # 8-byte Spill
	movq	11224(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25440(%rsp)       # 8-byte Spill
	movq	11232(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25432(%rsp)       # 8-byte Spill
	movq	11240(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25424(%rsp)       # 8-byte Spill
	movq	11248(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25416(%rsp)       # 8-byte Spill
	movq	11256(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25408(%rsp)       # 8-byte Spill
	movq	10952(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25400(%rsp)       # 8-byte Spill
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25392(%rsp)       # 8-byte Spill
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25384(%rsp)       # 8-byte Spill
	movq	10976(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25376(%rsp)       # 8-byte Spill
	movq	10984(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25368(%rsp)       # 8-byte Spill
	movq	10992(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25360(%rsp)       # 8-byte Spill
	movq	11000(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25352(%rsp)       # 8-byte Spill
	movq	11008(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25344(%rsp)       # 8-byte Spill
	movq	11136(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25336(%rsp)       # 8-byte Spill
	movq	11128(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25248(%rsp)       # 8-byte Spill
	movq	11064(%rsp), %rdx       # 8-byte Reload
	movl	%eax, 10932(%rsp)       # 4-byte Spill
	movl	11120(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	11116(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	11112(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	11108(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	11104(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	11020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	11096(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	11092(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	11088(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	11084(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	11080(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	11076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	11072(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	11048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	11024(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	11028(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	11268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	11040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	11044(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	11124(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%rbp, 25464(%rsp)       # 8-byte Spill
	movq	%rdx, 25232(%rsp)       # 8-byte Spill
	movq	%rsi, 10920(%rsp)       # 8-byte Spill
	movq	%rdi, 10912(%rsp)       # 8-byte Spill
	movl	%r8d, 10908(%rsp)       # 4-byte Spill
	movl	%r9d, 25332(%rsp)       # 4-byte Spill
	movq	%r10, 25520(%rsp)       # 8-byte Spill
	movq	%r11, 25512(%rsp)       # 8-byte Spill
	movq	%rbx, 25504(%rsp)       # 8-byte Spill
	movq	%r14, 25496(%rsp)       # 8-byte Spill
	movq	%r15, 25488(%rsp)       # 8-byte Spill
	movq	%r12, 25480(%rsp)       # 8-byte Spill
	movq	%r13, 25472(%rsp)       # 8-byte Spill
	movl	%ecx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.281:                              # %if.end1572
                                        #   in Loop: Header=BB68_280 Depth=1
	movq	11032(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$18645, 38596(%rsp)     # imm = 0x48D5
	shll	$8, %ecx
	movq	10920(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$18646, 38596(%rsp)     # imm = 0x48D6
	movb	(%rsi), %dil
	movl	$18648, 38596(%rsp)     # imm = 0x48D8
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$18649, 38596(%rsp)     # imm = 0x48D9
	movl	10932(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	11056(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$18651, 38596(%rsp)     # imm = 0x48DB
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$18653, 38596(%rsp)     # imm = 0x48DD
	movl	10908(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	10912(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$18655, 38596(%rsp)     # imm = 0x48DF
	movl	12(%rdx), %r10d
	movl	$18657, 38596(%rsp)     # imm = 0x48E1
	addl	$1, %r10d
	movl	%r10d, 12(%rdx)
	movl	$18661, 38596(%rsp)     # imm = 0x48E5
	cmpl	$0, %r10d
	movl	%ecx, 10904(%rsp)       # 4-byte Spill
	movl	%r8d, 10900(%rsp)       # 4-byte Spill
	jne	.LBB68_283
# %bb.282:                              # %if.then1595
                                        #   in Loop: Header=BB68_280 Depth=1
	movq	10920(%rsp), %rax       # 8-byte Reload
	movl	16(%rax), %ecx
	movl	$18663, 38596(%rsp)     # imm = 0x48E7
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movl	$18670, 38596(%rsp)     # imm = 0x48EE
.LBB68_283:                             # %if.end1599
                                        #   in Loop: Header=BB68_280 Depth=1
	movl	10932(%rsp), %eax       # 4-byte Reload
	cmpl	$-8, %eax
	movl	10904(%rsp), %ecx       # 4-byte Reload
	movl	10900(%rsp), %edx       # 4-byte Reload
	movl	10900(%rsp), %esi       # 4-byte Reload
	movl	%ecx, 10944(%rsp)       # 4-byte Spill
	movl	%edx, 10940(%rsp)       # 4-byte Spill
	movl	%esi, 10948(%rsp)       # 4-byte Spill
	jg	.LBB68_279
	jmp	.LBB68_280
.LBB68_284:                             # %sw.bb1606
	movl	31596(%rsp), %eax       # 4-byte Reload
	movl	31612(%rsp), %ecx       # 4-byte Reload
	movl	31616(%rsp), %edx       # 4-byte Reload
	movl	31620(%rsp), %esi       # 4-byte Reload
	movl	31624(%rsp), %edi       # 4-byte Reload
	movl	31628(%rsp), %r8d       # 4-byte Reload
	movl	31632(%rsp), %r9d       # 4-byte Reload
	movl	31544(%rsp), %r10d      # 4-byte Reload
	movq	31600(%rsp), %r11       # 8-byte Reload
	movq	31640(%rsp), %rbx       # 8-byte Reload
	movq	31648(%rsp), %r14       # 8-byte Reload
	movq	31656(%rsp), %r15       # 8-byte Reload
	movq	31664(%rsp), %r12       # 8-byte Reload
	movq	31672(%rsp), %r13       # 8-byte Reload
	movq	31680(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 10896(%rsp)       # 4-byte Spill
	movq	31688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10888(%rsp)       # 8-byte Spill
	movq	31696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10880(%rsp)       # 8-byte Spill
	movq	31704(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10872(%rsp)       # 8-byte Spill
	movq	31712(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10864(%rsp)       # 8-byte Spill
	movq	31720(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10856(%rsp)       # 8-byte Spill
	movq	31728(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10848(%rsp)       # 8-byte Spill
	movq	31736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10840(%rsp)       # 8-byte Spill
	movq	31744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10832(%rsp)       # 8-byte Spill
	movq	31752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10824(%rsp)       # 8-byte Spill
	movq	31760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10816(%rsp)       # 8-byte Spill
	movq	31768(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10808(%rsp)       # 8-byte Spill
	movq	31776(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10800(%rsp)       # 8-byte Spill
	movq	31784(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10792(%rsp)       # 8-byte Spill
	movq	31792(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10784(%rsp)       # 8-byte Spill
	movq	31800(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10776(%rsp)       # 8-byte Spill
	movq	31808(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10768(%rsp)       # 8-byte Spill
	movq	31816(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10760(%rsp)       # 8-byte Spill
	movq	31824(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10752(%rsp)       # 8-byte Spill
	movq	31832(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10744(%rsp)       # 8-byte Spill
	movq	31840(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 10740(%rsp)       # 4-byte Spill
	movl	31636(%rsp), %eax       # 4-byte Reload
	movl	%eax, 10736(%rsp)       # 4-byte Spill
	movl	31860(%rsp), %eax       # 4-byte Reload
	movl	%eax, 10732(%rsp)       # 4-byte Spill
	movl	31592(%rsp), %eax       # 4-byte Reload
	movl	%eax, 10728(%rsp)       # 4-byte Spill
	movl	31548(%rsp), %eax       # 4-byte Reload
	movl	%eax, 10724(%rsp)       # 4-byte Spill
	movl	31552(%rsp), %eax       # 4-byte Reload
	movl	%eax, 10720(%rsp)       # 4-byte Spill
	movl	31556(%rsp), %eax       # 4-byte Reload
	movl	%eax, 10716(%rsp)       # 4-byte Spill
	movl	31560(%rsp), %eax       # 4-byte Reload
	movl	%eax, 10712(%rsp)       # 4-byte Spill
	movl	31564(%rsp), %eax       # 4-byte Reload
	movl	%eax, 10708(%rsp)       # 4-byte Spill
	movl	31568(%rsp), %eax       # 4-byte Reload
	movl	%eax, 10704(%rsp)       # 4-byte Spill
	movl	31572(%rsp), %eax       # 4-byte Reload
	movl	%eax, 10700(%rsp)       # 4-byte Spill
	movl	31576(%rsp), %eax       # 4-byte Reload
	movl	%eax, 10696(%rsp)       # 4-byte Spill
	movl	31580(%rsp), %eax       # 4-byte Reload
	movl	%eax, 10692(%rsp)       # 4-byte Spill
	movl	31584(%rsp), %eax       # 4-byte Reload
	movl	%eax, 10688(%rsp)       # 4-byte Spill
	movl	31588(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 10680(%rsp)       # 8-byte Spill
	movq	38552(%rsp), %rsi       # 8-byte Reload
	movl	$35, (%rsi)
	movl	$18676, 38596(%rsp)     # imm = 0x48F4
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$32, %rsi
	cmpl	$0, %r10d
	movl	%eax, 10676(%rsp)       # 4-byte Spill
	movl	%ecx, 10672(%rsp)       # 4-byte Spill
	movl	%edx, 10668(%rsp)       # 4-byte Spill
	movq	%rsi, 10656(%rsp)       # 8-byte Spill
	movl	%edi, 10652(%rsp)       # 4-byte Spill
	movl	%r8d, 10648(%rsp)       # 4-byte Spill
	movl	%r9d, 10644(%rsp)       # 4-byte Spill
	movl	%r10d, 10640(%rsp)      # 4-byte Spill
	movq	%r11, 10632(%rsp)       # 8-byte Spill
	movq	%rbx, 10624(%rsp)       # 8-byte Spill
	movq	%r14, 10616(%rsp)       # 8-byte Spill
	movq	%r15, 10608(%rsp)       # 8-byte Spill
	movq	%r12, 10600(%rsp)       # 8-byte Spill
	movq	%r13, 10592(%rsp)       # 8-byte Spill
	movq	%rbp, 10584(%rsp)       # 8-byte Spill
	jg	.LBB68_286
# %bb.285:                              # %if.end1623.preheader
	movl	10640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 10580(%rsp)       # 4-byte Spill
	jmp	.LBB68_288
.LBB68_286:                             # %sw.bb1606.if.then1613_crit_edge
	movq	10656(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$18683, 38596(%rsp)     # imm = 0x48FB
	movl	10640(%rsp), %edx       # 4-byte Reload
	movl	%ecx, 10576(%rsp)       # 4-byte Spill
	movl	%edx, 10572(%rsp)       # 4-byte Spill
.LBB68_287:                             # %if.then1613
	movl	10572(%rsp), %eax       # 4-byte Reload
	movl	10576(%rsp), %ecx       # 4-byte Reload
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %esi
	addl	$-1, %eax
	movq	10632(%rsp), %rdi       # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$18690, 38596(%rsp)     # imm = 0x4902
	movl	%ecx, 10568(%rsp)       # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	%esi, %eax
	shll	%cl, %eax
	movl	10568(%rsp), %r8d       # 4-byte Reload
	andl	%eax, %r8d
	cmpl	$0, %r8d
	cmovel	%esi, %edx
	movl	10644(%rsp), %eax       # 4-byte Reload
	addl	%eax, %edx
	movl	10676(%rsp), %esi       # 4-byte Reload
	movl	10688(%rsp), %r8d       # 4-byte Reload
	movl	10692(%rsp), %r9d       # 4-byte Reload
	movl	10696(%rsp), %r10d      # 4-byte Reload
	movl	10700(%rsp), %r11d      # 4-byte Reload
	movl	10704(%rsp), %ebx       # 4-byte Reload
	movl	10708(%rsp), %ebp       # 4-byte Reload
	movl	10712(%rsp), %r14d      # 4-byte Reload
	movl	10716(%rsp), %r15d      # 4-byte Reload
	movl	10720(%rsp), %r12d      # 4-byte Reload
	movl	10724(%rsp), %r13d      # 4-byte Reload
	movl	10728(%rsp), %eax       # 4-byte Reload
	movl	10732(%rsp), %ecx       # 4-byte Reload
	movl	10736(%rsp), %edi       # 4-byte Reload
	movl	%esi, 11868(%rsp)       # 4-byte Spill
	movq	10680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11808(%rsp)       # 8-byte Spill
	movq	10744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11800(%rsp)       # 8-byte Spill
	movq	10752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11792(%rsp)       # 8-byte Spill
	movq	10760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11784(%rsp)       # 8-byte Spill
	movq	10768(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11776(%rsp)       # 8-byte Spill
	movq	10776(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11768(%rsp)       # 8-byte Spill
	movq	10784(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11760(%rsp)       # 8-byte Spill
	movq	10792(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11752(%rsp)       # 8-byte Spill
	movq	10800(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11744(%rsp)       # 8-byte Spill
	movq	10808(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11736(%rsp)       # 8-byte Spill
	movq	10816(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11728(%rsp)       # 8-byte Spill
	movq	10824(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11720(%rsp)       # 8-byte Spill
	movq	10832(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11712(%rsp)       # 8-byte Spill
	movq	10840(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11704(%rsp)       # 8-byte Spill
	movq	10848(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11696(%rsp)       # 8-byte Spill
	movq	10856(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11688(%rsp)       # 8-byte Spill
	movq	10864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11680(%rsp)       # 8-byte Spill
	movq	10872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11672(%rsp)       # 8-byte Spill
	movq	10880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11664(%rsp)       # 8-byte Spill
	movq	10888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11656(%rsp)       # 8-byte Spill
	movq	10584(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11648(%rsp)       # 8-byte Spill
	movq	10592(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11640(%rsp)       # 8-byte Spill
	movq	10600(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11632(%rsp)       # 8-byte Spill
	movq	10608(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11624(%rsp)       # 8-byte Spill
	movq	10616(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 11616(%rsp)       # 8-byte Spill
	movq	10624(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 11828(%rsp)       # 4-byte Spill
	movl	10648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11604(%rsp)       # 4-byte Spill
	movl	10652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11600(%rsp)       # 4-byte Spill
	movl	10896(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11596(%rsp)       # 4-byte Spill
	movl	10668(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11592(%rsp)       # 4-byte Spill
	movl	10672(%rsp), %eax       # 4-byte Reload
	movl	%eax, 11588(%rsp)       # 4-byte Spill
	movl	10740(%rsp), %eax       # 4-byte Reload
	movl	%edi, 11612(%rsp)       # 4-byte Spill
	movl	%ecx, 11824(%rsp)       # 4-byte Spill
	movl	%eax, 11584(%rsp)       # 4-byte Spill
	movq	%rsi, 11568(%rsp)       # 8-byte Spill
	movl	%r8d, 11580(%rsp)       # 4-byte Spill
	movl	%r9d, 11864(%rsp)       # 4-byte Spill
	movl	%r10d, 11860(%rsp)      # 4-byte Spill
	movl	%r11d, 11856(%rsp)      # 4-byte Spill
	movl	%ebx, 11852(%rsp)       # 4-byte Spill
	movl	%ebp, 11848(%rsp)       # 4-byte Spill
	movl	%r14d, 11844(%rsp)      # 4-byte Spill
	movl	%r15d, 11840(%rsp)      # 4-byte Spill
	movl	%r12d, 11836(%rsp)      # 4-byte Spill
	movl	%r13d, 11832(%rsp)      # 4-byte Spill
	movl	%edx, 11608(%rsp)       # 4-byte Spill
	jmp	.LBB68_275
.LBB68_288:                             # %if.end1623
                                        # =>This Inner Loop Header: Depth=1
	movl	10580(%rsp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$18692, 38596(%rsp)     # imm = 0x4904
	movq	%rsi, %rdi
	addq	$8, %rdi
	movl	8(%rsi), %r8d
	movl	$18695, 38596(%rsp)     # imm = 0x4907
	cmpl	$0, %r8d
	movl	10716(%rsp), %r9d       # 4-byte Reload
	movq	10760(%rsp), %r10       # 8-byte Reload
	movq	10768(%rsp), %r11       # 8-byte Reload
	movq	10776(%rsp), %rbx       # 8-byte Reload
	movq	10784(%rsp), %r14       # 8-byte Reload
	movq	10792(%rsp), %r15       # 8-byte Reload
	movq	10800(%rsp), %r12       # 8-byte Reload
	movq	10808(%rsp), %r13       # 8-byte Reload
	movq	10816(%rsp), %rbp       # 8-byte Reload
	movq	10824(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25456(%rsp)       # 8-byte Spill
	movq	10832(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25448(%rsp)       # 8-byte Spill
	movq	10840(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25440(%rsp)       # 8-byte Spill
	movq	10848(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25432(%rsp)       # 8-byte Spill
	movq	10856(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25424(%rsp)       # 8-byte Spill
	movq	10864(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25416(%rsp)       # 8-byte Spill
	movq	10872(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25408(%rsp)       # 8-byte Spill
	movq	10880(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25400(%rsp)       # 8-byte Spill
	movq	10888(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25392(%rsp)       # 8-byte Spill
	movq	10584(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25384(%rsp)       # 8-byte Spill
	movq	10592(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25376(%rsp)       # 8-byte Spill
	movq	10600(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25368(%rsp)       # 8-byte Spill
	movq	10608(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25360(%rsp)       # 8-byte Spill
	movq	10616(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25352(%rsp)       # 8-byte Spill
	movq	10624(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25344(%rsp)       # 8-byte Spill
	movq	10752(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25336(%rsp)       # 8-byte Spill
	movq	10744(%rsp), %rdx       # 8-byte Reload
	movq	%rdx, 25248(%rsp)       # 8-byte Spill
	movq	10680(%rsp), %rdx       # 8-byte Reload
	movl	%eax, 10564(%rsp)       # 4-byte Spill
	movl	10736(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	10732(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	10728(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	10724(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	10720(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	10644(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	10712(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	10708(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	10704(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	10700(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	10696(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	10692(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	10688(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	10676(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	10648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	10652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	10896(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	10668(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	10672(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	10740(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%rbp, 25464(%rsp)       # 8-byte Spill
	movq	%rdx, 25232(%rsp)       # 8-byte Spill
	movq	%rsi, 10552(%rsp)       # 8-byte Spill
	movq	%rdi, 10544(%rsp)       # 8-byte Spill
	movl	%r8d, 10540(%rsp)       # 4-byte Spill
	movl	%r9d, 25332(%rsp)       # 4-byte Spill
	movq	%r10, 25520(%rsp)       # 8-byte Spill
	movq	%r11, 25512(%rsp)       # 8-byte Spill
	movq	%rbx, 25504(%rsp)       # 8-byte Spill
	movq	%r14, 25496(%rsp)       # 8-byte Spill
	movq	%r15, 25488(%rsp)       # 8-byte Spill
	movq	%r12, 25480(%rsp)       # 8-byte Spill
	movq	%r13, 25472(%rsp)       # 8-byte Spill
	movl	%ecx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.289:                              # %if.end1629
                                        #   in Loop: Header=BB68_288 Depth=1
	movq	10656(%rsp), %rax       # 8-byte Reload
	movl	(%rax), %ecx
	movl	$18698, 38596(%rsp)     # imm = 0x490A
	shll	$8, %ecx
	movq	10552(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$18699, 38596(%rsp)     # imm = 0x490B
	movb	(%rsi), %dil
	movl	$18701, 38596(%rsp)     # imm = 0x490D
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$18702, 38596(%rsp)     # imm = 0x490E
	movl	10564(%rsp), %r8d       # 4-byte Reload
	addl	$8, %r8d
	movq	10632(%rsp), %r9        # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$18704, 38596(%rsp)     # imm = 0x4910
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$18706, 38596(%rsp)     # imm = 0x4912
	movl	10540(%rsp), %r10d      # 4-byte Reload
	addl	$-1, %r10d
	movq	10544(%rsp), %rsi       # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$18708, 38596(%rsp)     # imm = 0x4914
	movl	12(%rdx), %r10d
	movl	$18710, 38596(%rsp)     # imm = 0x4916
	addl	$1, %r10d
	movl	%r10d, 12(%rdx)
	movl	$18714, 38596(%rsp)     # imm = 0x491A
	cmpl	$0, %r10d
	movl	%ecx, 10536(%rsp)       # 4-byte Spill
	movl	%r8d, 10532(%rsp)       # 4-byte Spill
	jne	.LBB68_291
# %bb.290:                              # %if.then1652
                                        #   in Loop: Header=BB68_288 Depth=1
	movq	10552(%rsp), %rax       # 8-byte Reload
	movl	16(%rax), %ecx
	movl	$18716, 38596(%rsp)     # imm = 0x491C
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movl	$18724, 38596(%rsp)     # imm = 0x4924
.LBB68_291:                             # %if.end1656
                                        #   in Loop: Header=BB68_288 Depth=1
	movl	10564(%rsp), %eax       # 4-byte Reload
	cmpl	$-8, %eax
	movl	10536(%rsp), %ecx       # 4-byte Reload
	movl	10532(%rsp), %edx       # 4-byte Reload
	movl	10532(%rsp), %esi       # 4-byte Reload
	movl	%ecx, 10576(%rsp)       # 4-byte Spill
	movl	%edx, 10572(%rsp)       # 4-byte Spill
	movl	%esi, 10580(%rsp)       # 4-byte Spill
	jg	.LBB68_287
	jmp	.LBB68_288
.LBB68_292:                             # %while.end1666
	movl	11020(%rsp), %eax       # 4-byte Reload
	movb	%al, %cl
	movl	11040(%rsp), %edx       # 4-byte Reload
	movslq	%edx, %rsi
	movl	11124(%rsp), %edi       # 4-byte Reload
	movslq	%edi, %r8
	movq	38576(%rsp), %r9        # 8-byte Reload
	addq	$43888, %r9             # imm = 0xAB70
	imulq	$258, %rsi, %rsi        # imm = 0x102
	addq	%rsi, %r9
	addq	%r8, %r9
	movb	%cl, (%r9)
	movl	$18753, 38596(%rsp)     # imm = 0x4941
	addl	$1, %edi
	movl	11048(%rsp), %r10d      # 4-byte Reload
	movl	11072(%rsp), %r11d      # 4-byte Reload
	movl	11076(%rsp), %ebx       # 4-byte Reload
	movl	11080(%rsp), %ebp       # 4-byte Reload
	movl	11084(%rsp), %r14d      # 4-byte Reload
	movl	11088(%rsp), %r15d      # 4-byte Reload
	movl	11092(%rsp), %r12d      # 4-byte Reload
	movl	11096(%rsp), %r13d      # 4-byte Reload
	movl	11100(%rsp), %eax       # 4-byte Reload
	movl	11104(%rsp), %ecx       # 4-byte Reload
	movl	11108(%rsp), %edx       # 4-byte Reload
	movl	11112(%rsp), %esi       # 4-byte Reload
	movl	11116(%rsp), %r8d       # 4-byte Reload
	movl	11120(%rsp), %r9d       # 4-byte Reload
	movl	%esi, 12156(%rsp)       # 4-byte Spill
	movq	11064(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12376(%rsp)       # 8-byte Spill
	movq	11128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12368(%rsp)       # 8-byte Spill
	movq	11136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12360(%rsp)       # 8-byte Spill
	movq	11144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12352(%rsp)       # 8-byte Spill
	movq	11152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12344(%rsp)       # 8-byte Spill
	movq	11160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12336(%rsp)       # 8-byte Spill
	movq	11168(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12328(%rsp)       # 8-byte Spill
	movq	11176(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12320(%rsp)       # 8-byte Spill
	movq	11184(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12312(%rsp)       # 8-byte Spill
	movq	11192(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12304(%rsp)       # 8-byte Spill
	movq	11200(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12296(%rsp)       # 8-byte Spill
	movq	11208(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12288(%rsp)       # 8-byte Spill
	movq	11216(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12280(%rsp)       # 8-byte Spill
	movq	11224(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12272(%rsp)       # 8-byte Spill
	movq	11232(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12264(%rsp)       # 8-byte Spill
	movq	11240(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12256(%rsp)       # 8-byte Spill
	movq	11248(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12248(%rsp)       # 8-byte Spill
	movq	11256(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12240(%rsp)       # 8-byte Spill
	movq	10952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12232(%rsp)       # 8-byte Spill
	movq	10960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12224(%rsp)       # 8-byte Spill
	movq	10968(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12216(%rsp)       # 8-byte Spill
	movq	10976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12208(%rsp)       # 8-byte Spill
	movq	10984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12200(%rsp)       # 8-byte Spill
	movq	10992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12192(%rsp)       # 8-byte Spill
	movq	11000(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 12184(%rsp)       # 8-byte Spill
	movq	11008(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 12108(%rsp)       # 4-byte Spill
	movl	11020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12176(%rsp)       # 4-byte Spill
	movl	11024(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12172(%rsp)       # 4-byte Spill
	movl	11028(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12168(%rsp)       # 4-byte Spill
	movl	11268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12164(%rsp)       # 4-byte Spill
	movl	11040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12160(%rsp)       # 4-byte Spill
	movl	11044(%rsp), %eax       # 4-byte Reload
	movl	%eax, 12140(%rsp)       # 4-byte Spill
	movl	%r9d, 12180(%rsp)       # 4-byte Spill
	movl	%edx, 12100(%rsp)       # 4-byte Spill
	movl	%r10d, 12392(%rsp)      # 4-byte Spill
	movl	%r11d, 12136(%rsp)      # 4-byte Spill
	movl	%ebx, 12132(%rsp)       # 4-byte Spill
	movl	%ebp, 12128(%rsp)       # 4-byte Spill
	movl	%r14d, 12124(%rsp)      # 4-byte Spill
	movl	%r15d, 12120(%rsp)      # 4-byte Spill
	movl	%r12d, 12116(%rsp)      # 4-byte Spill
	movl	%r13d, 12112(%rsp)      # 4-byte Spill
	movl	%ecx, 12104(%rsp)       # 4-byte Spill
	movq	%rsi, 12144(%rsp)       # 8-byte Spill
	movl	%r8d, 12152(%rsp)       # 4-byte Spill
	movl	%edi, 12096(%rsp)       # 4-byte Spill
	jmp	.LBB68_274
.LBB68_293:                             # %for.inc1675
	movl	11576(%rsp), %eax       # 4-byte Reload
	addl	$1, %eax
	movl	11876(%rsp), %ecx       # 4-byte Reload
	movl	11880(%rsp), %edx       # 4-byte Reload
	movl	11884(%rsp), %esi       # 4-byte Reload
	movl	11888(%rsp), %edi       # 4-byte Reload
	movl	11892(%rsp), %r8d       # 4-byte Reload
	movl	11896(%rsp), %r9d       # 4-byte Reload
	movl	11900(%rsp), %r10d      # 4-byte Reload
	movl	11904(%rsp), %r11d      # 4-byte Reload
	movl	11908(%rsp), %ebx       # 4-byte Reload
	movl	11912(%rsp), %ebp       # 4-byte Reload
	movl	11916(%rsp), %r14d      # 4-byte Reload
	movl	11920(%rsp), %r15d      # 4-byte Reload
	movl	11924(%rsp), %r12d      # 4-byte Reload
	movl	11928(%rsp), %r13d      # 4-byte Reload
	movl	%esi, 13092(%rsp)       # 4-byte Spill
	movq	11816(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13336(%rsp)       # 8-byte Spill
	movq	11936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13328(%rsp)       # 8-byte Spill
	movq	11944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13320(%rsp)       # 8-byte Spill
	movq	11952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13312(%rsp)       # 8-byte Spill
	movq	11960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13304(%rsp)       # 8-byte Spill
	movq	11968(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13296(%rsp)       # 8-byte Spill
	movq	11976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13288(%rsp)       # 8-byte Spill
	movq	11984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13280(%rsp)       # 8-byte Spill
	movq	11992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13272(%rsp)       # 8-byte Spill
	movq	12000(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13264(%rsp)       # 8-byte Spill
	movq	12008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13256(%rsp)       # 8-byte Spill
	movq	12016(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13248(%rsp)       # 8-byte Spill
	movq	12024(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13240(%rsp)       # 8-byte Spill
	movq	12032(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13232(%rsp)       # 8-byte Spill
	movq	12040(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13224(%rsp)       # 8-byte Spill
	movq	12048(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13216(%rsp)       # 8-byte Spill
	movq	12056(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13208(%rsp)       # 8-byte Spill
	movq	12064(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13200(%rsp)       # 8-byte Spill
	movq	11488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13192(%rsp)       # 8-byte Spill
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13184(%rsp)       # 8-byte Spill
	movq	11504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13176(%rsp)       # 8-byte Spill
	movq	11512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13168(%rsp)       # 8-byte Spill
	movq	11520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13160(%rsp)       # 8-byte Spill
	movq	11528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13152(%rsp)       # 8-byte Spill
	movq	11536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 13144(%rsp)       # 8-byte Spill
	movq	11544(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 10528(%rsp)       # 4-byte Spill
	movl	11556(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13136(%rsp)       # 4-byte Spill
	movl	11560(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13132(%rsp)       # 4-byte Spill
	movl	11564(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13128(%rsp)       # 4-byte Spill
	movl	12072(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13124(%rsp)       # 4-byte Spill
	movl	10528(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13052(%rsp)       # 4-byte Spill
	movl	11872(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13120(%rsp)       # 4-byte Spill
	movl	11932(%rsp), %eax       # 4-byte Reload
	movl	%eax, 13116(%rsp)       # 4-byte Spill
	movl	%ecx, 13108(%rsp)       # 4-byte Spill
	movl	%edx, 13344(%rsp)       # 4-byte Spill
	movq	%rsi, 13096(%rsp)       # 8-byte Spill
	movl	%edi, 13088(%rsp)       # 4-byte Spill
	movl	%r8d, 13084(%rsp)       # 4-byte Spill
	movl	%r9d, 13080(%rsp)       # 4-byte Spill
	movl	%r10d, 13076(%rsp)      # 4-byte Spill
	movl	%r11d, 13072(%rsp)      # 4-byte Spill
	movl	%ebx, 13068(%rsp)       # 4-byte Spill
	movl	%ebp, 13064(%rsp)       # 4-byte Spill
	movl	%r14d, 13060(%rsp)      # 4-byte Spill
	movl	%r15d, 13056(%rsp)      # 4-byte Spill
	movl	%r12d, 13112(%rsp)      # 4-byte Spill
	movl	%r13d, 13140(%rsp)      # 4-byte Spill
	jmp	.LBB68_265
.LBB68_294:                             # %for.end1677
	xorl	%eax, %eax
	movl	12832(%rsp), %ecx       # 4-byte Reload
	cmpl	$0, %ecx
	movl	%eax, 10524(%rsp)       # 4-byte Spill
	jle	.LBB68_306
# %bb.295:                              # %for.body1681.lr.ph
	movl	13048(%rsp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB68_304
# %bb.296:                              # %for.body1681.lr.ph.split.us
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$4294967288, %eax       # imm = 0xFFFFFFF8
	movl	%eax, %edx
	movl	13048(%rsp), %eax       # 4-byte Reload
	movl	%eax, %esi
	movl	%esi, %edi
	movl	12832(%rsp), %esi       # 4-byte Reload
	movl	%esi, %r8d
	movl	%r8d, %r9d
	cmpl	$8, %eax
	setb	%r10b
	movq	%rdi, %r11
	andq	%rdx, %r11
	cmpq	%rdi, %r11
	sete	%bl
	movb	%bl, 10523(%rsp)        # 1-byte Spill
	movq	%r11, 10512(%rsp)       # 8-byte Spill
	movq	%rdi, 10504(%rsp)       # 8-byte Spill
	movq	%r9, 10496(%rsp)        # 8-byte Spill
	movb	%r10b, 10495(%rsp)      # 1-byte Spill
	movq	%rcx, 10480(%rsp)       # 8-byte Spill
.LBB68_297:                             # %for.body1681.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_299 Depth 2
                                        #     Child Loop BB68_302 Depth 2
	movq	10480(%rsp), %rax       # 8-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movl	$32, %ecx
	xorl	%esi, %esi
	movb	10495(%rsp), %dil       # 1-byte Reload
	testb	$1, %dil
	movq	%rax, 10472(%rsp)       # 8-byte Spill
	movq	%rdx, 10464(%rsp)       # 8-byte Spill
	movl	%ecx, 10460(%rsp)       # 4-byte Spill
	movl	%esi, 10456(%rsp)       # 4-byte Spill
	jne	.LBB68_301
# %bb.298:                              # %vector.ph7000
                                        #   in Loop: Header=BB68_297 Depth=1
	xorps	%xmm0, %xmm0
	movaps	.LCPI68_9(%rip), %xmm1  # xmm1 = [32,32,32,32]
	xorl	%eax, %eax
	movl	%eax, %ecx
	movaps	%xmm1, %xmm2
	movaps	%xmm0, %xmm3
	movaps	%xmm3, 10432(%rsp)      # 16-byte Spill
	movaps	%xmm2, 10416(%rsp)      # 16-byte Spill
	movq	%rcx, 10408(%rsp)       # 8-byte Spill
	movaps	%xmm1, 10384(%rsp)      # 16-byte Spill
	movaps	%xmm0, 10368(%rsp)      # 16-byte Spill
	jmp	.LBB68_299
.LBB68_299:                             # %vector.body6996
                                        #   Parent Loop BB68_297 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movaps	10368(%rsp), %xmm0      # 16-byte Reload
	movaps	10432(%rsp), %xmm1      # 16-byte Reload
	movaps	10384(%rsp), %xmm2      # 16-byte Reload
	movaps	10416(%rsp), %xmm3      # 16-byte Reload
	movq	10408(%rsp), %rax       # 8-byte Reload
	movq	10472(%rsp), %rcx       # 8-byte Reload
	imulq	$258, %rcx, %rdx        # imm = 0x102
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	%rdx, %rsi
	movl	43888(%rax,%rsi), %edi
	movd	%edi, %xmm4
	movl	$18756, 38596(%rsp)     # imm = 0x4944
	movl	43892(%rax,%rsi), %edi
	movd	%edi, %xmm5
	movl	$18757, 38596(%rsp)     # imm = 0x4945
	xorps	%xmm6, %xmm6
	punpcklbw	%xmm6, %xmm4    # xmm4 = xmm4[0],xmm6[0],xmm4[1],xmm6[1],xmm4[2],xmm6[2],xmm4[3],xmm6[3],xmm4[4],xmm6[4],xmm4[5],xmm6[5],xmm4[6],xmm6[6],xmm4[7],xmm6[7]
	punpcklwd	%xmm6, %xmm4    # xmm4 = xmm4[0],xmm6[0],xmm4[1],xmm6[1],xmm4[2],xmm6[2],xmm4[3],xmm6[3]
	movl	$18758, 38596(%rsp)     # imm = 0x4946
	punpcklbw	%xmm6, %xmm5    # xmm5 = xmm5[0],xmm6[0],xmm5[1],xmm6[1],xmm5[2],xmm6[2],xmm5[3],xmm6[3],xmm5[4],xmm6[4],xmm5[5],xmm6[5],xmm5[6],xmm6[6],xmm5[7],xmm6[7]
	punpcklwd	%xmm6, %xmm5    # xmm5 = xmm5[0],xmm6[0],xmm5[1],xmm6[1],xmm5[2],xmm6[2],xmm5[3],xmm6[3]
	movaps	%xmm4, %xmm6
	pcmpgtd	%xmm1, %xmm6
	movaps	%xmm5, %xmm7
	pcmpgtd	%xmm0, %xmm7
	movaps	%xmm4, %xmm8
	pand	%xmm6, %xmm8
	pandn	%xmm1, %xmm6
	por	%xmm6, %xmm8
	movaps	%xmm5, %xmm1
	pand	%xmm7, %xmm1
	pandn	%xmm0, %xmm7
	por	%xmm7, %xmm1
	movaps	%xmm3, %xmm0
	pcmpgtd	%xmm4, %xmm0
	movaps	%xmm2, %xmm6
	pcmpgtd	%xmm5, %xmm6
	pand	%xmm0, %xmm4
	pandn	%xmm3, %xmm0
	por	%xmm0, %xmm4
	pand	%xmm6, %xmm5
	pandn	%xmm2, %xmm6
	por	%xmm6, %xmm5
	addq	$8, %rax
	movq	10512(%rsp), %rdx       # 8-byte Reload
	cmpq	%rdx, %rax
	movaps	%xmm4, %xmm0
	movaps	%xmm5, %xmm2
	movaps	%xmm8, %xmm3
	movaps	%xmm1, %xmm6
	movaps	%xmm1, 10352(%rsp)      # 16-byte Spill
	movaps	%xmm8, 10336(%rsp)      # 16-byte Spill
	movaps	%xmm5, 10320(%rsp)      # 16-byte Spill
	movaps	%xmm4, 10304(%rsp)      # 16-byte Spill
	movq	%rax, 10408(%rsp)       # 8-byte Spill
	movaps	%xmm0, 10416(%rsp)      # 16-byte Spill
	movaps	%xmm2, 10384(%rsp)      # 16-byte Spill
	movaps	%xmm3, 10432(%rsp)      # 16-byte Spill
	movaps	%xmm6, 10368(%rsp)      # 16-byte Spill
	jne	.LBB68_299
# %bb.300:                              # %middle.block6997
                                        #   in Loop: Header=BB68_297 Depth=1
	movaps	10336(%rsp), %xmm0      # 16-byte Reload
	movaps	10352(%rsp), %xmm1      # 16-byte Reload
	pcmpgtd	%xmm1, %xmm0
	movaps	%xmm0, %xmm2
	pandn	%xmm1, %xmm2
	movaps	10336(%rsp), %xmm3      # 16-byte Reload
	pand	%xmm0, %xmm3
	por	%xmm2, %xmm3
	pshufd	$78, %xmm3, %xmm0       # xmm0 = xmm3[2,3,0,1]
	movaps	%xmm3, %xmm2
	pcmpgtd	%xmm0, %xmm2
	movaps	%xmm2, %xmm4
	pandn	%xmm0, %xmm4
	pand	%xmm2, %xmm3
	por	%xmm4, %xmm3
	pshufd	$229, %xmm3, %xmm0      # xmm0 = xmm3[1,1,2,3]
	movaps	%xmm3, %xmm2
	pcmpgtd	%xmm0, %xmm2
	movaps	%xmm2, %xmm4
	pandn	%xmm0, %xmm4
	pand	%xmm2, %xmm3
	por	%xmm4, %xmm3
	movd	%xmm3, %eax
	movaps	10320(%rsp), %xmm0      # 16-byte Reload
	movaps	10304(%rsp), %xmm2      # 16-byte Reload
	pcmpgtd	%xmm2, %xmm0
	movaps	%xmm0, %xmm3
	movaps	10320(%rsp), %xmm4      # 16-byte Reload
	pandn	%xmm4, %xmm3
	pand	%xmm0, %xmm2
	por	%xmm3, %xmm2
	pshufd	$78, %xmm2, %xmm0       # xmm0 = xmm2[2,3,0,1]
	movaps	%xmm0, %xmm3
	pcmpgtd	%xmm2, %xmm3
	movaps	%xmm3, %xmm5
	pandn	%xmm0, %xmm5
	pand	%xmm3, %xmm2
	por	%xmm5, %xmm2
	pshufd	$229, %xmm2, %xmm0      # xmm0 = xmm2[1,1,2,3]
	movaps	%xmm0, %xmm3
	pcmpgtd	%xmm2, %xmm3
	movaps	%xmm3, %xmm5
	pandn	%xmm0, %xmm5
	pand	%xmm3, %xmm2
	por	%xmm5, %xmm2
	movd	%xmm2, %ecx
	movb	10523(%rsp), %dl        # 1-byte Reload
	testb	$1, %dl
	movq	10512(%rsp), %rsi       # 8-byte Reload
	movl	%ecx, %edi
	movl	%eax, %r8d
	movl	%r8d, 10456(%rsp)       # 4-byte Spill
	movl	%eax, 10300(%rsp)       # 4-byte Spill
	movq	%rsi, 10464(%rsp)       # 8-byte Spill
	movl	%edi, 10460(%rsp)       # 4-byte Spill
	movl	%ecx, 10296(%rsp)       # 4-byte Spill
	jne	.LBB68_303
.LBB68_301:                             # %for.body1685.us.preheader
                                        #   in Loop: Header=BB68_297 Depth=1
	movl	10456(%rsp), %eax       # 4-byte Reload
	movl	10460(%rsp), %ecx       # 4-byte Reload
	movq	10464(%rsp), %rdx       # 8-byte Reload
	movl	%ecx, 10292(%rsp)       # 4-byte Spill
	movq	%rdx, 10280(%rsp)       # 8-byte Spill
	movl	%eax, 10276(%rsp)       # 4-byte Spill
.LBB68_302:                             # %for.body1685.us
                                        #   Parent Loop BB68_297 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	10276(%rsp), %eax       # 4-byte Reload
	movl	10292(%rsp), %ecx       # 4-byte Reload
	movq	10280(%rsp), %rdx       # 8-byte Reload
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$43888, %rsi            # imm = 0xAB70
	movq	10472(%rsp), %rdi       # 8-byte Reload
	imulq	$258, %rdi, %r8         # imm = 0x102
	addq	%r8, %rsi
	addq	%rdx, %rsi
	movb	(%rsi), %r9b
	movl	$18811, 38596(%rsp)     # imm = 0x497B
	movzbl	%r9b, %r10d
	cmpl	%r10d, %eax
	cmovll	%r10d, %eax
	cmpl	%r10d, %ecx
	cmovgl	%r10d, %ecx
	addq	$1, %rdx
	movq	10504(%rsp), %rsi       # 8-byte Reload
	cmpq	%rsi, %rdx
	movl	%ecx, %r10d
	movl	%eax, %r11d
	movl	%eax, 10300(%rsp)       # 4-byte Spill
	movl	%r11d, 10276(%rsp)      # 4-byte Spill
	movq	%rdx, 10280(%rsp)       # 8-byte Spill
	movl	%r10d, 10292(%rsp)      # 4-byte Spill
	movl	%ecx, 10296(%rsp)       # 4-byte Spill
	jne	.LBB68_302
.LBB68_303:                             # %for.cond1682.for.end1720_crit_edge.us
                                        #   in Loop: Header=BB68_297 Depth=1
	movl	10296(%rsp), %eax       # 4-byte Reload
	movl	10300(%rsp), %ecx       # 4-byte Reload
	movq	38576(%rsp), %rdx       # 8-byte Reload
	addq	$45436, %rdx            # imm = 0xB17C
	movq	10472(%rsp), %rsi       # 8-byte Reload
	imulq	$1032, %rsi, %rdi       # imm = 0x408
	addq	%rdi, %rdx
	movq	38576(%rsp), %rdi       # 8-byte Reload
	addq	$51628, %rdi            # imm = 0xC9AC
	imulq	$1032, %rsi, %r8        # imm = 0x408
	addq	%r8, %rdi
	movq	38576(%rsp), %r8        # 8-byte Reload
	addq	$57820, %r8             # imm = 0xE1DC
	imulq	$1032, %rsi, %r9        # imm = 0x408
	addq	%r9, %r8
	movq	38576(%rsp), %r9        # 8-byte Reload
	addq	$43888, %r9             # imm = 0xAB70
	imulq	$258, %rsi, %r10        # imm = 0x102
	addq	%r10, %r9
	movq	%rdi, 10264(%rsp)       # 8-byte Spill
	movq	%rdx, %rdi
	movq	10264(%rsp), %rsi       # 8-byte Reload
	movq	%r8, %rdx
	movl	%ecx, 10260(%rsp)       # 4-byte Spill
	movq	%r9, %rcx
	movl	%eax, %r8d
	movl	10260(%rsp), %r9d       # 4-byte Reload
	movl	13048(%rsp), %r11d      # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%eax, 10256(%rsp)       # 4-byte Spill
	callq	BZ2_hbCreateDecodeTables
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movq	10472(%rsp), %rdx       # 8-byte Reload
	movl	10256(%rsp), %eax       # 4-byte Reload
	movl	%eax, 64012(%rcx,%rdx,4)
	movl	$18824, 38596(%rsp)     # imm = 0x4988
	addq	$1, %rdx
	movq	10496(%rsp), %rsi       # 8-byte Reload
	cmpq	%rsi, %rdx
	movl	12832(%rsp), %r8d       # 4-byte Reload
	movq	%rdx, 10480(%rsp)       # 8-byte Spill
	movl	%r8d, 10524(%rsp)       # 4-byte Spill
	je	.LBB68_306
	jmp	.LBB68_297
.LBB68_304:                             # %for.body1681.lr.ph.split
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	12832(%rsp), %eax       # 4-byte Reload
	movl	%eax, %edx
	movl	%edx, %esi
	movq	%rsi, 10248(%rsp)       # 8-byte Spill
	movq	%rcx, 10240(%rsp)       # 8-byte Spill
.LBB68_305:                             # %for.body1681
                                        # =>This Inner Loop Header: Depth=1
	movq	10240(%rsp), %rax       # 8-byte Reload
	movl	$32, %r8d
	xorl	%r9d, %r9d
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$45436, %rcx            # imm = 0xB17C
	imulq	$1032, %rax, %rdx       # imm = 0x408
	addq	%rdx, %rcx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	addq	$51628, %rdx            # imm = 0xC9AC
	imulq	$1032, %rax, %rsi       # imm = 0x408
	addq	%rsi, %rdx
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$57820, %rsi            # imm = 0xE1DC
	imulq	$1032, %rax, %rdi       # imm = 0x408
	addq	%rdi, %rsi
	movq	38576(%rsp), %rdi       # 8-byte Reload
	addq	$43888, %rdi            # imm = 0xAB70
	imulq	$258, %rax, %r10        # imm = 0x102
	addq	%r10, %rdi
	movq	%rdi, 10232(%rsp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 10224(%rsp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	10224(%rsp), %rdx       # 8-byte Reload
	movq	10232(%rsp), %rcx       # 8-byte Reload
	movl	13048(%rsp), %r11d      # 4-byte Reload
	movl	%r11d, (%rsp)
	movq	%rax, 10216(%rsp)       # 8-byte Spill
	callq	BZ2_hbCreateDecodeTables
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	10216(%rsp), %rcx       # 8-byte Reload
	movl	$32, 64012(%rax,%rcx,4)
	movl	$18829, 38596(%rsp)     # imm = 0x498D
	addq	$1, %rcx
	movq	10248(%rsp), %rdx       # 8-byte Reload
	cmpq	%rdx, %rcx
	movl	12832(%rsp), %r8d       # 4-byte Reload
	movq	%rcx, 10240(%rsp)       # 8-byte Spill
	movl	%r8d, 10524(%rsp)       # 4-byte Spill
	jne	.LBB68_305
.LBB68_306:                             # %for.end1738
	movl	10524(%rsp), %eax       # 4-byte Reload
	movl	$15, %ecx
	movl	%ecx, %edx
	movl	$4095, %ecx             # imm = 0xFFF
	movl	%ecx, %esi
	movl	$15, %ecx
	xorl	%edi, %edi
	movl	$1024, %r8d             # imm = 0x400
	movl	%r8d, %r9d
	movq	38576(%rsp), %r10       # 8-byte Reload
	movl	3192(%r10), %r8d
	movl	$18831, 38596(%rsp)     # imm = 0x498F
	movl	40(%r10), %r11d
	movl	$18850, 38596(%rsp)     # imm = 0x49A2
	addq	$68, %r10
	movl	%edi, 10212(%rsp)       # 4-byte Spill
	movq	%r10, %rdi
	movl	10212(%rsp), %ebx       # 4-byte Reload
	movq	%rsi, 10200(%rsp)       # 8-byte Spill
	movl	%ebx, %esi
	movq	%rdx, 10192(%rsp)       # 8-byte Spill
	movq	%r9, %rdx
	movl	%eax, 10188(%rsp)       # 4-byte Spill
	movl	%r11d, 10184(%rsp)      # 4-byte Spill
	movl	%ecx, 10180(%rsp)       # 4-byte Spill
	movl	%r8d, 10176(%rsp)       # 4-byte Spill
	callq	memset
	movl	10176(%rsp), %eax       # 4-byte Reload
	addl	$1, %eax
	movl	10184(%rsp), %ecx       # 4-byte Reload
	imull	$100000, %ecx, %ecx     # imm = 0x186A0
	movq	10192(%rsp), %rdx       # 8-byte Reload
	movq	10200(%rsp), %rdi       # 8-byte Reload
	movl	10180(%rsp), %esi       # 4-byte Reload
	movl	%eax, 10172(%rsp)       # 4-byte Spill
	movl	%ecx, 10168(%rsp)       # 4-byte Spill
	movq	%rdx, 10160(%rsp)       # 8-byte Spill
	movq	%rdi, 10152(%rsp)       # 8-byte Spill
	movl	%esi, 10148(%rsp)       # 4-byte Spill
.LBB68_307:                             # %for.body1755
                                        # =>This Inner Loop Header: Depth=1
	movl	10148(%rsp), %eax       # 4-byte Reload
	movq	10152(%rsp), %rcx       # 8-byte Reload
	movq	10160(%rsp), %rdx       # 8-byte Reload
	movl	%eax, %esi
	shll	$4, %esi
	movb	%sil, %dil
	orb	$15, %dil
	movq	38576(%rsp), %r8        # 8-byte Reload
	movb	%dil, 3724(%r8,%rcx)
	movl	$18855, 38596(%rsp)     # imm = 0x49A7
	movb	%sil, %dil
	orb	$14, %dil
	movb	%dil, 3723(%r8,%rcx)
	movl	$18860, 38596(%rsp)     # imm = 0x49AC
	movb	%sil, %dil
	orb	$13, %dil
	movb	%dil, 3722(%r8,%rcx)
	movl	$18865, 38596(%rsp)     # imm = 0x49B1
	movb	%sil, %dil
	orb	$12, %dil
	movb	%dil, 3721(%r8,%rcx)
	movl	$18870, 38596(%rsp)     # imm = 0x49B6
	movb	%sil, %dil
	orb	$11, %dil
	movb	%dil, 3720(%r8,%rcx)
	movl	$18875, 38596(%rsp)     # imm = 0x49BB
	movb	%sil, %dil
	orb	$10, %dil
	movb	%dil, 3719(%r8,%rcx)
	movl	$18880, 38596(%rsp)     # imm = 0x49C0
	movb	%sil, %dil
	orb	$9, %dil
	movb	%dil, 3718(%r8,%rcx)
	movl	$18885, 38596(%rsp)     # imm = 0x49C5
	movb	%sil, %dil
	orb	$8, %dil
	movb	%dil, 3717(%r8,%rcx)
	movl	$18890, 38596(%rsp)     # imm = 0x49CA
	movb	%sil, %dil
	orb	$7, %dil
	movb	%dil, 3716(%r8,%rcx)
	movl	$18895, 38596(%rsp)     # imm = 0x49CF
	movb	%sil, %dil
	orb	$6, %dil
	movb	%dil, 3715(%r8,%rcx)
	movl	$18900, 38596(%rsp)     # imm = 0x49D4
	movb	%sil, %dil
	orb	$5, %dil
	movb	%dil, 3714(%r8,%rcx)
	movl	$18905, 38596(%rsp)     # imm = 0x49D9
	movb	%sil, %dil
	orb	$4, %dil
	movb	%dil, 3713(%r8,%rcx)
	movl	$18910, 38596(%rsp)     # imm = 0x49DE
	movb	%sil, %dil
	orb	$3, %dil
	movb	%dil, 3712(%r8,%rcx)
	movl	$18915, 38596(%rsp)     # imm = 0x49E3
	movb	%sil, %dil
	orb	$2, %dil
	movb	%dil, 3711(%r8,%rcx)
	movl	$18920, 38596(%rsp)     # imm = 0x49E8
	movb	%sil, %dil
	orb	$1, %dil
	movb	%dil, 3710(%r8,%rcx)
	movl	$18924, 38596(%rsp)     # imm = 0x49EC
	movb	%sil, %dil
	movb	%dil, 3709(%r8,%rcx)
	movl	$18928, 38596(%rsp)     # imm = 0x49F0
	movl	%ecx, %esi
	addl	$-15, %esi
	movl	%esi, 7820(%r8,%rdx,4)
	movl	$18934, 38596(%rsp)     # imm = 0x49F6
	movq	%rdx, %r9
	addq	$-1, %r9
	addl	$-1, %eax
	addq	$-16, %rcx
	cmpq	$0, %rdx
	movq	%rcx, 10152(%rsp)       # 8-byte Spill
	movq	%r9, 10160(%rsp)        # 8-byte Spill
	movl	%eax, 10148(%rsp)       # 4-byte Spill
	jne	.LBB68_307
# %bb.308:                              # %if.then1777
	xorl	%eax, %eax
	movl	$256, %ecx              # imm = 0x100
	movl	$4294967292, %edx       # imm = 0xFFFFFFFC
	movl	12828(%rsp), %esi       # 4-byte Reload
	cmpl	$1, %esi
	movl	12884(%rsp), %edi       # 4-byte Reload
	movq	12928(%rsp), %r8        # 8-byte Reload
	movq	12936(%rsp), %r9        # 8-byte Reload
	movq	12944(%rsp), %r10       # 8-byte Reload
	movq	12952(%rsp), %r11       # 8-byte Reload
	movq	12960(%rsp), %rbx       # 8-byte Reload
	movq	12968(%rsp), %r14       # 8-byte Reload
	movq	12976(%rsp), %r15       # 8-byte Reload
	movq	12984(%rsp), %r12       # 8-byte Reload
	movq	12992(%rsp), %r13       # 8-byte Reload
	movq	13000(%rsp), %rbp       # 8-byte Reload
	movq	13008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	13016(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	13024(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	13032(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	13040(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	12840(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	12768(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	12776(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	12784(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	12792(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	12800(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	12808(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	12816(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	12920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	12912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	12848(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 10144(%rsp)       # 4-byte Spill
	movl	12904(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	12900(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	12896(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	12892(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	12888(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	12824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	12880(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	12876(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	10144(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	10168(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	12864(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	10144(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	10144(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	10172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	12828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	12832(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	13048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	10188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	12836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movq	%rbp, 25448(%rsp)       # 8-byte Spill
	movl	%ecx, 25228(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%edi, 25332(%rsp)       # 4-byte Spill
	movq	%r8, 25520(%rsp)        # 8-byte Spill
	movq	%r9, 25512(%rsp)        # 8-byte Spill
	movq	%r10, 25504(%rsp)       # 8-byte Spill
	movq	%r11, 25496(%rsp)       # 8-byte Spill
	movq	%rbx, 25488(%rsp)       # 8-byte Spill
	movq	%r14, 25480(%rsp)       # 8-byte Spill
	movq	%r15, 25472(%rsp)       # 8-byte Spill
	movq	%r12, 25464(%rsp)       # 8-byte Spill
	movq	%r13, 25456(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	jl	.LBB68_542
# %bb.309:                              # %if.end1782
	xorl	%eax, %eax
	movl	$49, %ecx
	movl	$256, %edx              # imm = 0x100
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movb	7884(%rsi), %dil
	movl	$18937, 38596(%rsp)     # imm = 0x49F9
	movzbl	%dil, %r8d
	movl	%r8d, %r9d
	movl	64012(%rsi,%r9,4), %r8d
	movl	$18991, 38596(%rsp)     # imm = 0x4A2F
	addq	$51628, %rsi            # imm = 0xC9AC
	imulq	$1032, %r9, %r10        # imm = 0x408
	addq	%r10, %rsi
	movq	38576(%rsp), %r10       # 8-byte Reload
	addq	$57820, %r10            # imm = 0xE1DC
	imulq	$1032, %r9, %r11        # imm = 0x408
	addq	%r11, %r10
	movq	38576(%rsp), %r11       # 8-byte Reload
	addq	$45436, %r11            # imm = 0xB17C
	imulq	$1032, %r9, %r9         # imm = 0x408
	addq	%r9, %r11
	movzbl	%dil, %ebx
	movl	12864(%rsp), %ebp       # 4-byte Reload
	movl	12876(%rsp), %r14d      # 4-byte Reload
	movl	12880(%rsp), %r15d      # 4-byte Reload
	movl	12884(%rsp), %r12d      # 4-byte Reload
	movl	12892(%rsp), %r13d      # 4-byte Reload
	movl	12896(%rsp), %edi       # 4-byte Reload
	movq	12928(%rsp), %r9        # 8-byte Reload
	movq	%rsi, 10136(%rsp)       # 8-byte Spill
	movq	12936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36192(%rsp)       # 8-byte Spill
	movq	12944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36184(%rsp)       # 8-byte Spill
	movq	12952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36176(%rsp)       # 8-byte Spill
	movq	12960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36168(%rsp)       # 8-byte Spill
	movq	12968(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36160(%rsp)       # 8-byte Spill
	movq	12976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36152(%rsp)       # 8-byte Spill
	movq	12984(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36144(%rsp)       # 8-byte Spill
	movq	12992(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36136(%rsp)       # 8-byte Spill
	movq	13000(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36128(%rsp)       # 8-byte Spill
	movq	13008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36120(%rsp)       # 8-byte Spill
	movq	13016(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36112(%rsp)       # 8-byte Spill
	movq	13024(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36104(%rsp)       # 8-byte Spill
	movq	13032(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36096(%rsp)       # 8-byte Spill
	movq	13040(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36088(%rsp)       # 8-byte Spill
	movq	12840(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36080(%rsp)       # 8-byte Spill
	movq	12768(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36072(%rsp)       # 8-byte Spill
	movq	12776(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36064(%rsp)       # 8-byte Spill
	movq	12784(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36056(%rsp)       # 8-byte Spill
	movq	12792(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36048(%rsp)       # 8-byte Spill
	movq	12800(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36040(%rsp)       # 8-byte Spill
	movq	12808(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36032(%rsp)       # 8-byte Spill
	movq	12816(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 36024(%rsp)       # 8-byte Spill
	movq	10136(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 10132(%rsp)       # 4-byte Spill
	movl	%r8d, %eax
	movl	%eax, 36000(%rsp)       # 4-byte Spill
	movl	12824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35988(%rsp)       # 4-byte Spill
	movl	10132(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35984(%rsp)       # 4-byte Spill
	movl	10168(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35980(%rsp)       # 4-byte Spill
	movl	10132(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35972(%rsp)       # 4-byte Spill
	movl	10172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35968(%rsp)       # 4-byte Spill
	movl	12828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35964(%rsp)       # 4-byte Spill
	movl	12832(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35960(%rsp)       # 4-byte Spill
	movl	13048(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35956(%rsp)       # 4-byte Spill
	movl	10188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35952(%rsp)       # 4-byte Spill
	movl	12836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 35948(%rsp)       # 4-byte Spill
	movl	%r8d, 35992(%rsp)       # 4-byte Spill
	movl	%ecx, 35976(%rsp)       # 4-byte Spill
	movq	%rsi, 36008(%rsp)       # 8-byte Spill
	movq	%r9, 36200(%rsp)        # 8-byte Spill
	movq	%r10, 36016(%rsp)       # 8-byte Spill
	movl	%ebx, 35996(%rsp)       # 4-byte Spill
	movq	%r11, 35936(%rsp)       # 8-byte Spill
	movl	%ebp, 36236(%rsp)       # 4-byte Spill
	movl	%r14d, 36232(%rsp)      # 4-byte Spill
	movl	%r15d, 36228(%rsp)      # 4-byte Spill
	movl	%r12d, 36224(%rsp)      # 4-byte Spill
	movl	%r13d, 36220(%rsp)      # 4-byte Spill
	movl	%edi, 36004(%rsp)       # 4-byte Spill
	movl	%edx, 35944(%rsp)       # 4-byte Spill
.LBB68_310:                             # %sw.bb1804
	movl	35944(%rsp), %eax       # 4-byte Reload
	movl	35948(%rsp), %ecx       # 4-byte Reload
	movl	35952(%rsp), %edx       # 4-byte Reload
	movl	35956(%rsp), %esi       # 4-byte Reload
	movl	35960(%rsp), %edi       # 4-byte Reload
	movl	35964(%rsp), %r8d       # 4-byte Reload
	movl	35968(%rsp), %r9d       # 4-byte Reload
	movl	35972(%rsp), %r10d      # 4-byte Reload
	movl	35976(%rsp), %r11d      # 4-byte Reload
	movl	35980(%rsp), %ebx       # 4-byte Reload
	movl	35984(%rsp), %ebp       # 4-byte Reload
	movl	35988(%rsp), %r14d      # 4-byte Reload
	movl	35992(%rsp), %r15d      # 4-byte Reload
	movl	35996(%rsp), %r12d      # 4-byte Reload
	movl	36000(%rsp), %r13d      # 4-byte Reload
	movl	%esi, 10128(%rsp)       # 4-byte Spill
	movq	35936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10120(%rsp)       # 8-byte Spill
	movq	36008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10112(%rsp)       # 8-byte Spill
	movq	36016(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10104(%rsp)       # 8-byte Spill
	movq	36024(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10096(%rsp)       # 8-byte Spill
	movq	36032(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10088(%rsp)       # 8-byte Spill
	movq	36040(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10080(%rsp)       # 8-byte Spill
	movq	36048(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10072(%rsp)       # 8-byte Spill
	movq	36056(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10064(%rsp)       # 8-byte Spill
	movq	36064(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10056(%rsp)       # 8-byte Spill
	movq	36072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10048(%rsp)       # 8-byte Spill
	movq	36080(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10040(%rsp)       # 8-byte Spill
	movq	36088(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10032(%rsp)       # 8-byte Spill
	movq	36096(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10024(%rsp)       # 8-byte Spill
	movq	36104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10016(%rsp)       # 8-byte Spill
	movq	36112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10008(%rsp)       # 8-byte Spill
	movq	36120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 10000(%rsp)       # 8-byte Spill
	movq	36128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9992(%rsp)        # 8-byte Spill
	movq	36136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9984(%rsp)        # 8-byte Spill
	movq	36144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9976(%rsp)        # 8-byte Spill
	movq	36152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9968(%rsp)        # 8-byte Spill
	movq	36160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9960(%rsp)        # 8-byte Spill
	movq	36168(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9952(%rsp)        # 8-byte Spill
	movq	36176(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9944(%rsp)        # 8-byte Spill
	movq	36184(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9936(%rsp)        # 8-byte Spill
	movq	36192(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9928(%rsp)        # 8-byte Spill
	movq	36200(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 9924(%rsp)        # 4-byte Spill
	movl	36004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 9920(%rsp)        # 4-byte Spill
	movl	36220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 9916(%rsp)        # 4-byte Spill
	movl	36224(%rsp), %eax       # 4-byte Reload
	movl	%eax, 9912(%rsp)        # 4-byte Spill
	movl	36228(%rsp), %eax       # 4-byte Reload
	movl	%eax, 9908(%rsp)        # 4-byte Spill
	movl	36232(%rsp), %eax       # 4-byte Reload
	movl	%eax, 9904(%rsp)        # 4-byte Spill
	movl	36236(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 9896(%rsp)        # 8-byte Spill
	movq	38552(%rsp), %rsi       # 8-byte Reload
	movl	$36, (%rsi)
	movl	$18994, 38596(%rsp)     # imm = 0x4A32
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$36, %rsi
	movq	%rsi, 9888(%rsp)        # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	36(%rsi), %esi
	movl	$18998, 38596(%rsp)     # imm = 0x4A36
	movl	%esi, 9884(%rsp)        # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$32, %rsi
	movl	%eax, 9880(%rsp)        # 4-byte Spill
	movl	9884(%rsp), %eax        # 4-byte Reload
	cmpl	%r15d, %eax
	movl	%ecx, 9876(%rsp)        # 4-byte Spill
	movl	%edx, 9872(%rsp)        # 4-byte Spill
	movq	%rsi, 9864(%rsp)        # 8-byte Spill
	movl	%edi, 9860(%rsp)        # 4-byte Spill
	movl	%r8d, 9856(%rsp)        # 4-byte Spill
	movl	%r9d, 9852(%rsp)        # 4-byte Spill
	movl	%r10d, 9848(%rsp)       # 4-byte Spill
	movl	%r11d, 9844(%rsp)       # 4-byte Spill
	movl	%ebx, 9840(%rsp)        # 4-byte Spill
	movl	%ebp, 9836(%rsp)        # 4-byte Spill
	movl	%r14d, 9832(%rsp)       # 4-byte Spill
	movl	%r15d, 9828(%rsp)       # 4-byte Spill
	movl	%r12d, 9824(%rsp)       # 4-byte Spill
	movl	%r13d, 9820(%rsp)       # 4-byte Spill
	jl	.LBB68_312
# %bb.311:                              # %sw.bb1804.if.then1811_crit_edge
	movq	9864(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$19000, 38596(%rsp)     # imm = 0x4A38
	movl	9884(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 9816(%rsp)        # 4-byte Spill
	movl	%edx, 9812(%rsp)        # 4-byte Spill
	jmp	.LBB68_313
.LBB68_312:                             # %if.end1822.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$19002, 38596(%rsp)     # imm = 0x4A3A
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$19016, 38596(%rsp)     # imm = 0x4A48
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	9884(%rsp), %r9d        # 4-byte Reload
	movq	%rcx, 9800(%rsp)        # 8-byte Spill
	movq	%rdx, 9792(%rsp)        # 8-byte Spill
	movq	%r8, 9784(%rsp)         # 8-byte Spill
	movq	%rdi, 9776(%rsp)        # 8-byte Spill
	movl	%esi, 9772(%rsp)        # 4-byte Spill
	movl	%r9d, 9768(%rsp)        # 4-byte Spill
	jmp	.LBB68_314
.LBB68_313:                             # %if.then1811
	movl	9812(%rsp), %eax        # 4-byte Reload
	movl	9816(%rsp), %ecx        # 4-byte Reload
	movl	$1, %edx
	movl	9828(%rsp), %esi        # 4-byte Reload
	subl	%esi, %eax
	movl	%ecx, 9764(%rsp)        # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	9764(%rsp), %edi        # 4-byte Reload
	shrl	%cl, %edi
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	addl	$-1, %edx
	andl	%edx, %edi
	movq	9888(%rsp), %r8         # 8-byte Reload
	movl	%eax, (%r8)
	movl	$19023, 38596(%rsp)     # imm = 0x4A4F
	movl	9880(%rsp), %edx        # 4-byte Reload
	movl	9904(%rsp), %r9d        # 4-byte Reload
	movl	9908(%rsp), %r10d       # 4-byte Reload
	movl	9912(%rsp), %r11d       # 4-byte Reload
	movq	9896(%rsp), %rbx        # 8-byte Reload
	movq	9928(%rsp), %r14        # 8-byte Reload
	movq	9936(%rsp), %r15        # 8-byte Reload
	movq	9944(%rsp), %r12        # 8-byte Reload
	movq	9952(%rsp), %r13        # 8-byte Reload
	movq	9960(%rsp), %rbp        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9976(%rsp), %rsi        # 8-byte Reload
	movq	9984(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 9752(%rsp)        # 8-byte Spill
	movq	9992(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9744(%rsp)        # 8-byte Spill
	movq	10000(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 9736(%rsp)        # 8-byte Spill
	movq	10008(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 9728(%rsp)        # 8-byte Spill
	movq	10016(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 9720(%rsp)        # 8-byte Spill
	movq	10024(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 9712(%rsp)        # 8-byte Spill
	movq	10032(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 9704(%rsp)        # 8-byte Spill
	movq	10040(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 9696(%rsp)        # 8-byte Spill
	movq	10048(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 9688(%rsp)        # 8-byte Spill
	movq	10056(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 9680(%rsp)        # 8-byte Spill
	movq	10064(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 9672(%rsp)        # 8-byte Spill
	movq	10072(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 9664(%rsp)        # 8-byte Spill
	movq	10080(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 9656(%rsp)        # 8-byte Spill
	movq	10088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 9648(%rsp)        # 8-byte Spill
	movq	10096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 9640(%rsp)        # 8-byte Spill
	movq	10104(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 9632(%rsp)        # 8-byte Spill
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 9624(%rsp)        # 8-byte Spill
	movq	10120(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 9620(%rsp)        # 4-byte Spill
	movl	9820(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9616(%rsp)        # 4-byte Spill
	movl	9824(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9612(%rsp)        # 4-byte Spill
	movl	9920(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9608(%rsp)        # 4-byte Spill
	movl	9828(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9604(%rsp)        # 4-byte Spill
	movl	9832(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9600(%rsp)        # 4-byte Spill
	movl	9836(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9596(%rsp)        # 4-byte Spill
	movl	9840(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9592(%rsp)        # 4-byte Spill
	movl	9844(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9588(%rsp)        # 4-byte Spill
	movl	9848(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9584(%rsp)        # 4-byte Spill
	movl	9852(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9580(%rsp)        # 4-byte Spill
	movl	9856(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9576(%rsp)        # 4-byte Spill
	movl	9860(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9572(%rsp)        # 4-byte Spill
	movl	10128(%rsp), %eax       # 4-byte Reload
	movl	%eax, 9568(%rsp)        # 4-byte Spill
	movl	9872(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9564(%rsp)        # 4-byte Spill
	movl	9876(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9560(%rsp)        # 4-byte Spill
	movl	9924(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9556(%rsp)        # 4-byte Spill
	movq	%rsi, 9544(%rsp)        # 8-byte Spill
	movq	%rcx, 9536(%rsp)        # 8-byte Spill
	movq	%r8, 9528(%rsp)         # 8-byte Spill
	movl	%edx, 9524(%rsp)        # 4-byte Spill
	movl	%r9d, 9520(%rsp)        # 4-byte Spill
	movl	%r10d, 9516(%rsp)       # 4-byte Spill
	movl	%r11d, 9512(%rsp)       # 4-byte Spill
	movq	%rbx, 9504(%rsp)        # 8-byte Spill
	movq	%r14, 9496(%rsp)        # 8-byte Spill
	movq	%r15, 9488(%rsp)        # 8-byte Spill
	movq	%r12, 9480(%rsp)        # 8-byte Spill
	movq	%r13, 9472(%rsp)        # 8-byte Spill
	movq	%rbp, 9464(%rsp)        # 8-byte Spill
	movl	%edi, 9460(%rsp)        # 4-byte Spill
	jmp	.LBB68_318
.LBB68_314:                             # %if.end1822
                                        # =>This Inner Loop Header: Depth=1
	movl	9768(%rsp), %eax        # 4-byte Reload
	movl	9772(%rsp), %ecx        # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	9912(%rsp), %esi        # 4-byte Reload
	movq	9896(%rsp), %rdi        # 8-byte Reload
	movq	9928(%rsp), %r8         # 8-byte Reload
	movq	9936(%rsp), %r9         # 8-byte Reload
	movq	9944(%rsp), %r10        # 8-byte Reload
	movq	9952(%rsp), %r11        # 8-byte Reload
	movq	9960(%rsp), %rbx        # 8-byte Reload
	movq	9968(%rsp), %r14        # 8-byte Reload
	movq	9976(%rsp), %r15        # 8-byte Reload
	movq	9984(%rsp), %r12        # 8-byte Reload
	movq	9992(%rsp), %r13        # 8-byte Reload
	movq	10000(%rsp), %rbp       # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	10008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	10016(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	10024(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	10032(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	10040(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	10048(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	10056(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	10072(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	10080(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	10088(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	10096(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	10104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	10112(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	10120(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 9456(%rsp)        # 4-byte Spill
	movl	9820(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	9824(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	9920(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	9916(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	9828(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	9832(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	9908(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	9904(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	9836(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	9840(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	9880(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	9844(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	9848(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	9852(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	9856(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	9860(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	10128(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	9872(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	9876(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	9924(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 9452(%rsp)        # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.315:                              # %if.end1828
                                        #   in Loop: Header=BB68_314 Depth=1
	movq	9864(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$19025, 38596(%rsp)     # imm = 0x4A51
	shll	$8, %ecx
	movq	9800(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$19026, 38596(%rsp)     # imm = 0x4A52
	movb	(%rsi), %dil
	movl	$19028, 38596(%rsp)     # imm = 0x4A54
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$19029, 38596(%rsp)     # imm = 0x4A55
	movl	9456(%rsp), %r8d        # 4-byte Reload
	addl	$8, %r8d
	movq	9888(%rsp), %r9         # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$19031, 38596(%rsp)     # imm = 0x4A57
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$19032, 38596(%rsp)     # imm = 0x4A58
	movl	9452(%rsp), %r10d       # 4-byte Reload
	addl	$-1, %r10d
	movq	9792(%rsp), %rsi        # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$19033, 38596(%rsp)     # imm = 0x4A59
	movq	9776(%rsp), %r11        # 8-byte Reload
	movl	(%r11), %ebx
	movl	$19035, 38596(%rsp)     # imm = 0x4A5B
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$19038, 38596(%rsp)     # imm = 0x4A5E
	cmpl	$0, %ebx
	movl	%ecx, 9448(%rsp)        # 4-byte Spill
	movl	%r8d, 9444(%rsp)        # 4-byte Spill
	movl	%r10d, 9440(%rsp)       # 4-byte Spill
	jne	.LBB68_317
# %bb.316:                              # %if.then1851
                                        #   in Loop: Header=BB68_314 Depth=1
	movq	9784(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$19040, 38596(%rsp)     # imm = 0x4A60
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$19144, 38596(%rsp)     # imm = 0x4AC8
.LBB68_317:                             # %if.end1855
                                        #   in Loop: Header=BB68_314 Depth=1
	movl	9444(%rsp), %eax        # 4-byte Reload
	movl	9828(%rsp), %ecx        # 4-byte Reload
	cmpl	%ecx, %eax
	movl	9448(%rsp), %edx        # 4-byte Reload
	movl	9440(%rsp), %esi        # 4-byte Reload
	movl	9444(%rsp), %edi        # 4-byte Reload
	movl	%eax, 9812(%rsp)        # 4-byte Spill
	movl	%edx, 9816(%rsp)        # 4-byte Spill
	movl	%esi, 9772(%rsp)        # 4-byte Spill
	movl	%edi, 9768(%rsp)        # 4-byte Spill
	jl	.LBB68_314
	jmp	.LBB68_313
.LBB68_318:                             # %while.cond1857
	movl	9556(%rsp), %eax        # 4-byte Reload
	movl	9560(%rsp), %ecx        # 4-byte Reload
	movl	9564(%rsp), %edx        # 4-byte Reload
	movl	9568(%rsp), %esi        # 4-byte Reload
	movl	9572(%rsp), %edi        # 4-byte Reload
	movl	9576(%rsp), %r8d        # 4-byte Reload
	movl	9580(%rsp), %r9d        # 4-byte Reload
	movl	9584(%rsp), %r10d       # 4-byte Reload
	movl	9588(%rsp), %r11d       # 4-byte Reload
	movl	9592(%rsp), %ebx        # 4-byte Reload
	movl	9596(%rsp), %ebp        # 4-byte Reload
	movl	9600(%rsp), %r14d       # 4-byte Reload
	movl	9604(%rsp), %r15d       # 4-byte Reload
	movl	9460(%rsp), %r12d       # 4-byte Reload
	movl	9608(%rsp), %r13d       # 4-byte Reload
	movl	%eax, 9436(%rsp)        # 4-byte Spill
	movl	9612(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9432(%rsp)        # 4-byte Spill
	movl	9616(%rsp), %eax        # 4-byte Reload
	movl	%esi, 9428(%rsp)        # 4-byte Spill
	movq	9536(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9416(%rsp)        # 8-byte Spill
	movq	9624(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9408(%rsp)        # 8-byte Spill
	movq	9632(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 9404(%rsp)        # 4-byte Spill
	movl	9620(%rsp), %eax        # 4-byte Reload
	movq	%rsi, 9392(%rsp)        # 8-byte Spill
	movq	9640(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9384(%rsp)        # 8-byte Spill
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9376(%rsp)        # 8-byte Spill
	movq	9656(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9368(%rsp)        # 8-byte Spill
	movq	9664(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9360(%rsp)        # 8-byte Spill
	movq	9672(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9352(%rsp)        # 8-byte Spill
	movq	9680(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9344(%rsp)        # 8-byte Spill
	movq	9688(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9336(%rsp)        # 8-byte Spill
	movq	9696(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9328(%rsp)        # 8-byte Spill
	movq	9704(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9320(%rsp)        # 8-byte Spill
	movq	9712(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9312(%rsp)        # 8-byte Spill
	movq	9720(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9304(%rsp)        # 8-byte Spill
	movq	9728(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9296(%rsp)        # 8-byte Spill
	movq	9736(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9288(%rsp)        # 8-byte Spill
	movq	9744(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9280(%rsp)        # 8-byte Spill
	movq	9528(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9272(%rsp)        # 8-byte Spill
	movq	9544(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9264(%rsp)        # 8-byte Spill
	movq	9752(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9256(%rsp)        # 8-byte Spill
	movq	9464(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9248(%rsp)        # 8-byte Spill
	movq	9472(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9240(%rsp)        # 8-byte Spill
	movq	9480(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9232(%rsp)        # 8-byte Spill
	movq	9488(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9224(%rsp)        # 8-byte Spill
	movq	9496(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 9216(%rsp)        # 8-byte Spill
	movq	9504(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 9212(%rsp)        # 4-byte Spill
	movl	9512(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9208(%rsp)        # 4-byte Spill
	movl	9516(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9204(%rsp)        # 4-byte Spill
	movl	9520(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9200(%rsp)        # 4-byte Spill
	movl	9524(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9196(%rsp)        # 4-byte Spill
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	cmpl	$20, %r15d
	movl	%eax, 9192(%rsp)        # 4-byte Spill
	movl	9208(%rsp), %eax        # 4-byte Reload
	movq	%rsi, 9184(%rsp)        # 8-byte Spill
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	9216(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	9224(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	9232(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	9240(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	9248(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	9264(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	9272(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	9280(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	9288(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	9296(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	9304(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	9312(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	9328(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	9336(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	9344(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	9352(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	9360(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	9368(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	9376(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	9384(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	9392(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	9408(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	9416(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	9404(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	9432(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	%r13d, %eax
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	%r12d, %eax
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	%r15d, %eax
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	%r14d, %eax
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	9204(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	9200(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	%ebp, %eax
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	%ebx, %eax
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	9196(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	%r11d, %eax
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	%r10d, %eax
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	%r9d, %eax
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	%r8d, %eax
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	%edi, %eax
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	9428(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	%ecx, %eax
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	9436(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	9192(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movl	%ecx, 9180(%rsp)        # 4-byte Spill
	movl	%edx, 9176(%rsp)        # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%edi, 9172(%rsp)        # 4-byte Spill
	movl	%r8d, 9168(%rsp)        # 4-byte Spill
	movl	%r9d, 9164(%rsp)        # 4-byte Spill
	movl	%r10d, 9160(%rsp)       # 4-byte Spill
	movl	%r11d, 9156(%rsp)       # 4-byte Spill
	movl	%ebx, 9152(%rsp)        # 4-byte Spill
	movl	%ebp, 9148(%rsp)        # 4-byte Spill
	movl	%r14d, 9144(%rsp)       # 4-byte Spill
	movl	%r15d, 9140(%rsp)       # 4-byte Spill
	movl	%r12d, 9136(%rsp)       # 4-byte Spill
	movl	%r13d, 9132(%rsp)       # 4-byte Spill
	jg	.LBB68_542
# %bb.319:                              # %if.end1862
	movl	9140(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	9416(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %esi
	movl	$19154, 38596(%rsp)     # imm = 0x4AD2
	movl	9136(%rsp), %edi        # 4-byte Reload
	cmpl	%esi, %edi
	movq	%rcx, 9120(%rsp)        # 8-byte Spill
	jle	.LBB68_329
# %bb.320:                              # %if.end1868
	movl	9140(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$36, %rcx
	movl	9196(%rsp), %edx        # 4-byte Reload
	movl	9200(%rsp), %esi        # 4-byte Reload
	movl	9204(%rsp), %edi        # 4-byte Reload
	movl	9208(%rsp), %r8d        # 4-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9216(%rsp), %r10        # 8-byte Reload
	movq	9224(%rsp), %r11        # 8-byte Reload
	movq	9232(%rsp), %rbx        # 8-byte Reload
	movq	9240(%rsp), %r14        # 8-byte Reload
	movq	9248(%rsp), %r15        # 8-byte Reload
	movq	9256(%rsp), %r12        # 8-byte Reload
	movq	9264(%rsp), %r13        # 8-byte Reload
	movq	9272(%rsp), %rbp        # 8-byte Reload
	movq	%rcx, 9112(%rsp)        # 8-byte Spill
	movq	9280(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31528(%rsp)       # 8-byte Spill
	movq	9288(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31520(%rsp)       # 8-byte Spill
	movq	9296(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31512(%rsp)       # 8-byte Spill
	movq	9304(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31504(%rsp)       # 8-byte Spill
	movq	9312(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31496(%rsp)       # 8-byte Spill
	movq	9320(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31488(%rsp)       # 8-byte Spill
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31480(%rsp)       # 8-byte Spill
	movq	9336(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31472(%rsp)       # 8-byte Spill
	movq	9344(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31464(%rsp)       # 8-byte Spill
	movq	9352(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31456(%rsp)       # 8-byte Spill
	movq	9360(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31448(%rsp)       # 8-byte Spill
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31440(%rsp)       # 8-byte Spill
	movq	9376(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31432(%rsp)       # 8-byte Spill
	movq	9384(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31424(%rsp)       # 8-byte Spill
	movq	9112(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 9108(%rsp)        # 4-byte Spill
	movl	9212(%rsp), %eax        # 4-byte Reload
	movq	%rcx, 31416(%rsp)       # 8-byte Spill
	movq	9392(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31408(%rsp)       # 8-byte Spill
	movq	9408(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31400(%rsp)       # 8-byte Spill
	movq	9416(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 31396(%rsp)       # 4-byte Spill
	movl	9404(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31392(%rsp)       # 4-byte Spill
	movl	9432(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31388(%rsp)       # 4-byte Spill
	movl	9132(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31384(%rsp)       # 4-byte Spill
	movl	9136(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31380(%rsp)       # 4-byte Spill
	movl	9108(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31376(%rsp)       # 4-byte Spill
	movl	9144(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31372(%rsp)       # 4-byte Spill
	movl	9148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31368(%rsp)       # 4-byte Spill
	movl	9152(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31364(%rsp)       # 4-byte Spill
	movl	9156(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31360(%rsp)       # 4-byte Spill
	movl	9160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31356(%rsp)       # 4-byte Spill
	movl	9164(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31352(%rsp)       # 4-byte Spill
	movl	9168(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31348(%rsp)       # 4-byte Spill
	movl	9172(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31344(%rsp)       # 4-byte Spill
	movl	9428(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31340(%rsp)       # 4-byte Spill
	movl	9176(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31336(%rsp)       # 4-byte Spill
	movl	9180(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31332(%rsp)       # 4-byte Spill
	movl	9436(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31228(%rsp)       # 4-byte Spill
	movq	%rcx, 31320(%rsp)       # 8-byte Spill
	movl	%edx, 31300(%rsp)       # 4-byte Spill
	movl	%esi, 31296(%rsp)       # 4-byte Spill
	movl	%edi, 31292(%rsp)       # 4-byte Spill
	movl	%r8d, 31288(%rsp)       # 4-byte Spill
	movq	%r9, 31280(%rsp)        # 8-byte Spill
	movq	%r10, 31272(%rsp)       # 8-byte Spill
	movq	%r11, 31264(%rsp)       # 8-byte Spill
	movq	%rbx, 31256(%rsp)       # 8-byte Spill
	movq	%r14, 31248(%rsp)       # 8-byte Spill
	movq	%r15, 31240(%rsp)       # 8-byte Spill
	movq	%r12, 31232(%rsp)       # 8-byte Spill
	movq	%r13, 31304(%rsp)       # 8-byte Spill
	movq	%rbp, 31312(%rsp)       # 8-byte Spill
.LBB68_321:                             # %sw.bb1870
	movl	31228(%rsp), %eax       # 4-byte Reload
	movl	31332(%rsp), %ecx       # 4-byte Reload
	movl	31336(%rsp), %edx       # 4-byte Reload
	movl	31340(%rsp), %esi       # 4-byte Reload
	movl	31344(%rsp), %edi       # 4-byte Reload
	movl	31348(%rsp), %r8d       # 4-byte Reload
	movl	31352(%rsp), %r9d       # 4-byte Reload
	movl	31356(%rsp), %r10d      # 4-byte Reload
	movl	31360(%rsp), %r11d      # 4-byte Reload
	movl	31364(%rsp), %ebx       # 4-byte Reload
	movl	31368(%rsp), %ebp       # 4-byte Reload
	movl	31372(%rsp), %r14d      # 4-byte Reload
	movl	31376(%rsp), %r15d      # 4-byte Reload
	movl	31380(%rsp), %r12d      # 4-byte Reload
	movl	31384(%rsp), %r13d      # 4-byte Reload
	movl	%eax, 9104(%rsp)        # 4-byte Spill
	movl	31388(%rsp), %eax       # 4-byte Reload
	movl	%eax, 9100(%rsp)        # 4-byte Spill
	movl	31392(%rsp), %eax       # 4-byte Reload
	movl	%esi, 9096(%rsp)        # 4-byte Spill
	movq	31320(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9088(%rsp)        # 8-byte Spill
	movq	31400(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9080(%rsp)        # 8-byte Spill
	movq	31408(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 9076(%rsp)        # 4-byte Spill
	movl	31396(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 9064(%rsp)        # 8-byte Spill
	movq	31416(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9056(%rsp)        # 8-byte Spill
	movq	31424(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9048(%rsp)        # 8-byte Spill
	movq	31432(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9040(%rsp)        # 8-byte Spill
	movq	31440(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9032(%rsp)        # 8-byte Spill
	movq	31448(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9024(%rsp)        # 8-byte Spill
	movq	31456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9016(%rsp)        # 8-byte Spill
	movq	31464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9008(%rsp)        # 8-byte Spill
	movq	31472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 9000(%rsp)        # 8-byte Spill
	movq	31480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 8992(%rsp)        # 8-byte Spill
	movq	31488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 8984(%rsp)        # 8-byte Spill
	movq	31496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 8976(%rsp)        # 8-byte Spill
	movq	31504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 8968(%rsp)        # 8-byte Spill
	movq	31512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 8960(%rsp)        # 8-byte Spill
	movq	31520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 8952(%rsp)        # 8-byte Spill
	movq	31528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 8944(%rsp)        # 8-byte Spill
	movq	31312(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 8936(%rsp)        # 8-byte Spill
	movq	31304(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 8928(%rsp)        # 8-byte Spill
	movq	31232(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 8920(%rsp)        # 8-byte Spill
	movq	31240(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 8912(%rsp)        # 8-byte Spill
	movq	31248(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 8904(%rsp)        # 8-byte Spill
	movq	31256(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 8896(%rsp)        # 8-byte Spill
	movq	31264(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 8888(%rsp)        # 8-byte Spill
	movq	31272(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 8880(%rsp)        # 8-byte Spill
	movq	31280(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 8876(%rsp)        # 4-byte Spill
	movl	31288(%rsp), %eax       # 4-byte Reload
	movl	%eax, 8872(%rsp)        # 4-byte Spill
	movl	31292(%rsp), %eax       # 4-byte Reload
	movl	%eax, 8868(%rsp)        # 4-byte Spill
	movl	31296(%rsp), %eax       # 4-byte Reload
	movl	%eax, 8864(%rsp)        # 4-byte Spill
	movl	31300(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 8856(%rsp)        # 8-byte Spill
	movq	38552(%rsp), %rsi       # 8-byte Reload
	movl	$37, (%rsi)
	movl	$19160, 38596(%rsp)     # imm = 0x4AD8
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$32, %rsi
	movl	%eax, 8852(%rsp)        # 4-byte Spill
	movl	8876(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	movl	%ecx, 8848(%rsp)        # 4-byte Spill
	movl	%edx, 8844(%rsp)        # 4-byte Spill
	movq	%rsi, 8832(%rsp)        # 8-byte Spill
	movl	%edi, 8828(%rsp)        # 4-byte Spill
	movl	%r8d, 8824(%rsp)        # 4-byte Spill
	movl	%r9d, 8820(%rsp)        # 4-byte Spill
	movl	%r10d, 8816(%rsp)       # 4-byte Spill
	movl	%r11d, 8812(%rsp)       # 4-byte Spill
	movl	%ebx, 8808(%rsp)        # 4-byte Spill
	movl	%ebp, 8804(%rsp)        # 4-byte Spill
	movl	%r14d, 8800(%rsp)       # 4-byte Spill
	movl	%r15d, 8796(%rsp)       # 4-byte Spill
	movl	%r12d, 8792(%rsp)       # 4-byte Spill
	movl	%r13d, 8788(%rsp)       # 4-byte Spill
	jg	.LBB68_323
# %bb.322:                              # %if.end1886.preheader
	movl	8876(%rsp), %eax        # 4-byte Reload
	movl	%eax, 8784(%rsp)        # 4-byte Spill
	jmp	.LBB68_325
.LBB68_323:                             # %sw.bb1870.if.then1877_crit_edge
	movq	8832(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$19167, 38596(%rsp)     # imm = 0x4ADF
	movl	8876(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 8780(%rsp)        # 4-byte Spill
	movl	%edx, 8776(%rsp)        # 4-byte Spill
.LBB68_324:                             # %if.then1877
	movl	8776(%rsp), %eax        # 4-byte Reload
	movl	8780(%rsp), %ecx        # 4-byte Reload
	addl	$-1, %eax
	movl	%ecx, 8772(%rsp)        # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	8772(%rsp), %edx        # 4-byte Reload
	shrl	%cl, %edx
	andl	$1, %edx
	movq	9056(%rsp), %rsi        # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$19171, 38596(%rsp)     # imm = 0x4AE3
	movl	8792(%rsp), %edi        # 4-byte Reload
	shll	$1, %edi
	movl	%edx, %r8d
	orl	%edi, %r8d
	movl	8852(%rsp), %edi        # 4-byte Reload
	movl	8864(%rsp), %r9d        # 4-byte Reload
	movl	8868(%rsp), %r10d       # 4-byte Reload
	movl	8872(%rsp), %r11d       # 4-byte Reload
	movq	8856(%rsp), %rbx        # 8-byte Reload
	movq	8880(%rsp), %r14        # 8-byte Reload
	movq	8888(%rsp), %r15        # 8-byte Reload
	movq	8896(%rsp), %r12        # 8-byte Reload
	movq	8904(%rsp), %r13        # 8-byte Reload
	movq	8912(%rsp), %rbp        # 8-byte Reload
	movq	8920(%rsp), %rcx        # 8-byte Reload
	movq	8928(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, 9752(%rsp)        # 8-byte Spill
	movq	8936(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9528(%rsp)        # 8-byte Spill
	movq	8944(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9744(%rsp)        # 8-byte Spill
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9736(%rsp)        # 8-byte Spill
	movq	8960(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9728(%rsp)        # 8-byte Spill
	movq	8968(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9720(%rsp)        # 8-byte Spill
	movq	8976(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9712(%rsp)        # 8-byte Spill
	movq	8984(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9704(%rsp)        # 8-byte Spill
	movq	8992(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9696(%rsp)        # 8-byte Spill
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9688(%rsp)        # 8-byte Spill
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9680(%rsp)        # 8-byte Spill
	movq	9016(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9672(%rsp)        # 8-byte Spill
	movq	9024(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9664(%rsp)        # 8-byte Spill
	movq	9032(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9656(%rsp)        # 8-byte Spill
	movq	9040(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9648(%rsp)        # 8-byte Spill
	movq	9048(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9640(%rsp)        # 8-byte Spill
	movq	9064(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9632(%rsp)        # 8-byte Spill
	movq	9080(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 9624(%rsp)        # 8-byte Spill
	movq	9088(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 9620(%rsp)        # 4-byte Spill
	movl	9076(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9616(%rsp)        # 4-byte Spill
	movl	9100(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9612(%rsp)        # 4-byte Spill
	movl	8796(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9604(%rsp)        # 4-byte Spill
	movl	8800(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9600(%rsp)        # 4-byte Spill
	movl	8804(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9596(%rsp)        # 4-byte Spill
	movl	8808(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9592(%rsp)        # 4-byte Spill
	movl	8812(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9588(%rsp)        # 4-byte Spill
	movl	8816(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9584(%rsp)        # 4-byte Spill
	movl	8820(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9580(%rsp)        # 4-byte Spill
	movl	8824(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9576(%rsp)        # 4-byte Spill
	movl	8828(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9572(%rsp)        # 4-byte Spill
	movl	9096(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9568(%rsp)        # 4-byte Spill
	movl	8844(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9564(%rsp)        # 4-byte Spill
	movl	8848(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9560(%rsp)        # 4-byte Spill
	movl	9104(%rsp), %eax        # 4-byte Reload
	movq	%rcx, 9536(%rsp)        # 8-byte Spill
	movl	%eax, 9556(%rsp)        # 4-byte Spill
	movq	%rsi, 9544(%rsp)        # 8-byte Spill
	movl	%edx, 9608(%rsp)        # 4-byte Spill
	movl	%edi, 9524(%rsp)        # 4-byte Spill
	movl	%r9d, 9520(%rsp)        # 4-byte Spill
	movl	%r10d, 9516(%rsp)       # 4-byte Spill
	movl	%r11d, 9512(%rsp)       # 4-byte Spill
	movq	%rbx, 9504(%rsp)        # 8-byte Spill
	movq	%r14, 9496(%rsp)        # 8-byte Spill
	movq	%r15, 9488(%rsp)        # 8-byte Spill
	movq	%r12, 9480(%rsp)        # 8-byte Spill
	movq	%r13, 9472(%rsp)        # 8-byte Spill
	movq	%rbp, 9464(%rsp)        # 8-byte Spill
	movl	%r8d, 9460(%rsp)        # 4-byte Spill
	jmp	.LBB68_318
.LBB68_325:                             # %if.end1886
                                        # =>This Inner Loop Header: Depth=1
	movl	8784(%rsp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$19173, 38596(%rsp)     # imm = 0x4AE5
	movq	%rsi, %rdi
	addq	$8, %rdi
	movl	8(%rsi), %r8d
	movl	$19176, 38596(%rsp)     # imm = 0x4AE8
	cmpl	$0, %r8d
	movl	8872(%rsp), %r9d        # 4-byte Reload
	movq	8856(%rsp), %r10        # 8-byte Reload
	movq	8880(%rsp), %r11        # 8-byte Reload
	movq	8888(%rsp), %rbx        # 8-byte Reload
	movq	8896(%rsp), %r14        # 8-byte Reload
	movq	8904(%rsp), %r15        # 8-byte Reload
	movq	8912(%rsp), %r12        # 8-byte Reload
	movq	8920(%rsp), %r13        # 8-byte Reload
	movq	8928(%rsp), %rbp        # 8-byte Reload
	movq	8936(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25456(%rsp)       # 8-byte Spill
	movq	8944(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25448(%rsp)       # 8-byte Spill
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25440(%rsp)       # 8-byte Spill
	movq	8960(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25432(%rsp)       # 8-byte Spill
	movq	8968(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25424(%rsp)       # 8-byte Spill
	movq	8976(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25416(%rsp)       # 8-byte Spill
	movq	8984(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25408(%rsp)       # 8-byte Spill
	movq	8992(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25400(%rsp)       # 8-byte Spill
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25392(%rsp)       # 8-byte Spill
	movq	9008(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25384(%rsp)       # 8-byte Spill
	movq	9016(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25376(%rsp)       # 8-byte Spill
	movq	9024(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25368(%rsp)       # 8-byte Spill
	movq	9032(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25360(%rsp)       # 8-byte Spill
	movq	9040(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25352(%rsp)       # 8-byte Spill
	movq	9048(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25344(%rsp)       # 8-byte Spill
	movq	9064(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25336(%rsp)       # 8-byte Spill
	movq	9080(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25248(%rsp)       # 8-byte Spill
	movq	9088(%rsp), %rdx        # 8-byte Reload
	movl	%eax, 8768(%rsp)        # 4-byte Spill
	movl	9076(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	9100(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	8788(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	8792(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	8796(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	8800(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	8868(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	8864(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	8804(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	8808(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	8852(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	8812(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	8816(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	8820(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	8824(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	8828(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	9096(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	8844(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	8848(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	9104(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%rbp, 25464(%rsp)       # 8-byte Spill
	movq	%rdx, 25232(%rsp)       # 8-byte Spill
	movq	%rsi, 8760(%rsp)        # 8-byte Spill
	movq	%rdi, 8752(%rsp)        # 8-byte Spill
	movl	%r8d, 8748(%rsp)        # 4-byte Spill
	movl	%r9d, 25332(%rsp)       # 4-byte Spill
	movq	%r10, 25520(%rsp)       # 8-byte Spill
	movq	%r11, 25512(%rsp)       # 8-byte Spill
	movq	%rbx, 25504(%rsp)       # 8-byte Spill
	movq	%r14, 25496(%rsp)       # 8-byte Spill
	movq	%r15, 25488(%rsp)       # 8-byte Spill
	movq	%r12, 25480(%rsp)       # 8-byte Spill
	movq	%r13, 25472(%rsp)       # 8-byte Spill
	movl	%ecx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.326:                              # %if.end1892
                                        #   in Loop: Header=BB68_325 Depth=1
	movq	8832(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$19179, 38596(%rsp)     # imm = 0x4AEB
	shll	$8, %ecx
	movq	8760(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$19180, 38596(%rsp)     # imm = 0x4AEC
	movb	(%rsi), %dil
	movl	$19182, 38596(%rsp)     # imm = 0x4AEE
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$19183, 38596(%rsp)     # imm = 0x4AEF
	movl	8768(%rsp), %r8d        # 4-byte Reload
	addl	$8, %r8d
	movq	9056(%rsp), %r9         # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$19185, 38596(%rsp)     # imm = 0x4AF1
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$19187, 38596(%rsp)     # imm = 0x4AF3
	movl	8748(%rsp), %r10d       # 4-byte Reload
	addl	$-1, %r10d
	movq	8752(%rsp), %rsi        # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$19189, 38596(%rsp)     # imm = 0x4AF5
	movl	12(%rdx), %r10d
	movl	$19191, 38596(%rsp)     # imm = 0x4AF7
	addl	$1, %r10d
	movl	%r10d, 12(%rdx)
	movl	$19195, 38596(%rsp)     # imm = 0x4AFB
	cmpl	$0, %r10d
	movl	%ecx, 8744(%rsp)        # 4-byte Spill
	movl	%r8d, 8740(%rsp)        # 4-byte Spill
	jne	.LBB68_328
# %bb.327:                              # %if.then1915
                                        #   in Loop: Header=BB68_325 Depth=1
	movq	8760(%rsp), %rax        # 8-byte Reload
	movl	16(%rax), %ecx
	movl	$19197, 38596(%rsp)     # imm = 0x4AFD
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movl	$19202, 38596(%rsp)     # imm = 0x4B02
.LBB68_328:                             # %if.end1919
                                        #   in Loop: Header=BB68_325 Depth=1
	movl	8768(%rsp), %eax        # 4-byte Reload
	cmpl	$-8, %eax
	movl	8744(%rsp), %ecx        # 4-byte Reload
	movl	8740(%rsp), %edx        # 4-byte Reload
	movl	8740(%rsp), %esi        # 4-byte Reload
	movl	%ecx, 8780(%rsp)        # 4-byte Spill
	movl	%edx, 8776(%rsp)        # 4-byte Spill
	movl	%esi, 8784(%rsp)        # 4-byte Spill
	jg	.LBB68_324
	jmp	.LBB68_325
.LBB68_329:                             # %while.end1923
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movq	9408(%rsp), %rcx        # 8-byte Reload
	movq	9120(%rsp), %rdx        # 8-byte Reload
	movl	(%rcx,%rdx,4), %esi
	movl	$19208, 38596(%rsp)     # imm = 0x4B08
	movl	9136(%rsp), %edi        # 4-byte Reload
	subl	%esi, %edi
	cmpl	$257, %edi              # imm = 0x101
	movl	9208(%rsp), %esi        # 4-byte Reload
	movq	9184(%rsp), %r8         # 8-byte Reload
	movq	9216(%rsp), %r9         # 8-byte Reload
	movq	9224(%rsp), %r10        # 8-byte Reload
	movq	9232(%rsp), %r11        # 8-byte Reload
	movq	9240(%rsp), %rbx        # 8-byte Reload
	movq	9248(%rsp), %r14        # 8-byte Reload
	movq	9256(%rsp), %r15        # 8-byte Reload
	movq	9264(%rsp), %r12        # 8-byte Reload
	movq	9272(%rsp), %r13        # 8-byte Reload
	movq	9280(%rsp), %rbp        # 8-byte Reload
	movq	9288(%rsp), %rcx        # 8-byte Reload
	movq	9296(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 25440(%rsp)       # 8-byte Spill
	movq	9304(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25424(%rsp)       # 8-byte Spill
	movq	9312(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	9320(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	9336(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	9344(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	9352(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	9360(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	9376(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	9384(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	9392(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	9408(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	9416(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 8736(%rsp)        # 4-byte Spill
	movl	9404(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	9432(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	9132(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	9136(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	9140(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	9144(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	9204(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	9200(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	9148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	9152(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	9196(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	9156(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	9160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	9164(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	9168(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	9172(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	9428(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	9176(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	9180(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	9436(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	8736(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movq	%rdx, 25432(%rsp)       # 8-byte Spill
	movl	%edi, 8732(%rsp)        # 4-byte Spill
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	%r8, 25520(%rsp)        # 8-byte Spill
	movq	%r9, 25512(%rsp)        # 8-byte Spill
	movq	%r10, 25504(%rsp)       # 8-byte Spill
	movq	%r11, 25496(%rsp)       # 8-byte Spill
	movq	%rbx, 25488(%rsp)       # 8-byte Spill
	movq	%r14, 25480(%rsp)       # 8-byte Spill
	movq	%r15, 25472(%rsp)       # 8-byte Spill
	movq	%r12, 25464(%rsp)       # 8-byte Spill
	movq	%r13, 25456(%rsp)       # 8-byte Spill
	movq	%rbp, 25448(%rsp)       # 8-byte Spill
	ja	.LBB68_542
# %bb.330:                              # %if.end1936
	movl	8732(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	9392(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %esi
	movl	$19422, 38596(%rsp)     # imm = 0x4BDE
	movl	9208(%rsp), %edi        # 4-byte Reload
	movq	9184(%rsp), %rcx        # 8-byte Reload
	movq	9216(%rsp), %r8         # 8-byte Reload
	movq	9224(%rsp), %r9         # 8-byte Reload
	movq	9232(%rsp), %r10        # 8-byte Reload
	movq	9240(%rsp), %r11        # 8-byte Reload
	movq	9248(%rsp), %rbx        # 8-byte Reload
	movq	9256(%rsp), %r14        # 8-byte Reload
	movq	9264(%rsp), %r15        # 8-byte Reload
	movq	9272(%rsp), %r12        # 8-byte Reload
	movq	9280(%rsp), %r13        # 8-byte Reload
	movq	9288(%rsp), %rbp        # 8-byte Reload
	movq	9296(%rsp), %rdx        # 8-byte Reload
	movq	9304(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8720(%rsp)        # 8-byte Spill
	movq	9312(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8712(%rsp)        # 8-byte Spill
	movq	9320(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8704(%rsp)        # 8-byte Spill
	movq	9328(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8696(%rsp)        # 8-byte Spill
	movq	9336(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8688(%rsp)        # 8-byte Spill
	movq	9344(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8680(%rsp)        # 8-byte Spill
	movq	9352(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8672(%rsp)        # 8-byte Spill
	movq	9360(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8664(%rsp)        # 8-byte Spill
	movq	9368(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	movq	9376(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	movq	9384(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8640(%rsp)        # 8-byte Spill
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8632(%rsp)        # 8-byte Spill
	movq	9408(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8624(%rsp)        # 8-byte Spill
	movq	9416(%rsp), %rax        # 8-byte Reload
	movl	%esi, 8620(%rsp)        # 4-byte Spill
	movl	9404(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8616(%rsp)        # 4-byte Spill
	movl	9432(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8612(%rsp)        # 4-byte Spill
	movl	9132(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8608(%rsp)        # 4-byte Spill
	movl	9136(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8604(%rsp)        # 4-byte Spill
	movl	9140(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8600(%rsp)        # 4-byte Spill
	movl	9144(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8596(%rsp)        # 4-byte Spill
	movl	9204(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8592(%rsp)        # 4-byte Spill
	movl	9200(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8588(%rsp)        # 4-byte Spill
	movl	9148(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8584(%rsp)        # 4-byte Spill
	movl	9152(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8580(%rsp)        # 4-byte Spill
	movl	8620(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8576(%rsp)        # 4-byte Spill
	movl	9156(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8572(%rsp)        # 4-byte Spill
	movl	9160(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8568(%rsp)        # 4-byte Spill
	movl	9164(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8564(%rsp)        # 4-byte Spill
	movl	9168(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8560(%rsp)        # 4-byte Spill
	movl	9172(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8556(%rsp)        # 4-byte Spill
	movl	9428(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8552(%rsp)        # 4-byte Spill
	movl	9176(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8548(%rsp)        # 4-byte Spill
	movl	9180(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8544(%rsp)        # 4-byte Spill
	movl	9436(%rsp), %esi        # 4-byte Reload
	movq	%rax, 8536(%rsp)        # 8-byte Spill
	movq	%rdx, 8528(%rsp)        # 8-byte Spill
	movl	%esi, 8524(%rsp)        # 4-byte Spill
	movl	%edi, 8520(%rsp)        # 4-byte Spill
	movq	%rcx, 8512(%rsp)        # 8-byte Spill
	movq	%r8, 8504(%rsp)         # 8-byte Spill
	movq	%r9, 8496(%rsp)         # 8-byte Spill
	movq	%r10, 8488(%rsp)        # 8-byte Spill
	movq	%r11, 8480(%rsp)        # 8-byte Spill
	movq	%rbx, 8472(%rsp)        # 8-byte Spill
	movq	%r14, 8464(%rsp)        # 8-byte Spill
	movq	%r15, 8456(%rsp)        # 8-byte Spill
	movq	%r12, 8448(%rsp)        # 8-byte Spill
	movq	%r13, 8440(%rsp)        # 8-byte Spill
	movq	%rbp, 8432(%rsp)        # 8-byte Spill
.LBB68_331:                             # %while.cond1942
	movl	8524(%rsp), %eax        # 4-byte Reload
	movl	8544(%rsp), %ecx        # 4-byte Reload
	movl	8548(%rsp), %edx        # 4-byte Reload
	movl	8552(%rsp), %esi        # 4-byte Reload
	movl	8556(%rsp), %edi        # 4-byte Reload
	movl	8560(%rsp), %r8d        # 4-byte Reload
	movl	8564(%rsp), %r9d        # 4-byte Reload
	movl	8568(%rsp), %r10d       # 4-byte Reload
	movl	8572(%rsp), %r11d       # 4-byte Reload
	movl	8576(%rsp), %ebx        # 4-byte Reload
	movl	8580(%rsp), %ebp        # 4-byte Reload
	movl	8584(%rsp), %r14d       # 4-byte Reload
	movl	8588(%rsp), %r15d       # 4-byte Reload
	movl	8592(%rsp), %r12d       # 4-byte Reload
	movl	8596(%rsp), %r13d       # 4-byte Reload
	movl	%eax, 8428(%rsp)        # 4-byte Spill
	movl	8600(%rsp), %eax        # 4-byte Reload
	movl	%eax, 8424(%rsp)        # 4-byte Spill
	movl	8604(%rsp), %eax        # 4-byte Reload
	movl	%eax, 8420(%rsp)        # 4-byte Spill
	movl	8608(%rsp), %eax        # 4-byte Reload
	movl	%eax, 8416(%rsp)        # 4-byte Spill
	movl	8612(%rsp), %eax        # 4-byte Reload
	movl	%eax, 8412(%rsp)        # 4-byte Spill
	movl	8616(%rsp), %eax        # 4-byte Reload
	movl	%esi, 8408(%rsp)        # 4-byte Spill
	movq	8536(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8400(%rsp)        # 8-byte Spill
	movq	8624(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8392(%rsp)        # 8-byte Spill
	movq	8632(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8384(%rsp)        # 8-byte Spill
	movq	8640(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8376(%rsp)        # 8-byte Spill
	movq	8648(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8368(%rsp)        # 8-byte Spill
	movq	8656(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8360(%rsp)        # 8-byte Spill
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8352(%rsp)        # 8-byte Spill
	movq	8672(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8344(%rsp)        # 8-byte Spill
	movq	8680(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8336(%rsp)        # 8-byte Spill
	movq	8688(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8328(%rsp)        # 8-byte Spill
	movq	8696(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8320(%rsp)        # 8-byte Spill
	movq	8704(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8312(%rsp)        # 8-byte Spill
	movq	8712(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8304(%rsp)        # 8-byte Spill
	movq	8720(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8296(%rsp)        # 8-byte Spill
	movq	8528(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8288(%rsp)        # 8-byte Spill
	movq	8432(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8280(%rsp)        # 8-byte Spill
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8272(%rsp)        # 8-byte Spill
	movq	8448(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8264(%rsp)        # 8-byte Spill
	movq	8456(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8256(%rsp)        # 8-byte Spill
	movq	8464(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8248(%rsp)        # 8-byte Spill
	movq	8472(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8240(%rsp)        # 8-byte Spill
	movq	8480(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8232(%rsp)        # 8-byte Spill
	movq	8488(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8224(%rsp)        # 8-byte Spill
	movq	8496(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8216(%rsp)        # 8-byte Spill
	movq	8504(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 8208(%rsp)        # 8-byte Spill
	movq	8512(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 8204(%rsp)        # 4-byte Spill
	movl	8520(%rsp), %eax        # 4-byte Reload
	cmpl	%r9d, %ebx
	movl	%eax, 8200(%rsp)        # 4-byte Spill
	movl	%ecx, 8196(%rsp)        # 4-byte Spill
	movl	%edx, 8192(%rsp)        # 4-byte Spill
	movq	%rsi, 8184(%rsp)        # 8-byte Spill
	movl	%edi, 8180(%rsp)        # 4-byte Spill
	movl	%r8d, 8176(%rsp)        # 4-byte Spill
	movl	%r9d, 8172(%rsp)        # 4-byte Spill
	movl	%r10d, 8168(%rsp)       # 4-byte Spill
	movl	%r11d, 8164(%rsp)       # 4-byte Spill
	movl	%ebx, 8160(%rsp)        # 4-byte Spill
	movl	%ebp, 8156(%rsp)        # 4-byte Spill
	movl	%r14d, 8152(%rsp)       # 4-byte Spill
	movl	%r15d, 8148(%rsp)       # 4-byte Spill
	movl	%r12d, 8144(%rsp)       # 4-byte Spill
	movl	%r13d, 8140(%rsp)       # 4-byte Spill
	je	.LBB68_430
# %bb.332:                              # %if.end1947
	movl	$1, %eax
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	8160(%rsp), %edx        # 4-byte Reload
	cmpl	$2, %edx
	movl	8200(%rsp), %esi        # 4-byte Reload
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8208(%rsp), %r8         # 8-byte Reload
	movq	8216(%rsp), %r9         # 8-byte Reload
	movq	8224(%rsp), %r10        # 8-byte Reload
	movq	8232(%rsp), %r11        # 8-byte Reload
	movq	8240(%rsp), %rbx        # 8-byte Reload
	movq	8248(%rsp), %r14        # 8-byte Reload
	movq	8256(%rsp), %r15        # 8-byte Reload
	movq	8264(%rsp), %r12        # 8-byte Reload
	movq	8272(%rsp), %r13        # 8-byte Reload
	movq	8280(%rsp), %rbp        # 8-byte Reload
	movq	8288(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 8128(%rsp)        # 8-byte Spill
	movq	8296(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 8120(%rsp)        # 8-byte Spill
	movq	8304(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 8112(%rsp)        # 8-byte Spill
	movq	8312(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 8104(%rsp)        # 8-byte Spill
	movq	8320(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 8096(%rsp)        # 8-byte Spill
	movq	8328(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 8088(%rsp)        # 8-byte Spill
	movq	8336(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 8080(%rsp)        # 8-byte Spill
	movq	8344(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 8072(%rsp)        # 8-byte Spill
	movq	8352(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 8064(%rsp)        # 8-byte Spill
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 8056(%rsp)        # 8-byte Spill
	movq	8368(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 8048(%rsp)        # 8-byte Spill
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 8040(%rsp)        # 8-byte Spill
	movq	8384(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 8032(%rsp)        # 8-byte Spill
	movq	8392(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 8024(%rsp)        # 8-byte Spill
	movq	8400(%rsp), %rdx        # 8-byte Reload
	movl	%eax, 8020(%rsp)        # 4-byte Spill
	movl	8204(%rsp), %eax        # 4-byte Reload
	movl	%eax, 8016(%rsp)        # 4-byte Spill
	movl	8412(%rsp), %eax        # 4-byte Reload
	movl	%eax, 8012(%rsp)        # 4-byte Spill
	movl	8416(%rsp), %eax        # 4-byte Reload
	movl	%eax, 8008(%rsp)        # 4-byte Spill
	movl	8420(%rsp), %eax        # 4-byte Reload
	movl	%eax, 8004(%rsp)        # 4-byte Spill
	movl	8424(%rsp), %eax        # 4-byte Reload
	movl	%eax, 8000(%rsp)        # 4-byte Spill
	movl	8140(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7996(%rsp)        # 4-byte Spill
	movl	8020(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7992(%rsp)        # 4-byte Spill
	movl	8152(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7988(%rsp)        # 4-byte Spill
	movl	8156(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7984(%rsp)        # 4-byte Spill
	movl	8160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7980(%rsp)        # 4-byte Spill
	movl	8164(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7976(%rsp)        # 4-byte Spill
	movl	8168(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7972(%rsp)        # 4-byte Spill
	movl	8172(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7968(%rsp)        # 4-byte Spill
	movl	8176(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7964(%rsp)        # 4-byte Spill
	movl	8180(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7960(%rsp)        # 4-byte Spill
	movl	8408(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7956(%rsp)        # 4-byte Spill
	movl	8192(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7952(%rsp)        # 4-byte Spill
	movl	8196(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7948(%rsp)        # 4-byte Spill
	movl	8428(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7944(%rsp)        # 4-byte Spill
	movq	%rbp, 7936(%rsp)        # 8-byte Spill
	movq	%rdx, 7928(%rsp)        # 8-byte Spill
	movl	%esi, 7924(%rsp)        # 4-byte Spill
	movq	%rdi, 7912(%rsp)        # 8-byte Spill
	movq	%r8, 7904(%rsp)         # 8-byte Spill
	movq	%r9, 7896(%rsp)         # 8-byte Spill
	movq	%r10, 7888(%rsp)        # 8-byte Spill
	movq	%r11, 7880(%rsp)        # 8-byte Spill
	movq	%rbx, 7872(%rsp)        # 8-byte Spill
	movq	%r14, 7864(%rsp)        # 8-byte Spill
	movq	%r15, 7856(%rsp)        # 8-byte Spill
	movq	%r12, 7848(%rsp)        # 8-byte Spill
	movq	%r13, 7840(%rsp)        # 8-byte Spill
	movl	%ecx, 7836(%rsp)        # 4-byte Spill
	jae	.LBB68_372
.LBB68_333:                             # %do.body
	movl	7944(%rsp), %eax        # 4-byte Reload
	movl	7948(%rsp), %ecx        # 4-byte Reload
	movl	7952(%rsp), %edx        # 4-byte Reload
	movl	7956(%rsp), %esi        # 4-byte Reload
	movl	7960(%rsp), %edi        # 4-byte Reload
	movl	7964(%rsp), %r8d        # 4-byte Reload
	movl	7968(%rsp), %r9d        # 4-byte Reload
	movl	7972(%rsp), %r10d       # 4-byte Reload
	movl	7976(%rsp), %r11d       # 4-byte Reload
	movl	7980(%rsp), %ebx        # 4-byte Reload
	movl	7984(%rsp), %ebp        # 4-byte Reload
	movl	7988(%rsp), %r14d       # 4-byte Reload
	movl	7836(%rsp), %r15d       # 4-byte Reload
	movl	7992(%rsp), %r12d       # 4-byte Reload
	movl	7996(%rsp), %r13d       # 4-byte Reload
	movl	%eax, 7832(%rsp)        # 4-byte Spill
	movl	8000(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7828(%rsp)        # 4-byte Spill
	movl	8004(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7824(%rsp)        # 4-byte Spill
	movl	8008(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7820(%rsp)        # 4-byte Spill
	movl	8012(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7816(%rsp)        # 4-byte Spill
	movl	8016(%rsp), %eax        # 4-byte Reload
	movl	%esi, 7812(%rsp)        # 4-byte Spill
	movq	7928(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7800(%rsp)        # 8-byte Spill
	movq	8024(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7792(%rsp)        # 8-byte Spill
	movq	8032(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7784(%rsp)        # 8-byte Spill
	movq	8040(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7776(%rsp)        # 8-byte Spill
	movq	8048(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7768(%rsp)        # 8-byte Spill
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7760(%rsp)        # 8-byte Spill
	movq	8064(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7752(%rsp)        # 8-byte Spill
	movq	8072(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7744(%rsp)        # 8-byte Spill
	movq	8080(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7736(%rsp)        # 8-byte Spill
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7728(%rsp)        # 8-byte Spill
	movq	8096(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7720(%rsp)        # 8-byte Spill
	movq	8104(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7712(%rsp)        # 8-byte Spill
	movq	8112(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7704(%rsp)        # 8-byte Spill
	movq	8120(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7696(%rsp)        # 8-byte Spill
	movq	8128(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7688(%rsp)        # 8-byte Spill
	movq	7936(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7680(%rsp)        # 8-byte Spill
	movq	7840(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7672(%rsp)        # 8-byte Spill
	movq	7848(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7664(%rsp)        # 8-byte Spill
	movq	7856(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7656(%rsp)        # 8-byte Spill
	movq	7864(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7648(%rsp)        # 8-byte Spill
	movq	7872(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7640(%rsp)        # 8-byte Spill
	movq	7880(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7632(%rsp)        # 8-byte Spill
	movq	7888(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7624(%rsp)        # 8-byte Spill
	movq	7896(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7616(%rsp)        # 8-byte Spill
	movq	7904(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 7608(%rsp)        # 8-byte Spill
	movq	7912(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 7604(%rsp)        # 4-byte Spill
	movl	7924(%rsp), %eax        # 4-byte Reload
	testl	%ebx, %ebx
	movl	%eax, 7600(%rsp)        # 4-byte Spill
	movl	%ecx, 7596(%rsp)        # 4-byte Spill
	movl	%edx, 7592(%rsp)        # 4-byte Spill
	movq	%rsi, 7584(%rsp)        # 8-byte Spill
	movl	%edi, 7580(%rsp)        # 4-byte Spill
	movl	%r8d, 7576(%rsp)        # 4-byte Spill
	movl	%r9d, 7572(%rsp)        # 4-byte Spill
	movl	%r10d, 7568(%rsp)       # 4-byte Spill
	movl	%r11d, 7564(%rsp)       # 4-byte Spill
	movl	%ebx, 7560(%rsp)        # 4-byte Spill
	movl	%ebp, 7556(%rsp)        # 4-byte Spill
	movl	%r14d, 7552(%rsp)       # 4-byte Spill
	movl	%r15d, 7548(%rsp)       # 4-byte Spill
	movl	%r12d, 7544(%rsp)       # 4-byte Spill
	movl	%r13d, 7540(%rsp)       # 4-byte Spill
	je	.LBB68_334
	jmp	.LBB68_551
.LBB68_551:                             # %do.body
	movl	7560(%rsp), %eax        # 4-byte Reload
	subl	$1, %eax
	movl	7548(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 7536(%rsp)        # 4-byte Spill
	movl	%ecx, 7532(%rsp)        # 4-byte Spill
	je	.LBB68_335
	jmp	.LBB68_336
.LBB68_334:                             # %if.then1956
	movl	7548(%rsp), %eax        # 4-byte Reload
	movl	7544(%rsp), %ecx        # 4-byte Reload
	addl	%ecx, %eax
	movl	%eax, 7532(%rsp)        # 4-byte Spill
	jmp	.LBB68_336
.LBB68_335:                             # %if.then1962
	movl	7544(%rsp), %eax        # 4-byte Reload
	shll	$1, %eax
	movl	7548(%rsp), %ecx        # 4-byte Reload
	addl	%eax, %ecx
	movl	%ecx, 7532(%rsp)        # 4-byte Spill
.LBB68_336:                             # %if.end1966
	movl	7532(%rsp), %eax        # 4-byte Reload
	movl	7544(%rsp), %ecx        # 4-byte Reload
	shll	$1, %ecx
	movl	7564(%rsp), %edx        # 4-byte Reload
	cmpl	$0, %edx
	movq	7784(%rsp), %rsi        # 8-byte Reload
	movq	7792(%rsp), %rdi        # 8-byte Reload
	movq	7800(%rsp), %r8         # 8-byte Reload
	movl	7604(%rsp), %r9d        # 4-byte Reload
	movl	7816(%rsp), %r10d       # 4-byte Reload
	movl	7568(%rsp), %r11d       # 4-byte Reload
	movl	%eax, 7528(%rsp)        # 4-byte Spill
	movl	%ecx, 7524(%rsp)        # 4-byte Spill
	movl	%edx, 7520(%rsp)        # 4-byte Spill
	movq	%rsi, 7512(%rsp)        # 8-byte Spill
	movq	%rdi, 7504(%rsp)        # 8-byte Spill
	movq	%r8, 7496(%rsp)         # 8-byte Spill
	movl	%r9d, 7492(%rsp)        # 4-byte Spill
	movl	%r10d, 7488(%rsp)       # 4-byte Spill
	movl	%r11d, 7484(%rsp)       # 4-byte Spill
	jne	.LBB68_339
# %bb.337:                              # %if.then1970
	xorl	%eax, %eax
	movl	$4294967292, %ecx       # imm = 0xFFFFFFFC
	movl	7568(%rsp), %edx        # 4-byte Reload
	addl	$1, %edx
	movl	7576(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %edx
	movl	7600(%rsp), %edi        # 4-byte Reload
	movq	7584(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7616(%rsp), %r10        # 8-byte Reload
	movq	7624(%rsp), %r11        # 8-byte Reload
	movq	7632(%rsp), %rbx        # 8-byte Reload
	movq	7640(%rsp), %r14        # 8-byte Reload
	movq	7648(%rsp), %r15        # 8-byte Reload
	movq	7656(%rsp), %r12        # 8-byte Reload
	movq	7664(%rsp), %r13        # 8-byte Reload
	movq	7672(%rsp), %rbp        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	7688(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	7696(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	7704(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	7712(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	7720(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	7728(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	7744(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	7752(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	7760(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	7768(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	7776(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	7784(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	7792(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	7800(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 7480(%rsp)        # 4-byte Spill
	movl	7604(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	7816(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	7820(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	7824(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	7828(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	7540(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	7524(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	7528(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	7552(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	7556(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	7560(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	7480(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	7572(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	7576(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	7580(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	7812(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	7592(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	7596(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	7832(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%rbp, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 7476(%rsp)        # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%edi, 25332(%rsp)       # 4-byte Spill
	movq	%r8, 25520(%rsp)        # 8-byte Spill
	movq	%r9, 25512(%rsp)        # 8-byte Spill
	movq	%r10, 25504(%rsp)       # 8-byte Spill
	movq	%r11, 25496(%rsp)       # 8-byte Spill
	movq	%rbx, 25488(%rsp)       # 8-byte Spill
	movq	%r14, 25480(%rsp)       # 8-byte Spill
	movq	%r15, 25472(%rsp)       # 8-byte Spill
	movq	%r12, 25464(%rsp)       # 8-byte Spill
	movq	%r13, 25456(%rsp)       # 8-byte Spill
	movl	%ecx, 25244(%rsp)       # 4-byte Spill
	jge	.LBB68_542
# %bb.338:                              # %if.end1975
	movl	$50, %eax
	movl	7476(%rsp), %ecx        # 4-byte Reload
	movslq	%ecx, %rdx
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movb	7884(%rsi,%rdx), %dil
	movl	$19426, 38596(%rsp)     # imm = 0x4BE2
	movzbl	%dil, %r8d
	movzbl	%dil, %r9d
	movl	%r9d, %edx
	movl	64012(%rsi,%rdx,4), %r9d
	movl	$19488, 38596(%rsp)     # imm = 0x4C20
	addq	$45436, %rsi            # imm = 0xB17C
	imulq	$1032, %rdx, %r10       # imm = 0x408
	addq	%r10, %rsi
	movq	38576(%rsp), %r10       # 8-byte Reload
	addq	$57820, %r10            # imm = 0xE1DC
	imulq	$1032, %rdx, %r11       # imm = 0x408
	addq	%r11, %r10
	movq	38576(%rsp), %r11       # 8-byte Reload
	addq	$51628, %r11            # imm = 0xC9AC
	imulq	$1032, %rdx, %rdx       # imm = 0x408
	addq	%rdx, %r11
	movl	%r8d, 7488(%rsp)        # 4-byte Spill
	movl	%ecx, 7484(%rsp)        # 4-byte Spill
	movq	%r11, 7504(%rsp)        # 8-byte Spill
	movl	%r9d, 7492(%rsp)        # 4-byte Spill
	movq	%r10, 7512(%rsp)        # 8-byte Spill
	movq	%rsi, 7496(%rsp)        # 8-byte Spill
	movl	%eax, 7520(%rsp)        # 4-byte Spill
.LBB68_339:                             # %if.end1995
	movl	7484(%rsp), %eax        # 4-byte Reload
	movl	7520(%rsp), %ecx        # 4-byte Reload
	movl	7488(%rsp), %edx        # 4-byte Reload
	movl	7492(%rsp), %esi        # 4-byte Reload
	movq	7496(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %r8         # 8-byte Reload
	movq	7512(%rsp), %r9         # 8-byte Reload
	addl	$-1, %ecx
	movl	7600(%rsp), %r10d       # 4-byte Reload
	movq	7584(%rsp), %r11        # 8-byte Reload
	movq	7608(%rsp), %rbx        # 8-byte Reload
	movq	7616(%rsp), %r14        # 8-byte Reload
	movq	7624(%rsp), %r15        # 8-byte Reload
	movq	7632(%rsp), %r12        # 8-byte Reload
	movq	7640(%rsp), %r13        # 8-byte Reload
	movq	7648(%rsp), %rbp        # 8-byte Reload
	movl	%esi, 7472(%rsp)        # 4-byte Spill
	movq	7656(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35872(%rsp)       # 8-byte Spill
	movq	7664(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35864(%rsp)       # 8-byte Spill
	movq	7672(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35856(%rsp)       # 8-byte Spill
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35848(%rsp)       # 8-byte Spill
	movq	7688(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35840(%rsp)       # 8-byte Spill
	movq	7696(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35832(%rsp)       # 8-byte Spill
	movq	7704(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35824(%rsp)       # 8-byte Spill
	movq	7712(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35816(%rsp)       # 8-byte Spill
	movq	7720(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35808(%rsp)       # 8-byte Spill
	movq	7728(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35800(%rsp)       # 8-byte Spill
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35792(%rsp)       # 8-byte Spill
	movq	7744(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35784(%rsp)       # 8-byte Spill
	movq	7752(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35776(%rsp)       # 8-byte Spill
	movq	7760(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35768(%rsp)       # 8-byte Spill
	movq	7768(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35760(%rsp)       # 8-byte Spill
	movq	7776(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 7468(%rsp)        # 4-byte Spill
	movl	7472(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35728(%rsp)       # 4-byte Spill
	movl	7820(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35720(%rsp)       # 4-byte Spill
	movl	7824(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35716(%rsp)       # 4-byte Spill
	movl	7472(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35712(%rsp)       # 4-byte Spill
	movl	7540(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35708(%rsp)       # 4-byte Spill
	movl	7524(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35704(%rsp)       # 4-byte Spill
	movl	7528(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35700(%rsp)       # 4-byte Spill
	movl	7552(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35696(%rsp)       # 4-byte Spill
	movl	7556(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35692(%rsp)       # 4-byte Spill
	movl	7560(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35688(%rsp)       # 4-byte Spill
	movl	7468(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35680(%rsp)       # 4-byte Spill
	movl	7572(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35676(%rsp)       # 4-byte Spill
	movl	7576(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35672(%rsp)       # 4-byte Spill
	movl	7580(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35668(%rsp)       # 4-byte Spill
	movl	7812(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35664(%rsp)       # 4-byte Spill
	movl	7592(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35660(%rsp)       # 4-byte Spill
	movl	7596(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35656(%rsp)       # 4-byte Spill
	movl	7832(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35652(%rsp)       # 4-byte Spill
	movq	%rbp, 35880(%rsp)       # 8-byte Spill
	movq	%rdi, 35640(%rsp)       # 8-byte Spill
	movq	%rsi, 35752(%rsp)       # 8-byte Spill
	movq	%r8, 35736(%rsp)        # 8-byte Spill
	movq	%r9, 35744(%rsp)        # 8-byte Spill
	movl	%edx, 35724(%rsp)       # 4-byte Spill
	movl	%r10d, 35732(%rsp)      # 4-byte Spill
	movq	%r11, 35928(%rsp)       # 8-byte Spill
	movq	%rbx, 35920(%rsp)       # 8-byte Spill
	movq	%r14, 35912(%rsp)       # 8-byte Spill
	movq	%r15, 35904(%rsp)       # 8-byte Spill
	movq	%r12, 35896(%rsp)       # 8-byte Spill
	movq	%r13, 35888(%rsp)       # 8-byte Spill
	movl	%ecx, 35684(%rsp)       # 4-byte Spill
.LBB68_340:                             # %sw.bb1997
	movl	35652(%rsp), %eax       # 4-byte Reload
	movl	35656(%rsp), %ecx       # 4-byte Reload
	movl	35660(%rsp), %edx       # 4-byte Reload
	movl	35664(%rsp), %esi       # 4-byte Reload
	movl	35668(%rsp), %edi       # 4-byte Reload
	movl	35672(%rsp), %r8d       # 4-byte Reload
	movl	35676(%rsp), %r9d       # 4-byte Reload
	movl	35680(%rsp), %r10d      # 4-byte Reload
	movl	35684(%rsp), %r11d      # 4-byte Reload
	movl	35688(%rsp), %ebx       # 4-byte Reload
	movl	35692(%rsp), %ebp       # 4-byte Reload
	movl	35696(%rsp), %r14d      # 4-byte Reload
	movl	35700(%rsp), %r15d      # 4-byte Reload
	movl	35704(%rsp), %r12d      # 4-byte Reload
	movl	35708(%rsp), %r13d      # 4-byte Reload
	movl	%eax, 7464(%rsp)        # 4-byte Spill
	movl	35712(%rsp), %eax       # 4-byte Reload
	movl	%eax, 7460(%rsp)        # 4-byte Spill
	movl	35716(%rsp), %eax       # 4-byte Reload
	movl	%eax, 7456(%rsp)        # 4-byte Spill
	movl	35720(%rsp), %eax       # 4-byte Reload
	movl	%eax, 7452(%rsp)        # 4-byte Spill
	movl	35724(%rsp), %eax       # 4-byte Reload
	movl	%eax, 7448(%rsp)        # 4-byte Spill
	movl	35728(%rsp), %eax       # 4-byte Reload
	movl	%esi, 7444(%rsp)        # 4-byte Spill
	movq	35640(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7432(%rsp)        # 8-byte Spill
	movq	35736(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7424(%rsp)        # 8-byte Spill
	movq	35744(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7416(%rsp)        # 8-byte Spill
	movq	35752(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7408(%rsp)        # 8-byte Spill
	movq	35760(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7400(%rsp)        # 8-byte Spill
	movq	35768(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7392(%rsp)        # 8-byte Spill
	movq	35776(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7384(%rsp)        # 8-byte Spill
	movq	35784(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7376(%rsp)        # 8-byte Spill
	movq	35792(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7368(%rsp)        # 8-byte Spill
	movq	35800(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7360(%rsp)        # 8-byte Spill
	movq	35808(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7352(%rsp)        # 8-byte Spill
	movq	35816(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7344(%rsp)        # 8-byte Spill
	movq	35824(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7336(%rsp)        # 8-byte Spill
	movq	35832(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7328(%rsp)        # 8-byte Spill
	movq	35840(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7320(%rsp)        # 8-byte Spill
	movq	35848(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7312(%rsp)        # 8-byte Spill
	movq	35856(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7304(%rsp)        # 8-byte Spill
	movq	35864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7296(%rsp)        # 8-byte Spill
	movq	35872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7288(%rsp)        # 8-byte Spill
	movq	35880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7280(%rsp)        # 8-byte Spill
	movq	35888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7272(%rsp)        # 8-byte Spill
	movq	35896(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7264(%rsp)        # 8-byte Spill
	movq	35904(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7256(%rsp)        # 8-byte Spill
	movq	35912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7248(%rsp)        # 8-byte Spill
	movq	35920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 7240(%rsp)        # 8-byte Spill
	movq	35928(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 7236(%rsp)        # 4-byte Spill
	movl	35732(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 7224(%rsp)        # 8-byte Spill
	movq	38552(%rsp), %rsi       # 8-byte Reload
	movl	$38, (%rsi)
	movl	$19491, 38596(%rsp)     # imm = 0x4C23
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$36, %rsi
	movq	%rsi, 7216(%rsp)        # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	36(%rsi), %esi
	movl	$19496, 38596(%rsp)     # imm = 0x4C28
	movl	%esi, 7212(%rsp)        # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$32, %rsi
	movl	%eax, 7208(%rsp)        # 4-byte Spill
	movl	7212(%rsp), %eax        # 4-byte Reload
	movl	%ecx, 7204(%rsp)        # 4-byte Spill
	movl	7460(%rsp), %ecx        # 4-byte Reload
	cmpl	%ecx, %eax
	movl	%edx, 7200(%rsp)        # 4-byte Spill
	movq	%rsi, 7192(%rsp)        # 8-byte Spill
	movl	%edi, 7188(%rsp)        # 4-byte Spill
	movl	%r8d, 7184(%rsp)        # 4-byte Spill
	movl	%r9d, 7180(%rsp)        # 4-byte Spill
	movl	%r10d, 7176(%rsp)       # 4-byte Spill
	movl	%r11d, 7172(%rsp)       # 4-byte Spill
	movl	%ebx, 7168(%rsp)        # 4-byte Spill
	movl	%ebp, 7164(%rsp)        # 4-byte Spill
	movl	%r14d, 7160(%rsp)       # 4-byte Spill
	movl	%r15d, 7156(%rsp)       # 4-byte Spill
	movl	%r12d, 7152(%rsp)       # 4-byte Spill
	movl	%r13d, 7148(%rsp)       # 4-byte Spill
	jge	.LBB68_342
# %bb.341:                              # %if.end2015.preheader
	movl	7212(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7144(%rsp)        # 4-byte Spill
	jmp	.LBB68_344
.LBB68_342:                             # %sw.bb1997.if.then2004_crit_edge
	movq	7192(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$19507, 38596(%rsp)     # imm = 0x4C33
	movl	7212(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 7140(%rsp)        # 4-byte Spill
	movl	%edx, 7136(%rsp)        # 4-byte Spill
.LBB68_343:                             # %if.then2004
	movl	7136(%rsp), %eax        # 4-byte Reload
	movl	7140(%rsp), %ecx        # 4-byte Reload
	movl	$1, %edx
	movl	7460(%rsp), %esi        # 4-byte Reload
	subl	%esi, %eax
	movl	%ecx, 7132(%rsp)        # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	7132(%rsp), %edi        # 4-byte Reload
	shrl	%cl, %edi
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	addl	$-1, %edx
	andl	%edx, %edi
	movq	7216(%rsp), %r8         # 8-byte Reload
	movl	%eax, (%r8)
	movl	$19510, 38596(%rsp)     # imm = 0x4C36
	movl	7208(%rsp), %edx        # 4-byte Reload
	movq	7224(%rsp), %r9         # 8-byte Reload
	movq	7240(%rsp), %r10        # 8-byte Reload
	movq	7248(%rsp), %r11        # 8-byte Reload
	movq	7256(%rsp), %rbx        # 8-byte Reload
	movq	7264(%rsp), %r14        # 8-byte Reload
	movq	7272(%rsp), %r15        # 8-byte Reload
	movq	7280(%rsp), %r12        # 8-byte Reload
	movq	7288(%rsp), %r13        # 8-byte Reload
	movq	7296(%rsp), %rbp        # 8-byte Reload
	movq	7304(%rsp), %rcx        # 8-byte Reload
	movq	7312(%rsp), %rsi        # 8-byte Reload
	movq	7320(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 7120(%rsp)        # 8-byte Spill
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7112(%rsp)        # 8-byte Spill
	movq	7336(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7104(%rsp)        # 8-byte Spill
	movq	7344(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7096(%rsp)        # 8-byte Spill
	movq	7352(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7088(%rsp)        # 8-byte Spill
	movq	7360(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7080(%rsp)        # 8-byte Spill
	movq	7368(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7072(%rsp)        # 8-byte Spill
	movq	7376(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7064(%rsp)        # 8-byte Spill
	movq	7384(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7056(%rsp)        # 8-byte Spill
	movq	7392(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7048(%rsp)        # 8-byte Spill
	movq	7400(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7040(%rsp)        # 8-byte Spill
	movq	7408(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7032(%rsp)        # 8-byte Spill
	movq	7416(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7024(%rsp)        # 8-byte Spill
	movq	7424(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7016(%rsp)        # 8-byte Spill
	movq	7432(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 7012(%rsp)        # 4-byte Spill
	movl	7236(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7008(%rsp)        # 4-byte Spill
	movl	7448(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7004(%rsp)        # 4-byte Spill
	movl	7452(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7000(%rsp)        # 4-byte Spill
	movl	7460(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6996(%rsp)        # 4-byte Spill
	movl	7148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6992(%rsp)        # 4-byte Spill
	movl	7152(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6988(%rsp)        # 4-byte Spill
	movl	7156(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6984(%rsp)        # 4-byte Spill
	movl	7160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6980(%rsp)        # 4-byte Spill
	movl	7164(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6976(%rsp)        # 4-byte Spill
	movl	7168(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6972(%rsp)        # 4-byte Spill
	movl	7172(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6968(%rsp)        # 4-byte Spill
	movl	7176(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6964(%rsp)        # 4-byte Spill
	movl	7180(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6960(%rsp)        # 4-byte Spill
	movl	7184(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6956(%rsp)        # 4-byte Spill
	movl	7188(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6952(%rsp)        # 4-byte Spill
	movl	7444(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6948(%rsp)        # 4-byte Spill
	movl	7200(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6944(%rsp)        # 4-byte Spill
	movl	7204(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6940(%rsp)        # 4-byte Spill
	movl	7464(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6936(%rsp)        # 4-byte Spill
	movq	%rsi, 6928(%rsp)        # 8-byte Spill
	movq	%rcx, 6920(%rsp)        # 8-byte Spill
	movq	%r8, 6912(%rsp)         # 8-byte Spill
	movl	%edx, 6908(%rsp)        # 4-byte Spill
	movq	%r9, 6896(%rsp)         # 8-byte Spill
	movq	%r10, 6888(%rsp)        # 8-byte Spill
	movq	%r11, 6880(%rsp)        # 8-byte Spill
	movq	%rbx, 6872(%rsp)        # 8-byte Spill
	movq	%r14, 6864(%rsp)        # 8-byte Spill
	movq	%r15, 6856(%rsp)        # 8-byte Spill
	movq	%r12, 6848(%rsp)        # 8-byte Spill
	movq	%r13, 6840(%rsp)        # 8-byte Spill
	movq	%rbp, 6832(%rsp)        # 8-byte Spill
	movl	%edi, 6828(%rsp)        # 4-byte Spill
	jmp	.LBB68_348
.LBB68_344:                             # %if.end2015
                                        # =>This Inner Loop Header: Depth=1
	movl	7144(%rsp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$19512, 38596(%rsp)     # imm = 0x4C38
	movq	%rsi, %rdi
	addq	$8, %rdi
	movl	8(%rsi), %r8d
	movl	$19515, 38596(%rsp)     # imm = 0x4C3B
	cmpl	$0, %r8d
	movl	7208(%rsp), %r9d        # 4-byte Reload
	movq	7224(%rsp), %r10        # 8-byte Reload
	movq	7240(%rsp), %r11        # 8-byte Reload
	movq	7248(%rsp), %rbx        # 8-byte Reload
	movq	7256(%rsp), %r14        # 8-byte Reload
	movq	7264(%rsp), %r15        # 8-byte Reload
	movq	7272(%rsp), %r12        # 8-byte Reload
	movq	7280(%rsp), %r13        # 8-byte Reload
	movq	7288(%rsp), %rbp        # 8-byte Reload
	movq	7296(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25456(%rsp)       # 8-byte Spill
	movq	7304(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25448(%rsp)       # 8-byte Spill
	movq	7312(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25440(%rsp)       # 8-byte Spill
	movq	7320(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25432(%rsp)       # 8-byte Spill
	movq	7328(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25424(%rsp)       # 8-byte Spill
	movq	7336(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25416(%rsp)       # 8-byte Spill
	movq	7344(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25408(%rsp)       # 8-byte Spill
	movq	7352(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25400(%rsp)       # 8-byte Spill
	movq	7360(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25392(%rsp)       # 8-byte Spill
	movq	7368(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25384(%rsp)       # 8-byte Spill
	movq	7376(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25376(%rsp)       # 8-byte Spill
	movq	7384(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25368(%rsp)       # 8-byte Spill
	movq	7392(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25360(%rsp)       # 8-byte Spill
	movq	7400(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25352(%rsp)       # 8-byte Spill
	movq	7408(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25344(%rsp)       # 8-byte Spill
	movq	7416(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25336(%rsp)       # 8-byte Spill
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25248(%rsp)       # 8-byte Spill
	movq	7432(%rsp), %rdx        # 8-byte Reload
	movl	%eax, 6824(%rsp)        # 4-byte Spill
	movl	7236(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	7448(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	7452(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	7456(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	7460(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	7148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	7152(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	7156(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	7160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	7164(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	7168(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	7172(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	7176(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	7180(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	7184(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	7188(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	7444(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	7200(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	7204(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	7464(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%rbp, 25464(%rsp)       # 8-byte Spill
	movq	%rdx, 25232(%rsp)       # 8-byte Spill
	movq	%rsi, 6816(%rsp)        # 8-byte Spill
	movq	%rdi, 6808(%rsp)        # 8-byte Spill
	movl	%r8d, 6804(%rsp)        # 4-byte Spill
	movl	%r9d, 25332(%rsp)       # 4-byte Spill
	movq	%r10, 25520(%rsp)       # 8-byte Spill
	movq	%r11, 25512(%rsp)       # 8-byte Spill
	movq	%rbx, 25504(%rsp)       # 8-byte Spill
	movq	%r14, 25496(%rsp)       # 8-byte Spill
	movq	%r15, 25488(%rsp)       # 8-byte Spill
	movq	%r12, 25480(%rsp)       # 8-byte Spill
	movq	%r13, 25472(%rsp)       # 8-byte Spill
	movl	%ecx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.345:                              # %if.end2021
                                        #   in Loop: Header=BB68_344 Depth=1
	movq	7192(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$19518, 38596(%rsp)     # imm = 0x4C3E
	shll	$8, %ecx
	movq	6816(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$19519, 38596(%rsp)     # imm = 0x4C3F
	movb	(%rsi), %dil
	movl	$19521, 38596(%rsp)     # imm = 0x4C41
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$19522, 38596(%rsp)     # imm = 0x4C42
	movl	6824(%rsp), %r8d        # 4-byte Reload
	addl	$8, %r8d
	movq	7216(%rsp), %r9         # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$19524, 38596(%rsp)     # imm = 0x4C44
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$19526, 38596(%rsp)     # imm = 0x4C46
	movl	6804(%rsp), %r10d       # 4-byte Reload
	addl	$-1, %r10d
	movq	6808(%rsp), %rsi        # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$19528, 38596(%rsp)     # imm = 0x4C48
	movl	12(%rdx), %r10d
	movl	$19530, 38596(%rsp)     # imm = 0x4C4A
	addl	$1, %r10d
	movl	%r10d, 12(%rdx)
	movl	$19534, 38596(%rsp)     # imm = 0x4C4E
	cmpl	$0, %r10d
	movl	%ecx, 6800(%rsp)        # 4-byte Spill
	movl	%r8d, 6796(%rsp)        # 4-byte Spill
	jne	.LBB68_347
# %bb.346:                              # %if.then2044
                                        #   in Loop: Header=BB68_344 Depth=1
	movq	6816(%rsp), %rax        # 8-byte Reload
	movl	16(%rax), %ecx
	movl	$19536, 38596(%rsp)     # imm = 0x4C50
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movl	$19594, 38596(%rsp)     # imm = 0x4C8A
.LBB68_347:                             # %if.end2048
                                        #   in Loop: Header=BB68_344 Depth=1
	movl	6796(%rsp), %eax        # 4-byte Reload
	movl	7460(%rsp), %ecx        # 4-byte Reload
	cmpl	%ecx, %eax
	movl	6800(%rsp), %edx        # 4-byte Reload
	movl	6796(%rsp), %esi        # 4-byte Reload
	movl	%eax, 7136(%rsp)        # 4-byte Spill
	movl	%edx, 7140(%rsp)        # 4-byte Spill
	movl	%esi, 7144(%rsp)        # 4-byte Spill
	jl	.LBB68_344
	jmp	.LBB68_343
.LBB68_348:                             # %while.cond2050
	movl	6936(%rsp), %eax        # 4-byte Reload
	movl	6940(%rsp), %ecx        # 4-byte Reload
	movl	6944(%rsp), %edx        # 4-byte Reload
	movl	6948(%rsp), %esi        # 4-byte Reload
	movl	6952(%rsp), %edi        # 4-byte Reload
	movl	6956(%rsp), %r8d        # 4-byte Reload
	movl	6960(%rsp), %r9d        # 4-byte Reload
	movl	6964(%rsp), %r10d       # 4-byte Reload
	movl	6968(%rsp), %r11d       # 4-byte Reload
	movl	6972(%rsp), %ebx        # 4-byte Reload
	movl	6976(%rsp), %ebp        # 4-byte Reload
	movl	6980(%rsp), %r14d       # 4-byte Reload
	movl	6984(%rsp), %r15d       # 4-byte Reload
	movl	6988(%rsp), %r12d       # 4-byte Reload
	movl	6992(%rsp), %r13d       # 4-byte Reload
	movl	%eax, 6792(%rsp)        # 4-byte Spill
	movl	6996(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6788(%rsp)        # 4-byte Spill
	movl	6828(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6784(%rsp)        # 4-byte Spill
	movl	7000(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6780(%rsp)        # 4-byte Spill
	movl	7004(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6776(%rsp)        # 4-byte Spill
	movl	7008(%rsp), %eax        # 4-byte Reload
	movl	%esi, 6772(%rsp)        # 4-byte Spill
	movq	6920(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6760(%rsp)        # 8-byte Spill
	movq	7016(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6752(%rsp)        # 8-byte Spill
	movq	7024(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 6748(%rsp)        # 4-byte Spill
	movl	7012(%rsp), %eax        # 4-byte Reload
	movq	%rsi, 6736(%rsp)        # 8-byte Spill
	movq	7032(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6728(%rsp)        # 8-byte Spill
	movq	7040(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6720(%rsp)        # 8-byte Spill
	movq	7048(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6712(%rsp)        # 8-byte Spill
	movq	7056(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6704(%rsp)        # 8-byte Spill
	movq	7064(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6696(%rsp)        # 8-byte Spill
	movq	7072(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6688(%rsp)        # 8-byte Spill
	movq	7080(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6680(%rsp)        # 8-byte Spill
	movq	7088(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6672(%rsp)        # 8-byte Spill
	movq	7096(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6664(%rsp)        # 8-byte Spill
	movq	7104(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6656(%rsp)        # 8-byte Spill
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6648(%rsp)        # 8-byte Spill
	movq	6912(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6640(%rsp)        # 8-byte Spill
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6632(%rsp)        # 8-byte Spill
	movq	7120(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6624(%rsp)        # 8-byte Spill
	movq	6832(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6616(%rsp)        # 8-byte Spill
	movq	6840(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6608(%rsp)        # 8-byte Spill
	movq	6848(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6600(%rsp)        # 8-byte Spill
	movq	6856(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6592(%rsp)        # 8-byte Spill
	movq	6864(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6584(%rsp)        # 8-byte Spill
	movq	6872(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6576(%rsp)        # 8-byte Spill
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6568(%rsp)        # 8-byte Spill
	movq	6888(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 6560(%rsp)        # 8-byte Spill
	movq	6896(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 6556(%rsp)        # 4-byte Spill
	movl	6908(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6552(%rsp)        # 4-byte Spill
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movl	%eax, 6548(%rsp)        # 4-byte Spill
	movl	6788(%rsp), %eax        # 4-byte Reload
	cmpl	$20, %eax
	movl	6552(%rsp), %eax        # 4-byte Reload
	movq	%rsi, 6536(%rsp)        # 8-byte Spill
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	6560(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	6568(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	6576(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	6584(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	6600(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	6608(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	6616(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	6624(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	6632(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	6640(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	6648(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	6656(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	6664(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	6680(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	6688(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	6696(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	6704(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	6712(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	6720(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	6728(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	6736(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	6752(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	6760(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	6748(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	6776(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	6780(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	6784(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	6788(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	%r13d, %eax
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	%r12d, %eax
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	%r15d, %eax
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	%r14d, %eax
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	%ebp, %eax
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	%ebx, %eax
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	%r11d, %eax
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	%r10d, %eax
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	%r9d, %eax
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	%r8d, %eax
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	%edi, %eax
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	6772(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	%ecx, %eax
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	6792(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	6548(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movl	%ecx, 6532(%rsp)        # 4-byte Spill
	movl	%edx, 6528(%rsp)        # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%edi, 6524(%rsp)        # 4-byte Spill
	movl	%r8d, 6520(%rsp)        # 4-byte Spill
	movl	%r9d, 6516(%rsp)        # 4-byte Spill
	movl	%r10d, 6512(%rsp)       # 4-byte Spill
	movl	%r11d, 6508(%rsp)       # 4-byte Spill
	movl	%ebx, 6504(%rsp)        # 4-byte Spill
	movl	%ebp, 6500(%rsp)        # 4-byte Spill
	movl	%r14d, 6496(%rsp)       # 4-byte Spill
	movl	%r15d, 6492(%rsp)       # 4-byte Spill
	movl	%r12d, 6488(%rsp)       # 4-byte Spill
	movl	%r13d, 6484(%rsp)       # 4-byte Spill
	jg	.LBB68_542
# %bb.349:                              # %if.end2055
	movl	6788(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	6760(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %esi
	movl	$19604, 38596(%rsp)     # imm = 0x4C94
	movl	6784(%rsp), %edi        # 4-byte Reload
	cmpl	%esi, %edi
	movq	%rcx, 6472(%rsp)        # 8-byte Spill
	jle	.LBB68_359
# %bb.350:                              # %if.end2061
	movl	6788(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$36, %rcx
	movl	6552(%rsp), %edx        # 4-byte Reload
	movq	6536(%rsp), %rsi        # 8-byte Reload
	movq	6560(%rsp), %rdi        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6576(%rsp), %r9         # 8-byte Reload
	movq	6584(%rsp), %r10        # 8-byte Reload
	movq	6592(%rsp), %r11        # 8-byte Reload
	movq	6600(%rsp), %rbx        # 8-byte Reload
	movq	6608(%rsp), %r14        # 8-byte Reload
	movq	6616(%rsp), %r15        # 8-byte Reload
	movq	6624(%rsp), %r12        # 8-byte Reload
	movq	6632(%rsp), %r13        # 8-byte Reload
	movq	6640(%rsp), %rbp        # 8-byte Reload
	movq	%rcx, 6464(%rsp)        # 8-byte Spill
	movq	6648(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31208(%rsp)       # 8-byte Spill
	movq	6656(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31200(%rsp)       # 8-byte Spill
	movq	6664(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31192(%rsp)       # 8-byte Spill
	movq	6672(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31184(%rsp)       # 8-byte Spill
	movq	6680(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31176(%rsp)       # 8-byte Spill
	movq	6688(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31168(%rsp)       # 8-byte Spill
	movq	6696(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31160(%rsp)       # 8-byte Spill
	movq	6704(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31152(%rsp)       # 8-byte Spill
	movq	6712(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31144(%rsp)       # 8-byte Spill
	movq	6720(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31136(%rsp)       # 8-byte Spill
	movq	6728(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31128(%rsp)       # 8-byte Spill
	movq	6464(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 6460(%rsp)        # 4-byte Spill
	movl	6556(%rsp), %eax        # 4-byte Reload
	movq	%rcx, 31120(%rsp)       # 8-byte Spill
	movq	6736(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31112(%rsp)       # 8-byte Spill
	movq	6752(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 31104(%rsp)       # 8-byte Spill
	movq	6760(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 31100(%rsp)       # 4-byte Spill
	movl	6748(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31096(%rsp)       # 4-byte Spill
	movl	6776(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31092(%rsp)       # 4-byte Spill
	movl	6780(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31088(%rsp)       # 4-byte Spill
	movl	6784(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31084(%rsp)       # 4-byte Spill
	movl	6460(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31080(%rsp)       # 4-byte Spill
	movl	6484(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31076(%rsp)       # 4-byte Spill
	movl	6488(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31072(%rsp)       # 4-byte Spill
	movl	6492(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31068(%rsp)       # 4-byte Spill
	movl	6496(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31064(%rsp)       # 4-byte Spill
	movl	6500(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31060(%rsp)       # 4-byte Spill
	movl	6504(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31056(%rsp)       # 4-byte Spill
	movl	6508(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31052(%rsp)       # 4-byte Spill
	movl	6512(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31048(%rsp)       # 4-byte Spill
	movl	6516(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31044(%rsp)       # 4-byte Spill
	movl	6520(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31040(%rsp)       # 4-byte Spill
	movl	6524(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31036(%rsp)       # 4-byte Spill
	movl	6772(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31032(%rsp)       # 4-byte Spill
	movl	6528(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31028(%rsp)       # 4-byte Spill
	movl	6532(%rsp), %eax        # 4-byte Reload
	movl	%eax, 31024(%rsp)       # 4-byte Spill
	movl	6792(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30908(%rsp)       # 4-byte Spill
	movq	%rcx, 31016(%rsp)       # 8-byte Spill
	movl	%edx, 30996(%rsp)       # 4-byte Spill
	movq	%rsi, 30984(%rsp)       # 8-byte Spill
	movq	%rdi, 30976(%rsp)       # 8-byte Spill
	movq	%r8, 30968(%rsp)        # 8-byte Spill
	movq	%r9, 30960(%rsp)        # 8-byte Spill
	movq	%r10, 30952(%rsp)       # 8-byte Spill
	movq	%r11, 30944(%rsp)       # 8-byte Spill
	movq	%rbx, 30936(%rsp)       # 8-byte Spill
	movq	%r14, 30928(%rsp)       # 8-byte Spill
	movq	%r15, 30920(%rsp)       # 8-byte Spill
	movq	%r12, 30912(%rsp)       # 8-byte Spill
	movq	%r13, 31000(%rsp)       # 8-byte Spill
	movq	%rbp, 31008(%rsp)       # 8-byte Spill
.LBB68_351:                             # %sw.bb2063
	movl	30908(%rsp), %eax       # 4-byte Reload
	movl	31024(%rsp), %ecx       # 4-byte Reload
	movl	31028(%rsp), %edx       # 4-byte Reload
	movl	31032(%rsp), %esi       # 4-byte Reload
	movl	31036(%rsp), %edi       # 4-byte Reload
	movl	31040(%rsp), %r8d       # 4-byte Reload
	movl	31044(%rsp), %r9d       # 4-byte Reload
	movl	31048(%rsp), %r10d      # 4-byte Reload
	movl	31052(%rsp), %r11d      # 4-byte Reload
	movl	31056(%rsp), %ebx       # 4-byte Reload
	movl	31060(%rsp), %ebp       # 4-byte Reload
	movl	31064(%rsp), %r14d      # 4-byte Reload
	movl	31068(%rsp), %r15d      # 4-byte Reload
	movl	31072(%rsp), %r12d      # 4-byte Reload
	movl	31076(%rsp), %r13d      # 4-byte Reload
	movl	%eax, 6456(%rsp)        # 4-byte Spill
	movl	31080(%rsp), %eax       # 4-byte Reload
	movl	%eax, 6452(%rsp)        # 4-byte Spill
	movl	31084(%rsp), %eax       # 4-byte Reload
	movl	%eax, 6448(%rsp)        # 4-byte Spill
	movl	31088(%rsp), %eax       # 4-byte Reload
	movl	%eax, 6444(%rsp)        # 4-byte Spill
	movl	31092(%rsp), %eax       # 4-byte Reload
	movl	%eax, 6440(%rsp)        # 4-byte Spill
	movl	31096(%rsp), %eax       # 4-byte Reload
	movl	%esi, 6436(%rsp)        # 4-byte Spill
	movq	31016(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6424(%rsp)        # 8-byte Spill
	movq	31104(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6416(%rsp)        # 8-byte Spill
	movq	31112(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 6412(%rsp)        # 4-byte Spill
	movl	31100(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 6400(%rsp)        # 8-byte Spill
	movq	31120(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6392(%rsp)        # 8-byte Spill
	movq	31128(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6384(%rsp)        # 8-byte Spill
	movq	31136(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6376(%rsp)        # 8-byte Spill
	movq	31144(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6368(%rsp)        # 8-byte Spill
	movq	31152(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6360(%rsp)        # 8-byte Spill
	movq	31160(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6352(%rsp)        # 8-byte Spill
	movq	31168(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6344(%rsp)        # 8-byte Spill
	movq	31176(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6336(%rsp)        # 8-byte Spill
	movq	31184(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6328(%rsp)        # 8-byte Spill
	movq	31192(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6320(%rsp)        # 8-byte Spill
	movq	31200(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6312(%rsp)        # 8-byte Spill
	movq	31208(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6304(%rsp)        # 8-byte Spill
	movq	31008(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6296(%rsp)        # 8-byte Spill
	movq	31000(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6288(%rsp)        # 8-byte Spill
	movq	30912(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6280(%rsp)        # 8-byte Spill
	movq	30920(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6272(%rsp)        # 8-byte Spill
	movq	30928(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6264(%rsp)        # 8-byte Spill
	movq	30936(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6256(%rsp)        # 8-byte Spill
	movq	30944(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6248(%rsp)        # 8-byte Spill
	movq	30952(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6240(%rsp)        # 8-byte Spill
	movq	30960(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6232(%rsp)        # 8-byte Spill
	movq	30968(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6224(%rsp)        # 8-byte Spill
	movq	30976(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 6216(%rsp)        # 8-byte Spill
	movq	30984(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 6212(%rsp)        # 4-byte Spill
	movl	30996(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 6200(%rsp)        # 8-byte Spill
	movq	38552(%rsp), %rsi       # 8-byte Reload
	movl	$39, (%rsi)
	movl	$19610, 38596(%rsp)     # imm = 0x4C9A
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$32, %rsi
	movl	%eax, 6196(%rsp)        # 4-byte Spill
	movl	6212(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	movl	%ecx, 6192(%rsp)        # 4-byte Spill
	movl	%edx, 6188(%rsp)        # 4-byte Spill
	movq	%rsi, 6176(%rsp)        # 8-byte Spill
	movl	%edi, 6172(%rsp)        # 4-byte Spill
	movl	%r8d, 6168(%rsp)        # 4-byte Spill
	movl	%r9d, 6164(%rsp)        # 4-byte Spill
	movl	%r10d, 6160(%rsp)       # 4-byte Spill
	movl	%r11d, 6156(%rsp)       # 4-byte Spill
	movl	%ebx, 6152(%rsp)        # 4-byte Spill
	movl	%ebp, 6148(%rsp)        # 4-byte Spill
	movl	%r14d, 6144(%rsp)       # 4-byte Spill
	movl	%r15d, 6140(%rsp)       # 4-byte Spill
	movl	%r12d, 6136(%rsp)       # 4-byte Spill
	movl	%r13d, 6132(%rsp)       # 4-byte Spill
	jg	.LBB68_353
# %bb.352:                              # %if.end2079.preheader
	movl	6212(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6128(%rsp)        # 4-byte Spill
	jmp	.LBB68_355
.LBB68_353:                             # %sw.bb2063.if.then2070_crit_edge
	movq	6176(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$19617, 38596(%rsp)     # imm = 0x4CA1
	movl	6212(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 6124(%rsp)        # 4-byte Spill
	movl	%edx, 6120(%rsp)        # 4-byte Spill
.LBB68_354:                             # %if.then2070
	movl	6120(%rsp), %eax        # 4-byte Reload
	movl	6124(%rsp), %ecx        # 4-byte Reload
	addl	$-1, %eax
	movl	%ecx, 6116(%rsp)        # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	6116(%rsp), %edx        # 4-byte Reload
	shrl	%cl, %edx
	andl	$1, %edx
	movq	6392(%rsp), %rsi        # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$19621, 38596(%rsp)     # imm = 0x4CA5
	movl	6448(%rsp), %edi        # 4-byte Reload
	shll	$1, %edi
	movl	%edx, %r8d
	orl	%edi, %r8d
	movl	6196(%rsp), %edi        # 4-byte Reload
	movq	6200(%rsp), %r9         # 8-byte Reload
	movq	6216(%rsp), %r10        # 8-byte Reload
	movq	6224(%rsp), %r11        # 8-byte Reload
	movq	6232(%rsp), %rbx        # 8-byte Reload
	movq	6240(%rsp), %r14        # 8-byte Reload
	movq	6248(%rsp), %r15        # 8-byte Reload
	movq	6256(%rsp), %r12        # 8-byte Reload
	movq	6264(%rsp), %r13        # 8-byte Reload
	movq	6272(%rsp), %rbp        # 8-byte Reload
	movq	6280(%rsp), %rcx        # 8-byte Reload
	movq	6288(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, 7120(%rsp)        # 8-byte Spill
	movq	6296(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 6912(%rsp)        # 8-byte Spill
	movq	6304(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7112(%rsp)        # 8-byte Spill
	movq	6312(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7104(%rsp)        # 8-byte Spill
	movq	6320(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7096(%rsp)        # 8-byte Spill
	movq	6328(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7088(%rsp)        # 8-byte Spill
	movq	6336(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7080(%rsp)        # 8-byte Spill
	movq	6344(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7072(%rsp)        # 8-byte Spill
	movq	6352(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7064(%rsp)        # 8-byte Spill
	movq	6360(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7056(%rsp)        # 8-byte Spill
	movq	6368(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7048(%rsp)        # 8-byte Spill
	movq	6376(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7040(%rsp)        # 8-byte Spill
	movq	6384(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7032(%rsp)        # 8-byte Spill
	movq	6400(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7024(%rsp)        # 8-byte Spill
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7016(%rsp)        # 8-byte Spill
	movq	6424(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 7012(%rsp)        # 4-byte Spill
	movl	6412(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7008(%rsp)        # 4-byte Spill
	movl	6440(%rsp), %eax        # 4-byte Reload
	movl	%eax, 7004(%rsp)        # 4-byte Spill
	movl	6452(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6996(%rsp)        # 4-byte Spill
	movl	6132(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6992(%rsp)        # 4-byte Spill
	movl	6136(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6988(%rsp)        # 4-byte Spill
	movl	6140(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6984(%rsp)        # 4-byte Spill
	movl	6144(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6980(%rsp)        # 4-byte Spill
	movl	6148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6976(%rsp)        # 4-byte Spill
	movl	6152(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6972(%rsp)        # 4-byte Spill
	movl	6156(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6968(%rsp)        # 4-byte Spill
	movl	6160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6964(%rsp)        # 4-byte Spill
	movl	6164(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6960(%rsp)        # 4-byte Spill
	movl	6168(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6956(%rsp)        # 4-byte Spill
	movl	6172(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6952(%rsp)        # 4-byte Spill
	movl	6436(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6948(%rsp)        # 4-byte Spill
	movl	6188(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6944(%rsp)        # 4-byte Spill
	movl	6192(%rsp), %eax        # 4-byte Reload
	movl	%eax, 6940(%rsp)        # 4-byte Spill
	movl	6456(%rsp), %eax        # 4-byte Reload
	movq	%rcx, 6920(%rsp)        # 8-byte Spill
	movl	%eax, 6936(%rsp)        # 4-byte Spill
	movq	%rsi, 6928(%rsp)        # 8-byte Spill
	movl	%edx, 7000(%rsp)        # 4-byte Spill
	movl	%edi, 6908(%rsp)        # 4-byte Spill
	movq	%r9, 6896(%rsp)         # 8-byte Spill
	movq	%r10, 6888(%rsp)        # 8-byte Spill
	movq	%r11, 6880(%rsp)        # 8-byte Spill
	movq	%rbx, 6872(%rsp)        # 8-byte Spill
	movq	%r14, 6864(%rsp)        # 8-byte Spill
	movq	%r15, 6856(%rsp)        # 8-byte Spill
	movq	%r12, 6848(%rsp)        # 8-byte Spill
	movq	%r13, 6840(%rsp)        # 8-byte Spill
	movq	%rbp, 6832(%rsp)        # 8-byte Spill
	movl	%r8d, 6828(%rsp)        # 4-byte Spill
	jmp	.LBB68_348
.LBB68_355:                             # %if.end2079
                                        # =>This Inner Loop Header: Depth=1
	movl	6128(%rsp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$19623, 38596(%rsp)     # imm = 0x4CA7
	movq	%rsi, %rdi
	addq	$8, %rdi
	movl	8(%rsi), %r8d
	movl	$19626, 38596(%rsp)     # imm = 0x4CAA
	cmpl	$0, %r8d
	movl	6196(%rsp), %r9d        # 4-byte Reload
	movq	6200(%rsp), %r10        # 8-byte Reload
	movq	6216(%rsp), %r11        # 8-byte Reload
	movq	6224(%rsp), %rbx        # 8-byte Reload
	movq	6232(%rsp), %r14        # 8-byte Reload
	movq	6240(%rsp), %r15        # 8-byte Reload
	movq	6248(%rsp), %r12        # 8-byte Reload
	movq	6256(%rsp), %r13        # 8-byte Reload
	movq	6264(%rsp), %rbp        # 8-byte Reload
	movq	6272(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25456(%rsp)       # 8-byte Spill
	movq	6280(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25448(%rsp)       # 8-byte Spill
	movq	6288(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25440(%rsp)       # 8-byte Spill
	movq	6296(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25432(%rsp)       # 8-byte Spill
	movq	6304(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25424(%rsp)       # 8-byte Spill
	movq	6312(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25416(%rsp)       # 8-byte Spill
	movq	6320(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25408(%rsp)       # 8-byte Spill
	movq	6328(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25400(%rsp)       # 8-byte Spill
	movq	6336(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25392(%rsp)       # 8-byte Spill
	movq	6344(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25384(%rsp)       # 8-byte Spill
	movq	6352(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25376(%rsp)       # 8-byte Spill
	movq	6360(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25368(%rsp)       # 8-byte Spill
	movq	6368(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25360(%rsp)       # 8-byte Spill
	movq	6376(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25352(%rsp)       # 8-byte Spill
	movq	6384(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25344(%rsp)       # 8-byte Spill
	movq	6400(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25336(%rsp)       # 8-byte Spill
	movq	6416(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25248(%rsp)       # 8-byte Spill
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movl	%eax, 6112(%rsp)        # 4-byte Spill
	movl	6412(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	6440(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	6444(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	6448(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	6452(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	6132(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	6136(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	6140(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	6144(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	6148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	6152(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	6156(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	6160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	6164(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	6168(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	6172(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	6436(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	6188(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	6192(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	6456(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%rbp, 25464(%rsp)       # 8-byte Spill
	movq	%rdx, 25232(%rsp)       # 8-byte Spill
	movq	%rsi, 6104(%rsp)        # 8-byte Spill
	movq	%rdi, 6096(%rsp)        # 8-byte Spill
	movl	%r8d, 6092(%rsp)        # 4-byte Spill
	movl	%r9d, 25332(%rsp)       # 4-byte Spill
	movq	%r10, 25520(%rsp)       # 8-byte Spill
	movq	%r11, 25512(%rsp)       # 8-byte Spill
	movq	%rbx, 25504(%rsp)       # 8-byte Spill
	movq	%r14, 25496(%rsp)       # 8-byte Spill
	movq	%r15, 25488(%rsp)       # 8-byte Spill
	movq	%r12, 25480(%rsp)       # 8-byte Spill
	movq	%r13, 25472(%rsp)       # 8-byte Spill
	movl	%ecx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.356:                              # %if.end2085
                                        #   in Loop: Header=BB68_355 Depth=1
	movq	6176(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$19629, 38596(%rsp)     # imm = 0x4CAD
	shll	$8, %ecx
	movq	6104(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$19630, 38596(%rsp)     # imm = 0x4CAE
	movb	(%rsi), %dil
	movl	$19632, 38596(%rsp)     # imm = 0x4CB0
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$19633, 38596(%rsp)     # imm = 0x4CB1
	movl	6112(%rsp), %r8d        # 4-byte Reload
	addl	$8, %r8d
	movq	6392(%rsp), %r9         # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$19635, 38596(%rsp)     # imm = 0x4CB3
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$19637, 38596(%rsp)     # imm = 0x4CB5
	movl	6092(%rsp), %r10d       # 4-byte Reload
	addl	$-1, %r10d
	movq	6096(%rsp), %rsi        # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$19639, 38596(%rsp)     # imm = 0x4CB7
	movl	12(%rdx), %r10d
	movl	$19641, 38596(%rsp)     # imm = 0x4CB9
	addl	$1, %r10d
	movl	%r10d, 12(%rdx)
	movl	$19645, 38596(%rsp)     # imm = 0x4CBD
	cmpl	$0, %r10d
	movl	%ecx, 6088(%rsp)        # 4-byte Spill
	movl	%r8d, 6084(%rsp)        # 4-byte Spill
	jne	.LBB68_358
# %bb.357:                              # %if.then2108
                                        #   in Loop: Header=BB68_355 Depth=1
	movq	6104(%rsp), %rax        # 8-byte Reload
	movl	16(%rax), %ecx
	movl	$19647, 38596(%rsp)     # imm = 0x4CBF
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movl	$19652, 38596(%rsp)     # imm = 0x4CC4
.LBB68_358:                             # %if.end2112
                                        #   in Loop: Header=BB68_355 Depth=1
	movl	6112(%rsp), %eax        # 4-byte Reload
	cmpl	$-8, %eax
	movl	6088(%rsp), %ecx        # 4-byte Reload
	movl	6084(%rsp), %edx        # 4-byte Reload
	movl	6084(%rsp), %esi        # 4-byte Reload
	movl	%ecx, 6124(%rsp)        # 4-byte Spill
	movl	%edx, 6120(%rsp)        # 4-byte Spill
	movl	%esi, 6128(%rsp)        # 4-byte Spill
	jg	.LBB68_354
	jmp	.LBB68_355
.LBB68_359:                             # %while.end2116
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movq	6752(%rsp), %rcx        # 8-byte Reload
	movq	6472(%rsp), %rdx        # 8-byte Reload
	movl	(%rcx,%rdx,4), %esi
	movl	$19327, 38596(%rsp)     # imm = 0x4B7F
	movl	6784(%rsp), %edi        # 4-byte Reload
	subl	%esi, %edi
	cmpl	$257, %edi              # imm = 0x101
	movl	6552(%rsp), %esi        # 4-byte Reload
	movq	6536(%rsp), %r8         # 8-byte Reload
	movq	6560(%rsp), %r9         # 8-byte Reload
	movq	6568(%rsp), %r10        # 8-byte Reload
	movq	6576(%rsp), %r11        # 8-byte Reload
	movq	6584(%rsp), %rbx        # 8-byte Reload
	movq	6592(%rsp), %r14        # 8-byte Reload
	movq	6600(%rsp), %r15        # 8-byte Reload
	movq	6608(%rsp), %r12        # 8-byte Reload
	movq	6616(%rsp), %r13        # 8-byte Reload
	movq	6624(%rsp), %rbp        # 8-byte Reload
	movq	6632(%rsp), %rcx        # 8-byte Reload
	movq	6640(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 25440(%rsp)       # 8-byte Spill
	movq	6648(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25424(%rsp)       # 8-byte Spill
	movq	6656(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	6664(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	6672(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	6680(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	6688(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	6696(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	6704(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	6712(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	6720(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	6728(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	6736(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	6752(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	6760(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 6080(%rsp)        # 4-byte Spill
	movl	6748(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	6776(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	6780(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	6784(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	6788(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	6484(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	6488(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	6492(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	6496(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	6500(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	6504(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	6508(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	6512(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	6516(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	6520(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	6524(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	6772(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	6528(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	6532(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	6792(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	6080(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movq	%rdx, 25432(%rsp)       # 8-byte Spill
	movl	%edi, 6076(%rsp)        # 4-byte Spill
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	%r8, 25520(%rsp)        # 8-byte Spill
	movq	%r9, 25512(%rsp)        # 8-byte Spill
	movq	%r10, 25504(%rsp)       # 8-byte Spill
	movq	%r11, 25496(%rsp)       # 8-byte Spill
	movq	%rbx, 25488(%rsp)       # 8-byte Spill
	movq	%r14, 25480(%rsp)       # 8-byte Spill
	movq	%r15, 25472(%rsp)       # 8-byte Spill
	movq	%r12, 25464(%rsp)       # 8-byte Spill
	movq	%r13, 25456(%rsp)       # 8-byte Spill
	movq	%rbp, 25448(%rsp)       # 8-byte Spill
	ja	.LBB68_542
# %bb.360:                              # %if.end2129
	movl	6076(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	6736(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %esi
	movl	$19661, 38596(%rsp)     # imm = 0x4CCD
	cmpl	$2, %esi
	movl	6552(%rsp), %edi        # 4-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6560(%rsp), %r8         # 8-byte Reload
	movq	6568(%rsp), %r9         # 8-byte Reload
	movq	6576(%rsp), %r10        # 8-byte Reload
	movq	6584(%rsp), %r11        # 8-byte Reload
	movq	6592(%rsp), %rbx        # 8-byte Reload
	movq	6600(%rsp), %r14        # 8-byte Reload
	movq	6608(%rsp), %r15        # 8-byte Reload
	movq	6616(%rsp), %r12        # 8-byte Reload
	movq	6624(%rsp), %r13        # 8-byte Reload
	movq	6632(%rsp), %rbp        # 8-byte Reload
	movq	6640(%rsp), %rdx        # 8-byte Reload
	movq	6648(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8120(%rsp)        # 8-byte Spill
	movq	6656(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8112(%rsp)        # 8-byte Spill
	movq	6664(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8104(%rsp)        # 8-byte Spill
	movq	6672(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8096(%rsp)        # 8-byte Spill
	movq	6680(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8088(%rsp)        # 8-byte Spill
	movq	6688(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8080(%rsp)        # 8-byte Spill
	movq	6696(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8072(%rsp)        # 8-byte Spill
	movq	6704(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8064(%rsp)        # 8-byte Spill
	movq	6712(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8056(%rsp)        # 8-byte Spill
	movq	6720(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8048(%rsp)        # 8-byte Spill
	movq	6728(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8040(%rsp)        # 8-byte Spill
	movq	6736(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8032(%rsp)        # 8-byte Spill
	movq	6752(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8024(%rsp)        # 8-byte Spill
	movq	6760(%rsp), %rax        # 8-byte Reload
	movl	%esi, 6072(%rsp)        # 4-byte Spill
	movl	6748(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8016(%rsp)        # 4-byte Spill
	movl	6776(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8012(%rsp)        # 4-byte Spill
	movl	6780(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8008(%rsp)        # 4-byte Spill
	movl	6784(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8004(%rsp)        # 4-byte Spill
	movl	6788(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8000(%rsp)        # 4-byte Spill
	movl	6484(%rsp), %esi        # 4-byte Reload
	movl	%esi, 7996(%rsp)        # 4-byte Spill
	movl	6488(%rsp), %esi        # 4-byte Reload
	movl	%esi, 7992(%rsp)        # 4-byte Spill
	movl	6492(%rsp), %esi        # 4-byte Reload
	movl	%esi, 7836(%rsp)        # 4-byte Spill
	movl	6496(%rsp), %esi        # 4-byte Reload
	movl	%esi, 7988(%rsp)        # 4-byte Spill
	movl	6500(%rsp), %esi        # 4-byte Reload
	movl	%esi, 7984(%rsp)        # 4-byte Spill
	movl	6072(%rsp), %esi        # 4-byte Reload
	movl	%esi, 7980(%rsp)        # 4-byte Spill
	movl	6508(%rsp), %esi        # 4-byte Reload
	movl	%esi, 7976(%rsp)        # 4-byte Spill
	movl	6512(%rsp), %esi        # 4-byte Reload
	movl	%esi, 7972(%rsp)        # 4-byte Spill
	movl	6516(%rsp), %esi        # 4-byte Reload
	movl	%esi, 7968(%rsp)        # 4-byte Spill
	movl	6520(%rsp), %esi        # 4-byte Reload
	movl	%esi, 7964(%rsp)        # 4-byte Spill
	movl	6524(%rsp), %esi        # 4-byte Reload
	movl	%esi, 7960(%rsp)        # 4-byte Spill
	movl	6772(%rsp), %esi        # 4-byte Reload
	movl	%esi, 7956(%rsp)        # 4-byte Spill
	movl	6528(%rsp), %esi        # 4-byte Reload
	movl	%esi, 7952(%rsp)        # 4-byte Spill
	movl	6532(%rsp), %esi        # 4-byte Reload
	movl	%esi, 7948(%rsp)        # 4-byte Spill
	movl	6792(%rsp), %esi        # 4-byte Reload
	movq	%rax, 7928(%rsp)        # 8-byte Spill
	movq	%rdx, 8128(%rsp)        # 8-byte Spill
	movl	%esi, 7944(%rsp)        # 4-byte Spill
	movl	%edi, 7924(%rsp)        # 4-byte Spill
	movq	%rcx, 7912(%rsp)        # 8-byte Spill
	movq	%r8, 7904(%rsp)         # 8-byte Spill
	movq	%r9, 7896(%rsp)         # 8-byte Spill
	movq	%r10, 7888(%rsp)        # 8-byte Spill
	movq	%r11, 7880(%rsp)        # 8-byte Spill
	movq	%rbx, 7872(%rsp)        # 8-byte Spill
	movq	%r14, 7864(%rsp)        # 8-byte Spill
	movq	%r15, 7856(%rsp)        # 8-byte Spill
	movq	%r12, 7848(%rsp)        # 8-byte Spill
	movq	%r13, 7840(%rsp)        # 8-byte Spill
	movq	%rbp, 7936(%rsp)        # 8-byte Spill
	jb	.LBB68_333
# %bb.361:                              # %do.end
	movl	6492(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	7820(%rcx), %edx
	movl	$19664, 38596(%rsp)     # imm = 0x4CD0
	movslq	%edx, %rsi
	movb	3724(%rcx,%rsi), %dil
	movl	$19667, 38596(%rsp)     # imm = 0x4CD3
	movzbl	%dil, %edx
	movl	%edx, %esi
	movb	3468(%rcx,%rsi), %dil
	movl	$19670, 38596(%rsp)     # imm = 0x4CD6
	movzbl	%dil, %edx
	movl	%edx, %esi
	movl	68(%rcx,%rsi,4), %edx
	movl	$19672, 38596(%rsp)     # imm = 0x4CD8
	addl	%eax, %edx
	movl	%edx, 68(%rcx,%rsi,4)
	movl	$19674, 38596(%rsp)     # imm = 0x4CDA
	movb	44(%rcx), %r8b
	movl	$19689, 38596(%rsp)     # imm = 0x4CE9
	movl	6492(%rsp), %edx        # 4-byte Reload
	cmpl	$-1, %edx
	setg	%r9b
	cmpb	$0, %r8b
	movl	%eax, 6068(%rsp)        # 4-byte Spill
	movb	%dil, 6067(%rsp)        # 1-byte Spill
	movb	%r9b, 6066(%rsp)        # 1-byte Spill
	je	.LBB68_366
# %bb.362:                              # %if.then2153
	movb	6066(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	6552(%rsp), %ecx        # 4-byte Reload
	movq	6536(%rsp), %rdx        # 8-byte Reload
	movq	6560(%rsp), %rsi        # 8-byte Reload
	movq	6568(%rsp), %rdi        # 8-byte Reload
	movq	6576(%rsp), %r8         # 8-byte Reload
	movq	6584(%rsp), %r9         # 8-byte Reload
	movq	6592(%rsp), %r10        # 8-byte Reload
	movq	6600(%rsp), %r11        # 8-byte Reload
	movq	6608(%rsp), %rbx        # 8-byte Reload
	movq	6616(%rsp), %r14        # 8-byte Reload
	movq	6624(%rsp), %r15        # 8-byte Reload
	movq	6632(%rsp), %r12        # 8-byte Reload
	movq	6640(%rsp), %r13        # 8-byte Reload
	movq	6648(%rsp), %rbp        # 8-byte Reload
	movq	6656(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8712(%rsp)        # 8-byte Spill
	movq	6664(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8704(%rsp)        # 8-byte Spill
	movq	6672(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8696(%rsp)        # 8-byte Spill
	movq	6680(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8688(%rsp)        # 8-byte Spill
	movq	6688(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8680(%rsp)        # 8-byte Spill
	movq	6696(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8672(%rsp)        # 8-byte Spill
	movq	6704(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8664(%rsp)        # 8-byte Spill
	movq	6712(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	movq	6720(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	movq	6728(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8640(%rsp)        # 8-byte Spill
	movq	6736(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8632(%rsp)        # 8-byte Spill
	movq	6752(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8624(%rsp)        # 8-byte Spill
	movq	6760(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 8520(%rsp)        # 4-byte Spill
	movl	6748(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8616(%rsp)        # 4-byte Spill
	movl	6776(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8612(%rsp)        # 4-byte Spill
	movl	6780(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8608(%rsp)        # 4-byte Spill
	movl	6784(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8604(%rsp)        # 4-byte Spill
	movl	6788(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8600(%rsp)        # 4-byte Spill
	movl	6484(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8596(%rsp)        # 4-byte Spill
	movl	6488(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8592(%rsp)        # 4-byte Spill
	movl	6068(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8588(%rsp)        # 4-byte Spill
	movl	6496(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8584(%rsp)        # 4-byte Spill
	movl	6500(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8580(%rsp)        # 4-byte Spill
	movl	6072(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8576(%rsp)        # 4-byte Spill
	movl	6508(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8572(%rsp)        # 4-byte Spill
	movl	6512(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8568(%rsp)        # 4-byte Spill
	movl	6516(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8564(%rsp)        # 4-byte Spill
	movl	6520(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8560(%rsp)        # 4-byte Spill
	movl	6524(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8556(%rsp)        # 4-byte Spill
	movl	6772(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8552(%rsp)        # 4-byte Spill
	movl	6528(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8548(%rsp)        # 4-byte Spill
	movl	6532(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8544(%rsp)        # 4-byte Spill
	movl	6792(%rsp), %ecx        # 4-byte Reload
	movq	%rax, 8536(%rsp)        # 8-byte Spill
	movl	%ecx, 8524(%rsp)        # 4-byte Spill
	movq	%rdx, 8512(%rsp)        # 8-byte Spill
	movq	%rsi, 8504(%rsp)        # 8-byte Spill
	movq	%rdi, 8496(%rsp)        # 8-byte Spill
	movq	%r8, 8488(%rsp)         # 8-byte Spill
	movq	%r9, 8480(%rsp)         # 8-byte Spill
	movq	%r10, 8472(%rsp)        # 8-byte Spill
	movq	%r11, 8464(%rsp)        # 8-byte Spill
	movq	%rbx, 8456(%rsp)        # 8-byte Spill
	movq	%r14, 8448(%rsp)        # 8-byte Spill
	movq	%r15, 8440(%rsp)        # 8-byte Spill
	movq	%r12, 8432(%rsp)        # 8-byte Spill
	movq	%r13, 8528(%rsp)        # 8-byte Spill
	movq	%rbp, 8720(%rsp)        # 8-byte Spill
	jne	.LBB68_363
	jmp	.LBB68_331
.LBB68_363:                             # %while.body2157.lr.ph
	movb	6067(%rsp), %al         # 1-byte Reload
	movzbl	%al, %ecx
	movw	%cx, %dx
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$3160, %rsi             # imm = 0xC58
	movl	6496(%rsp), %ecx        # 4-byte Reload
	movslq	%ecx, %rdi
	movl	6500(%rsp), %r8d        # 4-byte Reload
	movslq	%r8d, %r9
	movl	6068(%rsp), %r10d       # 4-byte Reload
	movw	%dx, 6064(%rsp)         # 2-byte Spill
	movq	%rsi, 6056(%rsp)        # 8-byte Spill
	movq	%r9, 6048(%rsp)         # 8-byte Spill
	movq	%rdi, 6040(%rsp)        # 8-byte Spill
	movl	%r10d, 6036(%rsp)       # 4-byte Spill
.LBB68_364:                             # %while.body2157
                                        # =>This Inner Loop Header: Depth=1
	movl	6036(%rsp), %eax        # 4-byte Reload
	movq	6040(%rsp), %rcx        # 8-byte Reload
	movq	6048(%rsp), %rdx        # 8-byte Reload
	cmpq	%rdx, %rcx
	movl	%eax, 6032(%rsp)        # 4-byte Spill
	movq	%rcx, 6024(%rsp)        # 8-byte Spill
	jge	.LBB68_541
# %bb.365:                              # %if.end2161
                                        #   in Loop: Header=BB68_364 Depth=1
	movq	6056(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movl	$19691, 38596(%rsp)     # imm = 0x4CEB
	movq	6024(%rsp), %rdx        # 8-byte Reload
	movw	6064(%rsp), %si         # 2-byte Reload
	movw	%si, (%rcx,%rdx,2)
	movl	$19705, 38596(%rsp)     # imm = 0x4CF9
	addq	$1, %rdx
	movl	6032(%rsp), %edi        # 4-byte Reload
	addl	$-1, %edi
	movl	6032(%rsp), %r8d        # 4-byte Reload
	cmpl	$1, %r8d
	movq	%rdx, %rcx
	movl	%edi, %r9d
	movq	%rdx, 6016(%rsp)        # 8-byte Spill
	movl	%edi, 6012(%rsp)        # 4-byte Spill
	movq	%rcx, 6040(%rsp)        # 8-byte Spill
	movl	%r9d, 6036(%rsp)        # 4-byte Spill
	jg	.LBB68_364
	jmp	.LBB68_371
.LBB68_366:                             # %if.else2169
	movb	6066(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	6552(%rsp), %ecx        # 4-byte Reload
	movq	6536(%rsp), %rdx        # 8-byte Reload
	movq	6560(%rsp), %rsi        # 8-byte Reload
	movq	6568(%rsp), %rdi        # 8-byte Reload
	movq	6576(%rsp), %r8         # 8-byte Reload
	movq	6584(%rsp), %r9         # 8-byte Reload
	movq	6592(%rsp), %r10        # 8-byte Reload
	movq	6600(%rsp), %r11        # 8-byte Reload
	movq	6608(%rsp), %rbx        # 8-byte Reload
	movq	6616(%rsp), %r14        # 8-byte Reload
	movq	6624(%rsp), %r15        # 8-byte Reload
	movq	6632(%rsp), %r12        # 8-byte Reload
	movq	6640(%rsp), %r13        # 8-byte Reload
	movq	6648(%rsp), %rbp        # 8-byte Reload
	movq	6656(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8712(%rsp)        # 8-byte Spill
	movq	6664(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8704(%rsp)        # 8-byte Spill
	movq	6672(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8696(%rsp)        # 8-byte Spill
	movq	6680(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8688(%rsp)        # 8-byte Spill
	movq	6688(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8680(%rsp)        # 8-byte Spill
	movq	6696(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8672(%rsp)        # 8-byte Spill
	movq	6704(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8664(%rsp)        # 8-byte Spill
	movq	6712(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	movq	6720(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	movq	6728(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8640(%rsp)        # 8-byte Spill
	movq	6736(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8632(%rsp)        # 8-byte Spill
	movq	6752(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8624(%rsp)        # 8-byte Spill
	movq	6760(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 8520(%rsp)        # 4-byte Spill
	movl	6748(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8616(%rsp)        # 4-byte Spill
	movl	6776(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8612(%rsp)        # 4-byte Spill
	movl	6780(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8608(%rsp)        # 4-byte Spill
	movl	6784(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8604(%rsp)        # 4-byte Spill
	movl	6788(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8600(%rsp)        # 4-byte Spill
	movl	6484(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8596(%rsp)        # 4-byte Spill
	movl	6488(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8592(%rsp)        # 4-byte Spill
	movl	6068(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8588(%rsp)        # 4-byte Spill
	movl	6496(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8584(%rsp)        # 4-byte Spill
	movl	6500(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8580(%rsp)        # 4-byte Spill
	movl	6072(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8576(%rsp)        # 4-byte Spill
	movl	6508(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8572(%rsp)        # 4-byte Spill
	movl	6512(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8568(%rsp)        # 4-byte Spill
	movl	6516(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8564(%rsp)        # 4-byte Spill
	movl	6520(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8560(%rsp)        # 4-byte Spill
	movl	6524(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8556(%rsp)        # 4-byte Spill
	movl	6772(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8552(%rsp)        # 4-byte Spill
	movl	6528(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8548(%rsp)        # 4-byte Spill
	movl	6532(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8544(%rsp)        # 4-byte Spill
	movl	6792(%rsp), %ecx        # 4-byte Reload
	movq	%rax, 8536(%rsp)        # 8-byte Spill
	movl	%ecx, 8524(%rsp)        # 4-byte Spill
	movq	%rdx, 8512(%rsp)        # 8-byte Spill
	movq	%rsi, 8504(%rsp)        # 8-byte Spill
	movq	%rdi, 8496(%rsp)        # 8-byte Spill
	movq	%r8, 8488(%rsp)         # 8-byte Spill
	movq	%r9, 8480(%rsp)         # 8-byte Spill
	movq	%r10, 8472(%rsp)        # 8-byte Spill
	movq	%r11, 8464(%rsp)        # 8-byte Spill
	movq	%rbx, 8456(%rsp)        # 8-byte Spill
	movq	%r14, 8448(%rsp)        # 8-byte Spill
	movq	%r15, 8440(%rsp)        # 8-byte Spill
	movq	%r12, 8432(%rsp)        # 8-byte Spill
	movq	%r13, 8528(%rsp)        # 8-byte Spill
	movq	%rbp, 8720(%rsp)        # 8-byte Spill
	jne	.LBB68_367
	jmp	.LBB68_331
.LBB68_367:                             # %while.body2173.lr.ph
	movb	6067(%rsp), %al         # 1-byte Reload
	movzbl	%al, %ecx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	addq	$3152, %rdx             # imm = 0xC50
	movl	6496(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rdi
	movl	6500(%rsp), %r8d        # 4-byte Reload
	movslq	%r8d, %r9
	movl	6068(%rsp), %r10d       # 4-byte Reload
	movl	%ecx, 6008(%rsp)        # 4-byte Spill
	movq	%rdx, 6000(%rsp)        # 8-byte Spill
	movq	%r9, 5992(%rsp)         # 8-byte Spill
	movq	%rdi, 5984(%rsp)        # 8-byte Spill
	movl	%r10d, 5980(%rsp)       # 4-byte Spill
.LBB68_368:                             # %while.body2173
                                        # =>This Inner Loop Header: Depth=1
	movl	5980(%rsp), %eax        # 4-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %rdx        # 8-byte Reload
	cmpq	%rdx, %rcx
	movl	%eax, 5976(%rsp)        # 4-byte Spill
	movq	%rcx, 5968(%rsp)        # 8-byte Spill
	jge	.LBB68_540
# %bb.369:                              # %if.end2177
                                        #   in Loop: Header=BB68_368 Depth=1
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movl	$19707, 38596(%rsp)     # imm = 0x4CFB
	movq	5968(%rsp), %rdx        # 8-byte Reload
	movl	6008(%rsp), %esi        # 4-byte Reload
	movl	%esi, (%rcx,%rdx,4)
	movl	$19718, 38596(%rsp)     # imm = 0x4D06
	addq	$1, %rdx
	movl	5976(%rsp), %edi        # 4-byte Reload
	addl	$-1, %edi
	movl	5976(%rsp), %r8d        # 4-byte Reload
	cmpl	$1, %r8d
	movq	%rdx, %rcx
	movl	%edi, %r9d
	movq	%rdx, 5960(%rsp)        # 8-byte Spill
	movl	%edi, 5956(%rsp)        # 4-byte Spill
	movq	%rcx, 5984(%rsp)        # 8-byte Spill
	movl	%r9d, 5980(%rsp)        # 4-byte Spill
	jg	.LBB68_368
# %bb.370:                              # %if.end2185.loopexit
	movq	5960(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	6552(%rsp), %edx        # 4-byte Reload
	movq	6536(%rsp), %rsi        # 8-byte Reload
	movq	6560(%rsp), %rdi        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6576(%rsp), %r9         # 8-byte Reload
	movq	6584(%rsp), %r10        # 8-byte Reload
	movq	6592(%rsp), %r11        # 8-byte Reload
	movq	6600(%rsp), %rbx        # 8-byte Reload
	movq	6608(%rsp), %r14        # 8-byte Reload
	movq	6616(%rsp), %r15        # 8-byte Reload
	movq	6624(%rsp), %r12        # 8-byte Reload
	movq	6632(%rsp), %r13        # 8-byte Reload
	movq	6640(%rsp), %rbp        # 8-byte Reload
	movq	6648(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8720(%rsp)        # 8-byte Spill
	movq	6656(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8712(%rsp)        # 8-byte Spill
	movq	6664(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8704(%rsp)        # 8-byte Spill
	movq	6672(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8696(%rsp)        # 8-byte Spill
	movq	6680(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8688(%rsp)        # 8-byte Spill
	movq	6688(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8680(%rsp)        # 8-byte Spill
	movq	6696(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8672(%rsp)        # 8-byte Spill
	movq	6704(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8664(%rsp)        # 8-byte Spill
	movq	6712(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	movq	6720(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	movq	6728(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8640(%rsp)        # 8-byte Spill
	movq	6736(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8632(%rsp)        # 8-byte Spill
	movq	6752(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8624(%rsp)        # 8-byte Spill
	movq	6760(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 5952(%rsp)        # 4-byte Spill
	movl	6748(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8616(%rsp)        # 4-byte Spill
	movl	6776(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8612(%rsp)        # 4-byte Spill
	movl	6780(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8608(%rsp)        # 4-byte Spill
	movl	6784(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8604(%rsp)        # 4-byte Spill
	movl	6788(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8600(%rsp)        # 4-byte Spill
	movl	6484(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8596(%rsp)        # 4-byte Spill
	movl	6488(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8592(%rsp)        # 4-byte Spill
	movl	5956(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8588(%rsp)        # 4-byte Spill
	movl	5952(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8584(%rsp)        # 4-byte Spill
	movl	6500(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8580(%rsp)        # 4-byte Spill
	movl	6072(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8576(%rsp)        # 4-byte Spill
	movl	6508(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8572(%rsp)        # 4-byte Spill
	movl	6512(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8568(%rsp)        # 4-byte Spill
	movl	6516(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8564(%rsp)        # 4-byte Spill
	movl	6520(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8560(%rsp)        # 4-byte Spill
	movl	6524(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8556(%rsp)        # 4-byte Spill
	movl	6772(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8552(%rsp)        # 4-byte Spill
	movl	6528(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8548(%rsp)        # 4-byte Spill
	movl	6532(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8544(%rsp)        # 4-byte Spill
	movl	6792(%rsp), %ecx        # 4-byte Reload
	movq	%rax, 8536(%rsp)        # 8-byte Spill
	movl	%ecx, 8524(%rsp)        # 4-byte Spill
	movl	%edx, 8520(%rsp)        # 4-byte Spill
	movq	%rsi, 8512(%rsp)        # 8-byte Spill
	movq	%rdi, 8504(%rsp)        # 8-byte Spill
	movq	%r8, 8496(%rsp)         # 8-byte Spill
	movq	%r9, 8488(%rsp)         # 8-byte Spill
	movq	%r10, 8480(%rsp)        # 8-byte Spill
	movq	%r11, 8472(%rsp)        # 8-byte Spill
	movq	%rbx, 8464(%rsp)        # 8-byte Spill
	movq	%r14, 8456(%rsp)        # 8-byte Spill
	movq	%r15, 8448(%rsp)        # 8-byte Spill
	movq	%r12, 8440(%rsp)        # 8-byte Spill
	movq	%r13, 8432(%rsp)        # 8-byte Spill
	movq	%rbp, 8528(%rsp)        # 8-byte Spill
	jmp	.LBB68_331
.LBB68_371:                             # %if.end2185.loopexit5209
	movq	6016(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	6552(%rsp), %edx        # 4-byte Reload
	movq	6536(%rsp), %rsi        # 8-byte Reload
	movq	6560(%rsp), %rdi        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6576(%rsp), %r9         # 8-byte Reload
	movq	6584(%rsp), %r10        # 8-byte Reload
	movq	6592(%rsp), %r11        # 8-byte Reload
	movq	6600(%rsp), %rbx        # 8-byte Reload
	movq	6608(%rsp), %r14        # 8-byte Reload
	movq	6616(%rsp), %r15        # 8-byte Reload
	movq	6624(%rsp), %r12        # 8-byte Reload
	movq	6632(%rsp), %r13        # 8-byte Reload
	movq	6640(%rsp), %rbp        # 8-byte Reload
	movq	6648(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8720(%rsp)        # 8-byte Spill
	movq	6656(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8712(%rsp)        # 8-byte Spill
	movq	6664(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8704(%rsp)        # 8-byte Spill
	movq	6672(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8696(%rsp)        # 8-byte Spill
	movq	6680(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8688(%rsp)        # 8-byte Spill
	movq	6688(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8680(%rsp)        # 8-byte Spill
	movq	6696(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8672(%rsp)        # 8-byte Spill
	movq	6704(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8664(%rsp)        # 8-byte Spill
	movq	6712(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	movq	6720(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	movq	6728(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8640(%rsp)        # 8-byte Spill
	movq	6736(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8632(%rsp)        # 8-byte Spill
	movq	6752(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8624(%rsp)        # 8-byte Spill
	movq	6760(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 5948(%rsp)        # 4-byte Spill
	movl	6748(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8616(%rsp)        # 4-byte Spill
	movl	6776(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8612(%rsp)        # 4-byte Spill
	movl	6780(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8608(%rsp)        # 4-byte Spill
	movl	6784(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8604(%rsp)        # 4-byte Spill
	movl	6788(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8600(%rsp)        # 4-byte Spill
	movl	6484(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8596(%rsp)        # 4-byte Spill
	movl	6488(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8592(%rsp)        # 4-byte Spill
	movl	6012(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8588(%rsp)        # 4-byte Spill
	movl	5948(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8584(%rsp)        # 4-byte Spill
	movl	6500(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8580(%rsp)        # 4-byte Spill
	movl	6072(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8576(%rsp)        # 4-byte Spill
	movl	6508(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8572(%rsp)        # 4-byte Spill
	movl	6512(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8568(%rsp)        # 4-byte Spill
	movl	6516(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8564(%rsp)        # 4-byte Spill
	movl	6520(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8560(%rsp)        # 4-byte Spill
	movl	6524(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8556(%rsp)        # 4-byte Spill
	movl	6772(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8552(%rsp)        # 4-byte Spill
	movl	6528(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8548(%rsp)        # 4-byte Spill
	movl	6532(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 8544(%rsp)        # 4-byte Spill
	movl	6792(%rsp), %ecx        # 4-byte Reload
	movq	%rax, 8536(%rsp)        # 8-byte Spill
	movl	%ecx, 8524(%rsp)        # 4-byte Spill
	movl	%edx, 8520(%rsp)        # 4-byte Spill
	movq	%rsi, 8512(%rsp)        # 8-byte Spill
	movq	%rdi, 8504(%rsp)        # 8-byte Spill
	movq	%r8, 8496(%rsp)         # 8-byte Spill
	movq	%r9, 8488(%rsp)         # 8-byte Spill
	movq	%r10, 8480(%rsp)        # 8-byte Spill
	movq	%r11, 8472(%rsp)        # 8-byte Spill
	movq	%rbx, 8464(%rsp)        # 8-byte Spill
	movq	%r14, 8456(%rsp)        # 8-byte Spill
	movq	%r15, 8448(%rsp)        # 8-byte Spill
	movq	%r12, 8440(%rsp)        # 8-byte Spill
	movq	%r13, 8432(%rsp)        # 8-byte Spill
	movq	%rbp, 8528(%rsp)        # 8-byte Spill
	jmp	.LBB68_331
.LBB68_372:                             # %if.else2186
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movl	8152(%rsp), %ecx        # 4-byte Reload
	movl	8156(%rsp), %edx        # 4-byte Reload
	cmpl	%edx, %ecx
	movl	8200(%rsp), %esi        # 4-byte Reload
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8208(%rsp), %r8         # 8-byte Reload
	movq	8216(%rsp), %r9         # 8-byte Reload
	movq	8224(%rsp), %r10        # 8-byte Reload
	movq	8232(%rsp), %r11        # 8-byte Reload
	movq	8240(%rsp), %rbx        # 8-byte Reload
	movq	8248(%rsp), %r14        # 8-byte Reload
	movq	8256(%rsp), %r15        # 8-byte Reload
	movq	8264(%rsp), %r12        # 8-byte Reload
	movq	8272(%rsp), %r13        # 8-byte Reload
	movq	8280(%rsp), %rbp        # 8-byte Reload
	movq	8288(%rsp), %rcx        # 8-byte Reload
	movq	8296(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 25432(%rsp)       # 8-byte Spill
	movq	8304(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	8312(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	8320(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	8328(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	8336(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	8344(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	8352(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	8368(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	8376(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	8384(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	8392(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	8400(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 5944(%rsp)        # 4-byte Spill
	movl	8204(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	8412(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	8416(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	8420(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	8424(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	8140(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	8144(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	8148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	8152(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	8156(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	8160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	8164(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	8168(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	8172(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	8176(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	8180(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	8408(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	8192(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	8196(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	8428(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	5944(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movq	%rdx, 25424(%rsp)       # 8-byte Spill
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	jge	.LBB68_542
# %bb.373:                              # %if.end2190
	movl	8160(%rsp), %eax        # 4-byte Reload
	addl	$-1, %eax
	cmpl	$16, %eax
	movl	%eax, 5940(%rsp)        # 4-byte Spill
	jae	.LBB68_391
# %bb.374:                              # %if.then2197
	movq	38576(%rsp), %rax       # 8-byte Reload
	movl	7820(%rax), %ecx
	movl	$19722, 38596(%rsp)     # imm = 0x4D0A
	movl	%ecx, %edx
	movl	5940(%rsp), %esi        # 4-byte Reload
	addl	%esi, %edx
	movl	%edx, %edx
	movl	%edx, %edi
	movb	3724(%rax,%rdi), %r8b
	movl	$19733, 38596(%rsp)     # imm = 0x4D15
	cmpl	$3, %esi
	movl	%ecx, 5936(%rsp)        # 4-byte Spill
	movl	%esi, 5932(%rsp)        # 4-byte Spill
	movb	%r8b, 5931(%rsp)        # 1-byte Spill
	jbe	.LBB68_378
# %bb.375:                              # %while.body2207.lr.ph
	movl	8160(%rsp), %eax        # 4-byte Reload
	addl	$3, %eax
	movl	5940(%rsp), %ecx        # 4-byte Reload
	movl	%eax, 5924(%rsp)        # 4-byte Spill
	movl	%ecx, 5920(%rsp)        # 4-byte Spill
.LBB68_376:                             # %while.body2207
                                        # =>This Inner Loop Header: Depth=1
	movl	5920(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ecx
	movl	5936(%rsp), %edx        # 4-byte Reload
	addl	%edx, %ecx
	movl	%ecx, %esi
	addl	$-1, %esi
	movslq	%esi, %rdi
	movq	38576(%rsp), %r8        # 8-byte Reload
	movb	3724(%r8,%rdi), %r9b
	movl	$19736, 38596(%rsp)     # imm = 0x4D18
	movslq	%ecx, %r10
	movb	%r9b, 3724(%r8,%r10)
	movl	$19740, 38596(%rsp)     # imm = 0x4D1C
	movl	%ecx, %esi
	addl	$-2, %esi
	movslq	%esi, %r10
	movb	3724(%r8,%r10), %r9b
	movl	$19741, 38596(%rsp)     # imm = 0x4D1D
	movb	%r9b, 3724(%r8,%rdi)
	movl	$19745, 38596(%rsp)     # imm = 0x4D21
	movl	%ecx, %esi
	addl	$-3, %esi
	movslq	%esi, %rdi
	movb	3724(%r8,%rdi), %r9b
	movl	$19746, 38596(%rsp)     # imm = 0x4D22
	movb	%r9b, 3724(%r8,%r10)
	movl	$19750, 38596(%rsp)     # imm = 0x4D26
	addl	$-4, %ecx
	movslq	%ecx, %r10
	movb	3724(%r8,%r10), %r9b
	movl	$19751, 38596(%rsp)     # imm = 0x4D27
	movb	%r9b, 3724(%r8,%rdi)
	movl	$19825, 38596(%rsp)     # imm = 0x4D71
	addl	$-4, %eax
	cmpl	$3, %eax
	movl	%eax, 5920(%rsp)        # 4-byte Spill
	ja	.LBB68_376
# %bb.377:                              # %while.end2241
	movl	5924(%rsp), %eax        # 4-byte Reload
	andl	$3, %eax
	cmpl	$0, %eax
	movl	%eax, 5932(%rsp)        # 4-byte Spill
	je	.LBB68_390
.LBB68_378:                             # %while.body2245.lr.ph
	movl	5932(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ecx
	movl	%ecx, %edx
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	addq	$1, %rsi
	cmpq	$16, %rsi
	movq	%rdx, %rdi
	movl	%eax, 5916(%rsp)        # 4-byte Spill
	movq	%rdx, 5904(%rsp)        # 8-byte Spill
	movq	%rsi, 5896(%rsp)        # 8-byte Spill
	movq	%rdi, 5888(%rsp)        # 8-byte Spill
	jb	.LBB68_384
# %bb.379:                              # %vector.scevcheck7047
	movl	5916(%rsp), %eax        # 4-byte Reload
	addl	$-1, %eax
	movl	5916(%rsp), %ecx        # 4-byte Reload
	movl	5936(%rsp), %edx        # 4-byte Reload
	addl	%edx, %ecx
	movl	%ecx, %esi
	subl	%eax, %esi
	cmpl	%ecx, %esi
	seta	%dil
	movl	5916(%rsp), %esi        # 4-byte Reload
	addl	%edx, %esi
	addl	$-1, %esi
	cmpl	%esi, %edx
	seta	%r8b
	orb	%r8b, %dil
	movl	%ecx, %ecx
	movl	%ecx, %r9d
	addq	$3724, %r9              # imm = 0xE8C
	movq	38568(%rsp), %r10       # 8-byte Reload
	addq	%r9, %r10
	movl	%eax, %ecx
	movl	%ecx, %r9d
	movq	%r10, %r11
	subq	%r9, %r11
	cmpq	%r10, %r11
	seta	%r8b
	orb	%r8b, %dil
	movl	%esi, %ecx
	movl	%ecx, %r9d
	addq	$3724, %r9              # imm = 0xE8C
	movq	38568(%rsp), %r10       # 8-byte Reload
	addq	%r9, %r10
	movl	%eax, %eax
	movl	%eax, %r9d
	movq	%r10, %r11
	subq	%r9, %r11
	cmpq	%r10, %r11
	seta	%r8b
	orb	%r8b, %dil
	testb	$1, %dil
	movq	5904(%rsp), %r9         # 8-byte Reload
	movq	%r9, 5888(%rsp)         # 8-byte Spill
	jne	.LBB68_384
# %bb.380:                              # %vector.memcheck
	movl	5916(%rsp), %eax        # 4-byte Reload
	movl	5936(%rsp), %ecx        # 4-byte Reload
	addl	%ecx, %eax
	movl	%eax, %eax
	movl	%eax, %edx
	movq	%rdx, %rsi
	addq	$3724, %rsi             # imm = 0xE8C
	movl	5916(%rsp), %eax        # 4-byte Reload
	addl	$-1, %eax
	movl	%eax, %eax
	movl	%eax, %edi
	subq	%rdi, %rsi
	movq	38568(%rsp), %r8        # 8-byte Reload
	addq	%rsi, %r8
	addq	$3725, %rdx             # imm = 0xE8D
	movq	38568(%rsp), %rsi       # 8-byte Reload
	addq	%rdx, %rsi
	movl	5916(%rsp), %eax        # 4-byte Reload
	addl	%ecx, %eax
	addl	$-1, %eax
	movl	%eax, %eax
	movl	%eax, %edx
	movq	%rdx, %r9
	addq	$3724, %r9              # imm = 0xE8C
	subq	%rdi, %r9
	movq	38568(%rsp), %rdi       # 8-byte Reload
	addq	%r9, %rdi
	addq	$3725, %rdx             # imm = 0xE8D
	movq	38568(%rsp), %r9        # 8-byte Reload
	addq	%rdx, %r9
	cmpq	%r9, %r8
	setb	%r10b
	cmpq	%rsi, %rdi
	setb	%r11b
	andb	%r11b, %r10b
	testb	$1, %r10b
	movq	5904(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 5888(%rsp)        # 8-byte Spill
	jne	.LBB68_384
# %bb.381:                              # %vector.ph7053
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	5916(%rsp), %eax        # 4-byte Reload
	andl	$15, %eax
	movl	%eax, %edx
	movl	%edx, %esi
	movq	5896(%rsp), %rdi        # 8-byte Reload
	subq	%rsi, %rdi
	movq	5904(%rsp), %rsi        # 8-byte Reload
	subq	%rdi, %rsi
	movq	%rsi, 5880(%rsp)        # 8-byte Spill
	movl	%eax, 5876(%rsp)        # 4-byte Spill
	movq	%rdi, 5864(%rsp)        # 8-byte Spill
	movq	%rcx, 5856(%rsp)        # 8-byte Spill
.LBB68_382:                             # %vector.body7026
                                        # =>This Inner Loop Header: Depth=1
	movq	5856(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	5916(%rsp), %edx        # 4-byte Reload
	subl	%ecx, %edx
	movl	5936(%rsp), %ecx        # 4-byte Reload
	addl	%edx, %ecx
	movl	%ecx, %edx
	addl	$-1, %edx
	movl	%edx, %edx
	movl	%edx, %esi
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movdqu	3709(%rdi,%rsi), %xmm0
	movl	$19830, 38596(%rsp)     # imm = 0x4D76
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movdqu	%xmm0, 3709(%rdi,%rsi)
	movl	$19851, 38596(%rsp)     # imm = 0x4D8B
	addq	$16, %rax
	movq	5864(%rsp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rax
	movq	%rax, 5856(%rsp)        # 8-byte Spill
	jne	.LBB68_382
# %bb.383:                              # %middle.block7027
	movl	5876(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	movq	5880(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5888(%rsp)        # 8-byte Spill
	je	.LBB68_390
.LBB68_384:                             # %while.body2245.preheader
	movq	5888(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, %edx
	addl	$-1, %edx
	andl	$3, %ecx
	cmpl	$0, %ecx
	movq	%rax, %rsi
	movq	%rax, 5848(%rsp)        # 8-byte Spill
	movl	%edx, 5844(%rsp)        # 4-byte Spill
	movl	%ecx, 5840(%rsp)        # 4-byte Spill
	movq	%rsi, 5832(%rsp)        # 8-byte Spill
	je	.LBB68_387
# %bb.385:                              # %while.body2245.prol.preheader
	movq	5848(%rsp), %rax        # 8-byte Reload
	movl	5840(%rsp), %ecx        # 4-byte Reload
	movq	%rax, 5824(%rsp)        # 8-byte Spill
	movl	%ecx, 5820(%rsp)        # 4-byte Spill
	jmp	.LBB68_386
.LBB68_386:                             # %while.body2245.prol
                                        # =>This Inner Loop Header: Depth=1
	movl	5820(%rsp), %eax        # 4-byte Reload
	movq	5824(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %edx
	movl	5936(%rsp), %esi        # 4-byte Reload
	addl	%edx, %esi
	movl	%esi, %edx
	addl	$-1, %edx
	movl	%edx, %edx
	movl	%edx, %edi
	movq	38576(%rsp), %r8        # 8-byte Reload
	movb	3724(%r8,%rdi), %r9b
	movl	$19854, 38596(%rsp)     # imm = 0x4D8E
	movl	%esi, %edx
	movl	%edx, %edi
	movb	%r9b, 3724(%r8,%rdi)
	movl	$19868, 38596(%rsp)     # imm = 0x4D9C
	addq	$-1, %rcx
	addl	$-1, %eax
	cmpl	$0, %eax
	movq	%rcx, %rdi
	movl	%eax, 5820(%rsp)        # 4-byte Spill
	movq	%rdi, 5824(%rsp)        # 8-byte Spill
	movq	%rcx, 5832(%rsp)        # 8-byte Spill
	jne	.LBB68_386
.LBB68_387:                             # %while.body2245.prol.loopexit
	movq	5832(%rsp), %rax        # 8-byte Reload
	movl	5844(%rsp), %ecx        # 4-byte Reload
	cmpl	$3, %ecx
	movq	%rax, 5808(%rsp)        # 8-byte Spill
	jb	.LBB68_390
# %bb.388:                              # %while.body2245.preheader.new
	movq	5808(%rsp), %rax        # 8-byte Reload
	movq	%rax, 5800(%rsp)        # 8-byte Spill
	jmp	.LBB68_389
.LBB68_389:                             # %while.body2245
                                        # =>This Inner Loop Header: Depth=1
	movq	5800(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	5936(%rsp), %edx        # 4-byte Reload
	addl	%ecx, %edx
	movl	%edx, %ecx
	addl	$-1, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movb	3724(%rdi,%rsi), %r8b
	movl	$19871, 38596(%rsp)     # imm = 0x4D9F
	movl	%edx, %ecx
	movl	%ecx, %esi
	movb	%r8b, 3724(%rdi,%rsi)
	movl	$19878, 38596(%rsp)     # imm = 0x4DA6
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	5936(%rsp), %edx        # 4-byte Reload
	addl	%ecx, %edx
	movl	%edx, %ecx
	addl	$-1, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movb	3724(%rdi,%rsi), %r8b
	movl	$19881, 38596(%rsp)     # imm = 0x4DA9
	movl	%edx, %ecx
	movl	%ecx, %esi
	movb	%r8b, 3724(%rdi,%rsi)
	movl	$19888, 38596(%rsp)     # imm = 0x4DB0
	movl	%eax, %ecx
	addl	$-2, %ecx
	movl	5936(%rsp), %edx        # 4-byte Reload
	addl	%ecx, %edx
	movl	%edx, %ecx
	addl	$-1, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movb	3724(%rdi,%rsi), %r8b
	movl	$19891, 38596(%rsp)     # imm = 0x4DB3
	movl	%edx, %ecx
	movl	%ecx, %esi
	movb	%r8b, 3724(%rdi,%rsi)
	movl	$19898, 38596(%rsp)     # imm = 0x4DBA
	movl	%eax, %ecx
	addl	$-3, %ecx
	movl	5936(%rsp), %edx        # 4-byte Reload
	addl	%ecx, %edx
	movl	%edx, %r9d
	addl	$-1, %r9d
	movl	%r9d, %r9d
	movl	%r9d, %esi
	movb	3724(%rdi,%rsi), %r8b
	movl	$19901, 38596(%rsp)     # imm = 0x4DBD
	movl	%edx, %edx
	movl	%edx, %esi
	movb	%r8b, 3724(%rdi,%rsi)
	movl	$19906, 38596(%rsp)     # imm = 0x4DC2
	addq	$-4, %rax
	cmpl	$1, %ecx
	movq	%rax, 5800(%rsp)        # 8-byte Spill
	jne	.LBB68_389
.LBB68_390:                             # %while.end2256
	movl	5936(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movb	5931(%rsp), %sil        # 1-byte Reload
	movb	%sil, 3724(%rdx,%rcx)
	movl	$19912, 38596(%rsp)     # imm = 0x4DC8
	movb	%sil, 5799(%rsp)        # 1-byte Spill
	jmp	.LBB68_402
.LBB68_391:                             # %if.else2260
	movl	5940(%rsp), %eax        # 4-byte Reload
	shrl	$4, %eax
	movl	5940(%rsp), %ecx        # 4-byte Reload
	andl	$15, %ecx
	movl	%eax, %edx
	movl	%edx, %esi
	movq	38576(%rsp), %rdi       # 8-byte Reload
	addq	$7820, %rdi             # imm = 0x1E8C
	movq	%rsi, %r8
	shlq	$2, %r8
	addq	%r8, %rdi
	movq	38576(%rsp), %r8        # 8-byte Reload
	movl	7820(%r8,%rsi,4), %edx
	movl	$19916, 38596(%rsp)     # imm = 0x4DCC
	movl	%edx, %r9d
	addl	%ecx, %r9d
	movslq	%r9d, %r10
	movb	3724(%r8,%r10), %r11b
	movl	$19921, 38596(%rsp)     # imm = 0x4DD1
	cmpl	$0, %ecx
	movl	%eax, 5792(%rsp)        # 4-byte Spill
	movb	%r11b, 5791(%rsp)       # 1-byte Spill
	movq	%rsi, 5776(%rsp)        # 8-byte Spill
	movq	%rdi, 5768(%rsp)        # 8-byte Spill
	movl	%edx, 5764(%rsp)        # 4-byte Spill
	movq	%r10, 5752(%rsp)        # 8-byte Spill
	je	.LBB68_393
# %bb.392:                              # %while.body2274.preheader
	movq	5752(%rsp), %rax        # 8-byte Reload
	movq	%rax, 5744(%rsp)        # 8-byte Spill
	jmp	.LBB68_394
.LBB68_393:                             # %while.end2283.thread
	movl	5764(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	$19926, 38596(%rsp)     # imm = 0x4DD6
	movl	%eax, 5740(%rsp)        # 4-byte Spill
	jmp	.LBB68_396
.LBB68_394:                             # %while.body2274
                                        # =>This Inner Loop Header: Depth=1
	movq	5744(%rsp), %rax        # 8-byte Reload
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movb	3723(%rdx,%rax), %sil
	movl	$19928, 38596(%rsp)     # imm = 0x4DD8
	movb	%sil, 3724(%rdx,%rax)
	movl	$19929, 38596(%rsp)     # imm = 0x4DD9
	movq	5768(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %edi
	movl	$19934, 38596(%rsp)     # imm = 0x4DDE
	movslq	%edi, %r8
	cmpq	%r8, %rcx
	movl	%edi, 5736(%rsp)        # 4-byte Spill
	movq	%rcx, 5744(%rsp)        # 8-byte Spill
	jg	.LBB68_394
# %bb.395:                              # %while.end2283
	movl	5736(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	$19940, 38596(%rsp)     # imm = 0x4DE4
	movl	5792(%rsp), %edx        # 4-byte Reload
	cmpl	$0, %edx
	movl	%eax, 5740(%rsp)        # 4-byte Spill
	je	.LBB68_399
.LBB68_396:                             # %while.body2291.lr.ph
	movl	5740(%rsp), %eax        # 4-byte Reload
	addl	$-1, %eax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movq	5776(%rsp), %rdx        # 8-byte Reload
	movl	%eax, 7820(%rcx,%rdx,4)
	movl	$19943, 38596(%rsp)     # imm = 0x4DE7
	addq	$-1, %rdx
	addq	$7820, %rcx             # imm = 0x1E8C
	movq	%rdx, %rsi
	shlq	$2, %rsi
	addq	%rsi, %rcx
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movq	5776(%rsp), %rdi        # 8-byte Reload
	movl	7816(%rsi,%rdi,4), %r8d
	movl	$19947, 38596(%rsp)     # imm = 0x4DEB
	addl	$15, %r8d
	movslq	%r8d, %r9
	movb	3724(%rsi,%r9), %r10b
	movl	$19950, 38596(%rsp)     # imm = 0x4DEE
	movslq	%eax, %r9
	movb	%r10b, 3724(%rsi,%r9)
	movl	$19958, 38596(%rsp)     # imm = 0x4DF6
	movl	5940(%rsp), %eax        # 4-byte Reload
	cmpl	$31, %eax
	movq	%rcx, 5728(%rsp)        # 8-byte Spill
	movq	%rdx, 5720(%rsp)        # 8-byte Spill
	jbe	.LBB68_399
# %bb.397:                              # %while.body2291.while.body2291_crit_edge.preheader
	movq	5728(%rsp), %rax        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	%rax, 5712(%rsp)        # 8-byte Spill
	movq	%rcx, 5704(%rsp)        # 8-byte Spill
	jmp	.LBB68_398
.LBB68_398:                             # %while.body2291.while.body2291_crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	5704(%rsp), %rax        # 8-byte Reload
	movq	5712(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$19961, 38596(%rsp)     # imm = 0x4DF9
	addl	$-1, %edx
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	%edx, 7820(%rcx,%rax,4)
	movl	$19962, 38596(%rsp)     # imm = 0x4DFA
	movq	%rax, %rsi
	addq	$-1, %rsi
	addq	$7820, %rcx             # imm = 0x1E8C
	movq	%rsi, %rdi
	shlq	$2, %rdi
	addq	%rdi, %rcx
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movl	7816(%rdi,%rax,4), %r8d
	movl	$19966, 38596(%rsp)     # imm = 0x4DFE
	addl	$15, %r8d
	movslq	%r8d, %r9
	movb	3724(%rdi,%r9), %r10b
	movl	$19969, 38596(%rsp)     # imm = 0x4E01
	movslq	%edx, %r9
	movb	%r10b, 3724(%rdi,%r9)
	movl	$19973, 38596(%rsp)     # imm = 0x4E05
	cmpq	$1, %rax
	movq	%rcx, 5712(%rsp)        # 8-byte Spill
	movq	%rsi, 5704(%rsp)        # 8-byte Spill
	jg	.LBB68_398
.LBB68_399:                             # %while.end2312
	movq	38576(%rsp), %rax       # 8-byte Reload
	movl	7820(%rax), %ecx
	movl	$19975, 38596(%rsp)     # imm = 0x4E07
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movl	$19978, 38596(%rsp)     # imm = 0x4E0A
	movslq	%ecx, %rdx
	movb	5791(%rsp), %sil        # 1-byte Reload
	movb	%sil, 3724(%rax,%rdx)
	movl	$19979, 38596(%rsp)     # imm = 0x4E0B
	movl	7820(%rax), %ecx
	movl	$19988, 38596(%rsp)     # imm = 0x4E14
	cmpl	$0, %ecx
	movb	%sil, 5799(%rsp)        # 1-byte Spill
	jne	.LBB68_402
# %bb.400:                              # %for.body2329.preheader
	movl	$15, %eax
	movl	%eax, %ecx
	movl	$4095, %eax             # imm = 0xFFF
	movl	%eax, %edx
	movq	%rcx, 5696(%rsp)        # 8-byte Spill
	movq	%rdx, 5688(%rsp)        # 8-byte Spill
	jmp	.LBB68_401
.LBB68_401:                             # %for.body2329
                                        # =>This Inner Loop Header: Depth=1
	movq	5688(%rsp), %rax        # 8-byte Reload
	movq	5696(%rsp), %rcx        # 8-byte Reload
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movl	7820(%rdx,%rcx,4), %esi
	movl	$19992, 38596(%rsp)     # imm = 0x4E18
	addl	$15, %esi
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$19994, 38596(%rsp)     # imm = 0x4E1A
	movb	%r8b, 3724(%rdx,%rax)
	movl	$19996, 38596(%rsp)     # imm = 0x4E1C
	movl	7820(%rdx,%rcx,4), %esi
	movl	$20000, 38596(%rsp)     # imm = 0x4E20
	addl	$14, %esi
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$20002, 38596(%rsp)     # imm = 0x4E22
	movb	%r8b, 3723(%rdx,%rax)
	movl	$20004, 38596(%rsp)     # imm = 0x4E24
	movl	7820(%rdx,%rcx,4), %esi
	movl	$20008, 38596(%rsp)     # imm = 0x4E28
	addl	$13, %esi
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$20010, 38596(%rsp)     # imm = 0x4E2A
	movb	%r8b, 3722(%rdx,%rax)
	movl	$20012, 38596(%rsp)     # imm = 0x4E2C
	movl	7820(%rdx,%rcx,4), %esi
	movl	$20016, 38596(%rsp)     # imm = 0x4E30
	addl	$12, %esi
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$20018, 38596(%rsp)     # imm = 0x4E32
	movb	%r8b, 3721(%rdx,%rax)
	movl	$20020, 38596(%rsp)     # imm = 0x4E34
	movl	7820(%rdx,%rcx,4), %esi
	movl	$20024, 38596(%rsp)     # imm = 0x4E38
	addl	$11, %esi
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$20026, 38596(%rsp)     # imm = 0x4E3A
	movb	%r8b, 3720(%rdx,%rax)
	movl	$20028, 38596(%rsp)     # imm = 0x4E3C
	movl	7820(%rdx,%rcx,4), %esi
	movl	$20032, 38596(%rsp)     # imm = 0x4E40
	addl	$10, %esi
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$20034, 38596(%rsp)     # imm = 0x4E42
	movb	%r8b, 3719(%rdx,%rax)
	movl	$20036, 38596(%rsp)     # imm = 0x4E44
	movl	7820(%rdx,%rcx,4), %esi
	movl	$20040, 38596(%rsp)     # imm = 0x4E48
	addl	$9, %esi
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$20042, 38596(%rsp)     # imm = 0x4E4A
	movb	%r8b, 3718(%rdx,%rax)
	movl	$20044, 38596(%rsp)     # imm = 0x4E4C
	movl	7820(%rdx,%rcx,4), %esi
	movl	$20048, 38596(%rsp)     # imm = 0x4E50
	addl	$8, %esi
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$20050, 38596(%rsp)     # imm = 0x4E52
	movb	%r8b, 3717(%rdx,%rax)
	movl	$20052, 38596(%rsp)     # imm = 0x4E54
	movl	7820(%rdx,%rcx,4), %esi
	movl	$20056, 38596(%rsp)     # imm = 0x4E58
	addl	$7, %esi
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$20058, 38596(%rsp)     # imm = 0x4E5A
	movb	%r8b, 3716(%rdx,%rax)
	movl	$20060, 38596(%rsp)     # imm = 0x4E5C
	movl	7820(%rdx,%rcx,4), %esi
	movl	$20064, 38596(%rsp)     # imm = 0x4E60
	addl	$6, %esi
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$20066, 38596(%rsp)     # imm = 0x4E62
	movb	%r8b, 3715(%rdx,%rax)
	movl	$20068, 38596(%rsp)     # imm = 0x4E64
	movl	7820(%rdx,%rcx,4), %esi
	movl	$20072, 38596(%rsp)     # imm = 0x4E68
	addl	$5, %esi
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$20074, 38596(%rsp)     # imm = 0x4E6A
	movb	%r8b, 3714(%rdx,%rax)
	movl	$20076, 38596(%rsp)     # imm = 0x4E6C
	movl	7820(%rdx,%rcx,4), %esi
	movl	$20080, 38596(%rsp)     # imm = 0x4E70
	addl	$4, %esi
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$20082, 38596(%rsp)     # imm = 0x4E72
	movb	%r8b, 3713(%rdx,%rax)
	movl	$20084, 38596(%rsp)     # imm = 0x4E74
	movl	7820(%rdx,%rcx,4), %esi
	movl	$20088, 38596(%rsp)     # imm = 0x4E78
	addl	$3, %esi
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$20090, 38596(%rsp)     # imm = 0x4E7A
	movb	%r8b, 3712(%rdx,%rax)
	movl	$20092, 38596(%rsp)     # imm = 0x4E7C
	movl	7820(%rdx,%rcx,4), %esi
	movl	$20096, 38596(%rsp)     # imm = 0x4E80
	addl	$2, %esi
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$20098, 38596(%rsp)     # imm = 0x4E82
	movb	%r8b, 3711(%rdx,%rax)
	movl	$20100, 38596(%rsp)     # imm = 0x4E84
	movl	7820(%rdx,%rcx,4), %esi
	movl	$20104, 38596(%rsp)     # imm = 0x4E88
	addl	$1, %esi
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$20106, 38596(%rsp)     # imm = 0x4E8A
	movb	%r8b, 3710(%rdx,%rax)
	movl	$20108, 38596(%rsp)     # imm = 0x4E8C
	movl	7820(%rdx,%rcx,4), %esi
	movl	$20111, 38596(%rsp)     # imm = 0x4E8F
	movslq	%esi, %rdi
	movb	3724(%rdx,%rdi), %r8b
	movl	$20113, 38596(%rsp)     # imm = 0x4E91
	movb	%r8b, 3709(%rdx,%rax)
	movl	$20116, 38596(%rsp)     # imm = 0x4E94
	movl	%eax, %esi
	addl	$-15, %esi
	movl	%esi, 7820(%rdx,%rcx,4)
	movl	$20122, 38596(%rsp)     # imm = 0x4E9A
	movq	%rcx, %rdi
	addq	$-1, %rdi
	addq	$-16, %rax
	cmpq	$0, %rcx
	movb	5791(%rsp), %r8b        # 1-byte Reload
	movq	%rdi, 5696(%rsp)        # 8-byte Spill
	movq	%rax, 5688(%rsp)        # 8-byte Spill
	movb	%r8b, 5799(%rsp)        # 1-byte Spill
	jne	.LBB68_401
.LBB68_402:                             # %if.end2356
	movb	5799(%rsp), %al         # 1-byte Reload
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movb	3468(%rsi,%rdx), %al
	movl	$20125, 38596(%rsp)     # imm = 0x4E9D
	movzbl	%al, %ecx
	movl	%ecx, %edi
	movl	68(%rsi,%rdi,4), %ecx
	movl	$20127, 38596(%rsp)     # imm = 0x4E9F
	addl	$1, %ecx
	movl	%ecx, 68(%rsi,%rdi,4)
	movl	$20129, 38596(%rsp)     # imm = 0x4EA1
	movb	44(%rsi), %al
	movl	$20131, 38596(%rsp)     # imm = 0x4EA3
	movb	3468(%rsi,%rdx), %r8b
	movl	$20135, 38596(%rsp)     # imm = 0x4EA7
	cmpb	$0, %al
	movb	%r8b, 5687(%rsp)        # 1-byte Spill
	je	.LBB68_404
# %bb.403:                              # %if.then2366
	movb	5687(%rsp), %al         # 1-byte Reload
	movzbl	%al, %ecx
	movw	%cx, %dx
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movq	3160(%rsi), %rdi
	movl	$20138, 38596(%rsp)     # imm = 0x4EAA
	movl	8152(%rsp), %ecx        # 4-byte Reload
	movslq	%ecx, %r8
	movw	%dx, (%rdi,%r8,2)
	movl	$20142, 38596(%rsp)     # imm = 0x4EAE
	jmp	.LBB68_405
.LBB68_404:                             # %if.else2374
	movb	5687(%rsp), %al         # 1-byte Reload
	movzbl	%al, %ecx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movq	3152(%rdx), %rsi
	movl	$20145, 38596(%rsp)     # imm = 0x4EB1
	movl	8152(%rsp), %edi        # 4-byte Reload
	movslq	%edi, %r8
	movl	%ecx, (%rsi,%r8,4)
	movl	$20155, 38596(%rsp)     # imm = 0x4EBB
.LBB68_405:                             # %if.end2382
	movl	8152(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	8164(%rsp), %ecx        # 4-byte Reload
	cmpl	$0, %ecx
	movq	8384(%rsp), %rdx        # 8-byte Reload
	movq	8392(%rsp), %rsi        # 8-byte Reload
	movq	8400(%rsp), %rdi        # 8-byte Reload
	movl	8204(%rsp), %r8d        # 4-byte Reload
	movl	8412(%rsp), %r9d        # 4-byte Reload
	movl	8168(%rsp), %r10d       # 4-byte Reload
	movl	%eax, 5680(%rsp)        # 4-byte Spill
	movl	%ecx, 5676(%rsp)        # 4-byte Spill
	movq	%rdx, 5664(%rsp)        # 8-byte Spill
	movq	%rsi, 5656(%rsp)        # 8-byte Spill
	movq	%rdi, 5648(%rsp)        # 8-byte Spill
	movl	%r8d, 5644(%rsp)        # 4-byte Spill
	movl	%r9d, 5640(%rsp)        # 4-byte Spill
	movl	%r10d, 5636(%rsp)       # 4-byte Spill
	jne	.LBB68_408
# %bb.406:                              # %if.then2386
	xorl	%eax, %eax
	movl	$4294967292, %ecx       # imm = 0xFFFFFFFC
	movl	8168(%rsp), %edx        # 4-byte Reload
	addl	$1, %edx
	movl	8176(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %edx
	movl	8200(%rsp), %edi        # 4-byte Reload
	movq	8184(%rsp), %r8         # 8-byte Reload
	movq	8208(%rsp), %r9         # 8-byte Reload
	movq	8216(%rsp), %r10        # 8-byte Reload
	movq	8224(%rsp), %r11        # 8-byte Reload
	movq	8232(%rsp), %rbx        # 8-byte Reload
	movq	8240(%rsp), %r14        # 8-byte Reload
	movq	8248(%rsp), %r15        # 8-byte Reload
	movq	8256(%rsp), %r12        # 8-byte Reload
	movq	8264(%rsp), %r13        # 8-byte Reload
	movq	8272(%rsp), %rbp        # 8-byte Reload
	movq	8280(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	8288(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	8296(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	8304(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	8312(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	8328(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	8336(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	8344(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	8360(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	8368(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	8376(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	8384(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	8392(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	8400(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 5632(%rsp)        # 4-byte Spill
	movl	8204(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	8412(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	8416(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	8420(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	8424(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	8140(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	8144(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	8148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	5680(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	8156(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	8160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	5632(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	8172(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	8176(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	8180(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	8408(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	8192(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	8196(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	8428(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%rbp, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 5628(%rsp)        # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%edi, 25332(%rsp)       # 4-byte Spill
	movq	%r8, 25520(%rsp)        # 8-byte Spill
	movq	%r9, 25512(%rsp)        # 8-byte Spill
	movq	%r10, 25504(%rsp)       # 8-byte Spill
	movq	%r11, 25496(%rsp)       # 8-byte Spill
	movq	%rbx, 25488(%rsp)       # 8-byte Spill
	movq	%r14, 25480(%rsp)       # 8-byte Spill
	movq	%r15, 25472(%rsp)       # 8-byte Spill
	movq	%r12, 25464(%rsp)       # 8-byte Spill
	movq	%r13, 25456(%rsp)       # 8-byte Spill
	movl	%ecx, 25244(%rsp)       # 4-byte Spill
	jge	.LBB68_542
# %bb.407:                              # %if.end2391
	movl	$50, %eax
	movl	5628(%rsp), %ecx        # 4-byte Reload
	movslq	%ecx, %rdx
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movb	7884(%rsi,%rdx), %dil
	movl	$20159, 38596(%rsp)     # imm = 0x4EBF
	movzbl	%dil, %r8d
	movzbl	%dil, %r9d
	movl	%r9d, %edx
	movl	64012(%rsi,%rdx,4), %r9d
	movl	$20220, 38596(%rsp)     # imm = 0x4EFC
	addq	$45436, %rsi            # imm = 0xB17C
	imulq	$1032, %rdx, %r10       # imm = 0x408
	addq	%r10, %rsi
	movq	38576(%rsp), %r10       # 8-byte Reload
	addq	$57820, %r10            # imm = 0xE1DC
	imulq	$1032, %rdx, %r11       # imm = 0x408
	addq	%r11, %r10
	movq	38576(%rsp), %r11       # 8-byte Reload
	addq	$51628, %r11            # imm = 0xC9AC
	imulq	$1032, %rdx, %rdx       # imm = 0x408
	addq	%rdx, %r11
	movl	%r8d, 5640(%rsp)        # 4-byte Spill
	movl	%ecx, 5636(%rsp)        # 4-byte Spill
	movq	%r11, 5656(%rsp)        # 8-byte Spill
	movl	%r9d, 5644(%rsp)        # 4-byte Spill
	movq	%r10, 5664(%rsp)        # 8-byte Spill
	movq	%rsi, 5648(%rsp)        # 8-byte Spill
	movl	%eax, 5676(%rsp)        # 4-byte Spill
.LBB68_408:                             # %if.end2411
	movl	5636(%rsp), %eax        # 4-byte Reload
	movl	5676(%rsp), %ecx        # 4-byte Reload
	movl	5640(%rsp), %edx        # 4-byte Reload
	movl	5644(%rsp), %esi        # 4-byte Reload
	movq	5648(%rsp), %rdi        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movq	5664(%rsp), %r9         # 8-byte Reload
	addl	$-1, %ecx
	movl	8200(%rsp), %r10d       # 4-byte Reload
	movq	8184(%rsp), %r11        # 8-byte Reload
	movq	8208(%rsp), %rbx        # 8-byte Reload
	movq	8216(%rsp), %r14        # 8-byte Reload
	movq	8224(%rsp), %r15        # 8-byte Reload
	movq	8232(%rsp), %r12        # 8-byte Reload
	movq	8240(%rsp), %r13        # 8-byte Reload
	movq	8248(%rsp), %rbp        # 8-byte Reload
	movl	%esi, 5624(%rsp)        # 4-byte Spill
	movq	8256(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35576(%rsp)       # 8-byte Spill
	movq	8264(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35568(%rsp)       # 8-byte Spill
	movq	8272(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35560(%rsp)       # 8-byte Spill
	movq	8280(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35552(%rsp)       # 8-byte Spill
	movq	8288(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35544(%rsp)       # 8-byte Spill
	movq	8296(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35536(%rsp)       # 8-byte Spill
	movq	8304(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35528(%rsp)       # 8-byte Spill
	movq	8312(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35520(%rsp)       # 8-byte Spill
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35512(%rsp)       # 8-byte Spill
	movq	8328(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35504(%rsp)       # 8-byte Spill
	movq	8336(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35496(%rsp)       # 8-byte Spill
	movq	8344(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35488(%rsp)       # 8-byte Spill
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35480(%rsp)       # 8-byte Spill
	movq	8360(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35472(%rsp)       # 8-byte Spill
	movq	8368(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 35464(%rsp)       # 8-byte Spill
	movq	8376(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 5620(%rsp)        # 4-byte Spill
	movl	5624(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35432(%rsp)       # 4-byte Spill
	movl	8416(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35424(%rsp)       # 4-byte Spill
	movl	8420(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35420(%rsp)       # 4-byte Spill
	movl	5624(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35416(%rsp)       # 4-byte Spill
	movl	8140(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35412(%rsp)       # 4-byte Spill
	movl	8144(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35408(%rsp)       # 4-byte Spill
	movl	8148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35404(%rsp)       # 4-byte Spill
	movl	5680(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35400(%rsp)       # 4-byte Spill
	movl	8156(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35396(%rsp)       # 4-byte Spill
	movl	8160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35392(%rsp)       # 4-byte Spill
	movl	5620(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35384(%rsp)       # 4-byte Spill
	movl	8172(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35380(%rsp)       # 4-byte Spill
	movl	8176(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35376(%rsp)       # 4-byte Spill
	movl	8180(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35372(%rsp)       # 4-byte Spill
	movl	8408(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35368(%rsp)       # 4-byte Spill
	movl	8192(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35364(%rsp)       # 4-byte Spill
	movl	8196(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35360(%rsp)       # 4-byte Spill
	movl	8428(%rsp), %eax        # 4-byte Reload
	movl	%eax, 35348(%rsp)       # 4-byte Spill
	movq	%rbp, 35584(%rsp)       # 8-byte Spill
	movq	%rdi, 35352(%rsp)       # 8-byte Spill
	movq	%rsi, 35456(%rsp)       # 8-byte Spill
	movq	%r8, 35440(%rsp)        # 8-byte Spill
	movq	%r9, 35448(%rsp)        # 8-byte Spill
	movl	%edx, 35428(%rsp)       # 4-byte Spill
	movl	%r10d, 35436(%rsp)      # 4-byte Spill
	movq	%r11, 35632(%rsp)       # 8-byte Spill
	movq	%rbx, 35624(%rsp)       # 8-byte Spill
	movq	%r14, 35616(%rsp)       # 8-byte Spill
	movq	%r15, 35608(%rsp)       # 8-byte Spill
	movq	%r12, 35600(%rsp)       # 8-byte Spill
	movq	%r13, 35592(%rsp)       # 8-byte Spill
	movl	%ecx, 35388(%rsp)       # 4-byte Spill
.LBB68_409:                             # %sw.bb2413
	movl	35348(%rsp), %eax       # 4-byte Reload
	movl	35360(%rsp), %ecx       # 4-byte Reload
	movl	35364(%rsp), %edx       # 4-byte Reload
	movl	35368(%rsp), %esi       # 4-byte Reload
	movl	35372(%rsp), %edi       # 4-byte Reload
	movl	35376(%rsp), %r8d       # 4-byte Reload
	movl	35380(%rsp), %r9d       # 4-byte Reload
	movl	35384(%rsp), %r10d      # 4-byte Reload
	movl	35388(%rsp), %r11d      # 4-byte Reload
	movl	35392(%rsp), %ebx       # 4-byte Reload
	movl	35396(%rsp), %ebp       # 4-byte Reload
	movl	35400(%rsp), %r14d      # 4-byte Reload
	movl	35404(%rsp), %r15d      # 4-byte Reload
	movl	35408(%rsp), %r12d      # 4-byte Reload
	movl	35412(%rsp), %r13d      # 4-byte Reload
	movl	%eax, 5616(%rsp)        # 4-byte Spill
	movl	35416(%rsp), %eax       # 4-byte Reload
	movl	%eax, 5612(%rsp)        # 4-byte Spill
	movl	35420(%rsp), %eax       # 4-byte Reload
	movl	%eax, 5608(%rsp)        # 4-byte Spill
	movl	35424(%rsp), %eax       # 4-byte Reload
	movl	%eax, 5604(%rsp)        # 4-byte Spill
	movl	35428(%rsp), %eax       # 4-byte Reload
	movl	%eax, 5600(%rsp)        # 4-byte Spill
	movl	35432(%rsp), %eax       # 4-byte Reload
	movl	%esi, 5596(%rsp)        # 4-byte Spill
	movq	35352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5584(%rsp)        # 8-byte Spill
	movq	35440(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5576(%rsp)        # 8-byte Spill
	movq	35448(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5568(%rsp)        # 8-byte Spill
	movq	35456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5560(%rsp)        # 8-byte Spill
	movq	35464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5552(%rsp)        # 8-byte Spill
	movq	35472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5544(%rsp)        # 8-byte Spill
	movq	35480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5536(%rsp)        # 8-byte Spill
	movq	35488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5528(%rsp)        # 8-byte Spill
	movq	35496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5520(%rsp)        # 8-byte Spill
	movq	35504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5512(%rsp)        # 8-byte Spill
	movq	35512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5504(%rsp)        # 8-byte Spill
	movq	35520(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5496(%rsp)        # 8-byte Spill
	movq	35528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5488(%rsp)        # 8-byte Spill
	movq	35536(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5480(%rsp)        # 8-byte Spill
	movq	35544(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5472(%rsp)        # 8-byte Spill
	movq	35552(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5464(%rsp)        # 8-byte Spill
	movq	35560(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5456(%rsp)        # 8-byte Spill
	movq	35568(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5448(%rsp)        # 8-byte Spill
	movq	35576(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5440(%rsp)        # 8-byte Spill
	movq	35584(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5432(%rsp)        # 8-byte Spill
	movq	35592(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5424(%rsp)        # 8-byte Spill
	movq	35600(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5416(%rsp)        # 8-byte Spill
	movq	35608(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5408(%rsp)        # 8-byte Spill
	movq	35616(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5400(%rsp)        # 8-byte Spill
	movq	35624(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 5392(%rsp)        # 8-byte Spill
	movq	35632(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 5388(%rsp)        # 4-byte Spill
	movl	35436(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 5376(%rsp)        # 8-byte Spill
	movq	38552(%rsp), %rsi       # 8-byte Reload
	movl	$40, (%rsi)
	movl	$20223, 38596(%rsp)     # imm = 0x4EFF
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$36, %rsi
	movq	%rsi, 5368(%rsp)        # 8-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	36(%rsi), %esi
	movl	$20227, 38596(%rsp)     # imm = 0x4F03
	movl	%esi, 5364(%rsp)        # 4-byte Spill
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$32, %rsi
	movl	%eax, 5360(%rsp)        # 4-byte Spill
	movl	5364(%rsp), %eax        # 4-byte Reload
	movl	%ecx, 5356(%rsp)        # 4-byte Spill
	movl	5612(%rsp), %ecx        # 4-byte Reload
	cmpl	%ecx, %eax
	movl	%edx, 5352(%rsp)        # 4-byte Spill
	movq	%rsi, 5344(%rsp)        # 8-byte Spill
	movl	%edi, 5340(%rsp)        # 4-byte Spill
	movl	%r8d, 5336(%rsp)        # 4-byte Spill
	movl	%r9d, 5332(%rsp)        # 4-byte Spill
	movl	%r10d, 5328(%rsp)       # 4-byte Spill
	movl	%r11d, 5324(%rsp)       # 4-byte Spill
	movl	%ebx, 5320(%rsp)        # 4-byte Spill
	movl	%ebp, 5316(%rsp)        # 4-byte Spill
	movl	%r14d, 5312(%rsp)       # 4-byte Spill
	movl	%r15d, 5308(%rsp)       # 4-byte Spill
	movl	%r12d, 5304(%rsp)       # 4-byte Spill
	movl	%r13d, 5300(%rsp)       # 4-byte Spill
	jl	.LBB68_411
# %bb.410:                              # %sw.bb2413.if.then2420_crit_edge
	movq	5344(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$20229, 38596(%rsp)     # imm = 0x4F05
	movl	5364(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 5296(%rsp)        # 4-byte Spill
	movl	%edx, 5292(%rsp)        # 4-byte Spill
	jmp	.LBB68_412
.LBB68_411:                             # %if.end2431.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$20231, 38596(%rsp)     # imm = 0x4F07
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$20245, 38596(%rsp)     # imm = 0x4F15
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	5364(%rsp), %r9d        # 4-byte Reload
	movq	%rcx, 5280(%rsp)        # 8-byte Spill
	movq	%rdx, 5272(%rsp)        # 8-byte Spill
	movq	%r8, 5264(%rsp)         # 8-byte Spill
	movq	%rdi, 5256(%rsp)        # 8-byte Spill
	movl	%esi, 5252(%rsp)        # 4-byte Spill
	movl	%r9d, 5248(%rsp)        # 4-byte Spill
	jmp	.LBB68_413
.LBB68_412:                             # %if.then2420
	movl	5292(%rsp), %eax        # 4-byte Reload
	movl	5296(%rsp), %ecx        # 4-byte Reload
	movl	$1, %edx
	movl	5612(%rsp), %esi        # 4-byte Reload
	subl	%esi, %eax
	movl	%ecx, 5244(%rsp)        # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	5244(%rsp), %edi        # 4-byte Reload
	shrl	%cl, %edi
	movl	%esi, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	addl	$-1, %edx
	andl	%edx, %edi
	movq	5368(%rsp), %r8         # 8-byte Reload
	movl	%eax, (%r8)
	movl	$20252, 38596(%rsp)     # imm = 0x4F1C
	movl	5360(%rsp), %edx        # 4-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5392(%rsp), %r10        # 8-byte Reload
	movq	5400(%rsp), %r11        # 8-byte Reload
	movq	5408(%rsp), %rbx        # 8-byte Reload
	movq	5416(%rsp), %r14        # 8-byte Reload
	movq	5424(%rsp), %r15        # 8-byte Reload
	movq	5432(%rsp), %r12        # 8-byte Reload
	movq	5440(%rsp), %r13        # 8-byte Reload
	movq	5448(%rsp), %rbp        # 8-byte Reload
	movq	5456(%rsp), %rcx        # 8-byte Reload
	movq	5464(%rsp), %rsi        # 8-byte Reload
	movq	5472(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 5232(%rsp)        # 8-byte Spill
	movq	5480(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5224(%rsp)        # 8-byte Spill
	movq	5488(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5216(%rsp)        # 8-byte Spill
	movq	5496(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5208(%rsp)        # 8-byte Spill
	movq	5504(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5200(%rsp)        # 8-byte Spill
	movq	5512(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5192(%rsp)        # 8-byte Spill
	movq	5520(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5184(%rsp)        # 8-byte Spill
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5176(%rsp)        # 8-byte Spill
	movq	5536(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5168(%rsp)        # 8-byte Spill
	movq	5544(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5160(%rsp)        # 8-byte Spill
	movq	5552(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5152(%rsp)        # 8-byte Spill
	movq	5560(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5144(%rsp)        # 8-byte Spill
	movq	5568(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5136(%rsp)        # 8-byte Spill
	movq	5576(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5128(%rsp)        # 8-byte Spill
	movq	5584(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 5124(%rsp)        # 4-byte Spill
	movl	5388(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5120(%rsp)        # 4-byte Spill
	movl	5600(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5116(%rsp)        # 4-byte Spill
	movl	5604(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5112(%rsp)        # 4-byte Spill
	movl	5612(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5108(%rsp)        # 4-byte Spill
	movl	5300(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5104(%rsp)        # 4-byte Spill
	movl	5304(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5100(%rsp)        # 4-byte Spill
	movl	5308(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5096(%rsp)        # 4-byte Spill
	movl	5312(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5092(%rsp)        # 4-byte Spill
	movl	5316(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5088(%rsp)        # 4-byte Spill
	movl	5320(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5084(%rsp)        # 4-byte Spill
	movl	5324(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5080(%rsp)        # 4-byte Spill
	movl	5328(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5076(%rsp)        # 4-byte Spill
	movl	5332(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5072(%rsp)        # 4-byte Spill
	movl	5336(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5068(%rsp)        # 4-byte Spill
	movl	5340(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5064(%rsp)        # 4-byte Spill
	movl	5596(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5060(%rsp)        # 4-byte Spill
	movl	5352(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5056(%rsp)        # 4-byte Spill
	movl	5356(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5052(%rsp)        # 4-byte Spill
	movl	5616(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5048(%rsp)        # 4-byte Spill
	movq	%rsi, 5040(%rsp)        # 8-byte Spill
	movq	%rcx, 5032(%rsp)        # 8-byte Spill
	movq	%r8, 5024(%rsp)         # 8-byte Spill
	movl	%edx, 5020(%rsp)        # 4-byte Spill
	movq	%r9, 5008(%rsp)         # 8-byte Spill
	movq	%r10, 5000(%rsp)        # 8-byte Spill
	movq	%r11, 4992(%rsp)        # 8-byte Spill
	movq	%rbx, 4984(%rsp)        # 8-byte Spill
	movq	%r14, 4976(%rsp)        # 8-byte Spill
	movq	%r15, 4968(%rsp)        # 8-byte Spill
	movq	%r12, 4960(%rsp)        # 8-byte Spill
	movq	%r13, 4952(%rsp)        # 8-byte Spill
	movq	%rbp, 4944(%rsp)        # 8-byte Spill
	movl	%edi, 4940(%rsp)        # 4-byte Spill
	jmp	.LBB68_417
.LBB68_413:                             # %if.end2431
                                        # =>This Inner Loop Header: Depth=1
	movl	5248(%rsp), %eax        # 4-byte Reload
	movl	5252(%rsp), %ecx        # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	5360(%rsp), %esi        # 4-byte Reload
	movq	5376(%rsp), %rdi        # 8-byte Reload
	movq	5392(%rsp), %r8         # 8-byte Reload
	movq	5400(%rsp), %r9         # 8-byte Reload
	movq	5408(%rsp), %r10        # 8-byte Reload
	movq	5416(%rsp), %r11        # 8-byte Reload
	movq	5424(%rsp), %rbx        # 8-byte Reload
	movq	5432(%rsp), %r14        # 8-byte Reload
	movq	5440(%rsp), %r15        # 8-byte Reload
	movq	5448(%rsp), %r12        # 8-byte Reload
	movq	5456(%rsp), %r13        # 8-byte Reload
	movq	5464(%rsp), %rbp        # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	5472(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	5480(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	5488(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	5496(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	5504(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	5512(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	5520(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	5528(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	5536(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	5544(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	5552(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	5560(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	5568(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	5576(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	5584(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 4936(%rsp)        # 4-byte Spill
	movl	5388(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	5600(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	5604(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	5608(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	5612(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	5300(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	5304(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	5308(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	5312(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	5316(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	5320(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	5324(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	5328(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	5332(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	5336(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	5340(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	5596(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	5352(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	5356(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	5616(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 4932(%rsp)        # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.414:                              # %if.end2437
                                        #   in Loop: Header=BB68_413 Depth=1
	movq	5344(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$20254, 38596(%rsp)     # imm = 0x4F1E
	shll	$8, %ecx
	movq	5280(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$20255, 38596(%rsp)     # imm = 0x4F1F
	movb	(%rsi), %dil
	movl	$20257, 38596(%rsp)     # imm = 0x4F21
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$20258, 38596(%rsp)     # imm = 0x4F22
	movl	4936(%rsp), %r8d        # 4-byte Reload
	addl	$8, %r8d
	movq	5368(%rsp), %r9         # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$20260, 38596(%rsp)     # imm = 0x4F24
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$20261, 38596(%rsp)     # imm = 0x4F25
	movl	4932(%rsp), %r10d       # 4-byte Reload
	addl	$-1, %r10d
	movq	5272(%rsp), %rsi        # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$20262, 38596(%rsp)     # imm = 0x4F26
	movq	5256(%rsp), %r11        # 8-byte Reload
	movl	(%r11), %ebx
	movl	$20264, 38596(%rsp)     # imm = 0x4F28
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$20267, 38596(%rsp)     # imm = 0x4F2B
	cmpl	$0, %ebx
	movl	%ecx, 4928(%rsp)        # 4-byte Spill
	movl	%r8d, 4924(%rsp)        # 4-byte Spill
	movl	%r10d, 4920(%rsp)       # 4-byte Spill
	jne	.LBB68_416
# %bb.415:                              # %if.then2460
                                        #   in Loop: Header=BB68_413 Depth=1
	movq	5264(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$20269, 38596(%rsp)     # imm = 0x4F2D
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$20327, 38596(%rsp)     # imm = 0x4F67
.LBB68_416:                             # %if.end2464
                                        #   in Loop: Header=BB68_413 Depth=1
	movl	4924(%rsp), %eax        # 4-byte Reload
	movl	5612(%rsp), %ecx        # 4-byte Reload
	cmpl	%ecx, %eax
	movl	4928(%rsp), %edx        # 4-byte Reload
	movl	4920(%rsp), %esi        # 4-byte Reload
	movl	4924(%rsp), %edi        # 4-byte Reload
	movl	%eax, 5292(%rsp)        # 4-byte Spill
	movl	%edx, 5296(%rsp)        # 4-byte Spill
	movl	%esi, 5252(%rsp)        # 4-byte Spill
	movl	%edi, 5248(%rsp)        # 4-byte Spill
	jl	.LBB68_413
	jmp	.LBB68_412
.LBB68_417:                             # %while.cond2466
	movl	5048(%rsp), %eax        # 4-byte Reload
	movl	5052(%rsp), %ecx        # 4-byte Reload
	movl	5056(%rsp), %edx        # 4-byte Reload
	movl	5060(%rsp), %esi        # 4-byte Reload
	movl	5064(%rsp), %edi        # 4-byte Reload
	movl	5068(%rsp), %r8d        # 4-byte Reload
	movl	5072(%rsp), %r9d        # 4-byte Reload
	movl	5076(%rsp), %r10d       # 4-byte Reload
	movl	5080(%rsp), %r11d       # 4-byte Reload
	movl	5084(%rsp), %ebx        # 4-byte Reload
	movl	5088(%rsp), %ebp        # 4-byte Reload
	movl	5092(%rsp), %r14d       # 4-byte Reload
	movl	5096(%rsp), %r15d       # 4-byte Reload
	movl	5100(%rsp), %r12d       # 4-byte Reload
	movl	5104(%rsp), %r13d       # 4-byte Reload
	movl	%eax, 4916(%rsp)        # 4-byte Spill
	movl	5108(%rsp), %eax        # 4-byte Reload
	movl	%eax, 4912(%rsp)        # 4-byte Spill
	movl	4940(%rsp), %eax        # 4-byte Reload
	movl	%eax, 4908(%rsp)        # 4-byte Spill
	movl	5112(%rsp), %eax        # 4-byte Reload
	movl	%eax, 4904(%rsp)        # 4-byte Spill
	movl	5116(%rsp), %eax        # 4-byte Reload
	movl	%eax, 4900(%rsp)        # 4-byte Spill
	movl	5120(%rsp), %eax        # 4-byte Reload
	movl	%esi, 4896(%rsp)        # 4-byte Spill
	movq	5032(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4888(%rsp)        # 8-byte Spill
	movq	5128(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4880(%rsp)        # 8-byte Spill
	movq	5136(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 4876(%rsp)        # 4-byte Spill
	movl	5124(%rsp), %eax        # 4-byte Reload
	movq	%rsi, 4864(%rsp)        # 8-byte Spill
	movq	5144(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4856(%rsp)        # 8-byte Spill
	movq	5152(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4848(%rsp)        # 8-byte Spill
	movq	5160(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4840(%rsp)        # 8-byte Spill
	movq	5168(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4832(%rsp)        # 8-byte Spill
	movq	5176(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4824(%rsp)        # 8-byte Spill
	movq	5184(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4816(%rsp)        # 8-byte Spill
	movq	5192(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4808(%rsp)        # 8-byte Spill
	movq	5200(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4800(%rsp)        # 8-byte Spill
	movq	5208(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4792(%rsp)        # 8-byte Spill
	movq	5216(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4784(%rsp)        # 8-byte Spill
	movq	5224(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4776(%rsp)        # 8-byte Spill
	movq	5024(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4768(%rsp)        # 8-byte Spill
	movq	5040(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4760(%rsp)        # 8-byte Spill
	movq	5232(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4752(%rsp)        # 8-byte Spill
	movq	4944(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4744(%rsp)        # 8-byte Spill
	movq	4952(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4736(%rsp)        # 8-byte Spill
	movq	4960(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4728(%rsp)        # 8-byte Spill
	movq	4968(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4720(%rsp)        # 8-byte Spill
	movq	4976(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4712(%rsp)        # 8-byte Spill
	movq	4984(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4704(%rsp)        # 8-byte Spill
	movq	4992(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4696(%rsp)        # 8-byte Spill
	movq	5000(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 4688(%rsp)        # 8-byte Spill
	movq	5008(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 4684(%rsp)        # 4-byte Spill
	movl	5020(%rsp), %eax        # 4-byte Reload
	movl	%eax, 4680(%rsp)        # 4-byte Spill
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movl	%eax, 4676(%rsp)        # 4-byte Spill
	movl	4912(%rsp), %eax        # 4-byte Reload
	cmpl	$20, %eax
	movl	4680(%rsp), %eax        # 4-byte Reload
	movq	%rsi, 4664(%rsp)        # 8-byte Spill
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	4688(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	4696(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	4704(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	4712(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	4720(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	4728(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	4736(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	4744(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	4752(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	4760(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	4768(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	4776(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	4784(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	4792(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	4800(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	4808(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	4816(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	4824(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	4832(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	4848(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	4856(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	4864(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	4880(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	4888(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	4876(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	4900(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	4904(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	4908(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	4912(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	%r13d, %eax
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	%r12d, %eax
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	%r15d, %eax
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	%r14d, %eax
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	%ebp, %eax
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	%ebx, %eax
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	%r11d, %eax
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	%r10d, %eax
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	%r9d, %eax
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	%r8d, %eax
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	%edi, %eax
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	4896(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	%edx, %eax
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	%ecx, %eax
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	4916(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	4676(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movl	%ecx, 4660(%rsp)        # 4-byte Spill
	movl	%edx, 4656(%rsp)        # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%edi, 4652(%rsp)        # 4-byte Spill
	movl	%r8d, 4648(%rsp)        # 4-byte Spill
	movl	%r9d, 4644(%rsp)        # 4-byte Spill
	movl	%r10d, 4640(%rsp)       # 4-byte Spill
	movl	%r11d, 4636(%rsp)       # 4-byte Spill
	movl	%ebx, 4632(%rsp)        # 4-byte Spill
	movl	%ebp, 4628(%rsp)        # 4-byte Spill
	movl	%r14d, 4624(%rsp)       # 4-byte Spill
	movl	%r15d, 4620(%rsp)       # 4-byte Spill
	movl	%r12d, 4616(%rsp)       # 4-byte Spill
	movl	%r13d, 4612(%rsp)       # 4-byte Spill
	jg	.LBB68_542
# %bb.418:                              # %if.end2471
	movl	4912(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	4888(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %esi
	movl	$20337, 38596(%rsp)     # imm = 0x4F71
	movl	4908(%rsp), %edi        # 4-byte Reload
	cmpl	%esi, %edi
	movq	%rcx, 4600(%rsp)        # 8-byte Spill
	jle	.LBB68_428
# %bb.419:                              # %if.end2477
	movl	4912(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$36, %rcx
	movl	4680(%rsp), %edx        # 4-byte Reload
	movq	4664(%rsp), %rsi        # 8-byte Reload
	movq	4688(%rsp), %rdi        # 8-byte Reload
	movq	4696(%rsp), %r8         # 8-byte Reload
	movq	4704(%rsp), %r9         # 8-byte Reload
	movq	4712(%rsp), %r10        # 8-byte Reload
	movq	4720(%rsp), %r11        # 8-byte Reload
	movq	4728(%rsp), %rbx        # 8-byte Reload
	movq	4736(%rsp), %r14        # 8-byte Reload
	movq	4744(%rsp), %r15        # 8-byte Reload
	movq	4752(%rsp), %r12        # 8-byte Reload
	movq	4760(%rsp), %r13        # 8-byte Reload
	movq	4768(%rsp), %rbp        # 8-byte Reload
	movq	%rcx, 4592(%rsp)        # 8-byte Spill
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 30888(%rsp)       # 8-byte Spill
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 30880(%rsp)       # 8-byte Spill
	movq	4792(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 30872(%rsp)       # 8-byte Spill
	movq	4800(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 30864(%rsp)       # 8-byte Spill
	movq	4808(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 30856(%rsp)       # 8-byte Spill
	movq	4816(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 30848(%rsp)       # 8-byte Spill
	movq	4824(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 30840(%rsp)       # 8-byte Spill
	movq	4832(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 30832(%rsp)       # 8-byte Spill
	movq	4840(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 30824(%rsp)       # 8-byte Spill
	movq	4848(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 30816(%rsp)       # 8-byte Spill
	movq	4856(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 30808(%rsp)       # 8-byte Spill
	movq	4592(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 4588(%rsp)        # 4-byte Spill
	movl	4684(%rsp), %eax        # 4-byte Reload
	movq	%rcx, 30800(%rsp)       # 8-byte Spill
	movq	4864(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 30792(%rsp)       # 8-byte Spill
	movq	4880(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 30784(%rsp)       # 8-byte Spill
	movq	4888(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 30780(%rsp)       # 4-byte Spill
	movl	4876(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30776(%rsp)       # 4-byte Spill
	movl	4900(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30772(%rsp)       # 4-byte Spill
	movl	4904(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30768(%rsp)       # 4-byte Spill
	movl	4908(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30764(%rsp)       # 4-byte Spill
	movl	4588(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30760(%rsp)       # 4-byte Spill
	movl	4612(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30756(%rsp)       # 4-byte Spill
	movl	4616(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30752(%rsp)       # 4-byte Spill
	movl	4620(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30748(%rsp)       # 4-byte Spill
	movl	4624(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30744(%rsp)       # 4-byte Spill
	movl	4628(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30740(%rsp)       # 4-byte Spill
	movl	4632(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30736(%rsp)       # 4-byte Spill
	movl	4636(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30732(%rsp)       # 4-byte Spill
	movl	4640(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30728(%rsp)       # 4-byte Spill
	movl	4644(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30724(%rsp)       # 4-byte Spill
	movl	4648(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30720(%rsp)       # 4-byte Spill
	movl	4652(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30716(%rsp)       # 4-byte Spill
	movl	4896(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30712(%rsp)       # 4-byte Spill
	movl	4656(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30708(%rsp)       # 4-byte Spill
	movl	4660(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30704(%rsp)       # 4-byte Spill
	movl	4916(%rsp), %eax        # 4-byte Reload
	movl	%eax, 30588(%rsp)       # 4-byte Spill
	movq	%rcx, 30696(%rsp)       # 8-byte Spill
	movl	%edx, 30676(%rsp)       # 4-byte Spill
	movq	%rsi, 30664(%rsp)       # 8-byte Spill
	movq	%rdi, 30656(%rsp)       # 8-byte Spill
	movq	%r8, 30648(%rsp)        # 8-byte Spill
	movq	%r9, 30640(%rsp)        # 8-byte Spill
	movq	%r10, 30632(%rsp)       # 8-byte Spill
	movq	%r11, 30624(%rsp)       # 8-byte Spill
	movq	%rbx, 30616(%rsp)       # 8-byte Spill
	movq	%r14, 30608(%rsp)       # 8-byte Spill
	movq	%r15, 30600(%rsp)       # 8-byte Spill
	movq	%r12, 30592(%rsp)       # 8-byte Spill
	movq	%r13, 30680(%rsp)       # 8-byte Spill
	movq	%rbp, 30688(%rsp)       # 8-byte Spill
.LBB68_420:                             # %sw.bb2479
	movl	30588(%rsp), %eax       # 4-byte Reload
	movl	30704(%rsp), %ecx       # 4-byte Reload
	movl	30708(%rsp), %edx       # 4-byte Reload
	movl	30712(%rsp), %esi       # 4-byte Reload
	movl	30716(%rsp), %edi       # 4-byte Reload
	movl	30720(%rsp), %r8d       # 4-byte Reload
	movl	30724(%rsp), %r9d       # 4-byte Reload
	movl	30728(%rsp), %r10d      # 4-byte Reload
	movl	30732(%rsp), %r11d      # 4-byte Reload
	movl	30736(%rsp), %ebx       # 4-byte Reload
	movl	30740(%rsp), %ebp       # 4-byte Reload
	movl	30744(%rsp), %r14d      # 4-byte Reload
	movl	30748(%rsp), %r15d      # 4-byte Reload
	movl	30752(%rsp), %r12d      # 4-byte Reload
	movl	30756(%rsp), %r13d      # 4-byte Reload
	movl	%eax, 4584(%rsp)        # 4-byte Spill
	movl	30760(%rsp), %eax       # 4-byte Reload
	movl	%eax, 4580(%rsp)        # 4-byte Spill
	movl	30764(%rsp), %eax       # 4-byte Reload
	movl	%eax, 4576(%rsp)        # 4-byte Spill
	movl	30768(%rsp), %eax       # 4-byte Reload
	movl	%eax, 4572(%rsp)        # 4-byte Spill
	movl	30772(%rsp), %eax       # 4-byte Reload
	movl	%eax, 4568(%rsp)        # 4-byte Spill
	movl	30776(%rsp), %eax       # 4-byte Reload
	movl	%esi, 4564(%rsp)        # 4-byte Spill
	movq	30696(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4552(%rsp)        # 8-byte Spill
	movq	30784(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4544(%rsp)        # 8-byte Spill
	movq	30792(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 4540(%rsp)        # 4-byte Spill
	movl	30780(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 4528(%rsp)        # 8-byte Spill
	movq	30800(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4520(%rsp)        # 8-byte Spill
	movq	30808(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4512(%rsp)        # 8-byte Spill
	movq	30816(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4504(%rsp)        # 8-byte Spill
	movq	30824(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4496(%rsp)        # 8-byte Spill
	movq	30832(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4488(%rsp)        # 8-byte Spill
	movq	30840(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4480(%rsp)        # 8-byte Spill
	movq	30848(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4472(%rsp)        # 8-byte Spill
	movq	30856(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4464(%rsp)        # 8-byte Spill
	movq	30864(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4456(%rsp)        # 8-byte Spill
	movq	30872(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4448(%rsp)        # 8-byte Spill
	movq	30880(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4440(%rsp)        # 8-byte Spill
	movq	30888(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4432(%rsp)        # 8-byte Spill
	movq	30688(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4424(%rsp)        # 8-byte Spill
	movq	30680(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4416(%rsp)        # 8-byte Spill
	movq	30592(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4408(%rsp)        # 8-byte Spill
	movq	30600(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4400(%rsp)        # 8-byte Spill
	movq	30608(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4392(%rsp)        # 8-byte Spill
	movq	30616(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4384(%rsp)        # 8-byte Spill
	movq	30624(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4376(%rsp)        # 8-byte Spill
	movq	30632(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4368(%rsp)        # 8-byte Spill
	movq	30640(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4360(%rsp)        # 8-byte Spill
	movq	30648(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4352(%rsp)        # 8-byte Spill
	movq	30656(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 4344(%rsp)        # 8-byte Spill
	movq	30664(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 4340(%rsp)        # 4-byte Spill
	movl	30676(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 4328(%rsp)        # 8-byte Spill
	movq	38552(%rsp), %rsi       # 8-byte Reload
	movl	$41, (%rsi)
	movl	$20343, 38596(%rsp)     # imm = 0x4F77
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$32, %rsi
	movl	%eax, 4324(%rsp)        # 4-byte Spill
	movl	4340(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	movl	%ecx, 4320(%rsp)        # 4-byte Spill
	movl	%edx, 4316(%rsp)        # 4-byte Spill
	movq	%rsi, 4304(%rsp)        # 8-byte Spill
	movl	%edi, 4300(%rsp)        # 4-byte Spill
	movl	%r8d, 4296(%rsp)        # 4-byte Spill
	movl	%r9d, 4292(%rsp)        # 4-byte Spill
	movl	%r10d, 4288(%rsp)       # 4-byte Spill
	movl	%r11d, 4284(%rsp)       # 4-byte Spill
	movl	%ebx, 4280(%rsp)        # 4-byte Spill
	movl	%ebp, 4276(%rsp)        # 4-byte Spill
	movl	%r14d, 4272(%rsp)       # 4-byte Spill
	movl	%r15d, 4268(%rsp)       # 4-byte Spill
	movl	%r12d, 4264(%rsp)       # 4-byte Spill
	movl	%r13d, 4260(%rsp)       # 4-byte Spill
	jg	.LBB68_422
# %bb.421:                              # %if.end2495.preheader
	movl	4340(%rsp), %eax        # 4-byte Reload
	movl	%eax, 4256(%rsp)        # 4-byte Spill
	jmp	.LBB68_424
.LBB68_422:                             # %sw.bb2479.if.then2486_crit_edge
	movq	4304(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$20350, 38596(%rsp)     # imm = 0x4F7E
	movl	4340(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 4252(%rsp)        # 4-byte Spill
	movl	%edx, 4248(%rsp)        # 4-byte Spill
.LBB68_423:                             # %if.then2486
	movl	4248(%rsp), %eax        # 4-byte Reload
	movl	4252(%rsp), %ecx        # 4-byte Reload
	addl	$-1, %eax
	movl	%ecx, 4244(%rsp)        # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	4244(%rsp), %edx        # 4-byte Reload
	shrl	%cl, %edx
	andl	$1, %edx
	movq	4520(%rsp), %rsi        # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$20354, 38596(%rsp)     # imm = 0x4F82
	movl	4576(%rsp), %edi        # 4-byte Reload
	shll	$1, %edi
	movl	%edx, %r8d
	orl	%edi, %r8d
	movl	4324(%rsp), %edi        # 4-byte Reload
	movq	4328(%rsp), %r9         # 8-byte Reload
	movq	4344(%rsp), %r10        # 8-byte Reload
	movq	4352(%rsp), %r11        # 8-byte Reload
	movq	4360(%rsp), %rbx        # 8-byte Reload
	movq	4368(%rsp), %r14        # 8-byte Reload
	movq	4376(%rsp), %r15        # 8-byte Reload
	movq	4384(%rsp), %r12        # 8-byte Reload
	movq	4392(%rsp), %r13        # 8-byte Reload
	movq	4400(%rsp), %rbp        # 8-byte Reload
	movq	4408(%rsp), %rcx        # 8-byte Reload
	movq	4416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, 5232(%rsp)        # 8-byte Spill
	movq	4424(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5024(%rsp)        # 8-byte Spill
	movq	4432(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5224(%rsp)        # 8-byte Spill
	movq	4440(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5216(%rsp)        # 8-byte Spill
	movq	4448(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5208(%rsp)        # 8-byte Spill
	movq	4456(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5200(%rsp)        # 8-byte Spill
	movq	4464(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5192(%rsp)        # 8-byte Spill
	movq	4472(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5184(%rsp)        # 8-byte Spill
	movq	4480(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5176(%rsp)        # 8-byte Spill
	movq	4488(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5168(%rsp)        # 8-byte Spill
	movq	4496(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5160(%rsp)        # 8-byte Spill
	movq	4504(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5152(%rsp)        # 8-byte Spill
	movq	4512(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5144(%rsp)        # 8-byte Spill
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5136(%rsp)        # 8-byte Spill
	movq	4544(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5128(%rsp)        # 8-byte Spill
	movq	4552(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 5124(%rsp)        # 4-byte Spill
	movl	4540(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5120(%rsp)        # 4-byte Spill
	movl	4568(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5116(%rsp)        # 4-byte Spill
	movl	4580(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5108(%rsp)        # 4-byte Spill
	movl	4260(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5104(%rsp)        # 4-byte Spill
	movl	4264(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5100(%rsp)        # 4-byte Spill
	movl	4268(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5096(%rsp)        # 4-byte Spill
	movl	4272(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5092(%rsp)        # 4-byte Spill
	movl	4276(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5088(%rsp)        # 4-byte Spill
	movl	4280(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5084(%rsp)        # 4-byte Spill
	movl	4284(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5080(%rsp)        # 4-byte Spill
	movl	4288(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5076(%rsp)        # 4-byte Spill
	movl	4292(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5072(%rsp)        # 4-byte Spill
	movl	4296(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5068(%rsp)        # 4-byte Spill
	movl	4300(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5064(%rsp)        # 4-byte Spill
	movl	4564(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5060(%rsp)        # 4-byte Spill
	movl	4316(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5056(%rsp)        # 4-byte Spill
	movl	4320(%rsp), %eax        # 4-byte Reload
	movl	%eax, 5052(%rsp)        # 4-byte Spill
	movl	4584(%rsp), %eax        # 4-byte Reload
	movq	%rcx, 5032(%rsp)        # 8-byte Spill
	movl	%eax, 5048(%rsp)        # 4-byte Spill
	movq	%rsi, 5040(%rsp)        # 8-byte Spill
	movl	%edx, 5112(%rsp)        # 4-byte Spill
	movl	%edi, 5020(%rsp)        # 4-byte Spill
	movq	%r9, 5008(%rsp)         # 8-byte Spill
	movq	%r10, 5000(%rsp)        # 8-byte Spill
	movq	%r11, 4992(%rsp)        # 8-byte Spill
	movq	%rbx, 4984(%rsp)        # 8-byte Spill
	movq	%r14, 4976(%rsp)        # 8-byte Spill
	movq	%r15, 4968(%rsp)        # 8-byte Spill
	movq	%r12, 4960(%rsp)        # 8-byte Spill
	movq	%r13, 4952(%rsp)        # 8-byte Spill
	movq	%rbp, 4944(%rsp)        # 8-byte Spill
	movl	%r8d, 4940(%rsp)        # 4-byte Spill
	jmp	.LBB68_417
.LBB68_424:                             # %if.end2495
                                        # =>This Inner Loop Header: Depth=1
	movl	4256(%rsp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$20356, 38596(%rsp)     # imm = 0x4F84
	movq	%rsi, %rdi
	addq	$8, %rdi
	movl	8(%rsi), %r8d
	movl	$20359, 38596(%rsp)     # imm = 0x4F87
	cmpl	$0, %r8d
	movl	4324(%rsp), %r9d        # 4-byte Reload
	movq	4328(%rsp), %r10        # 8-byte Reload
	movq	4344(%rsp), %r11        # 8-byte Reload
	movq	4352(%rsp), %rbx        # 8-byte Reload
	movq	4360(%rsp), %r14        # 8-byte Reload
	movq	4368(%rsp), %r15        # 8-byte Reload
	movq	4376(%rsp), %r12        # 8-byte Reload
	movq	4384(%rsp), %r13        # 8-byte Reload
	movq	4392(%rsp), %rbp        # 8-byte Reload
	movq	4400(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25456(%rsp)       # 8-byte Spill
	movq	4408(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25448(%rsp)       # 8-byte Spill
	movq	4416(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25440(%rsp)       # 8-byte Spill
	movq	4424(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25432(%rsp)       # 8-byte Spill
	movq	4432(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25424(%rsp)       # 8-byte Spill
	movq	4440(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25416(%rsp)       # 8-byte Spill
	movq	4448(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25408(%rsp)       # 8-byte Spill
	movq	4456(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25400(%rsp)       # 8-byte Spill
	movq	4464(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25392(%rsp)       # 8-byte Spill
	movq	4472(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25384(%rsp)       # 8-byte Spill
	movq	4480(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25376(%rsp)       # 8-byte Spill
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25368(%rsp)       # 8-byte Spill
	movq	4496(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25360(%rsp)       # 8-byte Spill
	movq	4504(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25352(%rsp)       # 8-byte Spill
	movq	4512(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25344(%rsp)       # 8-byte Spill
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25336(%rsp)       # 8-byte Spill
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25248(%rsp)       # 8-byte Spill
	movq	4552(%rsp), %rdx        # 8-byte Reload
	movl	%eax, 4240(%rsp)        # 4-byte Spill
	movl	4540(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	4568(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	4572(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	4576(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	4580(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	4260(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	4264(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	4268(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	4272(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	4276(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	4280(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	4284(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	4288(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	4292(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	4296(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	4300(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	4564(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	4316(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	4320(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	4584(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%rbp, 25464(%rsp)       # 8-byte Spill
	movq	%rdx, 25232(%rsp)       # 8-byte Spill
	movq	%rsi, 4232(%rsp)        # 8-byte Spill
	movq	%rdi, 4224(%rsp)        # 8-byte Spill
	movl	%r8d, 4220(%rsp)        # 4-byte Spill
	movl	%r9d, 25332(%rsp)       # 4-byte Spill
	movq	%r10, 25520(%rsp)       # 8-byte Spill
	movq	%r11, 25512(%rsp)       # 8-byte Spill
	movq	%rbx, 25504(%rsp)       # 8-byte Spill
	movq	%r14, 25496(%rsp)       # 8-byte Spill
	movq	%r15, 25488(%rsp)       # 8-byte Spill
	movq	%r12, 25480(%rsp)       # 8-byte Spill
	movq	%r13, 25472(%rsp)       # 8-byte Spill
	movl	%ecx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.425:                              # %if.end2501
                                        #   in Loop: Header=BB68_424 Depth=1
	movq	4304(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$20362, 38596(%rsp)     # imm = 0x4F8A
	shll	$8, %ecx
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$20363, 38596(%rsp)     # imm = 0x4F8B
	movb	(%rsi), %dil
	movl	$20365, 38596(%rsp)     # imm = 0x4F8D
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$20366, 38596(%rsp)     # imm = 0x4F8E
	movl	4240(%rsp), %r8d        # 4-byte Reload
	addl	$8, %r8d
	movq	4520(%rsp), %r9         # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$20368, 38596(%rsp)     # imm = 0x4F90
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$20370, 38596(%rsp)     # imm = 0x4F92
	movl	4220(%rsp), %r10d       # 4-byte Reload
	addl	$-1, %r10d
	movq	4224(%rsp), %rsi        # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$20372, 38596(%rsp)     # imm = 0x4F94
	movl	12(%rdx), %r10d
	movl	$20374, 38596(%rsp)     # imm = 0x4F96
	addl	$1, %r10d
	movl	%r10d, 12(%rdx)
	movl	$20378, 38596(%rsp)     # imm = 0x4F9A
	cmpl	$0, %r10d
	movl	%ecx, 4216(%rsp)        # 4-byte Spill
	movl	%r8d, 4212(%rsp)        # 4-byte Spill
	jne	.LBB68_427
# %bb.426:                              # %if.then2524
                                        #   in Loop: Header=BB68_424 Depth=1
	movq	4232(%rsp), %rax        # 8-byte Reload
	movl	16(%rax), %ecx
	movl	$20380, 38596(%rsp)     # imm = 0x4F9C
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movl	$20385, 38596(%rsp)     # imm = 0x4FA1
.LBB68_427:                             # %if.end2528
                                        #   in Loop: Header=BB68_424 Depth=1
	movl	4240(%rsp), %eax        # 4-byte Reload
	cmpl	$-8, %eax
	movl	4216(%rsp), %ecx        # 4-byte Reload
	movl	4212(%rsp), %edx        # 4-byte Reload
	movl	4212(%rsp), %esi        # 4-byte Reload
	movl	%ecx, 4252(%rsp)        # 4-byte Spill
	movl	%edx, 4248(%rsp)        # 4-byte Spill
	movl	%esi, 4256(%rsp)        # 4-byte Spill
	jg	.LBB68_423
	jmp	.LBB68_424
.LBB68_428:                             # %while.end2532
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movq	4880(%rsp), %rcx        # 8-byte Reload
	movq	4600(%rsp), %rdx        # 8-byte Reload
	movl	(%rcx,%rdx,4), %esi
	movl	$19326, 38596(%rsp)     # imm = 0x4B7E
	movl	4908(%rsp), %edi        # 4-byte Reload
	subl	%esi, %edi
	cmpl	$257, %edi              # imm = 0x101
	movl	4680(%rsp), %esi        # 4-byte Reload
	movq	4664(%rsp), %r8         # 8-byte Reload
	movq	4688(%rsp), %r9         # 8-byte Reload
	movq	4696(%rsp), %r10        # 8-byte Reload
	movq	4704(%rsp), %r11        # 8-byte Reload
	movq	4712(%rsp), %rbx        # 8-byte Reload
	movq	4720(%rsp), %r14        # 8-byte Reload
	movq	4728(%rsp), %r15        # 8-byte Reload
	movq	4736(%rsp), %r12        # 8-byte Reload
	movq	4744(%rsp), %r13        # 8-byte Reload
	movq	4752(%rsp), %rbp        # 8-byte Reload
	movq	4760(%rsp), %rcx        # 8-byte Reload
	movq	4768(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 25440(%rsp)       # 8-byte Spill
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25424(%rsp)       # 8-byte Spill
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	4792(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	4800(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	4808(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	4816(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	4824(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	4832(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	4840(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	4848(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	4856(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	4864(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	4880(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	4888(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 4208(%rsp)        # 4-byte Spill
	movl	4876(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	4900(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	4904(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	4908(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	4912(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	4612(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	4616(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	4620(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	4624(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	4628(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	4632(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	4636(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	4640(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	4644(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	4648(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	4652(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	4896(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	4656(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	4660(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	4916(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	4208(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movq	%rdx, 25432(%rsp)       # 8-byte Spill
	movl	%edi, 4204(%rsp)        # 4-byte Spill
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	%r8, 25520(%rsp)        # 8-byte Spill
	movq	%r9, 25512(%rsp)        # 8-byte Spill
	movq	%r10, 25504(%rsp)       # 8-byte Spill
	movq	%r11, 25496(%rsp)       # 8-byte Spill
	movq	%rbx, 25488(%rsp)       # 8-byte Spill
	movq	%r14, 25480(%rsp)       # 8-byte Spill
	movq	%r15, 25472(%rsp)       # 8-byte Spill
	movq	%r12, 25464(%rsp)       # 8-byte Spill
	movq	%r13, 25456(%rsp)       # 8-byte Spill
	movq	%rbp, 25448(%rsp)       # 8-byte Spill
	ja	.LBB68_542
# %bb.429:                              # %if.end2545
	movl	4204(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	4864(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %esi
	movl	$20393, 38596(%rsp)     # imm = 0x4FA9
	movl	4680(%rsp), %edi        # 4-byte Reload
	movq	4664(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movq	4696(%rsp), %r9         # 8-byte Reload
	movq	4704(%rsp), %r10        # 8-byte Reload
	movq	4712(%rsp), %r11        # 8-byte Reload
	movq	4720(%rsp), %rbx        # 8-byte Reload
	movq	4728(%rsp), %r14        # 8-byte Reload
	movq	4736(%rsp), %r15        # 8-byte Reload
	movq	4744(%rsp), %r12        # 8-byte Reload
	movq	4752(%rsp), %r13        # 8-byte Reload
	movq	4760(%rsp), %rbp        # 8-byte Reload
	movq	4768(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8720(%rsp)        # 8-byte Spill
	movq	4784(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8712(%rsp)        # 8-byte Spill
	movq	4792(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8704(%rsp)        # 8-byte Spill
	movq	4800(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8696(%rsp)        # 8-byte Spill
	movq	4808(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8688(%rsp)        # 8-byte Spill
	movq	4816(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8680(%rsp)        # 8-byte Spill
	movq	4824(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8672(%rsp)        # 8-byte Spill
	movq	4832(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8664(%rsp)        # 8-byte Spill
	movq	4840(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	movq	4848(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	movq	4856(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8640(%rsp)        # 8-byte Spill
	movq	4864(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8632(%rsp)        # 8-byte Spill
	movq	4880(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8624(%rsp)        # 8-byte Spill
	movq	4888(%rsp), %rax        # 8-byte Reload
	movl	%esi, 4200(%rsp)        # 4-byte Spill
	movl	4876(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8616(%rsp)        # 4-byte Spill
	movl	4900(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8612(%rsp)        # 4-byte Spill
	movl	4904(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8608(%rsp)        # 4-byte Spill
	movl	4908(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8604(%rsp)        # 4-byte Spill
	movl	4912(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8600(%rsp)        # 4-byte Spill
	movl	4612(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8596(%rsp)        # 4-byte Spill
	movl	4616(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8592(%rsp)        # 4-byte Spill
	movl	4620(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8588(%rsp)        # 4-byte Spill
	movl	4624(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8584(%rsp)        # 4-byte Spill
	movl	4628(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8580(%rsp)        # 4-byte Spill
	movl	4200(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8576(%rsp)        # 4-byte Spill
	movl	4636(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8572(%rsp)        # 4-byte Spill
	movl	4640(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8568(%rsp)        # 4-byte Spill
	movl	4644(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8564(%rsp)        # 4-byte Spill
	movl	4648(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8560(%rsp)        # 4-byte Spill
	movl	4652(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8556(%rsp)        # 4-byte Spill
	movl	4896(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8552(%rsp)        # 4-byte Spill
	movl	4656(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8548(%rsp)        # 4-byte Spill
	movl	4660(%rsp), %esi        # 4-byte Reload
	movl	%esi, 8544(%rsp)        # 4-byte Spill
	movl	4916(%rsp), %esi        # 4-byte Reload
	movq	%rax, 8536(%rsp)        # 8-byte Spill
	movq	%rdx, 8528(%rsp)        # 8-byte Spill
	movl	%esi, 8524(%rsp)        # 4-byte Spill
	movl	%edi, 8520(%rsp)        # 4-byte Spill
	movq	%rcx, 8512(%rsp)        # 8-byte Spill
	movq	%r8, 8504(%rsp)         # 8-byte Spill
	movq	%r9, 8496(%rsp)         # 8-byte Spill
	movq	%r10, 8488(%rsp)        # 8-byte Spill
	movq	%r11, 8480(%rsp)        # 8-byte Spill
	movq	%rbx, 8472(%rsp)        # 8-byte Spill
	movq	%r14, 8464(%rsp)        # 8-byte Spill
	movq	%r15, 8456(%rsp)        # 8-byte Spill
	movq	%r12, 8448(%rsp)        # 8-byte Spill
	movq	%r13, 8440(%rsp)        # 8-byte Spill
	movq	%rbp, 8432(%rsp)        # 8-byte Spill
	jmp	.LBB68_331
.LBB68_430:                             # %while.end2551
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$56, %rcx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movl	56(%rdx), %esi
	movl	$20399, 38596(%rsp)     # imm = 0x4FAF
	cmpl	$-1, %esi
	setg	%dil
	movl	8152(%rsp), %r8d        # 4-byte Reload
	cmpl	%r8d, %esi
	setl	%r9b
	andb	%r9b, %dil
	testb	$1, %dil
	movl	8200(%rsp), %esi        # 4-byte Reload
	movq	8184(%rsp), %r10        # 8-byte Reload
	movq	8208(%rsp), %r11        # 8-byte Reload
	movq	8216(%rsp), %rbx        # 8-byte Reload
	movq	8224(%rsp), %r14        # 8-byte Reload
	movq	8232(%rsp), %r15        # 8-byte Reload
	movq	8240(%rsp), %r12        # 8-byte Reload
	movq	8248(%rsp), %r13        # 8-byte Reload
	movq	8256(%rsp), %rbp        # 8-byte Reload
	movq	8264(%rsp), %rdx        # 8-byte Reload
	movq	8272(%rsp), %rdi        # 8-byte Reload
	movq	8280(%rsp), %r8         # 8-byte Reload
	movq	8288(%rsp), %r9         # 8-byte Reload
	movq	%rcx, 4192(%rsp)        # 8-byte Spill
	movq	8296(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25424(%rsp)       # 8-byte Spill
	movq	8304(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	8312(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	8320(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	8328(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	8336(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	8344(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	8352(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	8368(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	8376(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	8384(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	8392(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	8400(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 4188(%rsp)        # 4-byte Spill
	movl	8204(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	8412(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	8416(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	8420(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	8424(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	8140(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	8144(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	8148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	8152(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	8156(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	8160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	8164(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	8168(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	8160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	8176(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	8180(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	8408(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	8192(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	8196(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	8428(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	4188(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movq	%rdx, 25456(%rsp)       # 8-byte Spill
	movq	%r8, 25440(%rsp)        # 8-byte Spill
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	%r10, 25520(%rsp)       # 8-byte Spill
	movq	%r11, 25512(%rsp)       # 8-byte Spill
	movq	%rbx, 25504(%rsp)       # 8-byte Spill
	movq	%r14, 25496(%rsp)       # 8-byte Spill
	movq	%r15, 25488(%rsp)       # 8-byte Spill
	movq	%r12, 25480(%rsp)       # 8-byte Spill
	movq	%r13, 25472(%rsp)       # 8-byte Spill
	movq	%rbp, 25464(%rsp)       # 8-byte Spill
	movq	%rdi, 25448(%rsp)       # 8-byte Spill
	movq	%r9, 25432(%rsp)        # 8-byte Spill
	jne	.LBB68_431
	jmp	.LBB68_542
.LBB68_431:                             # %if.end2560
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	addq	$1096, %rdx             # imm = 0x448
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	$0, 1096(%rsi)
	movl	$20407, 38596(%rsp)     # imm = 0x4FB7
	movq	%rdx, 4176(%rsp)        # 8-byte Spill
	movq	%rcx, 4168(%rsp)        # 8-byte Spill
.LBB68_432:                             # %vector.body7076
                                        # =>This Inner Loop Header: Depth=1
	movq	4168(%rsp), %rax        # 8-byte Reload
	movq	%rax, %rcx
	orq	$1, %rcx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movdqu	64(%rdx,%rcx,4), %xmm0
	movl	$20410, 38596(%rsp)     # imm = 0x4FBA
	movdqu	%xmm0, 1096(%rdx,%rcx,4)
	movl	$20415, 38596(%rsp)     # imm = 0x4FBF
	movq	%rax, %rcx
	orq	$5, %rcx
	movdqu	64(%rdx,%rcx,4), %xmm0
	movl	$20418, 38596(%rsp)     # imm = 0x4FC2
	movdqu	%xmm0, 1096(%rdx,%rcx,4)
	movl	$20423, 38596(%rsp)     # imm = 0x4FC7
	movq	%rax, %rcx
	orq	$9, %rcx
	movdqu	64(%rdx,%rcx,4), %xmm0
	movl	$20426, 38596(%rsp)     # imm = 0x4FCA
	movdqu	%xmm0, 1096(%rdx,%rcx,4)
	movl	$20431, 38596(%rsp)     # imm = 0x4FCF
	movq	%rax, %rcx
	orq	$13, %rcx
	movdqu	64(%rdx,%rcx,4), %xmm0
	movl	$20434, 38596(%rsp)     # imm = 0x4FD2
	movdqu	%xmm0, 1096(%rdx,%rcx,4)
	movl	$20437, 38596(%rsp)     # imm = 0x4FD5
	addq	$16, %rax
	cmpq	$256, %rax              # imm = 0x100
	movq	%rax, 4168(%rsp)        # 8-byte Spill
	jne	.LBB68_432
# %bb.433:                              # %for.end2575
	movl	$1, %eax
	movl	%eax, %ecx
	movq	4176(%rsp), %rdx        # 8-byte Reload
	movl	(%rdx), %eax
	movl	$20444, 38596(%rsp)     # imm = 0x4FDC
	movl	%eax, 4164(%rsp)        # 4-byte Spill
	movq	%rcx, 4152(%rsp)        # 8-byte Spill
.LBB68_434:                             # %for.body2579
                                        # =>This Inner Loop Header: Depth=1
	movq	4152(%rsp), %rax        # 8-byte Reload
	movl	4164(%rsp), %ecx        # 4-byte Reload
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movl	1096(%rdx,%rax,4), %esi
	movl	$20446, 38596(%rsp)     # imm = 0x4FDE
	addl	%ecx, %esi
	movl	%esi, 1096(%rdx,%rax,4)
	movl	$20449, 38596(%rsp)     # imm = 0x4FE1
	movl	1100(%rdx,%rax,4), %ecx
	movl	$20451, 38596(%rsp)     # imm = 0x4FE3
	addl	%esi, %ecx
	movl	%ecx, 1100(%rdx,%rax,4)
	movl	$20454, 38596(%rsp)     # imm = 0x4FE6
	movl	1104(%rdx,%rax,4), %esi
	movl	$20456, 38596(%rsp)     # imm = 0x4FE8
	addl	%ecx, %esi
	movl	%esi, 1104(%rdx,%rax,4)
	movl	$20459, 38596(%rsp)     # imm = 0x4FEB
	movl	1108(%rdx,%rax,4), %ecx
	movl	$20460, 38596(%rsp)     # imm = 0x4FEC
	addl	%esi, %ecx
	movl	%ecx, 1108(%rdx,%rax,4)
	movl	$20467, 38596(%rsp)     # imm = 0x4FF3
	addq	$4, %rax
	cmpq	$257, %rax              # imm = 0x101
	movl	%ecx, 4164(%rsp)        # 4-byte Spill
	movq	%rax, 4152(%rsp)        # 8-byte Spill
	jne	.LBB68_434
# %bb.435:                              # %for.body2594.preheader
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, 4144(%rsp)        # 8-byte Spill
	jmp	.LBB68_436
.LBB68_436:                             # %for.body2594
                                        # =>This Inner Loop Header: Depth=1
	movq	4144(%rsp), %rax        # 8-byte Reload
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	1096(%rcx,%rax,4), %edx
	movl	$20476, 38596(%rsp)     # imm = 0x4FFC
	cmpl	$0, %edx
	setl	%sil
	movl	8152(%rsp), %edi        # 4-byte Reload
	cmpl	%edi, %edx
	setg	%r8b
	orb	%r8b, %sil
	testb	$1, %sil
	movq	%rax, %r9
	movq	%rax, 4136(%rsp)        # 8-byte Spill
	movq	%r9, 4128(%rsp)         # 8-byte Spill
	jne	.LBB68_539
# %bb.437:                              # %for.inc2608
                                        #   in Loop: Header=BB68_436 Depth=1
	movq	4136(%rsp), %rax        # 8-byte Reload
	orq	$1, %rax
	cmpq	$257, %rax              # imm = 0x101
	movq	%rax, 4120(%rsp)        # 8-byte Spill
	jb	.LBB68_543
# %bb.438:                              # %for.end2610
	movq	38576(%rsp), %rax       # 8-byte Reload
	movl	$0, 16(%rax)
	movl	$20478, 38596(%rsp)     # imm = 0x4FFE
	movb	$0, 12(%rax)
	movl	$20480, 38596(%rsp)     # imm = 0x5000
	movl	$-1, 3184(%rax)
	movl	$20481, 38596(%rsp)     # imm = 0x5001
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$2, (%rcx)
	movl	$20483, 38596(%rsp)     # imm = 0x5003
	movl	52(%rax), %edx
	movl	$20486, 38596(%rsp)     # imm = 0x5006
	cmpl	$1, %edx
	jle	.LBB68_440
# %bb.439:                              # %if.then2615
	movl	$6, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.1.81, %rdi
	movq	stderr, %rcx
	movl	$20491, 38596(%rsp)     # imm = 0x500B
	callq	fwrite
	movq	%rax, 4112(%rsp)        # 8-byte Spill
.LBB68_440:                             # %if.end2617
	movq	38576(%rsp), %rax       # 8-byte Reload
	movb	44(%rax), %cl
	movl	$20496, 38596(%rsp)     # imm = 0x5010
	cmpb	$0, %cl
	je	.LBB68_458
# %bb.441:                              # %vector.body7089
	movq	38576(%rsp), %rax       # 8-byte Reload
	movdqu	1096(%rax), %xmm0
	movl	$20499, 38596(%rsp)     # imm = 0x5013
	movdqu	%xmm0, 2124(%rax)
	movl	$20502, 38596(%rsp)     # imm = 0x5016
	movdqu	1112(%rax), %xmm0
	movl	$20505, 38596(%rsp)     # imm = 0x5019
	movdqu	%xmm0, 2140(%rax)
	movl	$20508, 38596(%rsp)     # imm = 0x501C
	movdqu	1128(%rax), %xmm0
	movl	$20511, 38596(%rsp)     # imm = 0x501F
	movdqu	%xmm0, 2156(%rax)
	movl	$20514, 38596(%rsp)     # imm = 0x5022
	movdqu	1144(%rax), %xmm0
	movl	$20517, 38596(%rsp)     # imm = 0x5025
	movdqu	%xmm0, 2172(%rax)
	movl	$20520, 38596(%rsp)     # imm = 0x5028
	movdqu	1160(%rax), %xmm0
	movl	$20523, 38596(%rsp)     # imm = 0x502B
	movdqu	%xmm0, 2188(%rax)
	movl	$20526, 38596(%rsp)     # imm = 0x502E
	movdqu	1176(%rax), %xmm0
	movl	$20529, 38596(%rsp)     # imm = 0x5031
	movdqu	%xmm0, 2204(%rax)
	movl	$20532, 38596(%rsp)     # imm = 0x5034
	movdqu	1192(%rax), %xmm0
	movl	$20535, 38596(%rsp)     # imm = 0x5037
	movdqu	%xmm0, 2220(%rax)
	movl	$20538, 38596(%rsp)     # imm = 0x503A
	movdqu	1208(%rax), %xmm0
	movl	$20541, 38596(%rsp)     # imm = 0x503D
	movdqu	%xmm0, 2236(%rax)
	movl	$20544, 38596(%rsp)     # imm = 0x5040
	movdqu	1224(%rax), %xmm0
	movl	$20547, 38596(%rsp)     # imm = 0x5043
	movdqu	%xmm0, 2252(%rax)
	movl	$20550, 38596(%rsp)     # imm = 0x5046
	movdqu	1240(%rax), %xmm0
	movl	$20553, 38596(%rsp)     # imm = 0x5049
	movdqu	%xmm0, 2268(%rax)
	movl	$20556, 38596(%rsp)     # imm = 0x504C
	movdqu	1256(%rax), %xmm0
	movl	$20559, 38596(%rsp)     # imm = 0x504F
	movdqu	%xmm0, 2284(%rax)
	movl	$20562, 38596(%rsp)     # imm = 0x5052
	movdqu	1272(%rax), %xmm0
	movl	$20565, 38596(%rsp)     # imm = 0x5055
	movdqu	%xmm0, 2300(%rax)
	movl	$20568, 38596(%rsp)     # imm = 0x5058
	movdqu	1288(%rax), %xmm0
	movl	$20571, 38596(%rsp)     # imm = 0x505B
	movdqu	%xmm0, 2316(%rax)
	movl	$20574, 38596(%rsp)     # imm = 0x505E
	movdqu	1304(%rax), %xmm0
	movl	$20577, 38596(%rsp)     # imm = 0x5061
	movdqu	%xmm0, 2332(%rax)
	movl	$20580, 38596(%rsp)     # imm = 0x5064
	movdqu	1320(%rax), %xmm0
	movl	$20583, 38596(%rsp)     # imm = 0x5067
	movdqu	%xmm0, 2348(%rax)
	movl	$20586, 38596(%rsp)     # imm = 0x506A
	movdqu	1336(%rax), %xmm0
	movl	$20589, 38596(%rsp)     # imm = 0x506D
	movdqu	%xmm0, 2364(%rax)
	movl	$20592, 38596(%rsp)     # imm = 0x5070
	movdqu	1352(%rax), %xmm0
	movl	$20595, 38596(%rsp)     # imm = 0x5073
	movdqu	%xmm0, 2380(%rax)
	movl	$20598, 38596(%rsp)     # imm = 0x5076
	movdqu	1368(%rax), %xmm0
	movl	$20601, 38596(%rsp)     # imm = 0x5079
	movdqu	%xmm0, 2396(%rax)
	movl	$20604, 38596(%rsp)     # imm = 0x507C
	movdqu	1384(%rax), %xmm0
	movl	$20607, 38596(%rsp)     # imm = 0x507F
	movdqu	%xmm0, 2412(%rax)
	movl	$20610, 38596(%rsp)     # imm = 0x5082
	movdqu	1400(%rax), %xmm0
	movl	$20613, 38596(%rsp)     # imm = 0x5085
	movdqu	%xmm0, 2428(%rax)
	movl	$20616, 38596(%rsp)     # imm = 0x5088
	movdqu	1416(%rax), %xmm0
	movl	$20619, 38596(%rsp)     # imm = 0x508B
	movdqu	%xmm0, 2444(%rax)
	movl	$20622, 38596(%rsp)     # imm = 0x508E
	movdqu	1432(%rax), %xmm0
	movl	$20625, 38596(%rsp)     # imm = 0x5091
	movdqu	%xmm0, 2460(%rax)
	movl	$20628, 38596(%rsp)     # imm = 0x5094
	movdqu	1448(%rax), %xmm0
	movl	$20631, 38596(%rsp)     # imm = 0x5097
	movdqu	%xmm0, 2476(%rax)
	movl	$20634, 38596(%rsp)     # imm = 0x509A
	movdqu	1464(%rax), %xmm0
	movl	$20637, 38596(%rsp)     # imm = 0x509D
	movdqu	%xmm0, 2492(%rax)
	movl	$20640, 38596(%rsp)     # imm = 0x50A0
	movdqu	1480(%rax), %xmm0
	movl	$20643, 38596(%rsp)     # imm = 0x50A3
	movdqu	%xmm0, 2508(%rax)
	movl	$20646, 38596(%rsp)     # imm = 0x50A6
	movdqu	1496(%rax), %xmm0
	movl	$20649, 38596(%rsp)     # imm = 0x50A9
	movdqu	%xmm0, 2524(%rax)
	movl	$20652, 38596(%rsp)     # imm = 0x50AC
	movdqu	1512(%rax), %xmm0
	movl	$20655, 38596(%rsp)     # imm = 0x50AF
	movdqu	%xmm0, 2540(%rax)
	movl	$20658, 38596(%rsp)     # imm = 0x50B2
	movdqu	1528(%rax), %xmm0
	movl	$20661, 38596(%rsp)     # imm = 0x50B5
	movdqu	%xmm0, 2556(%rax)
	movl	$20664, 38596(%rsp)     # imm = 0x50B8
	movdqu	1544(%rax), %xmm0
	movl	$20667, 38596(%rsp)     # imm = 0x50BB
	movdqu	%xmm0, 2572(%rax)
	movl	$20670, 38596(%rsp)     # imm = 0x50BE
	movdqu	1560(%rax), %xmm0
	movl	$20673, 38596(%rsp)     # imm = 0x50C1
	movdqu	%xmm0, 2588(%rax)
	movl	$20676, 38596(%rsp)     # imm = 0x50C4
	movdqu	1576(%rax), %xmm0
	movl	$20679, 38596(%rsp)     # imm = 0x50C7
	movdqu	%xmm0, 2604(%rax)
	movl	$20682, 38596(%rsp)     # imm = 0x50CA
	movdqu	1592(%rax), %xmm0
	movl	$20685, 38596(%rsp)     # imm = 0x50CD
	movdqu	%xmm0, 2620(%rax)
	movl	$20688, 38596(%rsp)     # imm = 0x50D0
	movdqu	1608(%rax), %xmm0
	movl	$20691, 38596(%rsp)     # imm = 0x50D3
	movdqu	%xmm0, 2636(%rax)
	movl	$20694, 38596(%rsp)     # imm = 0x50D6
	movdqu	1624(%rax), %xmm0
	movl	$20697, 38596(%rsp)     # imm = 0x50D9
	movdqu	%xmm0, 2652(%rax)
	movl	$20700, 38596(%rsp)     # imm = 0x50DC
	movdqu	1640(%rax), %xmm0
	movl	$20703, 38596(%rsp)     # imm = 0x50DF
	movdqu	%xmm0, 2668(%rax)
	movl	$20706, 38596(%rsp)     # imm = 0x50E2
	movdqu	1656(%rax), %xmm0
	movl	$20709, 38596(%rsp)     # imm = 0x50E5
	movdqu	%xmm0, 2684(%rax)
	movl	$20712, 38596(%rsp)     # imm = 0x50E8
	movdqu	1672(%rax), %xmm0
	movl	$20715, 38596(%rsp)     # imm = 0x50EB
	movdqu	%xmm0, 2700(%rax)
	movl	$20718, 38596(%rsp)     # imm = 0x50EE
	movdqu	1688(%rax), %xmm0
	movl	$20721, 38596(%rsp)     # imm = 0x50F1
	movdqu	%xmm0, 2716(%rax)
	movl	$20724, 38596(%rsp)     # imm = 0x50F4
	movdqu	1704(%rax), %xmm0
	movl	$20727, 38596(%rsp)     # imm = 0x50F7
	movdqu	%xmm0, 2732(%rax)
	movl	$20730, 38596(%rsp)     # imm = 0x50FA
	movdqu	1720(%rax), %xmm0
	movl	$20733, 38596(%rsp)     # imm = 0x50FD
	movdqu	%xmm0, 2748(%rax)
	movl	$20736, 38596(%rsp)     # imm = 0x5100
	movdqu	1736(%rax), %xmm0
	movl	$20739, 38596(%rsp)     # imm = 0x5103
	movdqu	%xmm0, 2764(%rax)
	movl	$20742, 38596(%rsp)     # imm = 0x5106
	movdqu	1752(%rax), %xmm0
	movl	$20745, 38596(%rsp)     # imm = 0x5109
	movdqu	%xmm0, 2780(%rax)
	movl	$20748, 38596(%rsp)     # imm = 0x510C
	movdqu	1768(%rax), %xmm0
	movl	$20751, 38596(%rsp)     # imm = 0x510F
	movdqu	%xmm0, 2796(%rax)
	movl	$20754, 38596(%rsp)     # imm = 0x5112
	movdqu	1784(%rax), %xmm0
	movl	$20757, 38596(%rsp)     # imm = 0x5115
	movdqu	%xmm0, 2812(%rax)
	movl	$20760, 38596(%rsp)     # imm = 0x5118
	movdqu	1800(%rax), %xmm0
	movl	$20763, 38596(%rsp)     # imm = 0x511B
	movdqu	%xmm0, 2828(%rax)
	movl	$20766, 38596(%rsp)     # imm = 0x511E
	movdqu	1816(%rax), %xmm0
	movl	$20769, 38596(%rsp)     # imm = 0x5121
	movdqu	%xmm0, 2844(%rax)
	movl	$20772, 38596(%rsp)     # imm = 0x5124
	movdqu	1832(%rax), %xmm0
	movl	$20775, 38596(%rsp)     # imm = 0x5127
	movdqu	%xmm0, 2860(%rax)
	movl	$20778, 38596(%rsp)     # imm = 0x512A
	movdqu	1848(%rax), %xmm0
	movl	$20781, 38596(%rsp)     # imm = 0x512D
	movdqu	%xmm0, 2876(%rax)
	movl	$20784, 38596(%rsp)     # imm = 0x5130
	movdqu	1864(%rax), %xmm0
	movl	$20787, 38596(%rsp)     # imm = 0x5133
	movdqu	%xmm0, 2892(%rax)
	movl	$20790, 38596(%rsp)     # imm = 0x5136
	movdqu	1880(%rax), %xmm0
	movl	$20793, 38596(%rsp)     # imm = 0x5139
	movdqu	%xmm0, 2908(%rax)
	movl	$20796, 38596(%rsp)     # imm = 0x513C
	movdqu	1896(%rax), %xmm0
	movl	$20799, 38596(%rsp)     # imm = 0x513F
	movdqu	%xmm0, 2924(%rax)
	movl	$20802, 38596(%rsp)     # imm = 0x5142
	movdqu	1912(%rax), %xmm0
	movl	$20805, 38596(%rsp)     # imm = 0x5145
	movdqu	%xmm0, 2940(%rax)
	movl	$20808, 38596(%rsp)     # imm = 0x5148
	movdqu	1928(%rax), %xmm0
	movl	$20811, 38596(%rsp)     # imm = 0x514B
	movdqu	%xmm0, 2956(%rax)
	movl	$20814, 38596(%rsp)     # imm = 0x514E
	movdqu	1944(%rax), %xmm0
	movl	$20817, 38596(%rsp)     # imm = 0x5151
	movdqu	%xmm0, 2972(%rax)
	movl	$20820, 38596(%rsp)     # imm = 0x5154
	movdqu	1960(%rax), %xmm0
	movl	$20823, 38596(%rsp)     # imm = 0x5157
	movdqu	%xmm0, 2988(%rax)
	movl	$20826, 38596(%rsp)     # imm = 0x515A
	movdqu	1976(%rax), %xmm0
	movl	$20829, 38596(%rsp)     # imm = 0x515D
	movdqu	%xmm0, 3004(%rax)
	movl	$20832, 38596(%rsp)     # imm = 0x5160
	movdqu	1992(%rax), %xmm0
	movl	$20835, 38596(%rsp)     # imm = 0x5163
	movdqu	%xmm0, 3020(%rax)
	movl	$20838, 38596(%rsp)     # imm = 0x5166
	movdqu	2008(%rax), %xmm0
	movl	$20841, 38596(%rsp)     # imm = 0x5169
	movdqu	%xmm0, 3036(%rax)
	movl	$20844, 38596(%rsp)     # imm = 0x516C
	movdqu	2024(%rax), %xmm0
	movl	$20847, 38596(%rsp)     # imm = 0x516F
	movdqu	%xmm0, 3052(%rax)
	movl	$20850, 38596(%rsp)     # imm = 0x5172
	movdqu	2040(%rax), %xmm0
	movl	$20853, 38596(%rsp)     # imm = 0x5175
	movdqu	%xmm0, 3068(%rax)
	movl	$20856, 38596(%rsp)     # imm = 0x5178
	movdqu	2056(%rax), %xmm0
	movl	$20859, 38596(%rsp)     # imm = 0x517B
	movdqu	%xmm0, 3084(%rax)
	movl	$20862, 38596(%rsp)     # imm = 0x517E
	movdqu	2072(%rax), %xmm0
	movl	$20865, 38596(%rsp)     # imm = 0x5181
	movdqu	%xmm0, 3100(%rax)
	movl	$20868, 38596(%rsp)     # imm = 0x5184
	movdqu	2088(%rax), %xmm0
	movl	$20871, 38596(%rsp)     # imm = 0x5187
	movdqu	%xmm0, 3116(%rax)
	movl	$20874, 38596(%rsp)     # imm = 0x518A
	movdqu	2104(%rax), %xmm0
	movl	$20877, 38596(%rsp)     # imm = 0x518D
	movdqu	%xmm0, 3132(%rax)
	movl	$20879, 38596(%rsp)     # imm = 0x518F
	movl	2120(%rax), %ecx
	movl	$20881, 38596(%rsp)     # imm = 0x5191
	movl	%ecx, 3148(%rax)
	movl	$20890, 38596(%rsp)     # imm = 0x519A
	addq	$3160, %rax             # imm = 0xC58
	movq	38576(%rsp), %rdx       # 8-byte Reload
	addq	$3168, %rdx             # imm = 0xC60
	movl	8152(%rsp), %ecx        # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 4104(%rsp)        # 8-byte Spill
	movq	%rdx, 4096(%rsp)        # 8-byte Spill
	jle	.LBB68_447
# %bb.442:                              # %for.body2636.lr.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	8152(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edx
	movl	%edx, %esi
	movq	%rsi, 4088(%rsp)        # 8-byte Spill
	movq	%rcx, 4080(%rsp)        # 8-byte Spill
.LBB68_443:                             # %for.body2636
                                        # =>This Inner Loop Header: Depth=1
	movq	4080(%rsp), %rax        # 8-byte Reload
	movq	4104(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$20892, 38596(%rsp)     # imm = 0x519C
	movw	(%rdx,%rax,2), %si
	movl	$20896, 38596(%rsp)     # imm = 0x51A0
	andw	$255, %si
	movzwl	%si, %edi
	movl	%edi, %r8d
	movq	38576(%rsp), %r9        # 8-byte Reload
	addq	$2124, %r9              # imm = 0x84C
	movq	%r8, %r10
	shlq	$2, %r10
	addq	%r10, %r9
	movq	38576(%rsp), %r10       # 8-byte Reload
	movl	2124(%r10,%r8,4), %edi
	movl	$20898, 38596(%rsp)     # imm = 0x51A2
	movw	%di, %si
	movw	%si, (%rdx,%rax,2)
	movl	$20901, 38596(%rsp)     # imm = 0x51A5
	movq	%rax, %rdx
	andq	$1, %rdx
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	(%r8), %r11
	movl	$20905, 38596(%rsp)     # imm = 0x51A9
	movq	%rax, %rbx
	shrq	$1, %rbx
	andq	$2147483647, %rbx       # imm = 0x7FFFFFFF
	movq	%r11, %r14
	addq	%rbx, %r14
	movb	(%r11,%rbx), %bpl
	movl	$20917, 38596(%rsp)     # imm = 0x51B5
	movzbl	%bpl, %r15d
	cmpq	$0, %rdx
	movq	%rax, 4072(%rsp)        # 8-byte Spill
	movl	%edi, 4068(%rsp)        # 4-byte Spill
	movq	%r9, 4056(%rsp)         # 8-byte Spill
	movl	%r15d, 4052(%rsp)       # 4-byte Spill
	movq	%r14, 4040(%rsp)        # 8-byte Spill
	jne	.LBB68_445
# %bb.444:                              # %if.then2652
                                        #   in Loop: Header=BB68_443 Depth=1
	movl	4052(%rsp), %eax        # 4-byte Reload
	andl	$240, %eax
	movl	4068(%rsp), %ecx        # 4-byte Reload
	sarl	$16, %ecx
	orl	%ecx, %eax
	movl	%eax, 4036(%rsp)        # 4-byte Spill
	jmp	.LBB68_446
.LBB68_445:                             # %if.else2669
                                        #   in Loop: Header=BB68_443 Depth=1
	movl	4052(%rsp), %eax        # 4-byte Reload
	andl	$15, %eax
	movl	4068(%rsp), %ecx        # 4-byte Reload
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movl	%eax, 4036(%rsp)        # 4-byte Spill
.LBB68_446:                             # %if.end2687
                                        #   in Loop: Header=BB68_443 Depth=1
	movl	4036(%rsp), %eax        # 4-byte Reload
	movb	%al, %cl
	movq	4040(%rsp), %rdx        # 8-byte Reload
	movb	%cl, (%rdx)
	movl	$20920, 38596(%rsp)     # imm = 0x51B8
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %eax
	movl	$20922, 38596(%rsp)     # imm = 0x51BA
	addl	$1, %eax
	movl	%eax, (%rsi)
	movl	$20925, 38596(%rsp)     # imm = 0x51BD
	movq	4072(%rsp), %rdi        # 8-byte Reload
	addq	$1, %rdi
	movq	4088(%rsp), %r8         # 8-byte Reload
	cmpq	%r8, %rdi
	movq	%rdi, 4080(%rsp)        # 8-byte Spill
	jne	.LBB68_443
.LBB68_447:                             # %for.end2694
	movq	4192(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$20926, 38596(%rsp)     # imm = 0x51BE
	movq	4104(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$20929, 38596(%rsp)     # imm = 0x51C1
	movslq	%ecx, %rdi
	movw	(%rsi,%rdi,2), %r8w
	movl	$20931, 38596(%rsp)     # imm = 0x51C3
	movzwl	%r8w, %r9d
	movq	4096(%rsp), %rdi        # 8-byte Reload
	movq	(%rdi), %r10
	movl	$20935, 38596(%rsp)     # imm = 0x51C7
	movl	%ecx, %r11d
	sarl	$1, %r11d
	movslq	%r11d, %rbx
	movb	(%r10,%rbx), %bpl
	movl	$20953, 38596(%rsp)     # imm = 0x51D9
	movzbl	%bpl, %r11d
	movl	%ecx, %r14d
	shll	$2, %r14d
	andl	$4, %r14d
	movl	%ecx, 4032(%rsp)        # 4-byte Spill
	movl	%r14d, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %r11d
	shll	$16, %r11d
	andl	$983040, %r11d          # imm = 0xF0000
	orl	%r9d, %r11d
	movl	4032(%rsp), %r9d        # 4-byte Reload
	movq	%r10, 4024(%rsp)        # 8-byte Spill
	movq	%rsi, 4016(%rsp)        # 8-byte Spill
	movl	%r11d, 4012(%rsp)       # 4-byte Spill
	movl	%r9d, 4008(%rsp)        # 4-byte Spill
.LBB68_448:                             # %do.body2711
                                        # =>This Inner Loop Header: Depth=1
	movl	4008(%rsp), %eax        # 4-byte Reload
	movl	4012(%rsp), %ecx        # 4-byte Reload
	movq	4016(%rsp), %rdx        # 8-byte Reload
	movq	4024(%rsp), %rsi        # 8-byte Reload
	movslq	%ecx, %rdi
	movw	(%rdx,%rdi,2), %r8w
	movl	$20958, 38596(%rsp)     # imm = 0x51DE
	movzwl	%r8w, %r9d
	movl	%ecx, %r10d
	sarl	$1, %r10d
	movslq	%r10d, %r11
	movq	%rsi, %rbx
	addq	%r11, %rbx
	movb	(%rsi,%r11), %bpl
	movl	$20966, 38596(%rsp)     # imm = 0x51E6
	movzbl	%bpl, %r10d
	movl	%ecx, %r14d
	shll	$2, %r14d
	andl	$4, %r14d
	movl	%ecx, 4004(%rsp)        # 4-byte Spill
	movl	%r14d, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %r10d
	shll	$16, %r10d
	andl	$983040, %r10d          # imm = 0xF0000
	orl	%r9d, %r10d
	movw	%ax, %r8w
	movw	%r8w, (%rdx,%rdi,2)
	movl	$20969, 38596(%rsp)     # imm = 0x51E9
	movl	4004(%rsp), %r9d        # 4-byte Reload
	andl	$1, %r9d
	movb	(%rsi,%r11), %cl
	movl	$20981, 38596(%rsp)     # imm = 0x51F5
	movzbl	%cl, %r14d
	cmpl	$0, %r9d
	movl	%eax, 4000(%rsp)        # 4-byte Spill
	movq	%rbx, 3992(%rsp)        # 8-byte Spill
	movl	%r10d, 3988(%rsp)       # 4-byte Spill
	movl	%r14d, 3984(%rsp)       # 4-byte Spill
	jne	.LBB68_450
# %bb.449:                              # %if.then2736
                                        #   in Loop: Header=BB68_448 Depth=1
	movl	3984(%rsp), %eax        # 4-byte Reload
	andl	$240, %eax
	movl	4000(%rsp), %ecx        # 4-byte Reload
	sarl	$16, %ecx
	orl	%ecx, %eax
	movl	%eax, 3980(%rsp)        # 4-byte Spill
	jmp	.LBB68_451
.LBB68_450:                             # %if.else2750
                                        #   in Loop: Header=BB68_448 Depth=1
	movl	3984(%rsp), %eax        # 4-byte Reload
	andl	$15, %eax
	movl	4000(%rsp), %ecx        # 4-byte Reload
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movl	%eax, 3980(%rsp)        # 4-byte Spill
.LBB68_451:                             # %if.end2765
                                        #   in Loop: Header=BB68_448 Depth=1
	movl	3980(%rsp), %eax        # 4-byte Reload
	movb	%al, %cl
	movq	3992(%rsp), %rdx        # 8-byte Reload
	movb	%cl, (%rdx)
	movl	$20984, 38596(%rsp)     # imm = 0x51F8
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movl	(%rsi), %eax
	movl	$20947, 38596(%rsp)     # imm = 0x51D3
	movl	4004(%rsp), %edi        # 4-byte Reload
	cmpl	%eax, %edi
	je	.LBB68_453
# %bb.452:                              # %if.end2765.do.body2711_crit_edge
                                        #   in Loop: Header=BB68_448 Depth=1
	movq	4104(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movl	$20945, 38596(%rsp)     # imm = 0x51D1
	movq	4096(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$20989, 38596(%rsp)     # imm = 0x51FD
	movl	3988(%rsp), %edi        # 4-byte Reload
	movl	4004(%rsp), %r8d        # 4-byte Reload
	movq	%rsi, 4024(%rsp)        # 8-byte Spill
	movq	%rcx, 4016(%rsp)        # 8-byte Spill
	movl	%edi, 4012(%rsp)        # 4-byte Spill
	movl	%r8d, 4008(%rsp)        # 4-byte Spill
	jmp	.LBB68_448
.LBB68_453:                             # %do.end2770
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$60, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	4004(%rsp), %edx        # 4-byte Reload
	movl	%edx, 60(%rcx)
	movl	$20991, 38596(%rsp)     # imm = 0x51FF
	addq	$1092, %rcx             # imm = 0x444
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	$0, 1092(%rsi)
	movl	$20993, 38596(%rsp)     # imm = 0x5201
	movb	20(%rsi), %dil
	movl	$20997, 38596(%rsp)     # imm = 0x5205
	cmpb	$0, %dil
	movq	%rax, 3968(%rsp)        # 8-byte Spill
	movq	%rcx, 3960(%rsp)        # 8-byte Spill
	je	.LBB68_457
# %bb.454:                              # %if.then2774
	movq	38576(%rsp), %rax       # 8-byte Reload
	addq	$24, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	$0, 24(%rcx)
	movl	$20999, 38596(%rsp)     # imm = 0x5207
	addq	$28, %rcx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movl	$0, 28(%rdx)
	movl	$21002, 38596(%rsp)     # imm = 0x520A
	movl	4004(%rsp), %edi        # 4-byte Reload
	movq	4176(%rsp), %rsi        # 8-byte Reload
	movq	%rax, 3952(%rsp)        # 8-byte Spill
	movq	%rcx, 3944(%rsp)        # 8-byte Spill
	callq	BZ2_indexIntoF
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$64, %rcx
	movq	38576(%rsp), %rdx       # 8-byte Reload
	movl	%eax, 64(%rdx)
	movl	$21003, 38596(%rsp)     # imm = 0x520B
	movq	4104(%rsp), %rsi        # 8-byte Reload
	movq	(%rsi), %r8
	movl	$21004, 38596(%rsp)     # imm = 0x520C
	movq	3968(%rsp), %r9         # 8-byte Reload
	movl	(%r9), %edi
	movl	$21007, 38596(%rsp)     # imm = 0x520F
	movl	%edi, %r10d
	movl	%r10d, %r11d
	movw	(%r8,%r11,2), %bx
	movl	$21009, 38596(%rsp)     # imm = 0x5211
	movzwl	%bx, %r10d
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	(%r8), %r11
	movl	$21013, 38596(%rsp)     # imm = 0x5215
	movl	%edi, %ebp
	shrl	$1, %ebp
	movl	%ebp, %ebp
	movl	%ebp, %r14d
	movb	(%r11,%r14), %r15b
	movl	$21021, 38596(%rsp)     # imm = 0x521D
	movzbl	%r15b, %ebp
	shll	$2, %edi
	andl	$4, %edi
	movq	%rcx, 3936(%rsp)        # 8-byte Spill
	movl	%edi, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %ebp
	shll	$16, %ebp
	andl	$983040, %ebp           # imm = 0xF0000
	orl	%r10d, %ebp
	movl	%ebp, (%r9)
	movl	$21022, 38596(%rsp)     # imm = 0x521E
	movq	3960(%rsp), %r11        # 8-byte Reload
	movl	(%r11), %edi
	movl	$21024, 38596(%rsp)     # imm = 0x5220
	addl	$1, %edi
	movl	%edi, (%r11)
	movl	$21025, 38596(%rsp)     # imm = 0x5221
	movl	24(%rdx), %edi
	movl	$21028, 38596(%rsp)     # imm = 0x5224
	cmpl	$0, %edi
	movl	%eax, 3932(%rsp)        # 4-byte Spill
	movl	%edi, 3928(%rsp)        # 4-byte Spill
	jne	.LBB68_456
# %bb.455:                              # %if.then2802
	xorl	%eax, %eax
	movq	3944(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$21031, 38596(%rsp)     # imm = 0x5227
	movslq	%edx, %rsi
	movl	BZ2_rNums(,%rsi,4), %edi
	movl	$21032, 38596(%rsp)     # imm = 0x5228
	movq	3952(%rsp), %rsi        # 8-byte Reload
	movl	%edi, (%rsi)
	movl	$21035, 38596(%rsp)     # imm = 0x522B
	addl	$1, %edx
	cmpl	$512, %edx              # imm = 0x200
	cmovel	%eax, %edx
	movl	%edx, (%rcx)
	movl	$21040, 38596(%rsp)     # imm = 0x5230
	movl	%edi, 3928(%rsp)        # 4-byte Spill
.LBB68_456:                             # %if.end2815
	movl	3928(%rsp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	addl	$-1, %eax
	movq	3952(%rsp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	$21044, 38596(%rsp)     # imm = 0x5234
	cmpl	$1, %eax
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %eax
	movl	3932(%rsp), %edi        # 4-byte Reload
	xorl	%eax, %edi
	movq	3936(%rsp), %r8         # 8-byte Reload
	movl	%edi, (%r8)
	movl	$21048, 38596(%rsp)     # imm = 0x5238
	movl	8200(%rsp), %eax        # 4-byte Reload
	movq	8184(%rsp), %r9         # 8-byte Reload
	movq	8208(%rsp), %r10        # 8-byte Reload
	movq	8216(%rsp), %r11        # 8-byte Reload
	movq	8224(%rsp), %rbx        # 8-byte Reload
	movq	8232(%rsp), %r14        # 8-byte Reload
	movq	8240(%rsp), %r15        # 8-byte Reload
	movq	8248(%rsp), %r12        # 8-byte Reload
	movq	8256(%rsp), %r13        # 8-byte Reload
	movq	8264(%rsp), %rbp        # 8-byte Reload
	movq	8272(%rsp), %rdx        # 8-byte Reload
	movq	8280(%rsp), %rsi        # 8-byte Reload
	movq	8288(%rsp), %rdi        # 8-byte Reload
	movq	8296(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 25448(%rsp)       # 8-byte Spill
	movq	8304(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25416(%rsp)       # 8-byte Spill
	movq	8312(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25408(%rsp)       # 8-byte Spill
	movq	8320(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25400(%rsp)       # 8-byte Spill
	movq	8328(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25392(%rsp)       # 8-byte Spill
	movq	8336(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25384(%rsp)       # 8-byte Spill
	movq	8344(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25376(%rsp)       # 8-byte Spill
	movq	8352(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25368(%rsp)       # 8-byte Spill
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25360(%rsp)       # 8-byte Spill
	movq	8368(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25352(%rsp)       # 8-byte Spill
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25344(%rsp)       # 8-byte Spill
	movq	8384(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25336(%rsp)       # 8-byte Spill
	movq	8392(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, 25248(%rsp)       # 8-byte Spill
	movq	8400(%rsp), %rdx        # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	8204(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	8412(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	8416(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	8420(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	8424(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	8140(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	8144(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	8148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	8152(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	8156(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	8160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	8164(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	8168(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	8160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	8176(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	8180(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	8408(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	8192(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	3988(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	4004(%rsp), %eax        # 4-byte Reload
	movq	%rdi, 25432(%rsp)       # 8-byte Spill
	movq	%rdx, 25232(%rsp)       # 8-byte Spill
	movq	%r8, 25424(%rsp)        # 8-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%r9, 25520(%rsp)        # 8-byte Spill
	movq	%r10, 25512(%rsp)       # 8-byte Spill
	movq	%r11, 25504(%rsp)       # 8-byte Spill
	movq	%rbx, 25496(%rsp)       # 8-byte Spill
	movq	%r14, 25488(%rsp)       # 8-byte Spill
	movq	%r15, 25480(%rsp)       # 8-byte Spill
	movq	%r12, 25472(%rsp)       # 8-byte Spill
	movq	%r13, 25464(%rsp)       # 8-byte Spill
	movq	%rbp, 25456(%rsp)       # 8-byte Spill
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movl	%ecx, 25244(%rsp)       # 4-byte Spill
	jmp	.LBB68_542
.LBB68_457:                             # %if.else2822
	movl	4004(%rsp), %edi        # 4-byte Reload
	movq	4176(%rsp), %rsi        # 8-byte Reload
	callq	BZ2_indexIntoF
	xorl	%edi, %edi
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 64(%rsi)
	movl	$21049, 38596(%rsp)     # imm = 0x5239
	movq	4104(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movl	$21050, 38596(%rsp)     # imm = 0x523A
	movq	3968(%rsp), %r8         # 8-byte Reload
	movl	(%r8), %eax
	movl	$21053, 38596(%rsp)     # imm = 0x523D
	movl	%eax, %r9d
	movl	%r9d, %r10d
	movw	(%rdx,%r10,2), %r11w
	movl	$21055, 38596(%rsp)     # imm = 0x523F
	movzwl	%r11w, %r9d
	movq	4096(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %r10
	movl	$21059, 38596(%rsp)     # imm = 0x5243
	movl	%eax, %ebx
	shrl	$1, %ebx
	movl	%ebx, %ebx
	movl	%ebx, %r14d
	movb	(%r10,%r14), %bpl
	movl	$21067, 38596(%rsp)     # imm = 0x524B
	movzbl	%bpl, %ebx
	shll	$2, %eax
	andl	$4, %eax
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %ebx
	shll	$16, %ebx
	andl	$983040, %ebx           # imm = 0xF0000
	orl	%r9d, %ebx
	movl	%ebx, (%r8)
	movl	$21068, 38596(%rsp)     # imm = 0x524C
	movq	3960(%rsp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	$21070, 38596(%rsp)     # imm = 0x524E
	addl	$1, %eax
	movl	%eax, (%r10)
	movl	$21074, 38596(%rsp)     # imm = 0x5252
	movl	8200(%rsp), %eax        # 4-byte Reload
	movq	8184(%rsp), %r14        # 8-byte Reload
	movq	8208(%rsp), %r15        # 8-byte Reload
	movq	8216(%rsp), %r12        # 8-byte Reload
	movq	8224(%rsp), %r13        # 8-byte Reload
	movq	8232(%rsp), %rcx        # 8-byte Reload
	movq	8240(%rsp), %rdx        # 8-byte Reload
	movq	8248(%rsp), %rsi        # 8-byte Reload
	movq	8256(%rsp), %r8         # 8-byte Reload
	movq	8264(%rsp), %r9         # 8-byte Reload
	movq	8272(%rsp), %r10        # 8-byte Reload
	movq	8280(%rsp), %r11        # 8-byte Reload
	movq	8288(%rsp), %rbp        # 8-byte Reload
	movq	8296(%rsp), %rbx        # 8-byte Reload
	movq	%rcx, 25488(%rsp)       # 8-byte Spill
	movq	8304(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	8312(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	8320(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	8328(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	8336(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	8344(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	8352(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	8368(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	8376(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	8384(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	8392(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	8400(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	8204(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	8412(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	8416(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	8420(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	8424(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	8140(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	8144(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	8148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	8152(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	8156(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	8160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	8164(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	8168(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	8160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	8176(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	8180(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	8408(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	8192(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	3988(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	4004(%rsp), %eax        # 4-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	%rbx, 25424(%rsp)       # 8-byte Spill
	movq	%rdx, 25480(%rsp)       # 8-byte Spill
	movq	%r8, 25464(%rsp)        # 8-byte Spill
	movq	%r10, 25448(%rsp)       # 8-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%r14, 25520(%rsp)       # 8-byte Spill
	movq	%r15, 25512(%rsp)       # 8-byte Spill
	movq	%r12, 25504(%rsp)       # 8-byte Spill
	movq	%r13, 25496(%rsp)       # 8-byte Spill
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movq	%r9, 25456(%rsp)        # 8-byte Spill
	movq	%r11, 25440(%rsp)       # 8-byte Spill
	movq	%rbp, 25432(%rsp)       # 8-byte Spill
	movl	%edi, 25244(%rsp)       # 4-byte Spill
	jmp	.LBB68_542
.LBB68_458:                             # %if.else2850
	xorl	%eax, %eax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movq	3152(%rcx), %rdx
	movl	$21076, 38596(%rsp)     # imm = 0x5254
	movl	8152(%rsp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	movq	%rdx, 3920(%rsp)        # 8-byte Spill
	movl	%eax, 3916(%rsp)        # 4-byte Spill
	jle	.LBB68_462
# %bb.459:                              # %for.body2854.lr.ph
	movl	$1, %eax
	movq	3920(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$21080, 38596(%rsp)     # imm = 0x5258
	andl	$255, %edx
	movl	%edx, %edx
	movl	%edx, %esi
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movl	1096(%rdi,%rsi,4), %edx
	movl	$21082, 38596(%rsp)     # imm = 0x525A
	addl	$1, %edx
	movl	%edx, 1096(%rdi,%rsi,4)
	movl	$21090, 38596(%rsp)     # imm = 0x5262
	movl	8152(%rsp), %edx        # 4-byte Reload
	movl	%edx, %r8d
	movl	%r8d, %esi
	cmpl	$1, %edx
	movq	%rsi, 3904(%rsp)        # 8-byte Spill
	movl	%eax, 3916(%rsp)        # 4-byte Spill
	je	.LBB68_462
# %bb.460:                              # %for.body2854.preheader
	movl	$1, %eax
	movl	%eax, %ecx
	movq	%rcx, 3896(%rsp)        # 8-byte Spill
	jmp	.LBB68_461
.LBB68_461:                             # %for.body2854
                                        # =>This Inner Loop Header: Depth=1
	movq	3896(%rsp), %rax        # 8-byte Reload
	movq	3920(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx,%rax,4), %edx
	movl	$21096, 38596(%rsp)     # imm = 0x5268
	movl	%eax, %esi
	shll	$8, %esi
	andl	$255, %edx
	movl	%edx, %edx
	movl	%edx, %edi
	movq	38576(%rsp), %r8        # 8-byte Reload
	movl	1096(%r8,%rdi,4), %edx
	movl	$21099, 38596(%rsp)     # imm = 0x526B
	movslq	%edx, %r9
	movl	(%rcx,%r9,4), %edx
	movl	$21101, 38596(%rsp)     # imm = 0x526D
	orl	%esi, %edx
	movl	%edx, (%rcx,%r9,4)
	movl	$21102, 38596(%rsp)     # imm = 0x526E
	movl	1096(%r8,%rdi,4), %edx
	movl	$21104, 38596(%rsp)     # imm = 0x5270
	addl	$1, %edx
	movl	%edx, 1096(%r8,%rdi,4)
	movl	$21108, 38596(%rsp)     # imm = 0x5274
	addq	$1, %rax
	movq	3904(%rsp), %rdi        # 8-byte Reload
	cmpq	%rdi, %rax
	movl	8152(%rsp), %edx        # 4-byte Reload
	movq	%rax, 3896(%rsp)        # 8-byte Spill
	movl	%edx, 3916(%rsp)        # 4-byte Spill
	jne	.LBB68_461
.LBB68_462:                             # %for.end2874
	movl	3916(%rsp), %eax        # 4-byte Reload
	movq	4192(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %edx
	movl	$21111, 38596(%rsp)     # imm = 0x5277
	movslq	%edx, %rsi
	movq	3920(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi,%rsi,4), %edx
	movl	$21114, 38596(%rsp)     # imm = 0x527A
	shrl	$8, %edx
	movq	38576(%rsp), %rsi       # 8-byte Reload
	addq	$60, %rsi
	movq	38576(%rsp), %r8        # 8-byte Reload
	movl	%edx, 60(%r8)
	movl	$21116, 38596(%rsp)     # imm = 0x527C
	addq	$1092, %r8              # imm = 0x444
	movq	38576(%rsp), %r9        # 8-byte Reload
	movl	$0, 1092(%r9)
	movl	$21118, 38596(%rsp)     # imm = 0x527E
	movb	20(%r9), %r10b
	movl	$21122, 38596(%rsp)     # imm = 0x5282
	cmpb	$0, %r10b
	movl	%eax, 3892(%rsp)        # 4-byte Spill
	movl	%edx, 3888(%rsp)        # 4-byte Spill
	movq	%rsi, 3880(%rsp)        # 8-byte Spill
	movq	%r8, 3872(%rsp)         # 8-byte Spill
	je	.LBB68_464
# %bb.463:                              # %if.end2917
	xorl	%eax, %eax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	$0, 24(%rcx)
	movl	$21124, 38596(%rsp)     # imm = 0x5284
	movl	$0, 28(%rcx)
	movl	$21127, 38596(%rsp)     # imm = 0x5287
	movl	3888(%rsp), %edx        # 4-byte Reload
	movl	%edx, %esi
	movl	%esi, %edi
	movq	3920(%rsp), %r8         # 8-byte Reload
	movl	(%r8,%rdi,4), %esi
	movl	$21131, 38596(%rsp)     # imm = 0x528B
	movl	%esi, %r9d
	andl	$255, %r9d
	shrl	$8, %esi
	movq	3880(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi)
	movl	$21132, 38596(%rsp)     # imm = 0x528C
	movq	3872(%rsp), %r10        # 8-byte Reload
	movl	$1, (%r10)
	movl	$21134, 38596(%rsp)     # imm = 0x528E
	movl	BZ2_rNums, %esi
	movl	$21135, 38596(%rsp)     # imm = 0x528F
	movl	$1, 28(%rcx)
	movl	$21137, 38596(%rsp)     # imm = 0x5291
	addl	$-1, %esi
	movl	%esi, 24(%rcx)
	movl	$21141, 38596(%rsp)     # imm = 0x5295
	cmpl	$1, %esi
	sete	%r11b
	andb	$1, %r11b
	movzbl	%r11b, %esi
	xorl	%esi, %r9d
	movl	%r9d, 64(%rcx)
	movl	$21145, 38596(%rsp)     # imm = 0x5299
	movl	8200(%rsp), %esi        # 4-byte Reload
	movq	8184(%rsp), %rbx        # 8-byte Reload
	movq	8208(%rsp), %r14        # 8-byte Reload
	movq	8216(%rsp), %r15        # 8-byte Reload
	movq	8224(%rsp), %r12        # 8-byte Reload
	movq	8232(%rsp), %r13        # 8-byte Reload
	movq	8240(%rsp), %rbp        # 8-byte Reload
	movq	8248(%rsp), %rcx        # 8-byte Reload
	movq	8256(%rsp), %rdi        # 8-byte Reload
	movq	8264(%rsp), %r8         # 8-byte Reload
	movq	8272(%rsp), %r9         # 8-byte Reload
	movq	8280(%rsp), %r10        # 8-byte Reload
	movq	8288(%rsp), %r11        # 8-byte Reload
	movq	8296(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 25472(%rsp)       # 8-byte Spill
	movq	8304(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	8312(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	8320(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	8328(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	8336(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	8344(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	8352(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	8368(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	8376(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	8384(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	8392(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	8400(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 3868(%rsp)        # 4-byte Spill
	movl	8204(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	8412(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	8416(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	8420(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	8424(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	8140(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	8144(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	8148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	8152(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	8156(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	8160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	8164(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	8168(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	8160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	8176(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	8180(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	8408(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	8192(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	8196(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	3892(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	3868(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movq	%rdx, 25424(%rsp)       # 8-byte Spill
	movq	%r8, 25456(%rsp)        # 8-byte Spill
	movq	%r10, 25440(%rsp)       # 8-byte Spill
	movq	%rdi, 25464(%rsp)       # 8-byte Spill
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	%rbx, 25520(%rsp)       # 8-byte Spill
	movq	%r14, 25512(%rsp)       # 8-byte Spill
	movq	%r15, 25504(%rsp)       # 8-byte Spill
	movq	%r12, 25496(%rsp)       # 8-byte Spill
	movq	%r13, 25488(%rsp)       # 8-byte Spill
	movq	%rbp, 25480(%rsp)       # 8-byte Spill
	movq	%r9, 25448(%rsp)        # 8-byte Spill
	movq	%r11, 25432(%rsp)       # 8-byte Spill
	jmp	.LBB68_542
.LBB68_464:                             # %if.else2926
	xorl	%eax, %eax
	movl	3888(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, %edx
	movl	%edx, %esi
	movq	3920(%rsp), %rdi        # 8-byte Reload
	movl	(%rdi,%rsi,4), %edx
	movl	$21148, 38596(%rsp)     # imm = 0x529C
	movl	%edx, %r8d
	andl	$255, %r8d
	movq	38576(%rsp), %rsi       # 8-byte Reload
	movl	%r8d, 64(%rsi)
	movl	$21150, 38596(%rsp)     # imm = 0x529E
	shrl	$8, %edx
	movq	3880(%rsp), %r9         # 8-byte Reload
	movl	%edx, (%r9)
	movl	$21151, 38596(%rsp)     # imm = 0x529F
	movq	3872(%rsp), %r10        # 8-byte Reload
	movl	$1, (%r10)
	movl	$21202, 38596(%rsp)     # imm = 0x52D2
	movl	8200(%rsp), %edx        # 4-byte Reload
	movq	8184(%rsp), %r11        # 8-byte Reload
	movq	8208(%rsp), %rbx        # 8-byte Reload
	movq	8216(%rsp), %r14        # 8-byte Reload
	movq	8224(%rsp), %r15        # 8-byte Reload
	movq	8232(%rsp), %r12        # 8-byte Reload
	movq	8240(%rsp), %r13        # 8-byte Reload
	movq	8248(%rsp), %rbp        # 8-byte Reload
	movq	8256(%rsp), %rsi        # 8-byte Reload
	movq	8264(%rsp), %rdi        # 8-byte Reload
	movq	8272(%rsp), %r8         # 8-byte Reload
	movq	8280(%rsp), %r9         # 8-byte Reload
	movq	8288(%rsp), %r10        # 8-byte Reload
	movq	8296(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25424(%rsp)       # 8-byte Spill
	movq	8304(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	8312(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	8320(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	8328(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	8336(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	8344(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	8352(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	8368(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	8376(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	8384(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	8392(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	8400(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 3864(%rsp)        # 4-byte Spill
	movl	8204(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	8412(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	8416(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	8420(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	8424(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	8140(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	8144(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	8148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	8152(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	8156(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	8160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	8164(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	8168(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	8160(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	8176(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	8180(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	8408(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	8192(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	8196(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	3892(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	3864(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25456(%rsp)       # 8-byte Spill
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	%r9, 25440(%rsp)        # 8-byte Spill
	movq	%r10, 25432(%rsp)       # 8-byte Spill
	movl	%edx, 25332(%rsp)       # 4-byte Spill
	movq	%r11, 25520(%rsp)       # 8-byte Spill
	movq	%rbx, 25512(%rsp)       # 8-byte Spill
	movq	%r14, 25504(%rsp)       # 8-byte Spill
	movq	%r15, 25496(%rsp)       # 8-byte Spill
	movq	%r12, 25488(%rsp)       # 8-byte Spill
	movq	%r13, 25480(%rsp)       # 8-byte Spill
	movq	%rbp, 25472(%rsp)       # 8-byte Spill
	movq	%r8, 25448(%rsp)        # 8-byte Spill
	jmp	.LBB68_542
.LBB68_465:                             # %sw.bb2943
	movl	31864(%rsp), %eax       # 4-byte Reload
	movq	31920(%rsp), %rcx       # 8-byte Reload
	movq	31928(%rsp), %rdx       # 8-byte Reload
	movq	31936(%rsp), %rsi       # 8-byte Reload
	movq	31944(%rsp), %rdi       # 8-byte Reload
	movq	31952(%rsp), %r8        # 8-byte Reload
	movq	31960(%rsp), %r9        # 8-byte Reload
	movq	31968(%rsp), %r10       # 8-byte Reload
	movq	31976(%rsp), %r11       # 8-byte Reload
	movq	31984(%rsp), %rbx       # 8-byte Reload
	movq	31992(%rsp), %r14       # 8-byte Reload
	movq	32000(%rsp), %r15       # 8-byte Reload
	movq	32008(%rsp), %r12       # 8-byte Reload
	movq	32016(%rsp), %r13       # 8-byte Reload
	movq	32024(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 3856(%rsp)        # 8-byte Spill
	movq	32032(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3848(%rsp)        # 8-byte Spill
	movq	32040(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3840(%rsp)        # 8-byte Spill
	movq	32048(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3832(%rsp)        # 8-byte Spill
	movq	32056(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3824(%rsp)        # 8-byte Spill
	movq	32064(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3816(%rsp)        # 8-byte Spill
	movq	32072(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3808(%rsp)        # 8-byte Spill
	movq	32080(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3800(%rsp)        # 8-byte Spill
	movq	32088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3792(%rsp)        # 8-byte Spill
	movq	32096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3784(%rsp)        # 8-byte Spill
	movq	32104(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3776(%rsp)        # 8-byte Spill
	movq	32112(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3768(%rsp)        # 8-byte Spill
	movq	32120(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3760(%rsp)        # 8-byte Spill
	movq	32128(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 3756(%rsp)        # 4-byte Spill
	movl	31916(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3752(%rsp)        # 4-byte Spill
	movl	32144(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3748(%rsp)        # 4-byte Spill
	movl	32148(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3744(%rsp)        # 4-byte Spill
	movl	32152(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3740(%rsp)        # 4-byte Spill
	movl	32156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3736(%rsp)        # 4-byte Spill
	movl	32160(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3732(%rsp)        # 4-byte Spill
	movl	32164(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3728(%rsp)        # 4-byte Spill
	movl	32168(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3724(%rsp)        # 4-byte Spill
	movl	32172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3720(%rsp)        # 4-byte Spill
	movl	31912(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3716(%rsp)        # 4-byte Spill
	movl	31868(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3712(%rsp)        # 4-byte Spill
	movl	31872(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3708(%rsp)        # 4-byte Spill
	movl	31876(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3704(%rsp)        # 4-byte Spill
	movl	31880(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3700(%rsp)        # 4-byte Spill
	movl	31884(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3696(%rsp)        # 4-byte Spill
	movl	31888(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3692(%rsp)        # 4-byte Spill
	movl	31892(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3688(%rsp)        # 4-byte Spill
	movl	31896(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3684(%rsp)        # 4-byte Spill
	movl	31900(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3680(%rsp)        # 4-byte Spill
	movl	31904(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3676(%rsp)        # 4-byte Spill
	movl	31908(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 3664(%rsp)        # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$42, (%rcx)
	movl	$21207, 38596(%rsp)     # imm = 0x52D7
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 3660(%rsp)        # 4-byte Spill
	movl	3756(%rsp), %eax        # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 3648(%rsp)        # 8-byte Spill
	movq	%rdx, 3640(%rsp)        # 8-byte Spill
	movq	%rsi, 3632(%rsp)        # 8-byte Spill
	movq	%rdi, 3624(%rsp)        # 8-byte Spill
	movq	%r8, 3616(%rsp)         # 8-byte Spill
	movq	%r9, 3608(%rsp)         # 8-byte Spill
	movq	%r10, 3600(%rsp)        # 8-byte Spill
	movq	%r11, 3592(%rsp)        # 8-byte Spill
	movq	%rbx, 3584(%rsp)        # 8-byte Spill
	movq	%r14, 3576(%rsp)        # 8-byte Spill
	movq	%r15, 3568(%rsp)        # 8-byte Spill
	movq	%r12, 3560(%rsp)        # 8-byte Spill
	movq	%r13, 3552(%rsp)        # 8-byte Spill
	movq	%rbp, 3544(%rsp)        # 8-byte Spill
	jle	.LBB68_467
# %bb.466:                              # %sw.bb2943.if.then2950_crit_edge
	movq	3648(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21209, 38596(%rsp)     # imm = 0x52D9
	movl	3756(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 3540(%rsp)        # 4-byte Spill
	movl	%edx, 3536(%rsp)        # 4-byte Spill
	jmp	.LBB68_468
.LBB68_467:                             # %if.end2960.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$21211, 38596(%rsp)     # imm = 0x52DB
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$21222, 38596(%rsp)     # imm = 0x52E6
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	3756(%rsp), %r9d        # 4-byte Reload
	movq	%rcx, 3528(%rsp)        # 8-byte Spill
	movq	%rdx, 3520(%rsp)        # 8-byte Spill
	movq	%r8, 3512(%rsp)         # 8-byte Spill
	movq	%rdi, 3504(%rsp)        # 8-byte Spill
	movl	%esi, 3500(%rsp)        # 4-byte Spill
	movl	%r9d, 3496(%rsp)        # 4-byte Spill
	jmp	.LBB68_469
.LBB68_468:                             # %if.then2950
	movl	3536(%rsp), %eax        # 4-byte Reload
	movl	3540(%rsp), %ecx        # 4-byte Reload
	movl	$4294967292, %edx       # imm = 0xFFFFFFFC
	addl	$-8, %eax
	movl	%ecx, 3492(%rsp)        # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	3492(%rsp), %esi        # 4-byte Reload
	shrl	%cl, %esi
	movq	3856(%rsp), %rdi        # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$21231, 38596(%rsp)     # imm = 0x52EF
	andl	$255, %esi
	cmpl	$114, %esi
	movl	3660(%rsp), %esi        # 4-byte Reload
	movl	3676(%rsp), %r8d        # 4-byte Reload
	movl	3680(%rsp), %r9d        # 4-byte Reload
	movl	3684(%rsp), %r10d       # 4-byte Reload
	movl	3688(%rsp), %r11d       # 4-byte Reload
	movl	3692(%rsp), %ebx        # 4-byte Reload
	movl	3696(%rsp), %ebp        # 4-byte Reload
	movl	3700(%rsp), %r14d       # 4-byte Reload
	movl	3704(%rsp), %r15d       # 4-byte Reload
	movl	3708(%rsp), %r12d       # 4-byte Reload
	movl	3712(%rsp), %r13d       # 4-byte Reload
	movl	3716(%rsp), %ecx        # 4-byte Reload
	movl	3720(%rsp), %edi        # 4-byte Reload
	movl	%eax, 3488(%rsp)        # 4-byte Spill
	movl	3724(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32480(%rsp)       # 4-byte Spill
	movl	3728(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32476(%rsp)       # 4-byte Spill
	movl	3732(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32472(%rsp)       # 4-byte Spill
	movl	3736(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32468(%rsp)       # 4-byte Spill
	movl	3740(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32464(%rsp)       # 4-byte Spill
	movl	3744(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32460(%rsp)       # 4-byte Spill
	movl	3748(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32456(%rsp)       # 4-byte Spill
	movl	3752(%rsp), %eax        # 4-byte Reload
	movl	%esi, 32220(%rsp)       # 4-byte Spill
	movq	3664(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32440(%rsp)       # 8-byte Spill
	movq	3760(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32432(%rsp)       # 8-byte Spill
	movq	3768(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32424(%rsp)       # 8-byte Spill
	movq	3776(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32416(%rsp)       # 8-byte Spill
	movq	3784(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32408(%rsp)       # 8-byte Spill
	movq	3792(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32400(%rsp)       # 8-byte Spill
	movq	3800(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32392(%rsp)       # 8-byte Spill
	movq	3808(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32384(%rsp)       # 8-byte Spill
	movq	3816(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32376(%rsp)       # 8-byte Spill
	movq	3824(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32368(%rsp)       # 8-byte Spill
	movq	3832(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32360(%rsp)       # 8-byte Spill
	movq	3840(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32352(%rsp)       # 8-byte Spill
	movq	3848(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32344(%rsp)       # 8-byte Spill
	movq	3544(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32336(%rsp)       # 8-byte Spill
	movq	3552(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32328(%rsp)       # 8-byte Spill
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32320(%rsp)       # 8-byte Spill
	movq	3568(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32312(%rsp)       # 8-byte Spill
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32304(%rsp)       # 8-byte Spill
	movq	3584(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32296(%rsp)       # 8-byte Spill
	movq	3592(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32288(%rsp)       # 8-byte Spill
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32280(%rsp)       # 8-byte Spill
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32272(%rsp)       # 8-byte Spill
	movq	3616(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32264(%rsp)       # 8-byte Spill
	movq	3624(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32256(%rsp)       # 8-byte Spill
	movq	3632(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32248(%rsp)       # 8-byte Spill
	movq	3640(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32240(%rsp)       # 8-byte Spill
	movq	3856(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 32228(%rsp)       # 4-byte Spill
	movl	3488(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32176(%rsp)       # 4-byte Spill
	movl	3732(%rsp), %eax        # 4-byte Reload
	movq	%rsi, 32232(%rsp)       # 8-byte Spill
	movq	3776(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	3784(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	3792(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	3800(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	3808(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	3816(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	3824(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	3832(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	3840(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	3848(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	3544(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	3552(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	3568(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	3584(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	3592(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	3616(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	3624(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	3632(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	3640(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	3768(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	3760(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	3664(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	3752(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	3748(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	3744(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	3740(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	3736(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	3728(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	3724(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	3720(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	3716(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	3712(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	3708(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	3704(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	3700(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	3696(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	3692(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	3688(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	3684(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	3680(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	3676(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	3660(%rsp), %eax        # 4-byte Reload
	movl	%ecx, 32224(%rsp)       # 4-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%edi, 32484(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%r8d, 32216(%rsp)       # 4-byte Spill
	movl	%r9d, 32212(%rsp)       # 4-byte Spill
	movl	%r10d, 32208(%rsp)      # 4-byte Spill
	movl	%r11d, 32204(%rsp)      # 4-byte Spill
	movl	%ebx, 32200(%rsp)       # 4-byte Spill
	movl	%ebp, 32196(%rsp)       # 4-byte Spill
	movl	%r14d, 32192(%rsp)      # 4-byte Spill
	movl	%r15d, 32188(%rsp)      # 4-byte Spill
	movl	%r12d, 32184(%rsp)      # 4-byte Spill
	movl	%r13d, 32180(%rsp)      # 4-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_473
	jmp	.LBB68_542
.LBB68_469:                             # %if.end2960
                                        # =>This Inner Loop Header: Depth=1
	movl	3496(%rsp), %eax        # 4-byte Reload
	movl	3500(%rsp), %ecx        # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	3732(%rsp), %esi        # 4-byte Reload
	movq	3776(%rsp), %rdi        # 8-byte Reload
	movq	3784(%rsp), %r8         # 8-byte Reload
	movq	3792(%rsp), %r9         # 8-byte Reload
	movq	3800(%rsp), %r10        # 8-byte Reload
	movq	3808(%rsp), %r11        # 8-byte Reload
	movq	3816(%rsp), %rbx        # 8-byte Reload
	movq	3824(%rsp), %r14        # 8-byte Reload
	movq	3832(%rsp), %r15        # 8-byte Reload
	movq	3840(%rsp), %r12        # 8-byte Reload
	movq	3848(%rsp), %r13        # 8-byte Reload
	movq	3544(%rsp), %rbp        # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	3552(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	3568(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	3584(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	3592(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	3616(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	3624(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	3632(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	3640(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	3768(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	3760(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	3664(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 3484(%rsp)        # 4-byte Spill
	movl	3752(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	3748(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	3744(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	3740(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	3736(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	3728(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	3724(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	3720(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	3716(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	3712(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	3708(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	3704(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	3700(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	3696(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	3692(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	3688(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	3684(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	3680(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	3676(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	3660(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 3480(%rsp)        # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.470:                              # %if.end2966
                                        #   in Loop: Header=BB68_469 Depth=1
	movq	3648(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21233, 38596(%rsp)     # imm = 0x52F1
	shll	$8, %ecx
	movq	3528(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$21234, 38596(%rsp)     # imm = 0x52F2
	movb	(%rsi), %dil
	movl	$21236, 38596(%rsp)     # imm = 0x52F4
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$21237, 38596(%rsp)     # imm = 0x52F5
	movl	3484(%rsp), %r8d        # 4-byte Reload
	addl	$8, %r8d
	movq	3856(%rsp), %r9         # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$21239, 38596(%rsp)     # imm = 0x52F7
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$21240, 38596(%rsp)     # imm = 0x52F8
	movl	3480(%rsp), %r10d       # 4-byte Reload
	addl	$-1, %r10d
	movq	3520(%rsp), %rsi        # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$21241, 38596(%rsp)     # imm = 0x52F9
	movq	3504(%rsp), %r11        # 8-byte Reload
	movl	(%r11), %ebx
	movl	$21243, 38596(%rsp)     # imm = 0x52FB
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$21246, 38596(%rsp)     # imm = 0x52FE
	cmpl	$0, %ebx
	movl	%ecx, 3476(%rsp)        # 4-byte Spill
	movl	%r8d, 3472(%rsp)        # 4-byte Spill
	movl	%r10d, 3468(%rsp)       # 4-byte Spill
	jne	.LBB68_472
# %bb.471:                              # %if.then2989
                                        #   in Loop: Header=BB68_469 Depth=1
	movq	3512(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21248, 38596(%rsp)     # imm = 0x5300
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$21301, 38596(%rsp)     # imm = 0x5335
.LBB68_472:                             # %if.end2993
                                        #   in Loop: Header=BB68_469 Depth=1
	movl	3484(%rsp), %eax        # 4-byte Reload
	cmpl	$-1, %eax
	movl	3476(%rsp), %ecx        # 4-byte Reload
	movl	3472(%rsp), %edx        # 4-byte Reload
	movl	3468(%rsp), %esi        # 4-byte Reload
	movl	3472(%rsp), %edi        # 4-byte Reload
	movl	%ecx, 3540(%rsp)        # 4-byte Spill
	movl	%edx, 3536(%rsp)        # 4-byte Spill
	movl	%esi, 3500(%rsp)        # 4-byte Spill
	movl	%edi, 3496(%rsp)        # 4-byte Spill
	jg	.LBB68_468
	jmp	.LBB68_469
.LBB68_473:                             # %sw.bb3000
	movl	32176(%rsp), %eax       # 4-byte Reload
	movq	32232(%rsp), %rcx       # 8-byte Reload
	movq	32240(%rsp), %rdx       # 8-byte Reload
	movq	32248(%rsp), %rsi       # 8-byte Reload
	movq	32256(%rsp), %rdi       # 8-byte Reload
	movq	32264(%rsp), %r8        # 8-byte Reload
	movq	32272(%rsp), %r9        # 8-byte Reload
	movq	32280(%rsp), %r10       # 8-byte Reload
	movq	32288(%rsp), %r11       # 8-byte Reload
	movq	32296(%rsp), %rbx       # 8-byte Reload
	movq	32304(%rsp), %r14       # 8-byte Reload
	movq	32312(%rsp), %r15       # 8-byte Reload
	movq	32320(%rsp), %r12       # 8-byte Reload
	movq	32328(%rsp), %r13       # 8-byte Reload
	movq	32336(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 3456(%rsp)        # 8-byte Spill
	movq	32344(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3448(%rsp)        # 8-byte Spill
	movq	32352(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3440(%rsp)        # 8-byte Spill
	movq	32360(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3432(%rsp)        # 8-byte Spill
	movq	32368(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3424(%rsp)        # 8-byte Spill
	movq	32376(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3416(%rsp)        # 8-byte Spill
	movq	32384(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3408(%rsp)        # 8-byte Spill
	movq	32392(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3400(%rsp)        # 8-byte Spill
	movq	32400(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3392(%rsp)        # 8-byte Spill
	movq	32408(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3384(%rsp)        # 8-byte Spill
	movq	32416(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3376(%rsp)        # 8-byte Spill
	movq	32424(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3368(%rsp)        # 8-byte Spill
	movq	32432(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3360(%rsp)        # 8-byte Spill
	movq	32440(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 3356(%rsp)        # 4-byte Spill
	movl	32228(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3352(%rsp)        # 4-byte Spill
	movl	32456(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3348(%rsp)        # 4-byte Spill
	movl	32460(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3344(%rsp)        # 4-byte Spill
	movl	32464(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3340(%rsp)        # 4-byte Spill
	movl	32468(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3336(%rsp)        # 4-byte Spill
	movl	32472(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3332(%rsp)        # 4-byte Spill
	movl	32476(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3328(%rsp)        # 4-byte Spill
	movl	32480(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3324(%rsp)        # 4-byte Spill
	movl	32484(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3320(%rsp)        # 4-byte Spill
	movl	32224(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3316(%rsp)        # 4-byte Spill
	movl	32180(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3312(%rsp)        # 4-byte Spill
	movl	32184(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3308(%rsp)        # 4-byte Spill
	movl	32188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3304(%rsp)        # 4-byte Spill
	movl	32192(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3300(%rsp)        # 4-byte Spill
	movl	32196(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3296(%rsp)        # 4-byte Spill
	movl	32200(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3292(%rsp)        # 4-byte Spill
	movl	32204(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3288(%rsp)        # 4-byte Spill
	movl	32208(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3284(%rsp)        # 4-byte Spill
	movl	32212(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3280(%rsp)        # 4-byte Spill
	movl	32216(%rsp), %eax       # 4-byte Reload
	movl	%eax, 3276(%rsp)        # 4-byte Spill
	movl	32220(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 3264(%rsp)        # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$43, (%rcx)
	movl	$21306, 38596(%rsp)     # imm = 0x533A
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 3260(%rsp)        # 4-byte Spill
	movl	3356(%rsp), %eax        # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 3248(%rsp)        # 8-byte Spill
	movq	%rdx, 3240(%rsp)        # 8-byte Spill
	movq	%rsi, 3232(%rsp)        # 8-byte Spill
	movq	%rdi, 3224(%rsp)        # 8-byte Spill
	movq	%r8, 3216(%rsp)         # 8-byte Spill
	movq	%r9, 3208(%rsp)         # 8-byte Spill
	movq	%r10, 3200(%rsp)        # 8-byte Spill
	movq	%r11, 3192(%rsp)        # 8-byte Spill
	movq	%rbx, 3184(%rsp)        # 8-byte Spill
	movq	%r14, 3176(%rsp)        # 8-byte Spill
	movq	%r15, 3168(%rsp)        # 8-byte Spill
	movq	%r12, 3160(%rsp)        # 8-byte Spill
	movq	%r13, 3152(%rsp)        # 8-byte Spill
	movq	%rbp, 3144(%rsp)        # 8-byte Spill
	jle	.LBB68_475
# %bb.474:                              # %sw.bb3000.if.then3007_crit_edge
	movq	3248(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21308, 38596(%rsp)     # imm = 0x533C
	movl	3356(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 3140(%rsp)        # 4-byte Spill
	movl	%edx, 3136(%rsp)        # 4-byte Spill
	jmp	.LBB68_476
.LBB68_475:                             # %if.end3017.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$21310, 38596(%rsp)     # imm = 0x533E
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$21321, 38596(%rsp)     # imm = 0x5349
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	3356(%rsp), %r9d        # 4-byte Reload
	movq	%rcx, 3128(%rsp)        # 8-byte Spill
	movq	%rdx, 3120(%rsp)        # 8-byte Spill
	movq	%r8, 3112(%rsp)         # 8-byte Spill
	movq	%rdi, 3104(%rsp)        # 8-byte Spill
	movl	%esi, 3100(%rsp)        # 4-byte Spill
	movl	%r9d, 3096(%rsp)        # 4-byte Spill
	jmp	.LBB68_477
.LBB68_476:                             # %if.then3007
	movl	3136(%rsp), %eax        # 4-byte Reload
	movl	3140(%rsp), %ecx        # 4-byte Reload
	movl	$4294967292, %edx       # imm = 0xFFFFFFFC
	addl	$-8, %eax
	movl	%ecx, 3092(%rsp)        # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	3092(%rsp), %esi        # 4-byte Reload
	shrl	%cl, %esi
	movq	3456(%rsp), %rdi        # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$21330, 38596(%rsp)     # imm = 0x5352
	andl	$255, %esi
	cmpl	$69, %esi
	movl	3260(%rsp), %esi        # 4-byte Reload
	movl	3276(%rsp), %r8d        # 4-byte Reload
	movl	3280(%rsp), %r9d        # 4-byte Reload
	movl	3284(%rsp), %r10d       # 4-byte Reload
	movl	3288(%rsp), %r11d       # 4-byte Reload
	movl	3292(%rsp), %ebx        # 4-byte Reload
	movl	3296(%rsp), %ebp        # 4-byte Reload
	movl	3300(%rsp), %r14d       # 4-byte Reload
	movl	3304(%rsp), %r15d       # 4-byte Reload
	movl	3308(%rsp), %r12d       # 4-byte Reload
	movl	3312(%rsp), %r13d       # 4-byte Reload
	movl	3316(%rsp), %ecx        # 4-byte Reload
	movl	3320(%rsp), %edi        # 4-byte Reload
	movl	%eax, 3088(%rsp)        # 4-byte Spill
	movl	3324(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32792(%rsp)       # 4-byte Spill
	movl	3328(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32788(%rsp)       # 4-byte Spill
	movl	3332(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32784(%rsp)       # 4-byte Spill
	movl	3336(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32780(%rsp)       # 4-byte Spill
	movl	3340(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32776(%rsp)       # 4-byte Spill
	movl	3344(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32772(%rsp)       # 4-byte Spill
	movl	3348(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32768(%rsp)       # 4-byte Spill
	movl	3352(%rsp), %eax        # 4-byte Reload
	movl	%esi, 32532(%rsp)       # 4-byte Spill
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32752(%rsp)       # 8-byte Spill
	movq	3360(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32744(%rsp)       # 8-byte Spill
	movq	3368(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32736(%rsp)       # 8-byte Spill
	movq	3376(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32728(%rsp)       # 8-byte Spill
	movq	3384(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32720(%rsp)       # 8-byte Spill
	movq	3392(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32712(%rsp)       # 8-byte Spill
	movq	3400(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32704(%rsp)       # 8-byte Spill
	movq	3408(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32696(%rsp)       # 8-byte Spill
	movq	3416(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32688(%rsp)       # 8-byte Spill
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32680(%rsp)       # 8-byte Spill
	movq	3432(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32672(%rsp)       # 8-byte Spill
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32664(%rsp)       # 8-byte Spill
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32656(%rsp)       # 8-byte Spill
	movq	3144(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32648(%rsp)       # 8-byte Spill
	movq	3152(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32640(%rsp)       # 8-byte Spill
	movq	3160(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32632(%rsp)       # 8-byte Spill
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32624(%rsp)       # 8-byte Spill
	movq	3176(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32616(%rsp)       # 8-byte Spill
	movq	3184(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32608(%rsp)       # 8-byte Spill
	movq	3192(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32600(%rsp)       # 8-byte Spill
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32592(%rsp)       # 8-byte Spill
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32584(%rsp)       # 8-byte Spill
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32576(%rsp)       # 8-byte Spill
	movq	3224(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32568(%rsp)       # 8-byte Spill
	movq	3232(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32560(%rsp)       # 8-byte Spill
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32552(%rsp)       # 8-byte Spill
	movq	3456(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 32540(%rsp)       # 4-byte Spill
	movl	3088(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32488(%rsp)       # 4-byte Spill
	movl	3332(%rsp), %eax        # 4-byte Reload
	movq	%rsi, 32544(%rsp)       # 8-byte Spill
	movq	3376(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	3384(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	3392(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	3400(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	3408(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	3416(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	3432(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	3440(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	3144(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	3152(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	3160(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	3176(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	3184(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	3192(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	3224(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	3232(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	3368(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	3360(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	3352(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	3348(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	3344(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	3340(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	3336(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	3328(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	3324(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	3320(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	3316(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	3312(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	3308(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	3304(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	3300(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	3296(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	3292(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	3288(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	3284(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	3280(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	3276(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	3260(%rsp), %eax        # 4-byte Reload
	movl	%ecx, 32536(%rsp)       # 4-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%edi, 32796(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%r8d, 32528(%rsp)       # 4-byte Spill
	movl	%r9d, 32524(%rsp)       # 4-byte Spill
	movl	%r10d, 32520(%rsp)      # 4-byte Spill
	movl	%r11d, 32516(%rsp)      # 4-byte Spill
	movl	%ebx, 32512(%rsp)       # 4-byte Spill
	movl	%ebp, 32508(%rsp)       # 4-byte Spill
	movl	%r14d, 32504(%rsp)      # 4-byte Spill
	movl	%r15d, 32500(%rsp)      # 4-byte Spill
	movl	%r12d, 32496(%rsp)      # 4-byte Spill
	movl	%r13d, 32492(%rsp)      # 4-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_481
	jmp	.LBB68_542
.LBB68_477:                             # %if.end3017
                                        # =>This Inner Loop Header: Depth=1
	movl	3096(%rsp), %eax        # 4-byte Reload
	movl	3100(%rsp), %ecx        # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	3332(%rsp), %esi        # 4-byte Reload
	movq	3376(%rsp), %rdi        # 8-byte Reload
	movq	3384(%rsp), %r8         # 8-byte Reload
	movq	3392(%rsp), %r9         # 8-byte Reload
	movq	3400(%rsp), %r10        # 8-byte Reload
	movq	3408(%rsp), %r11        # 8-byte Reload
	movq	3416(%rsp), %rbx        # 8-byte Reload
	movq	3424(%rsp), %r14        # 8-byte Reload
	movq	3432(%rsp), %r15        # 8-byte Reload
	movq	3440(%rsp), %r12        # 8-byte Reload
	movq	3448(%rsp), %r13        # 8-byte Reload
	movq	3144(%rsp), %rbp        # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	3152(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	3160(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	3176(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	3184(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	3192(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	3224(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	3232(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	3368(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	3360(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 3084(%rsp)        # 4-byte Spill
	movl	3352(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	3348(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	3344(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	3340(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	3336(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	3328(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	3324(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	3320(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	3316(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	3312(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	3308(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	3304(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	3300(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	3296(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	3292(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	3288(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	3284(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	3280(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	3276(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	3260(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 3080(%rsp)        # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.478:                              # %if.end3023
                                        #   in Loop: Header=BB68_477 Depth=1
	movq	3248(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21332, 38596(%rsp)     # imm = 0x5354
	shll	$8, %ecx
	movq	3128(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$21333, 38596(%rsp)     # imm = 0x5355
	movb	(%rsi), %dil
	movl	$21335, 38596(%rsp)     # imm = 0x5357
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$21336, 38596(%rsp)     # imm = 0x5358
	movl	3084(%rsp), %r8d        # 4-byte Reload
	addl	$8, %r8d
	movq	3456(%rsp), %r9         # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$21338, 38596(%rsp)     # imm = 0x535A
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$21339, 38596(%rsp)     # imm = 0x535B
	movl	3080(%rsp), %r10d       # 4-byte Reload
	addl	$-1, %r10d
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$21340, 38596(%rsp)     # imm = 0x535C
	movq	3104(%rsp), %r11        # 8-byte Reload
	movl	(%r11), %ebx
	movl	$21342, 38596(%rsp)     # imm = 0x535E
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$21345, 38596(%rsp)     # imm = 0x5361
	cmpl	$0, %ebx
	movl	%ecx, 3076(%rsp)        # 4-byte Spill
	movl	%r8d, 3072(%rsp)        # 4-byte Spill
	movl	%r10d, 3068(%rsp)       # 4-byte Spill
	jne	.LBB68_480
# %bb.479:                              # %if.then3046
                                        #   in Loop: Header=BB68_477 Depth=1
	movq	3112(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21347, 38596(%rsp)     # imm = 0x5363
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$21400, 38596(%rsp)     # imm = 0x5398
.LBB68_480:                             # %if.end3050
                                        #   in Loop: Header=BB68_477 Depth=1
	movl	3084(%rsp), %eax        # 4-byte Reload
	cmpl	$-1, %eax
	movl	3076(%rsp), %ecx        # 4-byte Reload
	movl	3072(%rsp), %edx        # 4-byte Reload
	movl	3068(%rsp), %esi        # 4-byte Reload
	movl	3072(%rsp), %edi        # 4-byte Reload
	movl	%ecx, 3140(%rsp)        # 4-byte Spill
	movl	%edx, 3136(%rsp)        # 4-byte Spill
	movl	%esi, 3100(%rsp)        # 4-byte Spill
	movl	%edi, 3096(%rsp)        # 4-byte Spill
	jg	.LBB68_476
	jmp	.LBB68_477
.LBB68_481:                             # %sw.bb3057
	movl	32488(%rsp), %eax       # 4-byte Reload
	movq	32544(%rsp), %rcx       # 8-byte Reload
	movq	32552(%rsp), %rdx       # 8-byte Reload
	movq	32560(%rsp), %rsi       # 8-byte Reload
	movq	32568(%rsp), %rdi       # 8-byte Reload
	movq	32576(%rsp), %r8        # 8-byte Reload
	movq	32584(%rsp), %r9        # 8-byte Reload
	movq	32592(%rsp), %r10       # 8-byte Reload
	movq	32600(%rsp), %r11       # 8-byte Reload
	movq	32608(%rsp), %rbx       # 8-byte Reload
	movq	32616(%rsp), %r14       # 8-byte Reload
	movq	32624(%rsp), %r15       # 8-byte Reload
	movq	32632(%rsp), %r12       # 8-byte Reload
	movq	32640(%rsp), %r13       # 8-byte Reload
	movq	32648(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 3056(%rsp)        # 8-byte Spill
	movq	32656(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3048(%rsp)        # 8-byte Spill
	movq	32664(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3040(%rsp)        # 8-byte Spill
	movq	32672(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3032(%rsp)        # 8-byte Spill
	movq	32680(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3024(%rsp)        # 8-byte Spill
	movq	32688(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3016(%rsp)        # 8-byte Spill
	movq	32696(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3008(%rsp)        # 8-byte Spill
	movq	32704(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 3000(%rsp)        # 8-byte Spill
	movq	32712(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2992(%rsp)        # 8-byte Spill
	movq	32720(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2984(%rsp)        # 8-byte Spill
	movq	32728(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2976(%rsp)        # 8-byte Spill
	movq	32736(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2968(%rsp)        # 8-byte Spill
	movq	32744(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2960(%rsp)        # 8-byte Spill
	movq	32752(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 2956(%rsp)        # 4-byte Spill
	movl	32540(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2952(%rsp)        # 4-byte Spill
	movl	32768(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2948(%rsp)        # 4-byte Spill
	movl	32772(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2944(%rsp)        # 4-byte Spill
	movl	32776(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2940(%rsp)        # 4-byte Spill
	movl	32780(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2936(%rsp)        # 4-byte Spill
	movl	32784(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2932(%rsp)        # 4-byte Spill
	movl	32788(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2928(%rsp)        # 4-byte Spill
	movl	32792(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2924(%rsp)        # 4-byte Spill
	movl	32796(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2920(%rsp)        # 4-byte Spill
	movl	32536(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2916(%rsp)        # 4-byte Spill
	movl	32492(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2912(%rsp)        # 4-byte Spill
	movl	32496(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2908(%rsp)        # 4-byte Spill
	movl	32500(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2904(%rsp)        # 4-byte Spill
	movl	32504(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2900(%rsp)        # 4-byte Spill
	movl	32508(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2896(%rsp)        # 4-byte Spill
	movl	32512(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2892(%rsp)        # 4-byte Spill
	movl	32516(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2888(%rsp)        # 4-byte Spill
	movl	32520(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2884(%rsp)        # 4-byte Spill
	movl	32524(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2880(%rsp)        # 4-byte Spill
	movl	32528(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2876(%rsp)        # 4-byte Spill
	movl	32532(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 2864(%rsp)        # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$44, (%rcx)
	movl	$21405, 38596(%rsp)     # imm = 0x539D
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 2860(%rsp)        # 4-byte Spill
	movl	2956(%rsp), %eax        # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 2848(%rsp)        # 8-byte Spill
	movq	%rdx, 2840(%rsp)        # 8-byte Spill
	movq	%rsi, 2832(%rsp)        # 8-byte Spill
	movq	%rdi, 2824(%rsp)        # 8-byte Spill
	movq	%r8, 2816(%rsp)         # 8-byte Spill
	movq	%r9, 2808(%rsp)         # 8-byte Spill
	movq	%r10, 2800(%rsp)        # 8-byte Spill
	movq	%r11, 2792(%rsp)        # 8-byte Spill
	movq	%rbx, 2784(%rsp)        # 8-byte Spill
	movq	%r14, 2776(%rsp)        # 8-byte Spill
	movq	%r15, 2768(%rsp)        # 8-byte Spill
	movq	%r12, 2760(%rsp)        # 8-byte Spill
	movq	%r13, 2752(%rsp)        # 8-byte Spill
	movq	%rbp, 2744(%rsp)        # 8-byte Spill
	jle	.LBB68_483
# %bb.482:                              # %sw.bb3057.if.then3064_crit_edge
	movq	2848(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21407, 38596(%rsp)     # imm = 0x539F
	movl	2956(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 2740(%rsp)        # 4-byte Spill
	movl	%edx, 2736(%rsp)        # 4-byte Spill
	jmp	.LBB68_484
.LBB68_483:                             # %if.end3074.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$21409, 38596(%rsp)     # imm = 0x53A1
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$21420, 38596(%rsp)     # imm = 0x53AC
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	2956(%rsp), %r9d        # 4-byte Reload
	movq	%rcx, 2728(%rsp)        # 8-byte Spill
	movq	%rdx, 2720(%rsp)        # 8-byte Spill
	movq	%r8, 2712(%rsp)         # 8-byte Spill
	movq	%rdi, 2704(%rsp)        # 8-byte Spill
	movl	%esi, 2700(%rsp)        # 4-byte Spill
	movl	%r9d, 2696(%rsp)        # 4-byte Spill
	jmp	.LBB68_485
.LBB68_484:                             # %if.then3064
	movl	2736(%rsp), %eax        # 4-byte Reload
	movl	2740(%rsp), %ecx        # 4-byte Reload
	movl	$4294967292, %edx       # imm = 0xFFFFFFFC
	addl	$-8, %eax
	movl	%ecx, 2692(%rsp)        # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	2692(%rsp), %esi        # 4-byte Reload
	shrl	%cl, %esi
	movq	3056(%rsp), %rdi        # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$21429, 38596(%rsp)     # imm = 0x53B5
	andl	$255, %esi
	cmpl	$56, %esi
	movl	2860(%rsp), %esi        # 4-byte Reload
	movl	2876(%rsp), %r8d        # 4-byte Reload
	movl	2880(%rsp), %r9d        # 4-byte Reload
	movl	2884(%rsp), %r10d       # 4-byte Reload
	movl	2888(%rsp), %r11d       # 4-byte Reload
	movl	2892(%rsp), %ebx        # 4-byte Reload
	movl	2896(%rsp), %ebp        # 4-byte Reload
	movl	2900(%rsp), %r14d       # 4-byte Reload
	movl	2904(%rsp), %r15d       # 4-byte Reload
	movl	2908(%rsp), %r12d       # 4-byte Reload
	movl	2912(%rsp), %r13d       # 4-byte Reload
	movl	2916(%rsp), %ecx        # 4-byte Reload
	movl	2920(%rsp), %edi        # 4-byte Reload
	movl	%eax, 2688(%rsp)        # 4-byte Spill
	movl	2924(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33104(%rsp)       # 4-byte Spill
	movl	2928(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33100(%rsp)       # 4-byte Spill
	movl	2932(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33096(%rsp)       # 4-byte Spill
	movl	2936(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33092(%rsp)       # 4-byte Spill
	movl	2940(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33088(%rsp)       # 4-byte Spill
	movl	2944(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33084(%rsp)       # 4-byte Spill
	movl	2948(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33080(%rsp)       # 4-byte Spill
	movl	2952(%rsp), %eax        # 4-byte Reload
	movl	%esi, 32844(%rsp)       # 4-byte Spill
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33064(%rsp)       # 8-byte Spill
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33056(%rsp)       # 8-byte Spill
	movq	2968(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33048(%rsp)       # 8-byte Spill
	movq	2976(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33040(%rsp)       # 8-byte Spill
	movq	2984(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33032(%rsp)       # 8-byte Spill
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33024(%rsp)       # 8-byte Spill
	movq	3000(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33016(%rsp)       # 8-byte Spill
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33008(%rsp)       # 8-byte Spill
	movq	3016(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33000(%rsp)       # 8-byte Spill
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32992(%rsp)       # 8-byte Spill
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32984(%rsp)       # 8-byte Spill
	movq	3040(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32976(%rsp)       # 8-byte Spill
	movq	3048(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32968(%rsp)       # 8-byte Spill
	movq	2744(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32960(%rsp)       # 8-byte Spill
	movq	2752(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32952(%rsp)       # 8-byte Spill
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32944(%rsp)       # 8-byte Spill
	movq	2768(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32936(%rsp)       # 8-byte Spill
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32928(%rsp)       # 8-byte Spill
	movq	2784(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32920(%rsp)       # 8-byte Spill
	movq	2792(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32912(%rsp)       # 8-byte Spill
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32904(%rsp)       # 8-byte Spill
	movq	2808(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32896(%rsp)       # 8-byte Spill
	movq	2816(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32888(%rsp)       # 8-byte Spill
	movq	2824(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32880(%rsp)       # 8-byte Spill
	movq	2832(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32872(%rsp)       # 8-byte Spill
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 32864(%rsp)       # 8-byte Spill
	movq	3056(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 32852(%rsp)       # 4-byte Spill
	movl	2688(%rsp), %eax        # 4-byte Reload
	movl	%eax, 32800(%rsp)       # 4-byte Spill
	movl	2932(%rsp), %eax        # 4-byte Reload
	movq	%rsi, 32856(%rsp)       # 8-byte Spill
	movq	2976(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	2984(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	3000(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	3016(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	3040(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	3048(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	2744(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	2752(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	2768(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	2784(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	2792(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	2808(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	2816(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	2824(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	2832(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	2968(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	2952(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	2948(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	2944(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	2940(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	2936(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	2928(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	2924(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	2920(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	2916(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	2912(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	2908(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	2904(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	2900(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	2896(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	2892(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	2888(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	2884(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	2880(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	2876(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	2860(%rsp), %eax        # 4-byte Reload
	movl	%ecx, 32848(%rsp)       # 4-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%edi, 33108(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%r8d, 32840(%rsp)       # 4-byte Spill
	movl	%r9d, 32836(%rsp)       # 4-byte Spill
	movl	%r10d, 32832(%rsp)      # 4-byte Spill
	movl	%r11d, 32828(%rsp)      # 4-byte Spill
	movl	%ebx, 32824(%rsp)       # 4-byte Spill
	movl	%ebp, 32820(%rsp)       # 4-byte Spill
	movl	%r14d, 32816(%rsp)      # 4-byte Spill
	movl	%r15d, 32812(%rsp)      # 4-byte Spill
	movl	%r12d, 32808(%rsp)      # 4-byte Spill
	movl	%r13d, 32804(%rsp)      # 4-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_489
	jmp	.LBB68_542
.LBB68_485:                             # %if.end3074
                                        # =>This Inner Loop Header: Depth=1
	movl	2696(%rsp), %eax        # 4-byte Reload
	movl	2700(%rsp), %ecx        # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	2932(%rsp), %esi        # 4-byte Reload
	movq	2976(%rsp), %rdi        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	2992(%rsp), %r9         # 8-byte Reload
	movq	3000(%rsp), %r10        # 8-byte Reload
	movq	3008(%rsp), %r11        # 8-byte Reload
	movq	3016(%rsp), %rbx        # 8-byte Reload
	movq	3024(%rsp), %r14        # 8-byte Reload
	movq	3032(%rsp), %r15        # 8-byte Reload
	movq	3040(%rsp), %r12        # 8-byte Reload
	movq	3048(%rsp), %r13        # 8-byte Reload
	movq	2744(%rsp), %rbp        # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	2752(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	2768(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	2784(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	2792(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	2808(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	2816(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	2824(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	2832(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	2968(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 2684(%rsp)        # 4-byte Spill
	movl	2952(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	2948(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	2944(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	2940(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	2936(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	2928(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	2924(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	2920(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	2916(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	2912(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	2908(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	2904(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	2900(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	2896(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	2892(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	2888(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	2884(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	2880(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	2876(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	2860(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 2680(%rsp)        # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.486:                              # %if.end3080
                                        #   in Loop: Header=BB68_485 Depth=1
	movq	2848(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21431, 38596(%rsp)     # imm = 0x53B7
	shll	$8, %ecx
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$21432, 38596(%rsp)     # imm = 0x53B8
	movb	(%rsi), %dil
	movl	$21434, 38596(%rsp)     # imm = 0x53BA
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$21435, 38596(%rsp)     # imm = 0x53BB
	movl	2684(%rsp), %r8d        # 4-byte Reload
	addl	$8, %r8d
	movq	3056(%rsp), %r9         # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$21437, 38596(%rsp)     # imm = 0x53BD
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$21438, 38596(%rsp)     # imm = 0x53BE
	movl	2680(%rsp), %r10d       # 4-byte Reload
	addl	$-1, %r10d
	movq	2720(%rsp), %rsi        # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$21439, 38596(%rsp)     # imm = 0x53BF
	movq	2704(%rsp), %r11        # 8-byte Reload
	movl	(%r11), %ebx
	movl	$21441, 38596(%rsp)     # imm = 0x53C1
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$21444, 38596(%rsp)     # imm = 0x53C4
	cmpl	$0, %ebx
	movl	%ecx, 2676(%rsp)        # 4-byte Spill
	movl	%r8d, 2672(%rsp)        # 4-byte Spill
	movl	%r10d, 2668(%rsp)       # 4-byte Spill
	jne	.LBB68_488
# %bb.487:                              # %if.then3103
                                        #   in Loop: Header=BB68_485 Depth=1
	movq	2712(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21446, 38596(%rsp)     # imm = 0x53C6
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$21499, 38596(%rsp)     # imm = 0x53FB
.LBB68_488:                             # %if.end3107
                                        #   in Loop: Header=BB68_485 Depth=1
	movl	2684(%rsp), %eax        # 4-byte Reload
	cmpl	$-1, %eax
	movl	2676(%rsp), %ecx        # 4-byte Reload
	movl	2672(%rsp), %edx        # 4-byte Reload
	movl	2668(%rsp), %esi        # 4-byte Reload
	movl	2672(%rsp), %edi        # 4-byte Reload
	movl	%ecx, 2740(%rsp)        # 4-byte Spill
	movl	%edx, 2736(%rsp)        # 4-byte Spill
	movl	%esi, 2700(%rsp)        # 4-byte Spill
	movl	%edi, 2696(%rsp)        # 4-byte Spill
	jg	.LBB68_484
	jmp	.LBB68_485
.LBB68_489:                             # %sw.bb3114
	movl	32800(%rsp), %eax       # 4-byte Reload
	movq	32856(%rsp), %rcx       # 8-byte Reload
	movq	32864(%rsp), %rdx       # 8-byte Reload
	movq	32872(%rsp), %rsi       # 8-byte Reload
	movq	32880(%rsp), %rdi       # 8-byte Reload
	movq	32888(%rsp), %r8        # 8-byte Reload
	movq	32896(%rsp), %r9        # 8-byte Reload
	movq	32904(%rsp), %r10       # 8-byte Reload
	movq	32912(%rsp), %r11       # 8-byte Reload
	movq	32920(%rsp), %rbx       # 8-byte Reload
	movq	32928(%rsp), %r14       # 8-byte Reload
	movq	32936(%rsp), %r15       # 8-byte Reload
	movq	32944(%rsp), %r12       # 8-byte Reload
	movq	32952(%rsp), %r13       # 8-byte Reload
	movq	32960(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 2656(%rsp)        # 8-byte Spill
	movq	32968(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2648(%rsp)        # 8-byte Spill
	movq	32976(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2640(%rsp)        # 8-byte Spill
	movq	32984(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2632(%rsp)        # 8-byte Spill
	movq	32992(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2624(%rsp)        # 8-byte Spill
	movq	33000(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2616(%rsp)        # 8-byte Spill
	movq	33008(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2608(%rsp)        # 8-byte Spill
	movq	33016(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2600(%rsp)        # 8-byte Spill
	movq	33024(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2592(%rsp)        # 8-byte Spill
	movq	33032(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2584(%rsp)        # 8-byte Spill
	movq	33040(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2576(%rsp)        # 8-byte Spill
	movq	33048(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2568(%rsp)        # 8-byte Spill
	movq	33056(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2560(%rsp)        # 8-byte Spill
	movq	33064(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 2556(%rsp)        # 4-byte Spill
	movl	32852(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2552(%rsp)        # 4-byte Spill
	movl	33080(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2548(%rsp)        # 4-byte Spill
	movl	33084(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2544(%rsp)        # 4-byte Spill
	movl	33088(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2540(%rsp)        # 4-byte Spill
	movl	33092(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2536(%rsp)        # 4-byte Spill
	movl	33096(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2532(%rsp)        # 4-byte Spill
	movl	33100(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2528(%rsp)        # 4-byte Spill
	movl	33104(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2524(%rsp)        # 4-byte Spill
	movl	33108(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2520(%rsp)        # 4-byte Spill
	movl	32848(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2516(%rsp)        # 4-byte Spill
	movl	32804(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2512(%rsp)        # 4-byte Spill
	movl	32808(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2508(%rsp)        # 4-byte Spill
	movl	32812(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2504(%rsp)        # 4-byte Spill
	movl	32816(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2500(%rsp)        # 4-byte Spill
	movl	32820(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2496(%rsp)        # 4-byte Spill
	movl	32824(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2492(%rsp)        # 4-byte Spill
	movl	32828(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2488(%rsp)        # 4-byte Spill
	movl	32832(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2484(%rsp)        # 4-byte Spill
	movl	32836(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2480(%rsp)        # 4-byte Spill
	movl	32840(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2476(%rsp)        # 4-byte Spill
	movl	32844(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 2464(%rsp)        # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$45, (%rcx)
	movl	$21504, 38596(%rsp)     # imm = 0x5400
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 2460(%rsp)        # 4-byte Spill
	movl	2556(%rsp), %eax        # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 2448(%rsp)        # 8-byte Spill
	movq	%rdx, 2440(%rsp)        # 8-byte Spill
	movq	%rsi, 2432(%rsp)        # 8-byte Spill
	movq	%rdi, 2424(%rsp)        # 8-byte Spill
	movq	%r8, 2416(%rsp)         # 8-byte Spill
	movq	%r9, 2408(%rsp)         # 8-byte Spill
	movq	%r10, 2400(%rsp)        # 8-byte Spill
	movq	%r11, 2392(%rsp)        # 8-byte Spill
	movq	%rbx, 2384(%rsp)        # 8-byte Spill
	movq	%r14, 2376(%rsp)        # 8-byte Spill
	movq	%r15, 2368(%rsp)        # 8-byte Spill
	movq	%r12, 2360(%rsp)        # 8-byte Spill
	movq	%r13, 2352(%rsp)        # 8-byte Spill
	movq	%rbp, 2344(%rsp)        # 8-byte Spill
	jle	.LBB68_491
# %bb.490:                              # %sw.bb3114.if.then3121_crit_edge
	movq	2448(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21506, 38596(%rsp)     # imm = 0x5402
	movl	2556(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 2340(%rsp)        # 4-byte Spill
	movl	%edx, 2336(%rsp)        # 4-byte Spill
	jmp	.LBB68_492
.LBB68_491:                             # %if.end3131.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$21508, 38596(%rsp)     # imm = 0x5404
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$21519, 38596(%rsp)     # imm = 0x540F
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	2556(%rsp), %r9d        # 4-byte Reload
	movq	%rcx, 2328(%rsp)        # 8-byte Spill
	movq	%rdx, 2320(%rsp)        # 8-byte Spill
	movq	%r8, 2312(%rsp)         # 8-byte Spill
	movq	%rdi, 2304(%rsp)        # 8-byte Spill
	movl	%esi, 2300(%rsp)        # 4-byte Spill
	movl	%r9d, 2296(%rsp)        # 4-byte Spill
	jmp	.LBB68_493
.LBB68_492:                             # %if.then3121
	movl	2336(%rsp), %eax        # 4-byte Reload
	movl	2340(%rsp), %ecx        # 4-byte Reload
	movl	$4294967292, %edx       # imm = 0xFFFFFFFC
	addl	$-8, %eax
	movl	%ecx, 2292(%rsp)        # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	2292(%rsp), %esi        # 4-byte Reload
	shrl	%cl, %esi
	movq	2656(%rsp), %rdi        # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$21528, 38596(%rsp)     # imm = 0x5418
	andl	$255, %esi
	cmpl	$80, %esi
	movl	2460(%rsp), %esi        # 4-byte Reload
	movl	2476(%rsp), %r8d        # 4-byte Reload
	movl	2480(%rsp), %r9d        # 4-byte Reload
	movl	2484(%rsp), %r10d       # 4-byte Reload
	movl	2488(%rsp), %r11d       # 4-byte Reload
	movl	2492(%rsp), %ebx        # 4-byte Reload
	movl	2496(%rsp), %ebp        # 4-byte Reload
	movl	2500(%rsp), %r14d       # 4-byte Reload
	movl	2504(%rsp), %r15d       # 4-byte Reload
	movl	2508(%rsp), %r12d       # 4-byte Reload
	movl	2512(%rsp), %r13d       # 4-byte Reload
	movl	2516(%rsp), %ecx        # 4-byte Reload
	movl	2520(%rsp), %edi        # 4-byte Reload
	movl	%eax, 2288(%rsp)        # 4-byte Spill
	movl	2524(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33416(%rsp)       # 4-byte Spill
	movl	2528(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33412(%rsp)       # 4-byte Spill
	movl	2532(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33408(%rsp)       # 4-byte Spill
	movl	2536(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33404(%rsp)       # 4-byte Spill
	movl	2540(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33400(%rsp)       # 4-byte Spill
	movl	2544(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33396(%rsp)       # 4-byte Spill
	movl	2548(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33392(%rsp)       # 4-byte Spill
	movl	2552(%rsp), %eax        # 4-byte Reload
	movl	%esi, 33156(%rsp)       # 4-byte Spill
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33376(%rsp)       # 8-byte Spill
	movq	2560(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33368(%rsp)       # 8-byte Spill
	movq	2568(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33360(%rsp)       # 8-byte Spill
	movq	2576(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33352(%rsp)       # 8-byte Spill
	movq	2584(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33344(%rsp)       # 8-byte Spill
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33336(%rsp)       # 8-byte Spill
	movq	2600(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33328(%rsp)       # 8-byte Spill
	movq	2608(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33320(%rsp)       # 8-byte Spill
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33312(%rsp)       # 8-byte Spill
	movq	2624(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33304(%rsp)       # 8-byte Spill
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33296(%rsp)       # 8-byte Spill
	movq	2640(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33288(%rsp)       # 8-byte Spill
	movq	2648(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33280(%rsp)       # 8-byte Spill
	movq	2344(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33272(%rsp)       # 8-byte Spill
	movq	2352(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33264(%rsp)       # 8-byte Spill
	movq	2360(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33256(%rsp)       # 8-byte Spill
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33248(%rsp)       # 8-byte Spill
	movq	2376(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33240(%rsp)       # 8-byte Spill
	movq	2384(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33232(%rsp)       # 8-byte Spill
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33224(%rsp)       # 8-byte Spill
	movq	2400(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33216(%rsp)       # 8-byte Spill
	movq	2408(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33208(%rsp)       # 8-byte Spill
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33200(%rsp)       # 8-byte Spill
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33192(%rsp)       # 8-byte Spill
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33184(%rsp)       # 8-byte Spill
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33176(%rsp)       # 8-byte Spill
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 33164(%rsp)       # 4-byte Spill
	movl	2288(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33112(%rsp)       # 4-byte Spill
	movl	2532(%rsp), %eax        # 4-byte Reload
	movq	%rsi, 33168(%rsp)       # 8-byte Spill
	movq	2576(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25520(%rsp)       # 8-byte Spill
	movq	2584(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25512(%rsp)       # 8-byte Spill
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	2600(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25496(%rsp)       # 8-byte Spill
	movq	2608(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25488(%rsp)       # 8-byte Spill
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25480(%rsp)       # 8-byte Spill
	movq	2624(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25472(%rsp)       # 8-byte Spill
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25464(%rsp)       # 8-byte Spill
	movq	2640(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25456(%rsp)       # 8-byte Spill
	movq	2648(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	2344(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25440(%rsp)       # 8-byte Spill
	movq	2352(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	2360(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	2376(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	2384(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	2400(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	2408(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	2568(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	2560(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	2552(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	2548(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	2544(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	2540(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	2536(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	2528(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	2524(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	2520(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	2516(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	2512(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	2508(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	2504(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	2500(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	2496(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	2492(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	2488(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	2484(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	2480(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	2476(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	2460(%rsp), %eax        # 4-byte Reload
	movl	%ecx, 33160(%rsp)       # 4-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%edi, 33420(%rsp)       # 4-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movl	%r8d, 33152(%rsp)       # 4-byte Spill
	movl	%r9d, 33148(%rsp)       # 4-byte Spill
	movl	%r10d, 33144(%rsp)      # 4-byte Spill
	movl	%r11d, 33140(%rsp)      # 4-byte Spill
	movl	%ebx, 33136(%rsp)       # 4-byte Spill
	movl	%ebp, 33132(%rsp)       # 4-byte Spill
	movl	%r14d, 33128(%rsp)      # 4-byte Spill
	movl	%r15d, 33124(%rsp)      # 4-byte Spill
	movl	%r12d, 33120(%rsp)      # 4-byte Spill
	movl	%r13d, 33116(%rsp)      # 4-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_497
	jmp	.LBB68_542
.LBB68_493:                             # %if.end3131
                                        # =>This Inner Loop Header: Depth=1
	movl	2296(%rsp), %eax        # 4-byte Reload
	movl	2300(%rsp), %ecx        # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	2532(%rsp), %esi        # 4-byte Reload
	movq	2576(%rsp), %rdi        # 8-byte Reload
	movq	2584(%rsp), %r8         # 8-byte Reload
	movq	2592(%rsp), %r9         # 8-byte Reload
	movq	2600(%rsp), %r10        # 8-byte Reload
	movq	2608(%rsp), %r11        # 8-byte Reload
	movq	2616(%rsp), %rbx        # 8-byte Reload
	movq	2624(%rsp), %r14        # 8-byte Reload
	movq	2632(%rsp), %r15        # 8-byte Reload
	movq	2640(%rsp), %r12        # 8-byte Reload
	movq	2648(%rsp), %r13        # 8-byte Reload
	movq	2344(%rsp), %rbp        # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	2352(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	2360(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	2376(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	2384(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	2400(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	2408(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	2568(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	2560(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 2284(%rsp)        # 4-byte Spill
	movl	2552(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	2548(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	2544(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	2540(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	2536(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	2528(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	2524(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	2520(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	2516(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	2512(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	2508(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	2504(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	2500(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	2496(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	2492(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	2488(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	2484(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	2480(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	2476(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	2460(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 2280(%rsp)        # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.494:                              # %if.end3137
                                        #   in Loop: Header=BB68_493 Depth=1
	movq	2448(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21530, 38596(%rsp)     # imm = 0x541A
	shll	$8, %ecx
	movq	2328(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$21531, 38596(%rsp)     # imm = 0x541B
	movb	(%rsi), %dil
	movl	$21533, 38596(%rsp)     # imm = 0x541D
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$21534, 38596(%rsp)     # imm = 0x541E
	movl	2284(%rsp), %r8d        # 4-byte Reload
	addl	$8, %r8d
	movq	2656(%rsp), %r9         # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$21536, 38596(%rsp)     # imm = 0x5420
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$21537, 38596(%rsp)     # imm = 0x5421
	movl	2280(%rsp), %r10d       # 4-byte Reload
	addl	$-1, %r10d
	movq	2320(%rsp), %rsi        # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$21538, 38596(%rsp)     # imm = 0x5422
	movq	2304(%rsp), %r11        # 8-byte Reload
	movl	(%r11), %ebx
	movl	$21540, 38596(%rsp)     # imm = 0x5424
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$21543, 38596(%rsp)     # imm = 0x5427
	cmpl	$0, %ebx
	movl	%ecx, 2276(%rsp)        # 4-byte Spill
	movl	%r8d, 2272(%rsp)        # 4-byte Spill
	movl	%r10d, 2268(%rsp)       # 4-byte Spill
	jne	.LBB68_496
# %bb.495:                              # %if.then3160
                                        #   in Loop: Header=BB68_493 Depth=1
	movq	2312(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21545, 38596(%rsp)     # imm = 0x5429
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$21598, 38596(%rsp)     # imm = 0x545E
.LBB68_496:                             # %if.end3164
                                        #   in Loop: Header=BB68_493 Depth=1
	movl	2284(%rsp), %eax        # 4-byte Reload
	cmpl	$-1, %eax
	movl	2276(%rsp), %ecx        # 4-byte Reload
	movl	2272(%rsp), %edx        # 4-byte Reload
	movl	2268(%rsp), %esi        # 4-byte Reload
	movl	2272(%rsp), %edi        # 4-byte Reload
	movl	%ecx, 2340(%rsp)        # 4-byte Spill
	movl	%edx, 2336(%rsp)        # 4-byte Spill
	movl	%esi, 2300(%rsp)        # 4-byte Spill
	movl	%edi, 2296(%rsp)        # 4-byte Spill
	jg	.LBB68_492
	jmp	.LBB68_493
.LBB68_497:                             # %sw.bb3171
	movl	33112(%rsp), %eax       # 4-byte Reload
	movq	33168(%rsp), %rcx       # 8-byte Reload
	movq	33176(%rsp), %rdx       # 8-byte Reload
	movq	33184(%rsp), %rsi       # 8-byte Reload
	movq	33192(%rsp), %rdi       # 8-byte Reload
	movq	33200(%rsp), %r8        # 8-byte Reload
	movq	33208(%rsp), %r9        # 8-byte Reload
	movq	33216(%rsp), %r10       # 8-byte Reload
	movq	33224(%rsp), %r11       # 8-byte Reload
	movq	33232(%rsp), %rbx       # 8-byte Reload
	movq	33240(%rsp), %r14       # 8-byte Reload
	movq	33248(%rsp), %r15       # 8-byte Reload
	movq	33256(%rsp), %r12       # 8-byte Reload
	movq	33264(%rsp), %r13       # 8-byte Reload
	movq	33272(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 2256(%rsp)        # 8-byte Spill
	movq	33280(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2248(%rsp)        # 8-byte Spill
	movq	33288(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2240(%rsp)        # 8-byte Spill
	movq	33296(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2232(%rsp)        # 8-byte Spill
	movq	33304(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2224(%rsp)        # 8-byte Spill
	movq	33312(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2216(%rsp)        # 8-byte Spill
	movq	33320(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2208(%rsp)        # 8-byte Spill
	movq	33328(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2200(%rsp)        # 8-byte Spill
	movq	33336(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2192(%rsp)        # 8-byte Spill
	movq	33344(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2184(%rsp)        # 8-byte Spill
	movq	33352(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2176(%rsp)        # 8-byte Spill
	movq	33360(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2168(%rsp)        # 8-byte Spill
	movq	33368(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 2160(%rsp)        # 8-byte Spill
	movq	33376(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 2156(%rsp)        # 4-byte Spill
	movl	33164(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2152(%rsp)        # 4-byte Spill
	movl	33392(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2148(%rsp)        # 4-byte Spill
	movl	33396(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2144(%rsp)        # 4-byte Spill
	movl	33400(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2140(%rsp)        # 4-byte Spill
	movl	33404(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2136(%rsp)        # 4-byte Spill
	movl	33408(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2132(%rsp)        # 4-byte Spill
	movl	33412(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2128(%rsp)        # 4-byte Spill
	movl	33416(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2124(%rsp)        # 4-byte Spill
	movl	33420(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2120(%rsp)        # 4-byte Spill
	movl	33160(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2116(%rsp)        # 4-byte Spill
	movl	33116(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2112(%rsp)        # 4-byte Spill
	movl	33120(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2108(%rsp)        # 4-byte Spill
	movl	33124(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2104(%rsp)        # 4-byte Spill
	movl	33128(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2100(%rsp)        # 4-byte Spill
	movl	33132(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2096(%rsp)        # 4-byte Spill
	movl	33136(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2092(%rsp)        # 4-byte Spill
	movl	33140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2088(%rsp)        # 4-byte Spill
	movl	33144(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2084(%rsp)        # 4-byte Spill
	movl	33148(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2080(%rsp)        # 4-byte Spill
	movl	33152(%rsp), %eax       # 4-byte Reload
	movl	%eax, 2076(%rsp)        # 4-byte Spill
	movl	33156(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 2064(%rsp)        # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$46, (%rcx)
	movl	$21603, 38596(%rsp)     # imm = 0x5463
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 2060(%rsp)        # 4-byte Spill
	movl	2156(%rsp), %eax        # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 2048(%rsp)        # 8-byte Spill
	movq	%rdx, 2040(%rsp)        # 8-byte Spill
	movq	%rsi, 2032(%rsp)        # 8-byte Spill
	movq	%rdi, 2024(%rsp)        # 8-byte Spill
	movq	%r8, 2016(%rsp)         # 8-byte Spill
	movq	%r9, 2008(%rsp)         # 8-byte Spill
	movq	%r10, 2000(%rsp)        # 8-byte Spill
	movq	%r11, 1992(%rsp)        # 8-byte Spill
	movq	%rbx, 1984(%rsp)        # 8-byte Spill
	movq	%r14, 1976(%rsp)        # 8-byte Spill
	movq	%r15, 1968(%rsp)        # 8-byte Spill
	movq	%r12, 1960(%rsp)        # 8-byte Spill
	movq	%r13, 1952(%rsp)        # 8-byte Spill
	movq	%rbp, 1944(%rsp)        # 8-byte Spill
	jle	.LBB68_499
# %bb.498:                              # %sw.bb3171.if.then3178_crit_edge
	movq	2048(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21605, 38596(%rsp)     # imm = 0x5465
	movl	2156(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1940(%rsp)        # 4-byte Spill
	movl	%edx, 1936(%rsp)        # 4-byte Spill
	jmp	.LBB68_500
.LBB68_499:                             # %if.end3188.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$21607, 38596(%rsp)     # imm = 0x5467
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$21618, 38596(%rsp)     # imm = 0x5472
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	2156(%rsp), %r9d        # 4-byte Reload
	movq	%rcx, 1928(%rsp)        # 8-byte Spill
	movq	%rdx, 1920(%rsp)        # 8-byte Spill
	movq	%r8, 1912(%rsp)         # 8-byte Spill
	movq	%rdi, 1904(%rsp)        # 8-byte Spill
	movl	%esi, 1900(%rsp)        # 4-byte Spill
	movl	%r9d, 1896(%rsp)        # 4-byte Spill
	jmp	.LBB68_501
.LBB68_500:                             # %if.then3178
	movl	1936(%rsp), %eax        # 4-byte Reload
	movl	1940(%rsp), %ecx        # 4-byte Reload
	movl	$4294967292, %edx       # imm = 0xFFFFFFFC
	addl	$-8, %eax
	movl	%ecx, 1892(%rsp)        # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	1892(%rsp), %esi        # 4-byte Reload
	shrl	%cl, %esi
	movq	2256(%rsp), %rdi        # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$21627, 38596(%rsp)     # imm = 0x547B
	andl	$255, %esi
	cmpl	$144, %esi
	movl	2132(%rsp), %esi        # 4-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	2200(%rsp), %r11        # 8-byte Reload
	movq	2208(%rsp), %rbx        # 8-byte Reload
	movq	2216(%rsp), %r14        # 8-byte Reload
	movq	2224(%rsp), %r15        # 8-byte Reload
	movq	2232(%rsp), %r12        # 8-byte Reload
	movq	2240(%rsp), %r13        # 8-byte Reload
	movq	2248(%rsp), %rbp        # 8-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	%rcx, 25440(%rsp)       # 8-byte Spill
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25424(%rsp)       # 8-byte Spill
	movq	1968(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	2040(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 1888(%rsp)        # 4-byte Spill
	movl	2152(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	2148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	2144(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	2140(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	2136(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	2128(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	2124(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	2120(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	2116(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	2112(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	2108(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	2104(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	2100(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	2096(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	2092(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	2088(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	2084(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	2080(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	2076(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	2060(%rsp), %eax        # 4-byte Reload
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%rdi, 25432(%rsp)       # 8-byte Spill
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	%r8, 25520(%rsp)        # 8-byte Spill
	movq	%r9, 25512(%rsp)        # 8-byte Spill
	movq	%r10, 25504(%rsp)       # 8-byte Spill
	movq	%r11, 25496(%rsp)       # 8-byte Spill
	movq	%rbx, 25488(%rsp)       # 8-byte Spill
	movq	%r14, 25480(%rsp)       # 8-byte Spill
	movq	%r15, 25472(%rsp)       # 8-byte Spill
	movq	%r12, 25464(%rsp)       # 8-byte Spill
	movq	%r13, 25456(%rsp)       # 8-byte Spill
	movq	%rbp, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_505
	jmp	.LBB68_542
.LBB68_501:                             # %if.end3188
                                        # =>This Inner Loop Header: Depth=1
	movl	1896(%rsp), %eax        # 4-byte Reload
	movl	1900(%rsp), %ecx        # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	2132(%rsp), %esi        # 4-byte Reload
	movq	2176(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %r10        # 8-byte Reload
	movq	2208(%rsp), %r11        # 8-byte Reload
	movq	2216(%rsp), %rbx        # 8-byte Reload
	movq	2224(%rsp), %r14        # 8-byte Reload
	movq	2232(%rsp), %r15        # 8-byte Reload
	movq	2240(%rsp), %r12        # 8-byte Reload
	movq	2248(%rsp), %r13        # 8-byte Reload
	movq	1944(%rsp), %rbp        # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	1952(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	1968(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	1976(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	1984(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	1992(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	2000(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	2040(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	2160(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	2064(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 1884(%rsp)        # 4-byte Spill
	movl	2152(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	2148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	2144(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	2140(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	2136(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	2128(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	2124(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	2120(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	2116(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	2112(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	2108(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	2104(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	2100(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	2096(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	2092(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	2088(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	2084(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	2080(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	2076(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	2060(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 1880(%rsp)        # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.502:                              # %if.end3194
                                        #   in Loop: Header=BB68_501 Depth=1
	movq	2048(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21629, 38596(%rsp)     # imm = 0x547D
	shll	$8, %ecx
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$21630, 38596(%rsp)     # imm = 0x547E
	movb	(%rsi), %dil
	movl	$21632, 38596(%rsp)     # imm = 0x5480
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$21633, 38596(%rsp)     # imm = 0x5481
	movl	1884(%rsp), %r8d        # 4-byte Reload
	addl	$8, %r8d
	movq	2256(%rsp), %r9         # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$21635, 38596(%rsp)     # imm = 0x5483
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$21636, 38596(%rsp)     # imm = 0x5484
	movl	1880(%rsp), %r10d       # 4-byte Reload
	addl	$-1, %r10d
	movq	1920(%rsp), %rsi        # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$21637, 38596(%rsp)     # imm = 0x5485
	movq	1904(%rsp), %r11        # 8-byte Reload
	movl	(%r11), %ebx
	movl	$21639, 38596(%rsp)     # imm = 0x5487
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$21642, 38596(%rsp)     # imm = 0x548A
	cmpl	$0, %ebx
	movl	%ecx, 1876(%rsp)        # 4-byte Spill
	movl	%r8d, 1872(%rsp)        # 4-byte Spill
	movl	%r10d, 1868(%rsp)       # 4-byte Spill
	jne	.LBB68_504
# %bb.503:                              # %if.then3217
                                        #   in Loop: Header=BB68_501 Depth=1
	movq	1912(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21644, 38596(%rsp)     # imm = 0x548C
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$21648, 38596(%rsp)     # imm = 0x5490
.LBB68_504:                             # %if.end3221
                                        #   in Loop: Header=BB68_501 Depth=1
	movl	1884(%rsp), %eax        # 4-byte Reload
	cmpl	$-1, %eax
	movl	1876(%rsp), %ecx        # 4-byte Reload
	movl	1872(%rsp), %edx        # 4-byte Reload
	movl	1868(%rsp), %esi        # 4-byte Reload
	movl	1872(%rsp), %edi        # 4-byte Reload
	movl	%ecx, 1940(%rsp)        # 4-byte Spill
	movl	%edx, 1936(%rsp)        # 4-byte Spill
	movl	%esi, 1900(%rsp)        # 4-byte Spill
	movl	%edi, 1896(%rsp)        # 4-byte Spill
	jg	.LBB68_500
	jmp	.LBB68_501
.LBB68_505:                             # %if.end3227
	movq	38576(%rsp), %rax       # 8-byte Reload
	movl	$0, 3180(%rax)
	movl	$21700, 38596(%rsp)     # imm = 0x54C4
	movl	2060(%rsp), %ecx        # 4-byte Reload
	movl	2076(%rsp), %edx        # 4-byte Reload
	movl	2080(%rsp), %esi        # 4-byte Reload
	movl	2084(%rsp), %edi        # 4-byte Reload
	movl	2088(%rsp), %r8d        # 4-byte Reload
	movl	2092(%rsp), %r9d        # 4-byte Reload
	movl	2096(%rsp), %r10d       # 4-byte Reload
	movl	2100(%rsp), %r11d       # 4-byte Reload
	movl	2104(%rsp), %ebx        # 4-byte Reload
	movl	2108(%rsp), %ebp        # 4-byte Reload
	movl	2112(%rsp), %r14d       # 4-byte Reload
	movl	2116(%rsp), %r15d       # 4-byte Reload
	movl	2120(%rsp), %r12d       # 4-byte Reload
	movl	2124(%rsp), %r13d       # 4-byte Reload
	movl	2128(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33724(%rsp)       # 4-byte Spill
	movl	2132(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33720(%rsp)       # 4-byte Spill
	movl	2136(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33716(%rsp)       # 4-byte Spill
	movl	2140(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33712(%rsp)       # 4-byte Spill
	movl	2144(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33708(%rsp)       # 4-byte Spill
	movl	2148(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33704(%rsp)       # 4-byte Spill
	movl	2152(%rsp), %eax        # 4-byte Reload
	movl	%esi, 33460(%rsp)       # 4-byte Spill
	movq	2064(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33688(%rsp)       # 8-byte Spill
	movq	2160(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33680(%rsp)       # 8-byte Spill
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33672(%rsp)       # 8-byte Spill
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33664(%rsp)       # 8-byte Spill
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33656(%rsp)       # 8-byte Spill
	movq	2192(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33648(%rsp)       # 8-byte Spill
	movq	2200(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33640(%rsp)       # 8-byte Spill
	movq	2208(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33632(%rsp)       # 8-byte Spill
	movq	2216(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33624(%rsp)       # 8-byte Spill
	movq	2224(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33616(%rsp)       # 8-byte Spill
	movq	2232(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33608(%rsp)       # 8-byte Spill
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33600(%rsp)       # 8-byte Spill
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33592(%rsp)       # 8-byte Spill
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33584(%rsp)       # 8-byte Spill
	movq	1952(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33576(%rsp)       # 8-byte Spill
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33568(%rsp)       # 8-byte Spill
	movq	1968(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33560(%rsp)       # 8-byte Spill
	movq	1976(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33552(%rsp)       # 8-byte Spill
	movq	1984(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33544(%rsp)       # 8-byte Spill
	movq	1992(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33536(%rsp)       # 8-byte Spill
	movq	2000(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33528(%rsp)       # 8-byte Spill
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33520(%rsp)       # 8-byte Spill
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33512(%rsp)       # 8-byte Spill
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33504(%rsp)       # 8-byte Spill
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33496(%rsp)       # 8-byte Spill
	movq	2040(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33488(%rsp)       # 8-byte Spill
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 33476(%rsp)       # 4-byte Spill
	movl	1888(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33424(%rsp)       # 4-byte Spill
	movl	%ecx, 33468(%rsp)       # 4-byte Spill
	movl	%edx, 33464(%rsp)       # 4-byte Spill
	movq	%rsi, 33480(%rsp)       # 8-byte Spill
	movl	%edi, 33456(%rsp)       # 4-byte Spill
	movl	%r8d, 33452(%rsp)       # 4-byte Spill
	movl	%r9d, 33448(%rsp)       # 4-byte Spill
	movl	%r10d, 33444(%rsp)      # 4-byte Spill
	movl	%r11d, 33440(%rsp)      # 4-byte Spill
	movl	%ebx, 33436(%rsp)       # 4-byte Spill
	movl	%ebp, 33432(%rsp)       # 4-byte Spill
	movl	%r14d, 33428(%rsp)      # 4-byte Spill
	movl	%r15d, 33472(%rsp)      # 4-byte Spill
	movl	%r12d, 33732(%rsp)      # 4-byte Spill
	movl	%r13d, 33728(%rsp)      # 4-byte Spill
.LBB68_506:                             # %sw.bb3228
	movl	33424(%rsp), %eax       # 4-byte Reload
	movq	33480(%rsp), %rcx       # 8-byte Reload
	movq	33488(%rsp), %rdx       # 8-byte Reload
	movq	33496(%rsp), %rsi       # 8-byte Reload
	movq	33504(%rsp), %rdi       # 8-byte Reload
	movq	33512(%rsp), %r8        # 8-byte Reload
	movq	33520(%rsp), %r9        # 8-byte Reload
	movq	33528(%rsp), %r10       # 8-byte Reload
	movq	33536(%rsp), %r11       # 8-byte Reload
	movq	33544(%rsp), %rbx       # 8-byte Reload
	movq	33552(%rsp), %r14       # 8-byte Reload
	movq	33560(%rsp), %r15       # 8-byte Reload
	movq	33568(%rsp), %r12       # 8-byte Reload
	movq	33576(%rsp), %r13       # 8-byte Reload
	movq	33584(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 1856(%rsp)        # 8-byte Spill
	movq	33592(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1848(%rsp)        # 8-byte Spill
	movq	33600(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1840(%rsp)        # 8-byte Spill
	movq	33608(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1832(%rsp)        # 8-byte Spill
	movq	33616(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1824(%rsp)        # 8-byte Spill
	movq	33624(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1816(%rsp)        # 8-byte Spill
	movq	33632(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1808(%rsp)        # 8-byte Spill
	movq	33640(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1800(%rsp)        # 8-byte Spill
	movq	33648(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1792(%rsp)        # 8-byte Spill
	movq	33656(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1784(%rsp)        # 8-byte Spill
	movq	33664(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1776(%rsp)        # 8-byte Spill
	movq	33672(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1768(%rsp)        # 8-byte Spill
	movq	33680(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1760(%rsp)        # 8-byte Spill
	movq	33688(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 1756(%rsp)        # 4-byte Spill
	movl	33476(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1752(%rsp)        # 4-byte Spill
	movl	33704(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1748(%rsp)        # 4-byte Spill
	movl	33708(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1744(%rsp)        # 4-byte Spill
	movl	33712(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1740(%rsp)        # 4-byte Spill
	movl	33716(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1736(%rsp)        # 4-byte Spill
	movl	33720(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1732(%rsp)        # 4-byte Spill
	movl	33724(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1728(%rsp)        # 4-byte Spill
	movl	33728(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1724(%rsp)        # 4-byte Spill
	movl	33732(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1720(%rsp)        # 4-byte Spill
	movl	33472(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1716(%rsp)        # 4-byte Spill
	movl	33428(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1712(%rsp)        # 4-byte Spill
	movl	33432(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1708(%rsp)        # 4-byte Spill
	movl	33436(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1704(%rsp)        # 4-byte Spill
	movl	33440(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1700(%rsp)        # 4-byte Spill
	movl	33444(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1696(%rsp)        # 4-byte Spill
	movl	33448(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1692(%rsp)        # 4-byte Spill
	movl	33452(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1688(%rsp)        # 4-byte Spill
	movl	33456(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1684(%rsp)        # 4-byte Spill
	movl	33460(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1680(%rsp)        # 4-byte Spill
	movl	33464(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1676(%rsp)        # 4-byte Spill
	movl	33468(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 1664(%rsp)        # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$47, (%rcx)
	movl	$21705, 38596(%rsp)     # imm = 0x54C9
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 1660(%rsp)        # 4-byte Spill
	movl	1756(%rsp), %eax        # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 1648(%rsp)        # 8-byte Spill
	movq	%rdx, 1640(%rsp)        # 8-byte Spill
	movq	%rsi, 1632(%rsp)        # 8-byte Spill
	movq	%rdi, 1624(%rsp)        # 8-byte Spill
	movq	%r8, 1616(%rsp)         # 8-byte Spill
	movq	%r9, 1608(%rsp)         # 8-byte Spill
	movq	%r10, 1600(%rsp)        # 8-byte Spill
	movq	%r11, 1592(%rsp)        # 8-byte Spill
	movq	%rbx, 1584(%rsp)        # 8-byte Spill
	movq	%r14, 1576(%rsp)        # 8-byte Spill
	movq	%r15, 1568(%rsp)        # 8-byte Spill
	movq	%r12, 1560(%rsp)        # 8-byte Spill
	movq	%r13, 1552(%rsp)        # 8-byte Spill
	movq	%rbp, 1544(%rsp)        # 8-byte Spill
	jle	.LBB68_508
# %bb.507:                              # %sw.bb3228.if.then3235_crit_edge
	movq	1648(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21707, 38596(%rsp)     # imm = 0x54CB
	movl	1756(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1540(%rsp)        # 4-byte Spill
	movl	%edx, 1536(%rsp)        # 4-byte Spill
	jmp	.LBB68_509
.LBB68_508:                             # %if.end3245.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$21709, 38596(%rsp)     # imm = 0x54CD
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$21720, 38596(%rsp)     # imm = 0x54D8
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	1756(%rsp), %r9d        # 4-byte Reload
	movq	%rcx, 1528(%rsp)        # 8-byte Spill
	movq	%rdx, 1520(%rsp)        # 8-byte Spill
	movq	%r8, 1512(%rsp)         # 8-byte Spill
	movq	%rdi, 1504(%rsp)        # 8-byte Spill
	movl	%esi, 1500(%rsp)        # 4-byte Spill
	movl	%r9d, 1496(%rsp)        # 4-byte Spill
	jmp	.LBB68_510
.LBB68_509:                             # %if.then3235
	movl	1536(%rsp), %eax        # 4-byte Reload
	movl	1540(%rsp), %ecx        # 4-byte Reload
	addl	$-8, %eax
	movl	%ecx, 1492(%rsp)        # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	1492(%rsp), %edx        # 4-byte Reload
	shrl	%cl, %edx
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$21721, 38596(%rsp)     # imm = 0x54D9
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movl	3180(%rdi), %r8d
	movl	$21726, 38596(%rsp)     # imm = 0x54DE
	shll	$8, %r8d
	andl	$255, %edx
	orl	%edx, %r8d
	movl	%r8d, 3180(%rdi)
	movl	$21733, 38596(%rsp)     # imm = 0x54E5
	movl	1660(%rsp), %edx        # 4-byte Reload
	movl	1676(%rsp), %r8d        # 4-byte Reload
	movl	1680(%rsp), %r9d        # 4-byte Reload
	movl	1684(%rsp), %r10d       # 4-byte Reload
	movl	1688(%rsp), %r11d       # 4-byte Reload
	movl	1692(%rsp), %ebx        # 4-byte Reload
	movl	1696(%rsp), %ebp        # 4-byte Reload
	movl	1700(%rsp), %r14d       # 4-byte Reload
	movl	1704(%rsp), %r15d       # 4-byte Reload
	movl	1708(%rsp), %r12d       # 4-byte Reload
	movl	1712(%rsp), %r13d       # 4-byte Reload
	movl	1716(%rsp), %ecx        # 4-byte Reload
	movl	1720(%rsp), %esi        # 4-byte Reload
	movl	1724(%rsp), %edi        # 4-byte Reload
	movl	%eax, 1488(%rsp)        # 4-byte Spill
	movl	1728(%rsp), %eax        # 4-byte Reload
	movl	%eax, 34036(%rsp)       # 4-byte Spill
	movl	1732(%rsp), %eax        # 4-byte Reload
	movl	%eax, 34032(%rsp)       # 4-byte Spill
	movl	1736(%rsp), %eax        # 4-byte Reload
	movl	%eax, 34028(%rsp)       # 4-byte Spill
	movl	1740(%rsp), %eax        # 4-byte Reload
	movl	%eax, 34024(%rsp)       # 4-byte Spill
	movl	1744(%rsp), %eax        # 4-byte Reload
	movl	%eax, 34020(%rsp)       # 4-byte Spill
	movl	1748(%rsp), %eax        # 4-byte Reload
	movl	%eax, 34016(%rsp)       # 4-byte Spill
	movl	1752(%rsp), %eax        # 4-byte Reload
	movl	%esi, 34044(%rsp)       # 4-byte Spill
	movq	1664(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34000(%rsp)       # 8-byte Spill
	movq	1760(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33992(%rsp)       # 8-byte Spill
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33984(%rsp)       # 8-byte Spill
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33976(%rsp)       # 8-byte Spill
	movq	1784(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33968(%rsp)       # 8-byte Spill
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33960(%rsp)       # 8-byte Spill
	movq	1800(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33952(%rsp)       # 8-byte Spill
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33944(%rsp)       # 8-byte Spill
	movq	1816(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33936(%rsp)       # 8-byte Spill
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33928(%rsp)       # 8-byte Spill
	movq	1832(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33920(%rsp)       # 8-byte Spill
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33912(%rsp)       # 8-byte Spill
	movq	1848(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33904(%rsp)       # 8-byte Spill
	movq	1544(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33896(%rsp)       # 8-byte Spill
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33888(%rsp)       # 8-byte Spill
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33880(%rsp)       # 8-byte Spill
	movq	1568(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33872(%rsp)       # 8-byte Spill
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33864(%rsp)       # 8-byte Spill
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33856(%rsp)       # 8-byte Spill
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33848(%rsp)       # 8-byte Spill
	movq	1600(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33840(%rsp)       # 8-byte Spill
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33832(%rsp)       # 8-byte Spill
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33824(%rsp)       # 8-byte Spill
	movq	1624(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33816(%rsp)       # 8-byte Spill
	movq	1632(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33808(%rsp)       # 8-byte Spill
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 33800(%rsp)       # 8-byte Spill
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 33788(%rsp)       # 4-byte Spill
	movl	1488(%rsp), %eax        # 4-byte Reload
	movl	%eax, 33736(%rsp)       # 4-byte Spill
	movl	%edi, 34040(%rsp)       # 4-byte Spill
	movq	%rsi, 33792(%rsp)       # 8-byte Spill
	movl	%edx, 33780(%rsp)       # 4-byte Spill
	movl	%r8d, 33776(%rsp)       # 4-byte Spill
	movl	%r9d, 33772(%rsp)       # 4-byte Spill
	movl	%r10d, 33768(%rsp)      # 4-byte Spill
	movl	%r11d, 33764(%rsp)      # 4-byte Spill
	movl	%ebx, 33760(%rsp)       # 4-byte Spill
	movl	%ebp, 33756(%rsp)       # 4-byte Spill
	movl	%r14d, 33752(%rsp)      # 4-byte Spill
	movl	%r15d, 33748(%rsp)      # 4-byte Spill
	movl	%r12d, 33744(%rsp)      # 4-byte Spill
	movl	%r13d, 33740(%rsp)      # 4-byte Spill
	movl	%ecx, 33784(%rsp)       # 4-byte Spill
	jmp	.LBB68_514
.LBB68_510:                             # %if.end3245
                                        # =>This Inner Loop Header: Depth=1
	movl	1496(%rsp), %eax        # 4-byte Reload
	movl	1500(%rsp), %ecx        # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	1732(%rsp), %esi        # 4-byte Reload
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1792(%rsp), %r9         # 8-byte Reload
	movq	1800(%rsp), %r10        # 8-byte Reload
	movq	1808(%rsp), %r11        # 8-byte Reload
	movq	1816(%rsp), %rbx        # 8-byte Reload
	movq	1824(%rsp), %r14        # 8-byte Reload
	movq	1832(%rsp), %r15        # 8-byte Reload
	movq	1840(%rsp), %r12        # 8-byte Reload
	movq	1848(%rsp), %r13        # 8-byte Reload
	movq	1544(%rsp), %rbp        # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	1568(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	1600(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	1624(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	1632(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	1760(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	1664(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 1484(%rsp)        # 4-byte Spill
	movl	1752(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	1748(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	1744(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	1740(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	1736(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	1728(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	1724(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	1720(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	1716(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	1712(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	1708(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	1704(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	1700(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	1696(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	1692(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	1688(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	1684(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	1680(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	1676(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	1660(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 1480(%rsp)        # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.511:                              # %if.end3251
                                        #   in Loop: Header=BB68_510 Depth=1
	movq	1648(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21735, 38596(%rsp)     # imm = 0x54E7
	shll	$8, %ecx
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$21736, 38596(%rsp)     # imm = 0x54E8
	movb	(%rsi), %dil
	movl	$21738, 38596(%rsp)     # imm = 0x54EA
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$21739, 38596(%rsp)     # imm = 0x54EB
	movl	1484(%rsp), %r8d        # 4-byte Reload
	addl	$8, %r8d
	movq	1856(%rsp), %r9         # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$21741, 38596(%rsp)     # imm = 0x54ED
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$21742, 38596(%rsp)     # imm = 0x54EE
	movl	1480(%rsp), %r10d       # 4-byte Reload
	addl	$-1, %r10d
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$21743, 38596(%rsp)     # imm = 0x54EF
	movq	1504(%rsp), %r11        # 8-byte Reload
	movl	(%r11), %ebx
	movl	$21745, 38596(%rsp)     # imm = 0x54F1
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$21748, 38596(%rsp)     # imm = 0x54F4
	cmpl	$0, %ebx
	movl	%ecx, 1476(%rsp)        # 4-byte Spill
	movl	%r8d, 1472(%rsp)        # 4-byte Spill
	movl	%r10d, 1468(%rsp)       # 4-byte Spill
	jne	.LBB68_513
# %bb.512:                              # %if.then3274
                                        #   in Loop: Header=BB68_510 Depth=1
	movq	1512(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21750, 38596(%rsp)     # imm = 0x54F6
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$21803, 38596(%rsp)     # imm = 0x552B
.LBB68_513:                             # %if.end3278
                                        #   in Loop: Header=BB68_510 Depth=1
	movl	1484(%rsp), %eax        # 4-byte Reload
	cmpl	$-1, %eax
	movl	1476(%rsp), %ecx        # 4-byte Reload
	movl	1472(%rsp), %edx        # 4-byte Reload
	movl	1468(%rsp), %esi        # 4-byte Reload
	movl	1472(%rsp), %edi        # 4-byte Reload
	movl	%ecx, 1540(%rsp)        # 4-byte Spill
	movl	%edx, 1536(%rsp)        # 4-byte Spill
	movl	%esi, 1500(%rsp)        # 4-byte Spill
	movl	%edi, 1496(%rsp)        # 4-byte Spill
	jg	.LBB68_509
	jmp	.LBB68_510
.LBB68_514:                             # %sw.bb3285
	movl	33736(%rsp), %eax       # 4-byte Reload
	movq	33792(%rsp), %rcx       # 8-byte Reload
	movq	33800(%rsp), %rdx       # 8-byte Reload
	movq	33808(%rsp), %rsi       # 8-byte Reload
	movq	33816(%rsp), %rdi       # 8-byte Reload
	movq	33824(%rsp), %r8        # 8-byte Reload
	movq	33832(%rsp), %r9        # 8-byte Reload
	movq	33840(%rsp), %r10       # 8-byte Reload
	movq	33848(%rsp), %r11       # 8-byte Reload
	movq	33856(%rsp), %rbx       # 8-byte Reload
	movq	33864(%rsp), %r14       # 8-byte Reload
	movq	33872(%rsp), %r15       # 8-byte Reload
	movq	33880(%rsp), %r12       # 8-byte Reload
	movq	33888(%rsp), %r13       # 8-byte Reload
	movq	33896(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 1456(%rsp)        # 8-byte Spill
	movq	33904(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1448(%rsp)        # 8-byte Spill
	movq	33912(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1440(%rsp)        # 8-byte Spill
	movq	33920(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1432(%rsp)        # 8-byte Spill
	movq	33928(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1424(%rsp)        # 8-byte Spill
	movq	33936(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1416(%rsp)        # 8-byte Spill
	movq	33944(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1408(%rsp)        # 8-byte Spill
	movq	33952(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1400(%rsp)        # 8-byte Spill
	movq	33960(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1392(%rsp)        # 8-byte Spill
	movq	33968(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1384(%rsp)        # 8-byte Spill
	movq	33976(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1376(%rsp)        # 8-byte Spill
	movq	33984(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1368(%rsp)        # 8-byte Spill
	movq	33992(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1360(%rsp)        # 8-byte Spill
	movq	34000(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 1356(%rsp)        # 4-byte Spill
	movl	33788(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1352(%rsp)        # 4-byte Spill
	movl	34016(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1348(%rsp)        # 4-byte Spill
	movl	34020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1344(%rsp)        # 4-byte Spill
	movl	34024(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1340(%rsp)        # 4-byte Spill
	movl	34028(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1336(%rsp)        # 4-byte Spill
	movl	34032(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1332(%rsp)        # 4-byte Spill
	movl	34036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1328(%rsp)        # 4-byte Spill
	movl	34040(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1324(%rsp)        # 4-byte Spill
	movl	34044(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1320(%rsp)        # 4-byte Spill
	movl	33784(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1316(%rsp)        # 4-byte Spill
	movl	33740(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1312(%rsp)        # 4-byte Spill
	movl	33744(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1308(%rsp)        # 4-byte Spill
	movl	33748(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1304(%rsp)        # 4-byte Spill
	movl	33752(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1300(%rsp)        # 4-byte Spill
	movl	33756(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1296(%rsp)        # 4-byte Spill
	movl	33760(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1292(%rsp)        # 4-byte Spill
	movl	33764(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1288(%rsp)        # 4-byte Spill
	movl	33768(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1284(%rsp)        # 4-byte Spill
	movl	33772(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1280(%rsp)        # 4-byte Spill
	movl	33776(%rsp), %eax       # 4-byte Reload
	movl	%eax, 1276(%rsp)        # 4-byte Spill
	movl	33780(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 1264(%rsp)        # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$48, (%rcx)
	movl	$21808, 38596(%rsp)     # imm = 0x5530
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 1260(%rsp)        # 4-byte Spill
	movl	1356(%rsp), %eax        # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 1248(%rsp)        # 8-byte Spill
	movq	%rdx, 1240(%rsp)        # 8-byte Spill
	movq	%rsi, 1232(%rsp)        # 8-byte Spill
	movq	%rdi, 1224(%rsp)        # 8-byte Spill
	movq	%r8, 1216(%rsp)         # 8-byte Spill
	movq	%r9, 1208(%rsp)         # 8-byte Spill
	movq	%r10, 1200(%rsp)        # 8-byte Spill
	movq	%r11, 1192(%rsp)        # 8-byte Spill
	movq	%rbx, 1184(%rsp)        # 8-byte Spill
	movq	%r14, 1176(%rsp)        # 8-byte Spill
	movq	%r15, 1168(%rsp)        # 8-byte Spill
	movq	%r12, 1160(%rsp)        # 8-byte Spill
	movq	%r13, 1152(%rsp)        # 8-byte Spill
	movq	%rbp, 1144(%rsp)        # 8-byte Spill
	jle	.LBB68_516
# %bb.515:                              # %sw.bb3285.if.then3292_crit_edge
	movq	1248(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21810, 38596(%rsp)     # imm = 0x5532
	movl	1356(%rsp), %edx        # 4-byte Reload
	movl	%ecx, 1140(%rsp)        # 4-byte Spill
	movl	%edx, 1136(%rsp)        # 4-byte Spill
	jmp	.LBB68_517
.LBB68_516:                             # %if.end3302.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$21812, 38596(%rsp)     # imm = 0x5534
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$21823, 38596(%rsp)     # imm = 0x553F
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	1356(%rsp), %r9d        # 4-byte Reload
	movq	%rcx, 1128(%rsp)        # 8-byte Spill
	movq	%rdx, 1120(%rsp)        # 8-byte Spill
	movq	%r8, 1112(%rsp)         # 8-byte Spill
	movq	%rdi, 1104(%rsp)        # 8-byte Spill
	movl	%esi, 1100(%rsp)        # 4-byte Spill
	movl	%r9d, 1096(%rsp)        # 4-byte Spill
	jmp	.LBB68_518
.LBB68_517:                             # %if.then3292
	movl	1136(%rsp), %eax        # 4-byte Reload
	movl	1140(%rsp), %ecx        # 4-byte Reload
	addl	$-8, %eax
	movl	%ecx, 1092(%rsp)        # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	1092(%rsp), %edx        # 4-byte Reload
	shrl	%cl, %edx
	movq	1456(%rsp), %rsi        # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$21824, 38596(%rsp)     # imm = 0x5540
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movl	3180(%rdi), %r8d
	movl	$21829, 38596(%rsp)     # imm = 0x5545
	shll	$8, %r8d
	andl	$255, %edx
	orl	%edx, %r8d
	movl	%r8d, 3180(%rdi)
	movl	$21836, 38596(%rsp)     # imm = 0x554C
	movl	1260(%rsp), %edx        # 4-byte Reload
	movl	1276(%rsp), %r8d        # 4-byte Reload
	movl	1280(%rsp), %r9d        # 4-byte Reload
	movl	1284(%rsp), %r10d       # 4-byte Reload
	movl	1288(%rsp), %r11d       # 4-byte Reload
	movl	1292(%rsp), %ebx        # 4-byte Reload
	movl	1296(%rsp), %ebp        # 4-byte Reload
	movl	1300(%rsp), %r14d       # 4-byte Reload
	movl	1304(%rsp), %r15d       # 4-byte Reload
	movl	1308(%rsp), %r12d       # 4-byte Reload
	movl	1312(%rsp), %r13d       # 4-byte Reload
	movl	1316(%rsp), %ecx        # 4-byte Reload
	movl	1320(%rsp), %esi        # 4-byte Reload
	movl	1324(%rsp), %edi        # 4-byte Reload
	movl	%eax, 1088(%rsp)        # 4-byte Spill
	movl	1328(%rsp), %eax        # 4-byte Reload
	movl	%eax, 34348(%rsp)       # 4-byte Spill
	movl	1332(%rsp), %eax        # 4-byte Reload
	movl	%eax, 34344(%rsp)       # 4-byte Spill
	movl	1336(%rsp), %eax        # 4-byte Reload
	movl	%eax, 34340(%rsp)       # 4-byte Spill
	movl	1340(%rsp), %eax        # 4-byte Reload
	movl	%eax, 34336(%rsp)       # 4-byte Spill
	movl	1344(%rsp), %eax        # 4-byte Reload
	movl	%eax, 34332(%rsp)       # 4-byte Spill
	movl	1348(%rsp), %eax        # 4-byte Reload
	movl	%eax, 34328(%rsp)       # 4-byte Spill
	movl	1352(%rsp), %eax        # 4-byte Reload
	movl	%esi, 34356(%rsp)       # 4-byte Spill
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34312(%rsp)       # 8-byte Spill
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34304(%rsp)       # 8-byte Spill
	movq	1368(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34296(%rsp)       # 8-byte Spill
	movq	1376(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34288(%rsp)       # 8-byte Spill
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34280(%rsp)       # 8-byte Spill
	movq	1392(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34272(%rsp)       # 8-byte Spill
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34264(%rsp)       # 8-byte Spill
	movq	1408(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34256(%rsp)       # 8-byte Spill
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34248(%rsp)       # 8-byte Spill
	movq	1424(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34240(%rsp)       # 8-byte Spill
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34232(%rsp)       # 8-byte Spill
	movq	1440(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34224(%rsp)       # 8-byte Spill
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34216(%rsp)       # 8-byte Spill
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34208(%rsp)       # 8-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34200(%rsp)       # 8-byte Spill
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34192(%rsp)       # 8-byte Spill
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34184(%rsp)       # 8-byte Spill
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34176(%rsp)       # 8-byte Spill
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34168(%rsp)       # 8-byte Spill
	movq	1192(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34160(%rsp)       # 8-byte Spill
	movq	1200(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34152(%rsp)       # 8-byte Spill
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34144(%rsp)       # 8-byte Spill
	movq	1216(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34136(%rsp)       # 8-byte Spill
	movq	1224(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34128(%rsp)       # 8-byte Spill
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34120(%rsp)       # 8-byte Spill
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34112(%rsp)       # 8-byte Spill
	movq	1456(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 34100(%rsp)       # 4-byte Spill
	movl	1088(%rsp), %eax        # 4-byte Reload
	movl	%eax, 34048(%rsp)       # 4-byte Spill
	movl	%edi, 34352(%rsp)       # 4-byte Spill
	movq	%rsi, 34104(%rsp)       # 8-byte Spill
	movl	%edx, 34092(%rsp)       # 4-byte Spill
	movl	%r8d, 34088(%rsp)       # 4-byte Spill
	movl	%r9d, 34084(%rsp)       # 4-byte Spill
	movl	%r10d, 34080(%rsp)      # 4-byte Spill
	movl	%r11d, 34076(%rsp)      # 4-byte Spill
	movl	%ebx, 34072(%rsp)       # 4-byte Spill
	movl	%ebp, 34068(%rsp)       # 4-byte Spill
	movl	%r14d, 34064(%rsp)      # 4-byte Spill
	movl	%r15d, 34060(%rsp)      # 4-byte Spill
	movl	%r12d, 34056(%rsp)      # 4-byte Spill
	movl	%r13d, 34052(%rsp)      # 4-byte Spill
	movl	%ecx, 34096(%rsp)       # 4-byte Spill
	jmp	.LBB68_522
.LBB68_518:                             # %if.end3302
                                        # =>This Inner Loop Header: Depth=1
	movl	1096(%rsp), %eax        # 4-byte Reload
	movl	1100(%rsp), %ecx        # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	1332(%rsp), %esi        # 4-byte Reload
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1400(%rsp), %r10        # 8-byte Reload
	movq	1408(%rsp), %r11        # 8-byte Reload
	movq	1416(%rsp), %rbx        # 8-byte Reload
	movq	1424(%rsp), %r14        # 8-byte Reload
	movq	1432(%rsp), %r15        # 8-byte Reload
	movq	1440(%rsp), %r12        # 8-byte Reload
	movq	1448(%rsp), %r13        # 8-byte Reload
	movq	1144(%rsp), %rbp        # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	1192(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	1200(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	1216(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	1224(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	1368(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 1084(%rsp)        # 4-byte Spill
	movl	1352(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	1348(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	1344(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	1340(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	1336(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	1328(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	1324(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	1320(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	1316(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	1312(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	1308(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	1304(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	1300(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	1296(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	1292(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	1288(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	1284(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	1280(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	1276(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	1260(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 1080(%rsp)        # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.519:                              # %if.end3308
                                        #   in Loop: Header=BB68_518 Depth=1
	movq	1248(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21838, 38596(%rsp)     # imm = 0x554E
	shll	$8, %ecx
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$21839, 38596(%rsp)     # imm = 0x554F
	movb	(%rsi), %dil
	movl	$21841, 38596(%rsp)     # imm = 0x5551
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$21842, 38596(%rsp)     # imm = 0x5552
	movl	1084(%rsp), %r8d        # 4-byte Reload
	addl	$8, %r8d
	movq	1456(%rsp), %r9         # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$21844, 38596(%rsp)     # imm = 0x5554
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$21845, 38596(%rsp)     # imm = 0x5555
	movl	1080(%rsp), %r10d       # 4-byte Reload
	addl	$-1, %r10d
	movq	1120(%rsp), %rsi        # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$21846, 38596(%rsp)     # imm = 0x5556
	movq	1104(%rsp), %r11        # 8-byte Reload
	movl	(%r11), %ebx
	movl	$21848, 38596(%rsp)     # imm = 0x5558
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$21851, 38596(%rsp)     # imm = 0x555B
	cmpl	$0, %ebx
	movl	%ecx, 1076(%rsp)        # 4-byte Spill
	movl	%r8d, 1072(%rsp)        # 4-byte Spill
	movl	%r10d, 1068(%rsp)       # 4-byte Spill
	jne	.LBB68_521
# %bb.520:                              # %if.then3331
                                        #   in Loop: Header=BB68_518 Depth=1
	movq	1112(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21853, 38596(%rsp)     # imm = 0x555D
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$21906, 38596(%rsp)     # imm = 0x5592
.LBB68_521:                             # %if.end3335
                                        #   in Loop: Header=BB68_518 Depth=1
	movl	1084(%rsp), %eax        # 4-byte Reload
	cmpl	$-1, %eax
	movl	1076(%rsp), %ecx        # 4-byte Reload
	movl	1072(%rsp), %edx        # 4-byte Reload
	movl	1068(%rsp), %esi        # 4-byte Reload
	movl	1072(%rsp), %edi        # 4-byte Reload
	movl	%ecx, 1140(%rsp)        # 4-byte Spill
	movl	%edx, 1136(%rsp)        # 4-byte Spill
	movl	%esi, 1100(%rsp)        # 4-byte Spill
	movl	%edi, 1096(%rsp)        # 4-byte Spill
	jg	.LBB68_517
	jmp	.LBB68_518
.LBB68_522:                             # %sw.bb3342
	movl	34048(%rsp), %eax       # 4-byte Reload
	movq	34104(%rsp), %rcx       # 8-byte Reload
	movq	34112(%rsp), %rdx       # 8-byte Reload
	movq	34120(%rsp), %rsi       # 8-byte Reload
	movq	34128(%rsp), %rdi       # 8-byte Reload
	movq	34136(%rsp), %r8        # 8-byte Reload
	movq	34144(%rsp), %r9        # 8-byte Reload
	movq	34152(%rsp), %r10       # 8-byte Reload
	movq	34160(%rsp), %r11       # 8-byte Reload
	movq	34168(%rsp), %rbx       # 8-byte Reload
	movq	34176(%rsp), %r14       # 8-byte Reload
	movq	34184(%rsp), %r15       # 8-byte Reload
	movq	34192(%rsp), %r12       # 8-byte Reload
	movq	34200(%rsp), %r13       # 8-byte Reload
	movq	34208(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 1056(%rsp)        # 8-byte Spill
	movq	34216(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1048(%rsp)        # 8-byte Spill
	movq	34224(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1040(%rsp)        # 8-byte Spill
	movq	34232(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1032(%rsp)        # 8-byte Spill
	movq	34240(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1024(%rsp)        # 8-byte Spill
	movq	34248(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	movq	34256(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1008(%rsp)        # 8-byte Spill
	movq	34264(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 1000(%rsp)        # 8-byte Spill
	movq	34272(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 992(%rsp)         # 8-byte Spill
	movq	34280(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	movq	34288(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 976(%rsp)         # 8-byte Spill
	movq	34296(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 968(%rsp)         # 8-byte Spill
	movq	34304(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 960(%rsp)         # 8-byte Spill
	movq	34312(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 956(%rsp)         # 4-byte Spill
	movl	34100(%rsp), %eax       # 4-byte Reload
	movl	%eax, 952(%rsp)         # 4-byte Spill
	movl	34328(%rsp), %eax       # 4-byte Reload
	movl	%eax, 948(%rsp)         # 4-byte Spill
	movl	34332(%rsp), %eax       # 4-byte Reload
	movl	%eax, 944(%rsp)         # 4-byte Spill
	movl	34336(%rsp), %eax       # 4-byte Reload
	movl	%eax, 940(%rsp)         # 4-byte Spill
	movl	34340(%rsp), %eax       # 4-byte Reload
	movl	%eax, 936(%rsp)         # 4-byte Spill
	movl	34344(%rsp), %eax       # 4-byte Reload
	movl	%eax, 932(%rsp)         # 4-byte Spill
	movl	34348(%rsp), %eax       # 4-byte Reload
	movl	%eax, 928(%rsp)         # 4-byte Spill
	movl	34352(%rsp), %eax       # 4-byte Reload
	movl	%eax, 924(%rsp)         # 4-byte Spill
	movl	34356(%rsp), %eax       # 4-byte Reload
	movl	%eax, 920(%rsp)         # 4-byte Spill
	movl	34096(%rsp), %eax       # 4-byte Reload
	movl	%eax, 916(%rsp)         # 4-byte Spill
	movl	34052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 912(%rsp)         # 4-byte Spill
	movl	34056(%rsp), %eax       # 4-byte Reload
	movl	%eax, 908(%rsp)         # 4-byte Spill
	movl	34060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 904(%rsp)         # 4-byte Spill
	movl	34064(%rsp), %eax       # 4-byte Reload
	movl	%eax, 900(%rsp)         # 4-byte Spill
	movl	34068(%rsp), %eax       # 4-byte Reload
	movl	%eax, 896(%rsp)         # 4-byte Spill
	movl	34072(%rsp), %eax       # 4-byte Reload
	movl	%eax, 892(%rsp)         # 4-byte Spill
	movl	34076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 888(%rsp)         # 4-byte Spill
	movl	34080(%rsp), %eax       # 4-byte Reload
	movl	%eax, 884(%rsp)         # 4-byte Spill
	movl	34084(%rsp), %eax       # 4-byte Reload
	movl	%eax, 880(%rsp)         # 4-byte Spill
	movl	34088(%rsp), %eax       # 4-byte Reload
	movl	%eax, 876(%rsp)         # 4-byte Spill
	movl	34092(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 864(%rsp)         # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$49, (%rcx)
	movl	$21910, 38596(%rsp)     # imm = 0x5596
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 860(%rsp)         # 4-byte Spill
	movl	956(%rsp), %eax         # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 848(%rsp)         # 8-byte Spill
	movq	%rdx, 840(%rsp)         # 8-byte Spill
	movq	%rsi, 832(%rsp)         # 8-byte Spill
	movq	%rdi, 824(%rsp)         # 8-byte Spill
	movq	%r8, 816(%rsp)          # 8-byte Spill
	movq	%r9, 808(%rsp)          # 8-byte Spill
	movq	%r10, 800(%rsp)         # 8-byte Spill
	movq	%r11, 792(%rsp)         # 8-byte Spill
	movq	%rbx, 784(%rsp)         # 8-byte Spill
	movq	%r14, 776(%rsp)         # 8-byte Spill
	movq	%r15, 768(%rsp)         # 8-byte Spill
	movq	%r12, 760(%rsp)         # 8-byte Spill
	movq	%r13, 752(%rsp)         # 8-byte Spill
	movq	%rbp, 744(%rsp)         # 8-byte Spill
	jle	.LBB68_524
# %bb.523:                              # %sw.bb3342.if.then3349_crit_edge
	movq	848(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21912, 38596(%rsp)     # imm = 0x5598
	movl	956(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 740(%rsp)         # 4-byte Spill
	movl	%edx, 736(%rsp)         # 4-byte Spill
	jmp	.LBB68_525
.LBB68_524:                             # %if.end3359.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$21914, 38596(%rsp)     # imm = 0x559A
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$21925, 38596(%rsp)     # imm = 0x55A5
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	956(%rsp), %r9d         # 4-byte Reload
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	movq	%rdx, 720(%rsp)         # 8-byte Spill
	movq	%r8, 712(%rsp)          # 8-byte Spill
	movq	%rdi, 704(%rsp)         # 8-byte Spill
	movl	%esi, 700(%rsp)         # 4-byte Spill
	movl	%r9d, 696(%rsp)         # 4-byte Spill
	jmp	.LBB68_526
.LBB68_525:                             # %if.then3349
	movl	736(%rsp), %eax         # 4-byte Reload
	movl	740(%rsp), %ecx         # 4-byte Reload
	addl	$-8, %eax
	movl	%ecx, 692(%rsp)         # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	692(%rsp), %edx         # 4-byte Reload
	shrl	%cl, %edx
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$21926, 38596(%rsp)     # imm = 0x55A6
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movl	3180(%rdi), %r8d
	movl	$21931, 38596(%rsp)     # imm = 0x55AB
	shll	$8, %r8d
	andl	$255, %edx
	orl	%edx, %r8d
	movl	%r8d, 3180(%rdi)
	movl	$21938, 38596(%rsp)     # imm = 0x55B2
	movl	860(%rsp), %edx         # 4-byte Reload
	movl	876(%rsp), %r8d         # 4-byte Reload
	movl	880(%rsp), %r9d         # 4-byte Reload
	movl	884(%rsp), %r10d        # 4-byte Reload
	movl	888(%rsp), %r11d        # 4-byte Reload
	movl	892(%rsp), %ebx         # 4-byte Reload
	movl	896(%rsp), %ebp         # 4-byte Reload
	movl	900(%rsp), %r14d        # 4-byte Reload
	movl	904(%rsp), %r15d        # 4-byte Reload
	movl	908(%rsp), %r12d        # 4-byte Reload
	movl	912(%rsp), %r13d        # 4-byte Reload
	movl	916(%rsp), %ecx         # 4-byte Reload
	movl	920(%rsp), %esi         # 4-byte Reload
	movl	924(%rsp), %edi         # 4-byte Reload
	movl	%eax, 688(%rsp)         # 4-byte Spill
	movl	928(%rsp), %eax         # 4-byte Reload
	movl	%eax, 34660(%rsp)       # 4-byte Spill
	movl	932(%rsp), %eax         # 4-byte Reload
	movl	%eax, 34656(%rsp)       # 4-byte Spill
	movl	936(%rsp), %eax         # 4-byte Reload
	movl	%eax, 34652(%rsp)       # 4-byte Spill
	movl	940(%rsp), %eax         # 4-byte Reload
	movl	%eax, 34648(%rsp)       # 4-byte Spill
	movl	944(%rsp), %eax         # 4-byte Reload
	movl	%eax, 34644(%rsp)       # 4-byte Spill
	movl	948(%rsp), %eax         # 4-byte Reload
	movl	%eax, 34640(%rsp)       # 4-byte Spill
	movl	952(%rsp), %eax         # 4-byte Reload
	movl	%esi, 34668(%rsp)       # 4-byte Spill
	movq	864(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34624(%rsp)       # 8-byte Spill
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34616(%rsp)       # 8-byte Spill
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34608(%rsp)       # 8-byte Spill
	movq	976(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34600(%rsp)       # 8-byte Spill
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34592(%rsp)       # 8-byte Spill
	movq	992(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34584(%rsp)       # 8-byte Spill
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34576(%rsp)       # 8-byte Spill
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34568(%rsp)       # 8-byte Spill
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34560(%rsp)       # 8-byte Spill
	movq	1024(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34552(%rsp)       # 8-byte Spill
	movq	1032(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34544(%rsp)       # 8-byte Spill
	movq	1040(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34536(%rsp)       # 8-byte Spill
	movq	1048(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, 34528(%rsp)       # 8-byte Spill
	movq	744(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34520(%rsp)       # 8-byte Spill
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34512(%rsp)       # 8-byte Spill
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34504(%rsp)       # 8-byte Spill
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34496(%rsp)       # 8-byte Spill
	movq	776(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34488(%rsp)       # 8-byte Spill
	movq	784(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34480(%rsp)       # 8-byte Spill
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34472(%rsp)       # 8-byte Spill
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34464(%rsp)       # 8-byte Spill
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34456(%rsp)       # 8-byte Spill
	movq	816(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34448(%rsp)       # 8-byte Spill
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34440(%rsp)       # 8-byte Spill
	movq	832(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34432(%rsp)       # 8-byte Spill
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 34424(%rsp)       # 8-byte Spill
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movl	%eax, 34412(%rsp)       # 4-byte Spill
	movl	688(%rsp), %eax         # 4-byte Reload
	movl	%eax, 34360(%rsp)       # 4-byte Spill
	movl	%edi, 34664(%rsp)       # 4-byte Spill
	movq	%rsi, 34416(%rsp)       # 8-byte Spill
	movl	%edx, 34404(%rsp)       # 4-byte Spill
	movl	%r8d, 34400(%rsp)       # 4-byte Spill
	movl	%r9d, 34396(%rsp)       # 4-byte Spill
	movl	%r10d, 34392(%rsp)      # 4-byte Spill
	movl	%r11d, 34388(%rsp)      # 4-byte Spill
	movl	%ebx, 34384(%rsp)       # 4-byte Spill
	movl	%ebp, 34380(%rsp)       # 4-byte Spill
	movl	%r14d, 34376(%rsp)      # 4-byte Spill
	movl	%r15d, 34372(%rsp)      # 4-byte Spill
	movl	%r12d, 34368(%rsp)      # 4-byte Spill
	movl	%r13d, 34364(%rsp)      # 4-byte Spill
	movl	%ecx, 34408(%rsp)       # 4-byte Spill
	jmp	.LBB68_530
.LBB68_526:                             # %if.end3359
                                        # =>This Inner Loop Header: Depth=1
	movl	696(%rsp), %eax         # 4-byte Reload
	movl	700(%rsp), %ecx         # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	932(%rsp), %esi         # 4-byte Reload
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	992(%rsp), %r9          # 8-byte Reload
	movq	1000(%rsp), %r10        # 8-byte Reload
	movq	1008(%rsp), %r11        # 8-byte Reload
	movq	1016(%rsp), %rbx        # 8-byte Reload
	movq	1024(%rsp), %r14        # 8-byte Reload
	movq	1032(%rsp), %r15        # 8-byte Reload
	movq	1040(%rsp), %r12        # 8-byte Reload
	movq	1048(%rsp), %r13        # 8-byte Reload
	movq	744(%rsp), %rbp         # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	776(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	784(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	816(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	832(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	864(%rsp), %rsi         # 8-byte Reload
	movl	%eax, 684(%rsp)         # 4-byte Spill
	movl	952(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	948(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	944(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	940(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	936(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	928(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	924(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	920(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	916(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	912(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	908(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	904(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	900(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	896(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	892(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	888(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	884(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	880(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	876(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	860(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 680(%rsp)         # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.527:                              # %if.end3365
                                        #   in Loop: Header=BB68_526 Depth=1
	movq	848(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21940, 38596(%rsp)     # imm = 0x55B4
	shll	$8, %ecx
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$21941, 38596(%rsp)     # imm = 0x55B5
	movb	(%rsi), %dil
	movl	$21943, 38596(%rsp)     # imm = 0x55B7
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$21944, 38596(%rsp)     # imm = 0x55B8
	movl	684(%rsp), %r8d         # 4-byte Reload
	addl	$8, %r8d
	movq	1056(%rsp), %r9         # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$21946, 38596(%rsp)     # imm = 0x55BA
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$21947, 38596(%rsp)     # imm = 0x55BB
	movl	680(%rsp), %r10d        # 4-byte Reload
	addl	$-1, %r10d
	movq	720(%rsp), %rsi         # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$21948, 38596(%rsp)     # imm = 0x55BC
	movq	704(%rsp), %r11         # 8-byte Reload
	movl	(%r11), %ebx
	movl	$21950, 38596(%rsp)     # imm = 0x55BE
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$21953, 38596(%rsp)     # imm = 0x55C1
	cmpl	$0, %ebx
	movl	%ecx, 676(%rsp)         # 4-byte Spill
	movl	%r8d, 672(%rsp)         # 4-byte Spill
	movl	%r10d, 668(%rsp)        # 4-byte Spill
	jne	.LBB68_529
# %bb.528:                              # %if.then3388
                                        #   in Loop: Header=BB68_526 Depth=1
	movq	712(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$21955, 38596(%rsp)     # imm = 0x55C3
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$22008, 38596(%rsp)     # imm = 0x55F8
.LBB68_529:                             # %if.end3392
                                        #   in Loop: Header=BB68_526 Depth=1
	movl	684(%rsp), %eax         # 4-byte Reload
	cmpl	$-1, %eax
	movl	676(%rsp), %ecx         # 4-byte Reload
	movl	672(%rsp), %edx         # 4-byte Reload
	movl	668(%rsp), %esi         # 4-byte Reload
	movl	672(%rsp), %edi         # 4-byte Reload
	movl	%ecx, 740(%rsp)         # 4-byte Spill
	movl	%edx, 736(%rsp)         # 4-byte Spill
	movl	%esi, 700(%rsp)         # 4-byte Spill
	movl	%edi, 696(%rsp)         # 4-byte Spill
	jg	.LBB68_525
	jmp	.LBB68_526
.LBB68_530:                             # %sw.bb3399
	movl	34360(%rsp), %eax       # 4-byte Reload
	movq	34416(%rsp), %rcx       # 8-byte Reload
	movq	34424(%rsp), %rdx       # 8-byte Reload
	movq	34432(%rsp), %rsi       # 8-byte Reload
	movq	34440(%rsp), %rdi       # 8-byte Reload
	movq	34448(%rsp), %r8        # 8-byte Reload
	movq	34456(%rsp), %r9        # 8-byte Reload
	movq	34464(%rsp), %r10       # 8-byte Reload
	movq	34472(%rsp), %r11       # 8-byte Reload
	movq	34480(%rsp), %rbx       # 8-byte Reload
	movq	34488(%rsp), %r14       # 8-byte Reload
	movq	34496(%rsp), %r15       # 8-byte Reload
	movq	34504(%rsp), %r12       # 8-byte Reload
	movq	34512(%rsp), %r13       # 8-byte Reload
	movq	34520(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 656(%rsp)         # 8-byte Spill
	movq	34528(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 648(%rsp)         # 8-byte Spill
	movq	34536(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 640(%rsp)         # 8-byte Spill
	movq	34544(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 632(%rsp)         # 8-byte Spill
	movq	34552(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 624(%rsp)         # 8-byte Spill
	movq	34560(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	movq	34568(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	movq	34576(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 600(%rsp)         # 8-byte Spill
	movq	34584(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 592(%rsp)         # 8-byte Spill
	movq	34592(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 584(%rsp)         # 8-byte Spill
	movq	34600(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 576(%rsp)         # 8-byte Spill
	movq	34608(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 568(%rsp)         # 8-byte Spill
	movq	34616(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 560(%rsp)         # 8-byte Spill
	movq	34624(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 556(%rsp)         # 4-byte Spill
	movl	34412(%rsp), %eax       # 4-byte Reload
	movl	%eax, 552(%rsp)         # 4-byte Spill
	movl	34640(%rsp), %eax       # 4-byte Reload
	movl	%eax, 548(%rsp)         # 4-byte Spill
	movl	34644(%rsp), %eax       # 4-byte Reload
	movl	%eax, 544(%rsp)         # 4-byte Spill
	movl	34648(%rsp), %eax       # 4-byte Reload
	movl	%eax, 540(%rsp)         # 4-byte Spill
	movl	34652(%rsp), %eax       # 4-byte Reload
	movl	%eax, 536(%rsp)         # 4-byte Spill
	movl	34656(%rsp), %eax       # 4-byte Reload
	movl	%eax, 532(%rsp)         # 4-byte Spill
	movl	34660(%rsp), %eax       # 4-byte Reload
	movl	%eax, 528(%rsp)         # 4-byte Spill
	movl	34664(%rsp), %eax       # 4-byte Reload
	movl	%eax, 524(%rsp)         # 4-byte Spill
	movl	34668(%rsp), %eax       # 4-byte Reload
	movl	%eax, 520(%rsp)         # 4-byte Spill
	movl	34408(%rsp), %eax       # 4-byte Reload
	movl	%eax, 516(%rsp)         # 4-byte Spill
	movl	34364(%rsp), %eax       # 4-byte Reload
	movl	%eax, 512(%rsp)         # 4-byte Spill
	movl	34368(%rsp), %eax       # 4-byte Reload
	movl	%eax, 508(%rsp)         # 4-byte Spill
	movl	34372(%rsp), %eax       # 4-byte Reload
	movl	%eax, 504(%rsp)         # 4-byte Spill
	movl	34376(%rsp), %eax       # 4-byte Reload
	movl	%eax, 500(%rsp)         # 4-byte Spill
	movl	34380(%rsp), %eax       # 4-byte Reload
	movl	%eax, 496(%rsp)         # 4-byte Spill
	movl	34384(%rsp), %eax       # 4-byte Reload
	movl	%eax, 492(%rsp)         # 4-byte Spill
	movl	34388(%rsp), %eax       # 4-byte Reload
	movl	%eax, 488(%rsp)         # 4-byte Spill
	movl	34392(%rsp), %eax       # 4-byte Reload
	movl	%eax, 484(%rsp)         # 4-byte Spill
	movl	34396(%rsp), %eax       # 4-byte Reload
	movl	%eax, 480(%rsp)         # 4-byte Spill
	movl	34400(%rsp), %eax       # 4-byte Reload
	movl	%eax, 476(%rsp)         # 4-byte Spill
	movl	34404(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 464(%rsp)         # 8-byte Spill
	movq	38552(%rsp), %rcx       # 8-byte Reload
	movl	$50, (%rcx)
	movl	$22012, 38596(%rsp)     # imm = 0x55FC
	movq	38576(%rsp), %rcx       # 8-byte Reload
	addq	$32, %rcx
	movl	%eax, 460(%rsp)         # 4-byte Spill
	movl	556(%rsp), %eax         # 4-byte Reload
	cmpl	$7, %eax
	movq	%rcx, 448(%rsp)         # 8-byte Spill
	movq	%rdx, 440(%rsp)         # 8-byte Spill
	movq	%rsi, 432(%rsp)         # 8-byte Spill
	movq	%rdi, 424(%rsp)         # 8-byte Spill
	movq	%r8, 416(%rsp)          # 8-byte Spill
	movq	%r9, 408(%rsp)          # 8-byte Spill
	movq	%r10, 400(%rsp)         # 8-byte Spill
	movq	%r11, 392(%rsp)         # 8-byte Spill
	movq	%rbx, 384(%rsp)         # 8-byte Spill
	movq	%r14, 376(%rsp)         # 8-byte Spill
	movq	%r15, 368(%rsp)         # 8-byte Spill
	movq	%r12, 360(%rsp)         # 8-byte Spill
	movq	%r13, 352(%rsp)         # 8-byte Spill
	movq	%rbp, 344(%rsp)         # 8-byte Spill
	jle	.LBB68_532
# %bb.531:                              # %sw.bb3399.if.then3406_crit_edge
	movq	448(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$22014, 38596(%rsp)     # imm = 0x55FE
	movl	556(%rsp), %edx         # 4-byte Reload
	movl	%ecx, 340(%rsp)         # 4-byte Spill
	movl	%edx, 336(%rsp)         # 4-byte Spill
	jmp	.LBB68_533
.LBB68_532:                             # %if.end3416.lr.ph
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	(%rax), %rcx
	movl	$22016, 38596(%rsp)     # imm = 0x5600
	movq	%rcx, %rdx
	addq	$8, %rdx
	movl	8(%rcx), %esi
	movl	$22027, 38596(%rsp)     # imm = 0x560B
	movq	%rcx, %rdi
	addq	$12, %rdi
	movq	%rcx, %r8
	addq	$16, %r8
	movl	556(%rsp), %r9d         # 4-byte Reload
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	movq	%rdx, 320(%rsp)         # 8-byte Spill
	movq	%r8, 312(%rsp)          # 8-byte Spill
	movq	%rdi, 304(%rsp)         # 8-byte Spill
	movl	%esi, 300(%rsp)         # 4-byte Spill
	movl	%r9d, 296(%rsp)         # 4-byte Spill
	jmp	.LBB68_534
.LBB68_533:                             # %if.then3406
	movl	336(%rsp), %eax         # 4-byte Reload
	movl	340(%rsp), %ecx         # 4-byte Reload
	movl	$4, %edx
	addl	$-8, %eax
	movl	%ecx, 292(%rsp)         # 4-byte Spill
	movl	%eax, %ecx
                                        # kill: def %cl killed %ecx
	movl	292(%rsp), %esi         # 4-byte Reload
	shrl	%cl, %esi
	movq	656(%rsp), %rdi         # 8-byte Reload
	movl	%eax, (%rdi)
	movl	$22028, 38596(%rsp)     # imm = 0x560C
	movq	38576(%rsp), %r8        # 8-byte Reload
	movl	3180(%r8), %eax
	movl	$22033, 38596(%rsp)     # imm = 0x5611
	shll	$8, %eax
	andl	$255, %esi
	orl	%esi, %eax
	movl	%eax, 3180(%r8)
	movl	$22034, 38596(%rsp)     # imm = 0x5612
	movq	38552(%rsp), %r9        # 8-byte Reload
	movl	$1, (%r9)
	movl	$22041, 38596(%rsp)     # imm = 0x5619
	movl	532(%rsp), %eax         # 4-byte Reload
	movq	576(%rsp), %r10         # 8-byte Reload
	movq	584(%rsp), %r11         # 8-byte Reload
	movq	592(%rsp), %rbx         # 8-byte Reload
	movq	600(%rsp), %r14         # 8-byte Reload
	movq	608(%rsp), %r15         # 8-byte Reload
	movq	616(%rsp), %r12         # 8-byte Reload
	movq	624(%rsp), %r13         # 8-byte Reload
	movq	632(%rsp), %rbp         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %rsi         # 8-byte Reload
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	%rcx, 25456(%rsp)       # 8-byte Spill
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	416(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	464(%rsp), %rcx         # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	552(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	548(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	544(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	540(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	536(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	528(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	524(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	520(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	516(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	512(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	508(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	504(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	500(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	496(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	492(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	488(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	484(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	480(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	476(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	460(%rsp), %eax         # 4-byte Reload
	movq	%rsi, 25448(%rsp)       # 8-byte Spill
	movq	%rdi, 25440(%rsp)       # 8-byte Spill
	movq	%r8, 25432(%rsp)        # 8-byte Spill
	movq	%r9, 25424(%rsp)        # 8-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%r10, 25520(%rsp)       # 8-byte Spill
	movq	%r11, 25512(%rsp)       # 8-byte Spill
	movq	%rbx, 25504(%rsp)       # 8-byte Spill
	movq	%r14, 25496(%rsp)       # 8-byte Spill
	movq	%r15, 25488(%rsp)       # 8-byte Spill
	movq	%r12, 25480(%rsp)       # 8-byte Spill
	movq	%r13, 25472(%rsp)       # 8-byte Spill
	movq	%rbp, 25464(%rsp)       # 8-byte Spill
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	jmp	.LBB68_542
.LBB68_534:                             # %if.end3416
                                        # =>This Inner Loop Header: Depth=1
	movl	296(%rsp), %eax         # 4-byte Reload
	movl	300(%rsp), %ecx         # 4-byte Reload
	xorl	%edx, %edx
	cmpl	$0, %ecx
	movl	532(%rsp), %esi         # 4-byte Reload
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	592(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	608(%rsp), %r11         # 8-byte Reload
	movq	616(%rsp), %rbx         # 8-byte Reload
	movq	624(%rsp), %r14         # 8-byte Reload
	movq	632(%rsp), %r15         # 8-byte Reload
	movq	640(%rsp), %r12         # 8-byte Reload
	movq	648(%rsp), %r13         # 8-byte Reload
	movq	344(%rsp), %rbp         # 8-byte Reload
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	352(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25432(%rsp)       # 8-byte Spill
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25424(%rsp)       # 8-byte Spill
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25416(%rsp)       # 8-byte Spill
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25408(%rsp)       # 8-byte Spill
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25400(%rsp)       # 8-byte Spill
	movq	392(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25392(%rsp)       # 8-byte Spill
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25384(%rsp)       # 8-byte Spill
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25376(%rsp)       # 8-byte Spill
	movq	416(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25368(%rsp)       # 8-byte Spill
	movq	424(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25360(%rsp)       # 8-byte Spill
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25352(%rsp)       # 8-byte Spill
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25344(%rsp)       # 8-byte Spill
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25336(%rsp)       # 8-byte Spill
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 25248(%rsp)       # 8-byte Spill
	movq	464(%rsp), %rsi         # 8-byte Reload
	movl	%eax, 288(%rsp)         # 4-byte Spill
	movl	552(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	548(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	544(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	540(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	536(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	528(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	524(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	520(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	516(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	512(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	508(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	504(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	500(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	496(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	492(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	488(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	484(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	480(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	476(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	460(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	%ecx, 284(%rsp)         # 4-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movq	%rsi, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25244(%rsp)       # 4-byte Spill
	je	.LBB68_542
# %bb.535:                              # %if.end3422
                                        #   in Loop: Header=BB68_534 Depth=1
	movq	448(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$22043, 38596(%rsp)     # imm = 0x561B
	shll	$8, %ecx
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movl	$22044, 38596(%rsp)     # imm = 0x561C
	movb	(%rsi), %dil
	movl	$22046, 38596(%rsp)     # imm = 0x561E
	movzbl	%dil, %r8d
	orl	%r8d, %ecx
	movl	%ecx, (%rax)
	movl	$22047, 38596(%rsp)     # imm = 0x561F
	movl	288(%rsp), %r8d         # 4-byte Reload
	addl	$8, %r8d
	movq	656(%rsp), %r9          # 8-byte Reload
	movl	%r8d, (%r9)
	movl	$22049, 38596(%rsp)     # imm = 0x5621
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	movl	$22050, 38596(%rsp)     # imm = 0x5622
	movl	284(%rsp), %r10d        # 4-byte Reload
	addl	$-1, %r10d
	movq	320(%rsp), %rsi         # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$22051, 38596(%rsp)     # imm = 0x5623
	movq	304(%rsp), %r11         # 8-byte Reload
	movl	(%r11), %ebx
	movl	$22053, 38596(%rsp)     # imm = 0x5625
	addl	$1, %ebx
	movl	%ebx, (%r11)
	movl	$22056, 38596(%rsp)     # imm = 0x5628
	cmpl	$0, %ebx
	movl	%ecx, 280(%rsp)         # 4-byte Spill
	movl	%r8d, 276(%rsp)         # 4-byte Spill
	movl	%r10d, 272(%rsp)        # 4-byte Spill
	jne	.LBB68_537
# %bb.536:                              # %if.then3445
                                        #   in Loop: Header=BB68_534 Depth=1
	movq	312(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movl	$22058, 38596(%rsp)     # imm = 0x562A
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$22125, 38596(%rsp)     # imm = 0x566D
.LBB68_537:                             # %if.end3449
                                        #   in Loop: Header=BB68_534 Depth=1
	movl	288(%rsp), %eax         # 4-byte Reload
	cmpl	$-1, %eax
	movl	280(%rsp), %ecx         # 4-byte Reload
	movl	276(%rsp), %edx         # 4-byte Reload
	movl	272(%rsp), %esi         # 4-byte Reload
	movl	276(%rsp), %edi         # 4-byte Reload
	movl	%ecx, 340(%rsp)         # 4-byte Spill
	movl	%edx, 336(%rsp)         # 4-byte Spill
	movl	%esi, 300(%rsp)         # 4-byte Spill
	movl	%edi, 296(%rsp)         # 4-byte Spill
	jg	.LBB68_533
	jmp	.LBB68_534
.LBB68_538:                             # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
	xorl	%edi, %edi
	movl	38204(%rsp), %eax       # 4-byte Reload
	movq	38328(%rsp), %rcx       # 8-byte Reload
	movq	38312(%rsp), %rdx       # 8-byte Reload
	movq	38024(%rsp), %rsi       # 8-byte Reload
	movq	38008(%rsp), %r8        # 8-byte Reload
	movq	37992(%rsp), %r9        # 8-byte Reload
	movq	37976(%rsp), %r10       # 8-byte Reload
	movq	37960(%rsp), %r11       # 8-byte Reload
	movq	38320(%rsp), %rbx       # 8-byte Reload
	movq	38304(%rsp), %r14       # 8-byte Reload
	movq	38288(%rsp), %r15       # 8-byte Reload
	movq	38272(%rsp), %r12       # 8-byte Reload
	movq	38256(%rsp), %r13       # 8-byte Reload
	movq	38240(%rsp), %rbp       # 8-byte Reload
	movq	%rcx, 25520(%rsp)       # 8-byte Spill
	movq	38224(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	38208(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	38192(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	38176(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	38160(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	38144(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	38128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	38112(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	38096(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	38080(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	38064(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	38088(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	38104(%rsp), %rcx       # 8-byte Reload
	movl	%eax, 25332(%rsp)       # 4-byte Spill
	movl	38124(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	38140(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	38156(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	38172(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	38188(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	38220(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	38236(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	38252(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	38268(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25296(%rsp)       # 4-byte Spill
	movl	38284(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	38300(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	38052(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	38076(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	38060(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	37972(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	37988(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	38004(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	38020(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	38036(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	38056(%rsp), %eax       # 4-byte Reload
	movq	%rbp, 25424(%rsp)       # 8-byte Spill
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movq	%rdx, 25512(%rsp)       # 8-byte Spill
	movq	%rsi, 25504(%rsp)       # 8-byte Spill
	movq	%r8, 25496(%rsp)        # 8-byte Spill
	movq	%r9, 25488(%rsp)        # 8-byte Spill
	movq	%r10, 25480(%rsp)       # 8-byte Spill
	movq	%r11, 25472(%rsp)       # 8-byte Spill
	movq	%rbx, 25464(%rsp)       # 8-byte Spill
	movq	%r14, 25456(%rsp)       # 8-byte Spill
	movq	%r15, 25448(%rsp)       # 8-byte Spill
	movq	%r12, 25440(%rsp)       # 8-byte Spill
	movq	%r13, 25432(%rsp)       # 8-byte Spill
	movl	%edi, 25244(%rsp)       # 4-byte Spill
	jmp	.LBB68_542
.LBB68_539:                             # %save_state_and_return.loopexit5205
	movq	4128(%rsp), %rax        # 8-byte Reload
	movl	$4294967292, %ecx       # imm = 0xFFFFFFFC
	movl	%eax, %edx
	movl	8200(%rsp), %esi        # 4-byte Reload
	movq	8184(%rsp), %rax        # 8-byte Reload
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8216(%rsp), %r8         # 8-byte Reload
	movq	8224(%rsp), %r9         # 8-byte Reload
	movq	8232(%rsp), %r10        # 8-byte Reload
	movq	8240(%rsp), %r11        # 8-byte Reload
	movq	8248(%rsp), %rbx        # 8-byte Reload
	movq	8256(%rsp), %r14        # 8-byte Reload
	movq	8264(%rsp), %r15        # 8-byte Reload
	movq	8272(%rsp), %r12        # 8-byte Reload
	movq	8280(%rsp), %r13        # 8-byte Reload
	movq	8288(%rsp), %rbp        # 8-byte Reload
	movq	%rax, 25520(%rsp)       # 8-byte Spill
	movq	8296(%rsp), %rax        # 8-byte Reload
	movq	%rax, 25424(%rsp)       # 8-byte Spill
	movq	8304(%rsp), %rax        # 8-byte Reload
	movq	%rax, 25416(%rsp)       # 8-byte Spill
	movq	8312(%rsp), %rax        # 8-byte Reload
	movq	%rax, 25408(%rsp)       # 8-byte Spill
	movq	8320(%rsp), %rax        # 8-byte Reload
	movq	%rax, 25400(%rsp)       # 8-byte Spill
	movq	8328(%rsp), %rax        # 8-byte Reload
	movq	%rax, 25392(%rsp)       # 8-byte Spill
	movq	8336(%rsp), %rax        # 8-byte Reload
	movq	%rax, 25384(%rsp)       # 8-byte Spill
	movq	8344(%rsp), %rax        # 8-byte Reload
	movq	%rax, 25376(%rsp)       # 8-byte Spill
	movq	8352(%rsp), %rax        # 8-byte Reload
	movq	%rax, 25368(%rsp)       # 8-byte Spill
	movq	8360(%rsp), %rax        # 8-byte Reload
	movq	%rax, 25360(%rsp)       # 8-byte Spill
	movq	8368(%rsp), %rax        # 8-byte Reload
	movq	%rax, 25352(%rsp)       # 8-byte Spill
	movq	8376(%rsp), %rax        # 8-byte Reload
	movq	%rax, 25344(%rsp)       # 8-byte Spill
	movq	8384(%rsp), %rax        # 8-byte Reload
	movq	%rax, 25336(%rsp)       # 8-byte Spill
	movq	8392(%rsp), %rax        # 8-byte Reload
	movq	%rax, 25248(%rsp)       # 8-byte Spill
	movq	8400(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 268(%rsp)         # 4-byte Spill
	movl	8204(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25328(%rsp)       # 4-byte Spill
	movl	8412(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25324(%rsp)       # 4-byte Spill
	movl	8416(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25320(%rsp)       # 4-byte Spill
	movl	8420(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25316(%rsp)       # 4-byte Spill
	movl	8424(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25312(%rsp)       # 4-byte Spill
	movl	8140(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25308(%rsp)       # 4-byte Spill
	movl	8144(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25304(%rsp)       # 4-byte Spill
	movl	8148(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25300(%rsp)       # 4-byte Spill
	movl	8152(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25296(%rsp)       # 4-byte Spill
	movl	8156(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25292(%rsp)       # 4-byte Spill
	movl	8160(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25288(%rsp)       # 4-byte Spill
	movl	8164(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25284(%rsp)       # 4-byte Spill
	movl	8168(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25280(%rsp)       # 4-byte Spill
	movl	8160(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25276(%rsp)       # 4-byte Spill
	movl	8176(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25272(%rsp)       # 4-byte Spill
	movl	8180(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25268(%rsp)       # 4-byte Spill
	movl	8408(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25264(%rsp)       # 4-byte Spill
	movl	8192(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25260(%rsp)       # 4-byte Spill
	movl	8196(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, 25256(%rsp)       # 4-byte Spill
	movl	268(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, 25244(%rsp)       # 4-byte Spill
	movq	%rbp, 25432(%rsp)       # 8-byte Spill
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	%rax, 25232(%rsp)       # 8-byte Spill
	movq	%rdi, 25512(%rsp)       # 8-byte Spill
	movq	%r8, 25504(%rsp)        # 8-byte Spill
	movq	%r9, 25496(%rsp)        # 8-byte Spill
	movq	%r10, 25488(%rsp)       # 8-byte Spill
	movq	%r11, 25480(%rsp)       # 8-byte Spill
	movq	%rbx, 25472(%rsp)       # 8-byte Spill
	movq	%r14, 25464(%rsp)       # 8-byte Spill
	movq	%r15, 25456(%rsp)       # 8-byte Spill
	movq	%r12, 25448(%rsp)       # 8-byte Spill
	movq	%r13, 25440(%rsp)       # 8-byte Spill
	movl	%edx, 25228(%rsp)       # 4-byte Spill
	jmp	.LBB68_542
.LBB68_540:                             # %save_state_and_return.loopexit5207
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movq	5968(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %edx
	movl	6552(%rsp), %esi        # 4-byte Reload
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6560(%rsp), %r8         # 8-byte Reload
	movq	6568(%rsp), %r9         # 8-byte Reload
	movq	6576(%rsp), %r10        # 8-byte Reload
	movq	6584(%rsp), %r11        # 8-byte Reload
	movq	6592(%rsp), %rbx        # 8-byte Reload
	movq	6600(%rsp), %r14        # 8-byte Reload
	movq	6608(%rsp), %r15        # 8-byte Reload
	movq	6616(%rsp), %r12        # 8-byte Reload
	movq	6624(%rsp), %r13        # 8-byte Reload
	movq	6632(%rsp), %rbp        # 8-byte Reload
	movq	6640(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25432(%rsp)       # 8-byte Spill
	movq	6648(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25424(%rsp)       # 8-byte Spill
	movq	6656(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	6664(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	6672(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	6680(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	6688(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	6696(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	6704(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	6712(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	6720(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	6728(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	6736(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	6752(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	6760(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 264(%rsp)         # 4-byte Spill
	movl	6748(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	6776(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	6780(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	6784(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	6788(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	6484(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	6488(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	5976(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	6500(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	6072(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	6508(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	6512(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	6516(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	6520(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	6524(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	6772(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	6528(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	6532(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	6792(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	264(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25296(%rsp)       # 4-byte Spill
	jmp	.LBB68_542
.LBB68_541:                             # %save_state_and_return.loopexit5208
	movl	$4294967292, %eax       # imm = 0xFFFFFFFC
	movq	6024(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %edx
	movl	6552(%rsp), %esi        # 4-byte Reload
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6560(%rsp), %r8         # 8-byte Reload
	movq	6568(%rsp), %r9         # 8-byte Reload
	movq	6576(%rsp), %r10        # 8-byte Reload
	movq	6584(%rsp), %r11        # 8-byte Reload
	movq	6592(%rsp), %rbx        # 8-byte Reload
	movq	6600(%rsp), %r14        # 8-byte Reload
	movq	6608(%rsp), %r15        # 8-byte Reload
	movq	6616(%rsp), %r12        # 8-byte Reload
	movq	6624(%rsp), %r13        # 8-byte Reload
	movq	6632(%rsp), %rbp        # 8-byte Reload
	movq	6640(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25432(%rsp)       # 8-byte Spill
	movq	6648(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25424(%rsp)       # 8-byte Spill
	movq	6656(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25416(%rsp)       # 8-byte Spill
	movq	6664(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25408(%rsp)       # 8-byte Spill
	movq	6672(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25400(%rsp)       # 8-byte Spill
	movq	6680(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25392(%rsp)       # 8-byte Spill
	movq	6688(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25384(%rsp)       # 8-byte Spill
	movq	6696(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25376(%rsp)       # 8-byte Spill
	movq	6704(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25368(%rsp)       # 8-byte Spill
	movq	6712(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25360(%rsp)       # 8-byte Spill
	movq	6720(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25352(%rsp)       # 8-byte Spill
	movq	6728(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25344(%rsp)       # 8-byte Spill
	movq	6736(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25336(%rsp)       # 8-byte Spill
	movq	6752(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 25248(%rsp)       # 8-byte Spill
	movq	6760(%rsp), %rcx        # 8-byte Reload
	movl	%eax, 260(%rsp)         # 4-byte Spill
	movl	6748(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25328(%rsp)       # 4-byte Spill
	movl	6776(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25324(%rsp)       # 4-byte Spill
	movl	6780(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25320(%rsp)       # 4-byte Spill
	movl	6784(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25316(%rsp)       # 4-byte Spill
	movl	6788(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25312(%rsp)       # 4-byte Spill
	movl	6484(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25308(%rsp)       # 4-byte Spill
	movl	6488(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25304(%rsp)       # 4-byte Spill
	movl	6032(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25300(%rsp)       # 4-byte Spill
	movl	6500(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25292(%rsp)       # 4-byte Spill
	movl	6072(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25288(%rsp)       # 4-byte Spill
	movl	6508(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25284(%rsp)       # 4-byte Spill
	movl	6512(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25280(%rsp)       # 4-byte Spill
	movl	6516(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25276(%rsp)       # 4-byte Spill
	movl	6520(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25272(%rsp)       # 4-byte Spill
	movl	6524(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25268(%rsp)       # 4-byte Spill
	movl	6772(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25264(%rsp)       # 4-byte Spill
	movl	6528(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25260(%rsp)       # 4-byte Spill
	movl	6532(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25256(%rsp)       # 4-byte Spill
	movl	6792(%rsp), %eax        # 4-byte Reload
	movl	%eax, 25228(%rsp)       # 4-byte Spill
	movl	260(%rsp), %eax         # 4-byte Reload
	movl	%eax, 25244(%rsp)       # 4-byte Spill
	movq	%rcx, 25232(%rsp)       # 8-byte Spill
	movq	%rbp, 25440(%rsp)       # 8-byte Spill
	movl	%esi, 25332(%rsp)       # 4-byte Spill
	movq	%rdi, 25520(%rsp)       # 8-byte Spill
	movq	%r8, 25512(%rsp)        # 8-byte Spill
	movq	%r9, 25504(%rsp)        # 8-byte Spill
	movq	%r10, 25496(%rsp)       # 8-byte Spill
	movq	%r11, 25488(%rsp)       # 8-byte Spill
	movq	%rbx, 25480(%rsp)       # 8-byte Spill
	movq	%r14, 25472(%rsp)       # 8-byte Spill
	movq	%r15, 25464(%rsp)       # 8-byte Spill
	movq	%r12, 25456(%rsp)       # 8-byte Spill
	movq	%r13, 25448(%rsp)       # 8-byte Spill
	movl	%edx, 25296(%rsp)       # 4-byte Spill
.LBB68_542:                             # %save_state_and_return
	movl	25244(%rsp), %eax       # 4-byte Reload
	movl	25228(%rsp), %ecx       # 4-byte Reload
	movl	25256(%rsp), %edx       # 4-byte Reload
	movl	25260(%rsp), %esi       # 4-byte Reload
	movl	25264(%rsp), %edi       # 4-byte Reload
	movl	25268(%rsp), %r8d       # 4-byte Reload
	movl	25272(%rsp), %r9d       # 4-byte Reload
	movl	25276(%rsp), %r10d      # 4-byte Reload
	movl	25280(%rsp), %r11d      # 4-byte Reload
	movl	25284(%rsp), %ebx       # 4-byte Reload
	movl	25288(%rsp), %ebp       # 4-byte Reload
	movl	25292(%rsp), %r14d      # 4-byte Reload
	movl	25296(%rsp), %r15d      # 4-byte Reload
	movl	25300(%rsp), %r12d      # 4-byte Reload
	movl	25304(%rsp), %r13d      # 4-byte Reload
	movl	%eax, 256(%rsp)         # 4-byte Spill
	movl	25308(%rsp), %eax       # 4-byte Reload
	movl	%eax, 252(%rsp)         # 4-byte Spill
	movl	25312(%rsp), %eax       # 4-byte Reload
	movl	%eax, 248(%rsp)         # 4-byte Spill
	movl	25316(%rsp), %eax       # 4-byte Reload
	movl	%eax, 244(%rsp)         # 4-byte Spill
	movl	25320(%rsp), %eax       # 4-byte Reload
	movl	%eax, 240(%rsp)         # 4-byte Spill
	movl	25324(%rsp), %eax       # 4-byte Reload
	movl	%eax, 236(%rsp)         # 4-byte Spill
	movl	25328(%rsp), %eax       # 4-byte Reload
	movl	%esi, 232(%rsp)         # 4-byte Spill
	movq	25232(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	movq	25248(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movq	25336(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	movq	25344(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 200(%rsp)         # 8-byte Spill
	movq	25352(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 192(%rsp)         # 8-byte Spill
	movq	25360(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 184(%rsp)         # 8-byte Spill
	movq	25368(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 176(%rsp)         # 8-byte Spill
	movq	25376(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 168(%rsp)         # 8-byte Spill
	movq	25384(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 160(%rsp)         # 8-byte Spill
	movq	25392(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 152(%rsp)         # 8-byte Spill
	movq	25400(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 144(%rsp)         # 8-byte Spill
	movq	25408(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 136(%rsp)         # 8-byte Spill
	movq	25416(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	movq	25424(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 120(%rsp)         # 8-byte Spill
	movq	25432(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 112(%rsp)         # 8-byte Spill
	movq	25440(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 104(%rsp)         # 8-byte Spill
	movq	25448(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 96(%rsp)          # 8-byte Spill
	movq	25456(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 88(%rsp)          # 8-byte Spill
	movq	25464(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 80(%rsp)          # 8-byte Spill
	movq	25472(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 72(%rsp)          # 8-byte Spill
	movq	25480(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movq	25488(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movq	25496(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	25504(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 40(%rsp)          # 8-byte Spill
	movq	25512(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, 32(%rsp)          # 8-byte Spill
	movq	25520(%rsp), %rsi       # 8-byte Reload
	movl	%eax, 28(%rsp)          # 4-byte Spill
	movl	25332(%rsp), %eax       # 4-byte Reload
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	movq	38536(%rsp), %rsi       # 8-byte Reload
	movl	%ecx, (%rsi)
	movl	$22126, 38596(%rsp)     # imm = 0x566E
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	%edx, (%rsi)
	movl	$22127, 38596(%rsp)     # imm = 0x566F
	movq	32(%rsp), %rsi          # 8-byte Reload
	movl	232(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, (%rsi)
	movl	$22128, 38596(%rsp)     # imm = 0x5670
	movq	40(%rsp), %rsi          # 8-byte Reload
	movl	%edi, (%rsi)
	movl	$22129, 38596(%rsp)     # imm = 0x5671
	movq	48(%rsp), %rsi          # 8-byte Reload
	movl	%r8d, (%rsi)
	movl	$22130, 38596(%rsp)     # imm = 0x5672
	movq	56(%rsp), %rsi          # 8-byte Reload
	movl	%r9d, (%rsi)
	movl	$22131, 38596(%rsp)     # imm = 0x5673
	movq	64(%rsp), %rsi          # 8-byte Reload
	movl	%r10d, (%rsi)
	movl	$22132, 38596(%rsp)     # imm = 0x5674
	movq	72(%rsp), %rsi          # 8-byte Reload
	movl	%r11d, (%rsi)
	movl	$22133, 38596(%rsp)     # imm = 0x5675
	movq	80(%rsp), %rsi          # 8-byte Reload
	movl	%ebx, (%rsi)
	movl	$22134, 38596(%rsp)     # imm = 0x5676
	movq	88(%rsp), %rsi          # 8-byte Reload
	movl	%ebp, (%rsi)
	movl	$22135, 38596(%rsp)     # imm = 0x5677
	movq	96(%rsp), %rsi          # 8-byte Reload
	movl	%r14d, (%rsi)
	movl	$22136, 38596(%rsp)     # imm = 0x5678
	movq	104(%rsp), %rsi         # 8-byte Reload
	movl	%r15d, (%rsi)
	movl	$22137, 38596(%rsp)     # imm = 0x5679
	movq	112(%rsp), %rsi         # 8-byte Reload
	movl	%r12d, (%rsi)
	movl	$22138, 38596(%rsp)     # imm = 0x567A
	movq	120(%rsp), %rsi         # 8-byte Reload
	movl	%r13d, (%rsi)
	movl	$22139, 38596(%rsp)     # imm = 0x567B
	movq	128(%rsp), %rsi         # 8-byte Reload
	movl	252(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, (%rsi)
	movl	$22140, 38596(%rsp)     # imm = 0x567C
	movq	136(%rsp), %rsi         # 8-byte Reload
	movl	%eax, (%rsi)
	movl	$22141, 38596(%rsp)     # imm = 0x567D
	movq	144(%rsp), %rsi         # 8-byte Reload
	movl	248(%rsp), %eax         # 4-byte Reload
	movl	%eax, (%rsi)
	movl	$22142, 38596(%rsp)     # imm = 0x567E
	movq	152(%rsp), %rsi         # 8-byte Reload
	movl	244(%rsp), %eax         # 4-byte Reload
	movl	%eax, (%rsi)
	movl	$22143, 38596(%rsp)     # imm = 0x567F
	movq	160(%rsp), %rsi         # 8-byte Reload
	movl	240(%rsp), %eax         # 4-byte Reload
	movl	%eax, (%rsi)
	movl	$22144, 38596(%rsp)     # imm = 0x5680
	movq	168(%rsp), %rsi         # 8-byte Reload
	movl	236(%rsp), %eax         # 4-byte Reload
	movl	%eax, (%rsi)
	movl	$22145, 38596(%rsp)     # imm = 0x5681
	movq	176(%rsp), %rsi         # 8-byte Reload
	movl	28(%rsp), %eax          # 4-byte Reload
	movl	%eax, (%rsi)
	movl	$22146, 38596(%rsp)     # imm = 0x5682
	movq	184(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	%rdi, (%rsi)
	movl	$22147, 38596(%rsp)     # imm = 0x5683
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, (%rdi)
	movl	$22148, 38596(%rsp)     # imm = 0x5684
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	%rdi, (%rsi)
	movl	$22151, 38596(%rsp)     # imm = 0x5687
	movl	256(%rsp), %eax         # 4-byte Reload
	addq	$38600, %rsp            # imm = 0x96C8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB68_543:                             # %for.body2594.1
                                        #   in Loop: Header=BB68_436 Depth=1
	movq	38576(%rsp), %rax       # 8-byte Reload
	movq	4120(%rsp), %rcx        # 8-byte Reload
	movl	1096(%rax,%rcx,4), %edx
	movl	$22157, 38596(%rsp)     # imm = 0x568D
	cmpl	$0, %edx
	setl	%sil
	movl	8152(%rsp), %edi        # 4-byte Reload
	cmpl	%edi, %edx
	setg	%r8b
	orb	%r8b, %sil
	testb	$1, %sil
	movq	%rcx, 4128(%rsp)        # 8-byte Spill
	jne	.LBB68_539
# %bb.544:                              # %for.inc2608.1
                                        #   in Loop: Header=BB68_436 Depth=1
	movq	4136(%rsp), %rax        # 8-byte Reload
	orq	$2, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	1096(%rcx,%rax,4), %edx
	movl	$22163, 38596(%rsp)     # imm = 0x5693
	cmpl	$0, %edx
	setl	%sil
	movl	8152(%rsp), %edi        # 4-byte Reload
	cmpl	%edi, %edx
	setg	%r8b
	orb	%r8b, %sil
	testb	$1, %sil
	movq	%rax, 4128(%rsp)        # 8-byte Spill
	jne	.LBB68_539
# %bb.545:                              # %for.inc2608.2
                                        #   in Loop: Header=BB68_436 Depth=1
	movq	4136(%rsp), %rax        # 8-byte Reload
	orq	$3, %rax
	movq	38576(%rsp), %rcx       # 8-byte Reload
	movl	1096(%rcx,%rax,4), %edx
	movl	$22173, 38596(%rsp)     # imm = 0x569D
	cmpl	$0, %edx
	setl	%sil
	movl	8152(%rsp), %edi        # 4-byte Reload
	cmpl	%edi, %edx
	setg	%r8b
	orb	%r8b, %sil
	testb	$1, %sil
	movq	%rax, 4128(%rsp)        # 8-byte Spill
	jne	.LBB68_539
# %bb.546:                              # %for.inc2608.3
                                        #   in Loop: Header=BB68_436 Depth=1
	movq	4136(%rsp), %rax        # 8-byte Reload
	addq	$4, %rax
	movq	%rax, 4144(%rsp)        # 8-byte Spill
	jmp	.LBB68_436
.LBB68_547:                             # %if.then.i.1
                                        #   in Loop: Header=BB68_209 Depth=1
	movl	15408(%rsp), %eax       # 4-byte Reload
	movb	%al, %cl
	orb	$1, %cl
	movl	15388(%rsp), %edx       # 4-byte Reload
	movslq	%edx, %rsi
	movq	38576(%rsp), %rdi       # 8-byte Reload
	movb	%cl, 3468(%rdi,%rsi)
	movl	$22174, 38596(%rsp)     # imm = 0x569E
	movq	15416(%rsp), %rsi       # 8-byte Reload
	movl	(%rsi), %r8d
	movl	$22176, 38596(%rsp)     # imm = 0x56A0
	addl	$1, %r8d
	movl	%r8d, (%rsi)
	movl	$22219, 38596(%rsp)     # imm = 0x56CB
	movl	%r8d, 15384(%rsp)       # 4-byte Spill
.LBB68_548:                             # %for.inc.i.1
                                        #   in Loop: Header=BB68_209 Depth=1
	movl	15384(%rsp), %eax       # 4-byte Reload
	movq	15400(%rsp), %rcx       # 8-byte Reload
	addq	$2, %rcx
	movl	15408(%rsp), %edx       # 4-byte Reload
	addl	$2, %edx
	cmpq	$256, %rcx              # imm = 0x100
	movl	%eax, %esi
	movl	%eax, 15380(%rsp)       # 4-byte Spill
	movl	%esi, 15428(%rsp)       # 4-byte Spill
	movq	%rcx, 15432(%rsp)       # 8-byte Spill
	movl	%edx, 15412(%rsp)       # 4-byte Spill
	je	.LBB68_212
	jmp	.LBB68_209
.Lfunc_end68:
	.size	BZ2_decompress, .Lfunc_end68-BZ2_decompress
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI68_0:
	.quad	.LBB68_33
	.quad	.LBB68_32
	.quad	.LBB68_31
	.quad	.LBB68_3
	.quad	.LBB68_30
	.quad	.LBB68_29
	.quad	.LBB68_28
	.quad	.LBB68_27
	.quad	.LBB68_26
	.quad	.LBB68_4
	.quad	.LBB68_25
	.quad	.LBB68_24
	.quad	.LBB68_23
	.quad	.LBB68_22
	.quad	.LBB68_21
	.quad	.LBB68_20
	.quad	.LBB68_19
	.quad	.LBB68_185
	.quad	.LBB68_197
	.quad	.LBB68_214
	.quad	.LBB68_18
	.quad	.LBB68_231
	.quad	.LBB68_266
	.quad	.LBB68_276
	.quad	.LBB68_14
	.quad	.LBB68_310
	.quad	.LBB68_15
	.quad	.LBB68_340
	.quad	.LBB68_16
	.quad	.LBB68_409
	.quad	.LBB68_17
	.quad	.LBB68_13
	.quad	.LBB68_12
	.quad	.LBB68_11
	.quad	.LBB68_10
	.quad	.LBB68_9
	.quad	.LBB68_8
	.quad	.LBB68_7
	.quad	.LBB68_6
	.quad	.LBB68_5
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4               # -- Begin function BZ2_hbMakeCodeLengths
.LCPI69_0:
	.long	256                     # 0x100
	.long	256                     # 0x100
	.long	256                     # 0x100
	.long	256                     # 0x100
.LCPI69_1:
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	255                     # 0xff
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	255                     # 0xff
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	255                     # 0xff
	.byte	255                     # 0xff
	.byte	0                       # 0x0
	.byte	255                     # 0xff
	.byte	255                     # 0xff
	.byte	255                     # 0xff
	.text
	.globl	BZ2_hbMakeCodeLengths
	.p2align	4, 0x90
	.type	BZ2_hbMakeCodeLengths,@function
BZ2_hbMakeCodeLengths:                  # @BZ2_hbMakeCodeLengths
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$5968, %rsp             # imm = 0x1750
	.cfi_def_cfa_offset 6016
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	leaq	784(%rsp), %rax
	leaq	2848(%rsp), %r8
	leaq	4912(%rsp), %r9
	movl	$9999, 5964(%rsp)       # imm = 0x270F
	cmpl	$0, %edx
	movl	%edx, 780(%rsp)         # 4-byte Spill
	movq	%rsi, 768(%rsp)         # 8-byte Spill
	movq	%rdi, 760(%rsp)         # 8-byte Spill
	movl	%ecx, 756(%rsp)         # 4-byte Spill
	movq	%r8, 744(%rsp)          # 8-byte Spill
	movq	%r9, 736(%rsp)          # 8-byte Spill
	movq	%rax, 728(%rsp)         # 8-byte Spill
	jle	.LBB69_10
# %bb.1:                                # %for.body.lr.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	780(%rsp), %eax         # 4-byte Reload
	movl	%eax, %edx
	movl	%edx, %esi
	cmpl	$8, %eax
	movq	%rsi, 720(%rsp)         # 8-byte Spill
	movq	%rcx, 712(%rsp)         # 8-byte Spill
	jb	.LBB69_8
# %bb.2:                                # %vector.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$4294967288, %eax       # imm = 0xFFFFFFF8
	movl	%eax, %edx
	movq	720(%rsp), %rsi         # 8-byte Reload
	andq	%rdx, %rsi
	movq	%rsi, %rdx
	addq	$-8, %rdx
	movq	%rdx, %rdi
	shrq	$3, %rdi
	addq	$1, %rdi
	movq	%rdi, %r8
	andq	$1, %r8
	cmpq	$0, %rdx
	movq	%rdi, 704(%rsp)         # 8-byte Spill
	movq	%rsi, 696(%rsp)         # 8-byte Spill
	movq	%r8, 688(%rsp)          # 8-byte Spill
	movq	%rcx, 680(%rsp)         # 8-byte Spill
	je	.LBB69_5
# %bb.3:                                # %vector.ph.new
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	subq	%rsi, %rdx
	movq	%rcx, 672(%rsp)         # 8-byte Spill
	movq	%rdx, 664(%rsp)         # 8-byte Spill
.LBB69_4:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	movq	664(%rsp), %rax         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, %rdx
	shlq	$2, %rdx
	movq	768(%rsp), %rsi         # 8-byte Reload
	movups	(%rsi,%rcx,4), %xmm0
	movl	$22222, 5964(%rsp)      # imm = 0x56CE
	movups	16(%rsi,%rcx,4), %xmm1
	movl	$22223, 5964(%rsp)      # imm = 0x56CF
	xorps	%xmm2, %xmm2
	movaps	%xmm0, %xmm3
	pcmpeqd	%xmm2, %xmm3
	movaps	%xmm1, %xmm4
	pcmpeqd	%xmm2, %xmm4
	pslld	$8, %xmm0
	pslld	$8, %xmm1
	movaps	%xmm3, %xmm5
	pandn	%xmm0, %xmm5
	movaps	.LCPI69_0(%rip), %xmm0  # xmm0 = [256,256,256,256]
	movaps	%xmm0, %xmm6
	pand	%xmm3, %xmm6
	por	%xmm5, %xmm6
	movaps	%xmm4, %xmm3
	pandn	%xmm1, %xmm3
	movaps	%xmm0, %xmm1
	pand	%xmm4, %xmm1
	por	%xmm3, %xmm1
	movq	%rdx, %rdi
	orq	$4, %rdi
	movups	%xmm6, 2848(%rsp,%rdi)
	movl	$22236, 5964(%rsp)      # imm = 0x56DC
	movups	%xmm1, 2864(%rsp,%rdi)
	movl	$22240, 5964(%rsp)      # imm = 0x56E0
	orq	$32, %rdx
	movups	(%rsi,%rdx), %xmm1
	movl	$22243, 5964(%rsp)      # imm = 0x56E3
	movups	16(%rsi,%rdx), %xmm3
	movl	$22244, 5964(%rsp)      # imm = 0x56E4
	movaps	%xmm1, %xmm4
	pcmpeqd	%xmm2, %xmm4
	movaps	%xmm3, %xmm5
	pcmpeqd	%xmm2, %xmm5
	pslld	$8, %xmm1
	pslld	$8, %xmm3
	movaps	%xmm4, %xmm2
	pandn	%xmm1, %xmm2
	movaps	%xmm0, %xmm1
	pand	%xmm4, %xmm1
	por	%xmm2, %xmm1
	movaps	%xmm5, %xmm2
	pandn	%xmm3, %xmm2
	pand	%xmm5, %xmm0
	por	%xmm2, %xmm0
	movq	%rcx, %rdx
	orq	$9, %rdx
	movdqu	%xmm1, 2848(%rsp,%rdx,4)
	movl	$22256, 5964(%rsp)      # imm = 0x56F0
	movdqu	%xmm0, 2864(%rsp,%rdx,4)
	movl	$22264, 5964(%rsp)      # imm = 0x56F8
	addq	$16, %rcx
	addq	$-2, %rax
	cmpq	$0, %rax
	movq	%rcx, %rdx
	movq	%rax, 664(%rsp)         # 8-byte Spill
	movq	%rdx, 672(%rsp)         # 8-byte Spill
	movq	%rcx, 680(%rsp)         # 8-byte Spill
	jne	.LBB69_4
.LBB69_5:                               # %middle.block.unr-lcssa
	movq	680(%rsp), %rax         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	cmpq	$0, %rcx
	movq	%rax, 656(%rsp)         # 8-byte Spill
	je	.LBB69_7
# %bb.6:                                # %vector.body.epil
	movq	768(%rsp), %rax         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movups	(%rax,%rcx,4), %xmm0
	movl	$22267, 5964(%rsp)      # imm = 0x56FB
	movups	16(%rax,%rcx,4), %xmm1
	movl	$22268, 5964(%rsp)      # imm = 0x56FC
	xorps	%xmm2, %xmm2
	movaps	%xmm0, %xmm3
	pcmpeqd	%xmm2, %xmm3
	movaps	%xmm1, %xmm4
	pcmpeqd	%xmm2, %xmm4
	pslld	$8, %xmm0
	pslld	$8, %xmm1
	movaps	%xmm3, %xmm2
	pandn	%xmm0, %xmm2
	movaps	.LCPI69_0(%rip), %xmm0  # xmm0 = [256,256,256,256]
	movaps	%xmm0, %xmm5
	pand	%xmm3, %xmm5
	por	%xmm2, %xmm5
	movaps	%xmm4, %xmm2
	pandn	%xmm1, %xmm2
	pand	%xmm4, %xmm0
	por	%xmm2, %xmm0
	orq	$1, %rcx
	movdqu	%xmm5, 2848(%rsp,%rcx,4)
	movl	$22280, 5964(%rsp)      # imm = 0x5708
	movdqu	%xmm0, 2864(%rsp,%rcx,4)
	movl	$22289, 5964(%rsp)      # imm = 0x5711
.LBB69_7:                               # %middle.block
	movq	696(%rsp), %rax         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	je	.LBB69_10
.LBB69_8:                               # %for.body.preheader
	movq	712(%rsp), %rax         # 8-byte Reload
	movq	%rax, 648(%rsp)         # 8-byte Spill
.LBB69_9:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	648(%rsp), %rax         # 8-byte Reload
	movl	$256, %ecx              # imm = 0x100
	movq	768(%rsp), %rdx         # 8-byte Reload
	movl	(%rdx,%rax,4), %esi
	movl	$22294, 5964(%rsp)      # imm = 0x5716
	movl	%esi, %edi
	shll	$8, %edi
	cmpl	$0, %esi
	cmovel	%ecx, %edi
	movq	%rax, %r8
	addq	$1, %r8
	movl	%edi, 2852(%rsp,%rax,4)
	movl	$22309, 5964(%rsp)      # imm = 0x5725
	movq	720(%rsp), %rax         # 8-byte Reload
	cmpq	%rax, %r8
	movq	%r8, 648(%rsp)          # 8-byte Spill
	jne	.LBB69_9
.LBB69_10:                              # %for.end
	leaq	4912(%rsp), %rax
	leaq	784(%rsp), %rcx
	leaq	2848(%rsp), %rdx
	movl	780(%rsp), %esi         # 4-byte Reload
	cmpl	$1, %esi
	setl	%dil
	movq	%rax, %r8
	addq	$4, %r8
	movslq	%esi, %r9
	addl	$1, %esi
	movl	780(%rsp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %ebx
	cmpl	$260, %r10d             # imm = 0x104
	setb	%bpl
	cmpl	$1, %r10d
	setg	%r14b
	movslq	%r10d, %r15
	movl	%esi, %r11d
	movl	%r11d, %r12d
	movl	$0, 4912(%rsp)
	movl	$22310, 5964(%rsp)      # imm = 0x5726
	movl	$0, 2848(%rsp)
	movl	$22311, 5964(%rsp)      # imm = 0x5727
	movl	$-2, 784(%rsp)
	movl	$22334, 5964(%rsp)      # imm = 0x573E
	testb	$1, %dil
	movq	%rax, 640(%rsp)         # 8-byte Spill
	movq	%rcx, 632(%rsp)         # 8-byte Spill
	movq	%rdx, 624(%rsp)         # 8-byte Spill
	movl	%esi, 620(%rsp)         # 4-byte Spill
	movb	%dil, 619(%rsp)         # 1-byte Spill
	movq	%r8, 608(%rsp)          # 8-byte Spill
	movq	%r9, 600(%rsp)          # 8-byte Spill
	movq	%rbx, 592(%rsp)         # 8-byte Spill
	movb	%bpl, 591(%rsp)         # 1-byte Spill
	movb	%r14b, 590(%rsp)        # 1-byte Spill
	movq	%r15, 576(%rsp)         # 8-byte Spill
	movq	%r12, 568(%rsp)         # 8-byte Spill
	jne	.LBB69_60
# %bb.11:                               # %for.body11.lr.ph.lr.ph
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movl	620(%rsp), %eax         # 4-byte Reload
	movl	%eax, %esi
	movl	%esi, %edi
	movq	568(%rsp), %r8          # 8-byte Reload
	addq	$-1, %r8
	addq	$-1, %rdi
	andl	$1, %eax
	xorl	$1, %eax
	movl	620(%rsp), %esi         # 4-byte Reload
	cmpl	$2, %esi
	sete	%r9b
	movl	%eax, %r10d
	movl	%r10d, %r11d
	subq	%r11, %rdi
	cmpl	$0, %eax
	sete	%bl
	cmpq	$8, %r8
	setb	%bpl
	movl	780(%rsp), %eax         # 4-byte Reload
	andl	$7, %eax
	movl	%eax, %r10d
	movl	%r10d, %r11d
	subq	%r11, %r8
	movq	%r8, %r11
	addq	$1, %r11
	cmpl	$0, %eax
	sete	%r14b
	movb	%r14b, 567(%rsp)        # 1-byte Spill
	movq	%rcx, 552(%rsp)         # 8-byte Spill
	movq	%rdi, 544(%rsp)         # 8-byte Spill
	movq	%r8, 536(%rsp)          # 8-byte Spill
	movb	%r9b, 535(%rsp)         # 1-byte Spill
	movb	%bl, 534(%rsp)          # 1-byte Spill
	movb	%bpl, 533(%rsp)         # 1-byte Spill
	movq	%r11, 520(%rsp)         # 8-byte Spill
	movq	%rdx, 512(%rsp)         # 8-byte Spill
.LBB69_12:                              # %for.body11
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_14 Depth 2
                                        #     Child Loop BB69_21 Depth 2
                                        #       Child Loop BB69_23 Depth 3
                                        #       Child Loop BB69_29 Depth 3
                                        #       Child Loop BB69_35 Depth 3
                                        #     Child Loop BB69_43 Depth 2
                                        #       Child Loop BB69_44 Depth 3
                                        #       Child Loop BB69_61 Depth 3
                                        #     Child Loop BB69_48 Depth 2
                                        #     Child Loop BB69_54 Depth 2
                                        #     Child Loop BB69_57 Depth 2
	movq	512(%rsp), %rax         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	leaq	4912(%rsp), %rdx
	movl	$-1, 784(%rsp,%rcx,4)
	movl	$22338, 5964(%rsp)      # imm = 0x5742
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, %rdi
	shlq	$2, %rdi
	addq	%rdi, %rdx
	movl	%ecx, %r8d
	movl	%r8d, 4916(%rsp,%rax,4)
	movl	$22340, 5964(%rsp)      # imm = 0x5744
	movl	2848(%rsp,%rcx,4), %r9d
	movl	$22345, 5964(%rsp)      # imm = 0x5749
	movl	%esi, %r10d
	shrl	$1, %r10d
	movl	%r10d, %r11d
	movl	%r11d, %eax
	movl	4912(%rsp,%rax,4), %r11d
	movl	$22348, 5964(%rsp)      # imm = 0x574C
	movslq	%r11d, %rax
	movl	2848(%rsp,%rax,4), %ebx
	movl	$22358, 5964(%rsp)      # imm = 0x5756
	cmpl	%ebx, %r9d
	movq	%rdx, %rax
	movl	%r8d, 508(%rsp)         # 4-byte Spill
	movq	%rcx, 496(%rsp)         # 8-byte Spill
	movq	%rdx, 488(%rsp)         # 8-byte Spill
	movq	%rsi, 480(%rsp)         # 8-byte Spill
	movl	%r9d, 476(%rsp)         # 4-byte Spill
	movl	%r10d, 472(%rsp)        # 4-byte Spill
	movl	%r11d, 468(%rsp)        # 4-byte Spill
	movq	%rax, 456(%rsp)         # 8-byte Spill
	jge	.LBB69_15
# %bb.13:                               # %while.body27.preheader
                                        #   in Loop: Header=BB69_12 Depth=1
	movq	488(%rsp), %rax         # 8-byte Reload
	movl	468(%rsp), %ecx         # 4-byte Reload
	movl	472(%rsp), %edx         # 4-byte Reload
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movl	%ecx, 444(%rsp)         # 4-byte Spill
	movl	%edx, 440(%rsp)         # 4-byte Spill
	jmp	.LBB69_14
.LBB69_14:                              # %while.body27
                                        #   Parent Loop BB69_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	440(%rsp), %eax         # 4-byte Reload
	movl	444(%rsp), %ecx         # 4-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	leaq	4912(%rsp), %rsi
	movl	%ecx, (%rdx)
	movl	$22355, 5964(%rsp)      # imm = 0x5753
	movl	%eax, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rdx
	movl	4912(%rsp,%rdx,4), %edi
	movl	$22363, 5964(%rsp)      # imm = 0x575B
	movslq	%edi, %rdx
	movl	2848(%rsp,%rdx,4), %r8d
	movl	$22368, 5964(%rsp)      # imm = 0x5760
	movslq	%eax, %rdx
	shlq	$2, %rdx
	addq	%rdx, %rsi
	movl	476(%rsp), %eax         # 4-byte Reload
	cmpl	%r8d, %eax
	movq	%rsi, %rdx
	movl	%ecx, 440(%rsp)         # 4-byte Spill
	movl	%edi, 444(%rsp)         # 4-byte Spill
	movq	%rdx, 448(%rsp)         # 8-byte Spill
	movq	%rsi, 456(%rsp)         # 8-byte Spill
	jl	.LBB69_14
.LBB69_15:                              # %while.end
                                        #   in Loop: Header=BB69_12 Depth=1
	movq	456(%rsp), %rax         # 8-byte Reload
	movl	508(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$22383, 5964(%rsp)      # imm = 0x576F
	movq	496(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	cmpq	%rsi, %rdx
	movq	%rdx, 432(%rsp)         # 8-byte Spill
	movq	%rax, 424(%rsp)         # 8-byte Spill
	je	.LBB69_17
.LBB69_16:                              # %for.body11.backedge
                                        #   in Loop: Header=BB69_12 Depth=1
	movq	432(%rsp), %rax         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 552(%rsp)         # 8-byte Spill
	movq	%rax, 512(%rsp)         # 8-byte Spill
	jmp	.LBB69_12
.LBB69_17:                              # %for.end38
                                        #   in Loop: Header=BB69_12 Depth=1
	movb	591(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB69_19
	jmp	.LBB69_18
.LBB69_18:                              # %if.then
                                        #   in Loop: Header=BB69_12 Depth=1
	movl	$2001, %edi             # imm = 0x7D1
	callq	BZ2_bz__AssertH__fail
.LBB69_19:                              # %if.end
                                        #   in Loop: Header=BB69_12 Depth=1
	movb	590(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movl	780(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, 420(%rsp)         # 4-byte Spill
	jne	.LBB69_20
	jmp	.LBB69_38
.LBB69_20:                              # %while.body42.preheader
                                        #   in Loop: Header=BB69_12 Depth=1
	movq	576(%rsp), %rax         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movq	%rcx, 400(%rsp)         # 8-byte Spill
	jmp	.LBB69_21
.LBB69_21:                              # %while.body42
                                        #   Parent Loop BB69_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_23 Depth 3
                                        #       Child Loop BB69_29 Depth 3
                                        #       Child Loop BB69_35 Depth 3
	movq	400(%rsp), %rax         # 8-byte Reload
	movq	408(%rsp), %rcx         # 8-byte Reload
	movl	$1, %edx
	movq	608(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %edi
	movl	$22385, 5964(%rsp)      # imm = 0x5771
	movl	4912(%rsp,%rcx,4), %r8d
	movl	$22386, 5964(%rsp)      # imm = 0x5772
	movl	%r8d, (%rsi)
	movl	$22391, 5964(%rsp)      # imm = 0x5777
	movq	%rcx, %r9
	addq	$-1, %r9
	cmpq	$2, %rcx
	setg	%r10b
	testb	$1, %r10b
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	movb	%r10b, 383(%rsp)        # 1-byte Spill
	movl	%edi, 376(%rsp)         # 4-byte Spill
	movl	%r8d, 372(%rsp)         # 4-byte Spill
	movq	%r9, 360(%rsp)          # 8-byte Spill
	movl	%edx, 356(%rsp)         # 4-byte Spill
	jne	.LBB69_22
	jmp	.LBB69_27
.LBB69_22:                              # %if.end56.lr.ph
                                        #   in Loop: Header=BB69_21 Depth=2
	movl	$2, %eax
	movl	$1, %ecx
	movl	372(%rsp), %edx         # 4-byte Reload
	movslq	%edx, %rsi
	movl	2848(%rsp,%rsi,4), %edi
	movl	$22403, 5964(%rsp)      # imm = 0x5783
	movl	%edi, 352(%rsp)         # 4-byte Spill
	movl	%eax, 348(%rsp)         # 4-byte Spill
	movl	%ecx, 344(%rsp)         # 4-byte Spill
.LBB69_23:                              # %if.end56
                                        #   Parent Loop BB69_12 Depth=1
                                        #     Parent Loop BB69_21 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	344(%rsp), %eax         # 4-byte Reload
	movl	348(%rsp), %ecx         # 4-byte Reload
	movslq	%ecx, %rdx
	movq	360(%rsp), %rsi         # 8-byte Reload
	cmpq	%rdx, %rsi
	movq	%rdx, %rdi
	movl	%ecx, %r8d
	movl	%eax, 340(%rsp)         # 4-byte Spill
	movl	%ecx, 336(%rsp)         # 4-byte Spill
	movq	%rdx, 328(%rsp)         # 8-byte Spill
	movq	%rdi, 320(%rsp)         # 8-byte Spill
	movl	%r8d, 316(%rsp)         # 4-byte Spill
	jle	.LBB69_25
# %bb.24:                               # %land.lhs.true
                                        #   in Loop: Header=BB69_23 Depth=3
	movl	336(%rsp), %eax         # 4-byte Reload
	orl	$1, %eax
	movslq	%eax, %rcx
	movl	4912(%rsp,%rcx,4), %edx
	movl	$22406, 5964(%rsp)      # imm = 0x5786
	movslq	%edx, %rcx
	movl	2848(%rsp,%rcx,4), %edx
	movl	$22408, 5964(%rsp)      # imm = 0x5788
	movq	328(%rsp), %rcx         # 8-byte Reload
	movl	4912(%rsp,%rcx,4), %esi
	movl	$22411, 5964(%rsp)      # imm = 0x578B
	movslq	%esi, %rdi
	movl	2848(%rsp,%rdi,4), %esi
	movl	$22418, 5964(%rsp)      # imm = 0x5792
	cmpl	%esi, %edx
	movl	336(%rsp), %edx         # 4-byte Reload
	cmovll	%eax, %edx
	movslq	%edx, %rdi
	movq	%rdi, 320(%rsp)         # 8-byte Spill
	movl	%edx, 316(%rsp)         # 4-byte Spill
.LBB69_25:                              # %if.end70
                                        #   in Loop: Header=BB69_23 Depth=3
	movl	316(%rsp), %eax         # 4-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movl	4912(%rsp,%rcx,4), %edx
	movl	$22421, 5964(%rsp)      # imm = 0x5795
	movslq	%edx, %rcx
	movl	2848(%rsp,%rcx,4), %esi
	movl	$22426, 5964(%rsp)      # imm = 0x579A
	movl	352(%rsp), %edi         # 4-byte Reload
	cmpl	%esi, %edi
	movl	340(%rsp), %esi         # 4-byte Reload
	movl	%eax, 312(%rsp)         # 4-byte Spill
	movl	%edx, 308(%rsp)         # 4-byte Spill
	movl	%esi, 356(%rsp)         # 4-byte Spill
	jl	.LBB69_27
# %bb.26:                               # %if.end79
                                        #   in Loop: Header=BB69_23 Depth=3
	movl	340(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movl	308(%rsp), %edx         # 4-byte Reload
	movl	%edx, 4912(%rsp,%rcx,4)
	movl	$22433, 5964(%rsp)      # imm = 0x57A1
	movl	312(%rsp), %esi         # 4-byte Reload
	shll	$1, %esi
	movslq	%esi, %rcx
	movq	384(%rsp), %rdi         # 8-byte Reload
	cmpq	%rcx, %rdi
	movl	312(%rsp), %r8d         # 4-byte Reload
	movl	312(%rsp), %r9d         # 4-byte Reload
	movl	%esi, 348(%rsp)         # 4-byte Spill
	movl	%r8d, 344(%rsp)         # 4-byte Spill
	movl	%r9d, 356(%rsp)         # 4-byte Spill
	jg	.LBB69_23
.LBB69_27:                              # %while.end84
                                        #   in Loop: Header=BB69_21 Depth=2
	movl	356(%rsp), %eax         # 4-byte Reload
	movl	$1, %ecx
	leaq	4912(%rsp), %rdx
	movslq	%eax, %rsi
	movl	372(%rsp), %eax         # 4-byte Reload
	movl	%eax, 4912(%rsp,%rsi,4)
	movl	$22434, 5964(%rsp)      # imm = 0x57A2
	movq	608(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %edi
	movl	$22436, 5964(%rsp)      # imm = 0x57A4
	movq	360(%rsp), %r8          # 8-byte Reload
	shlq	$2, %r8
	addq	%r8, %rdx
	movq	360(%rsp), %r8          # 8-byte Reload
	movl	4912(%rsp,%r8,4), %r9d
	movl	$22437, 5964(%rsp)      # imm = 0x57A5
	movl	%r9d, (%rsi)
	movl	$22443, 5964(%rsp)      # imm = 0x57AB
	movq	384(%rsp), %r10         # 8-byte Reload
	addq	$-2, %r10
	movq	384(%rsp), %r11         # 8-byte Reload
	cmpq	$4, %r11
	movq	%rdx, 296(%rsp)         # 8-byte Spill
	movl	%edi, 292(%rsp)         # 4-byte Spill
	movl	%r9d, 288(%rsp)         # 4-byte Spill
	movq	%r10, 280(%rsp)         # 8-byte Spill
	movl	%ecx, 276(%rsp)         # 4-byte Spill
	jl	.LBB69_33
# %bb.28:                               # %if.end102.lr.ph
                                        #   in Loop: Header=BB69_21 Depth=2
	movl	$2, %eax
	movl	$1, %ecx
	movl	288(%rsp), %edx         # 4-byte Reload
	movslq	%edx, %rsi
	movl	2848(%rsp,%rsi,4), %edi
	movl	$22455, 5964(%rsp)      # imm = 0x57B7
	movl	%edi, 272(%rsp)         # 4-byte Spill
	movl	%eax, 268(%rsp)         # 4-byte Spill
	movl	%ecx, 264(%rsp)         # 4-byte Spill
.LBB69_29:                              # %if.end102
                                        #   Parent Loop BB69_12 Depth=1
                                        #     Parent Loop BB69_21 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	264(%rsp), %eax         # 4-byte Reload
	movl	268(%rsp), %ecx         # 4-byte Reload
	movslq	%ecx, %rdx
	movq	280(%rsp), %rsi         # 8-byte Reload
	cmpq	%rdx, %rsi
	movq	%rdx, %rdi
	movl	%ecx, %r8d
	movl	%eax, 260(%rsp)         # 4-byte Spill
	movl	%ecx, 256(%rsp)         # 4-byte Spill
	movq	%rdx, 248(%rsp)         # 8-byte Spill
	movq	%rdi, 240(%rsp)         # 8-byte Spill
	movl	%r8d, 236(%rsp)         # 4-byte Spill
	jle	.LBB69_31
# %bb.30:                               # %land.lhs.true104
                                        #   in Loop: Header=BB69_29 Depth=3
	movl	256(%rsp), %eax         # 4-byte Reload
	orl	$1, %eax
	movslq	%eax, %rcx
	movl	4912(%rsp,%rcx,4), %edx
	movl	$22458, 5964(%rsp)      # imm = 0x57BA
	movslq	%edx, %rcx
	movl	2848(%rsp,%rcx,4), %edx
	movl	$22460, 5964(%rsp)      # imm = 0x57BC
	movq	248(%rsp), %rcx         # 8-byte Reload
	movl	4912(%rsp,%rcx,4), %esi
	movl	$22463, 5964(%rsp)      # imm = 0x57BF
	movslq	%esi, %rdi
	movl	2848(%rsp,%rdi,4), %esi
	movl	$22470, 5964(%rsp)      # imm = 0x57C6
	cmpl	%esi, %edx
	movl	256(%rsp), %edx         # 4-byte Reload
	cmovll	%eax, %edx
	movslq	%edx, %rdi
	movq	%rdi, 240(%rsp)         # 8-byte Spill
	movl	%edx, 236(%rsp)         # 4-byte Spill
.LBB69_31:                              # %if.end117
                                        #   in Loop: Header=BB69_29 Depth=3
	movl	236(%rsp), %eax         # 4-byte Reload
	movq	240(%rsp), %rcx         # 8-byte Reload
	movl	4912(%rsp,%rcx,4), %edx
	movl	$22473, 5964(%rsp)      # imm = 0x57C9
	movslq	%edx, %rcx
	movl	2848(%rsp,%rcx,4), %esi
	movl	$22478, 5964(%rsp)      # imm = 0x57CE
	movl	272(%rsp), %edi         # 4-byte Reload
	cmpl	%esi, %edi
	movl	260(%rsp), %esi         # 4-byte Reload
	movl	%eax, 232(%rsp)         # 4-byte Spill
	movl	%edx, 228(%rsp)         # 4-byte Spill
	movl	%esi, 276(%rsp)         # 4-byte Spill
	jl	.LBB69_33
# %bb.32:                               # %if.end126
                                        #   in Loop: Header=BB69_29 Depth=3
	movl	260(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movl	228(%rsp), %edx         # 4-byte Reload
	movl	%edx, 4912(%rsp,%rcx,4)
	movl	$22485, 5964(%rsp)      # imm = 0x57D5
	movl	232(%rsp), %esi         # 4-byte Reload
	shll	$1, %esi
	movslq	%esi, %rcx
	movq	280(%rsp), %rdi         # 8-byte Reload
	cmpq	%rcx, %rdi
	movl	232(%rsp), %r8d         # 4-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	%esi, 268(%rsp)         # 4-byte Spill
	movl	%r8d, 264(%rsp)         # 4-byte Spill
	movl	%r9d, 276(%rsp)         # 4-byte Spill
	jge	.LBB69_29
.LBB69_33:                              # %while.end131
                                        #   in Loop: Header=BB69_21 Depth=2
	movl	276(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movl	288(%rsp), %eax         # 4-byte Reload
	movl	%eax, 4912(%rsp,%rcx,4)
	movl	$22489, 5964(%rsp)      # imm = 0x57D9
	movq	392(%rsp), %rcx         # 8-byte Reload
	addq	$1, %rcx
	movl	292(%rsp), %edx         # 4-byte Reload
	movslq	%edx, %rsi
	movl	%ecx, %edi
	movl	%edi, 784(%rsp,%rsi,4)
	movl	$22492, 5964(%rsp)      # imm = 0x57DC
	movl	376(%rsp), %r8d         # 4-byte Reload
	movslq	%r8d, %r9
	movl	%edi, 784(%rsp,%r9,4)
	movl	$22494, 5964(%rsp)      # imm = 0x57DE
	movl	2848(%rsp,%r9,4), %r10d
	movl	$22497, 5964(%rsp)      # imm = 0x57E1
	movl	%r10d, %r11d
	andl	$-256, %r11d
	movl	2848(%rsp,%rsi,4), %ebx
	movl	$22507, 5964(%rsp)      # imm = 0x57EB
	movl	%ebx, %ebp
	andl	$-256, %ebp
	addl	%r11d, %ebp
	andl	$255, %r10d
	andl	$255, %ebx
	cmpl	%ebx, %r10d
	cmoval	%r10d, %ebx
	addl	$1, %ebx
	orl	%ebp, %ebx
	movq	392(%rsp), %rsi         # 8-byte Reload
	movl	%ebx, 2852(%rsp,%rsi,4)
	movl	$22509, 5964(%rsp)      # imm = 0x57ED
	movl	$-1, 788(%rsp,%rsi,4)
	movl	$22510, 5964(%rsp)      # imm = 0x57EE
	movq	296(%rsp), %r9          # 8-byte Reload
	movl	%edi, (%r9)
	movl	$22515, 5964(%rsp)      # imm = 0x57F3
	movq	360(%rsp), %r14         # 8-byte Reload
	movl	%r14d, %r10d
	sarl	$1, %r10d
	movslq	%r10d, %r15
	movl	4912(%rsp,%r15,4), %r11d
	movl	$22518, 5964(%rsp)      # imm = 0x57F6
	movslq	%r11d, %r15
	movl	2848(%rsp,%r15,4), %ebp
	movl	$22528, 5964(%rsp)      # imm = 0x5800
	cmpl	%ebp, %ebx
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	movl	%ebx, 212(%rsp)         # 4-byte Spill
	movl	%edi, 208(%rsp)         # 4-byte Spill
	movq	%r9, 200(%rsp)          # 8-byte Spill
	movl	%r10d, 196(%rsp)        # 4-byte Spill
	movl	%r11d, 192(%rsp)        # 4-byte Spill
	jge	.LBB69_36
# %bb.34:                               # %while.body183.preheader
                                        #   in Loop: Header=BB69_21 Depth=2
	movq	296(%rsp), %rax         # 8-byte Reload
	movl	192(%rsp), %ecx         # 4-byte Reload
	movl	196(%rsp), %edx         # 4-byte Reload
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movl	%ecx, 180(%rsp)         # 4-byte Spill
	movl	%edx, 176(%rsp)         # 4-byte Spill
	jmp	.LBB69_35
.LBB69_35:                              # %while.body183
                                        #   Parent Loop BB69_12 Depth=1
                                        #     Parent Loop BB69_21 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	176(%rsp), %eax         # 4-byte Reload
	movl	180(%rsp), %ecx         # 4-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	leaq	4912(%rsp), %rsi
	movl	%ecx, (%rdx)
	movl	$22525, 5964(%rsp)      # imm = 0x57FD
	movl	%eax, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rdx
	movl	4912(%rsp,%rdx,4), %edi
	movl	$22533, 5964(%rsp)      # imm = 0x5805
	movslq	%edi, %rdx
	movl	2848(%rsp,%rdx,4), %r8d
	movl	$22538, 5964(%rsp)      # imm = 0x580A
	movslq	%eax, %rdx
	shlq	$2, %rdx
	addq	%rdx, %rsi
	movl	212(%rsp), %eax         # 4-byte Reload
	cmpl	%r8d, %eax
	movq	%rsi, %rdx
	movl	%ecx, 176(%rsp)         # 4-byte Spill
	movl	%edi, 180(%rsp)         # 4-byte Spill
	movq	%rdx, 184(%rsp)         # 8-byte Spill
	movq	%rsi, 200(%rsp)         # 8-byte Spill
	jl	.LBB69_35
.LBB69_36:                              # %while.end190
                                        #   in Loop: Header=BB69_21 Depth=2
	movq	200(%rsp), %rax         # 8-byte Reload
	movl	208(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$22560, 5964(%rsp)      # imm = 0x5820
	movb	383(%rsp), %dl          # 1-byte Reload
	testb	$1, %dl
	movq	360(%rsp), %rax         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movq	%rsi, 400(%rsp)         # 8-byte Spill
	jne	.LBB69_21
# %bb.37:                               # %while.end193.loopexit
                                        #   in Loop: Header=BB69_12 Depth=1
	movq	216(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, 420(%rsp)         # 4-byte Spill
.LBB69_38:                              # %while.end193
                                        #   in Loop: Header=BB69_12 Depth=1
	movl	420(%rsp), %eax         # 4-byte Reload
	cmpl	$516, %eax              # imm = 0x204
	jl	.LBB69_40
# %bb.39:                               # %if.then195
                                        #   in Loop: Header=BB69_12 Depth=1
	movl	$2002, %edi             # imm = 0x7D2
	callq	BZ2_bz__AssertH__fail
.LBB69_40:                              # %if.end196
                                        #   in Loop: Header=BB69_12 Depth=1
	movb	619(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB69_60
	jmp	.LBB69_41
.LBB69_41:                              # %for.body199.preheader
                                        #   in Loop: Header=BB69_12 Depth=1
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movb	%al, %dl
	movb	535(%rsp), %sil         # 1-byte Reload
	testb	$1, %sil
                                        # implicit-def: %dil
	movb	%dil, 175(%rsp)         # 1-byte Spill
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	movb	%dl, 159(%rsp)          # 1-byte Spill
	jne	.LBB69_46
	jmp	.LBB69_42
.LBB69_42:                              # %for.body199.preheader.new
                                        #   in Loop: Header=BB69_12 Depth=1
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movb	%al, %dl
	movq	544(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	movb	%dl, 143(%rsp)          # 1-byte Spill
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	jmp	.LBB69_43
.LBB69_43:                              # %for.body199
                                        #   Parent Loop BB69_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_44 Depth 3
                                        #       Child Loop BB69_61 Depth 3
	movq	128(%rsp), %rax         # 8-byte Reload
	movb	143(%rsp), %cl          # 1-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	xorl	%esi, %esi
	movl	%edx, %edi
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movb	%cl, 119(%rsp)          # 1-byte Spill
	movq	%rdx, 104(%rsp)         # 8-byte Spill
	movl	%edi, 100(%rsp)         # 4-byte Spill
	movl	%esi, 96(%rsp)          # 4-byte Spill
.LBB69_44:                              # %while.cond200
                                        #   Parent Loop BB69_12 Depth=1
                                        #     Parent Loop BB69_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	96(%rsp), %eax          # 4-byte Reload
	movl	100(%rsp), %ecx         # 4-byte Reload
	movslq	%ecx, %rdx
	movl	784(%rsp,%rdx,4), %ecx
	movl	$22570, 5964(%rsp)      # imm = 0x582A
	movl	%eax, %esi
	addl	$1, %esi
	cmpl	$-1, %ecx
	movl	%eax, 92(%rsp)          # 4-byte Spill
	movl	%ecx, 100(%rsp)         # 4-byte Spill
	movl	%esi, 96(%rsp)          # 4-byte Spill
	jg	.LBB69_44
# %bb.45:                               # %while.end208
                                        #   in Loop: Header=BB69_43 Depth=2
	xorl	%eax, %eax
	movl	92(%rsp), %ecx          # 4-byte Reload
	movb	%cl, %dl
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	104(%rsp), %rdi         # 8-byte Reload
	movb	%dl, -1(%rsi,%rdi)
	movl	$22582, 5964(%rsp)      # imm = 0x5836
	movl	756(%rsp), %r8d         # 4-byte Reload
	cmpl	%r8d, %ecx
	setg	%dl
	movl	%edi, %r9d
	addl	$1, %r9d
	movl	%r9d, 88(%rsp)          # 4-byte Spill
	movb	%dl, 87(%rsp)           # 1-byte Spill
	movl	%eax, 80(%rsp)          # 4-byte Spill
	jmp	.LBB69_61
.LBB69_46:                              # %for.end217.unr-lcssa
                                        #   in Loop: Header=BB69_12 Depth=1
	movb	159(%rsp), %al          # 1-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movb	175(%rsp), %dl          # 1-byte Reload
	movb	534(%rsp), %sil         # 1-byte Reload
	testb	$1, %sil
	movb	%al, 79(%rsp)           # 1-byte Spill
	movq	%rcx, 64(%rsp)          # 8-byte Spill
	movb	%dl, 63(%rsp)           # 1-byte Spill
	jne	.LBB69_50
# %bb.47:                               # %for.body199.epil
                                        #   in Loop: Header=BB69_12 Depth=1
	xorl	%eax, %eax
	movq	64(%rsp), %rcx          # 8-byte Reload
	movl	%ecx, %edx
	movl	%edx, 56(%rsp)          # 4-byte Spill
	movl	%eax, 52(%rsp)          # 4-byte Spill
.LBB69_48:                              # %while.cond200.epil
                                        #   Parent Loop BB69_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	52(%rsp), %eax          # 4-byte Reload
	movl	56(%rsp), %ecx          # 4-byte Reload
	movslq	%ecx, %rdx
	movl	784(%rsp,%rdx,4), %ecx
	movl	$22592, 5964(%rsp)      # imm = 0x5840
	movl	%eax, %esi
	addl	$1, %esi
	cmpl	$-1, %ecx
	movl	%eax, 48(%rsp)          # 4-byte Spill
	movl	%ecx, 56(%rsp)          # 4-byte Spill
	movl	%esi, 52(%rsp)          # 4-byte Spill
	jg	.LBB69_48
# %bb.49:                               # %while.end208.epil
                                        #   in Loop: Header=BB69_12 Depth=1
	movb	$1, %al
	movl	48(%rsp), %ecx          # 4-byte Reload
	movb	%cl, %dl
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	64(%rsp), %rdi          # 8-byte Reload
	movb	%dl, -1(%rsi,%rdi)
	movl	$22607, 5964(%rsp)      # imm = 0x584F
	movl	756(%rsp), %r8d         # 4-byte Reload
	cmpl	%r8d, %ecx
	movb	%al, 47(%rsp)           # 1-byte Spill
	jg	.LBB69_64
# %bb.63:                               # %while.end208.epil
                                        #   in Loop: Header=BB69_12 Depth=1
	movb	79(%rsp), %al           # 1-byte Reload
	movb	%al, 47(%rsp)           # 1-byte Spill
.LBB69_64:                              # %while.end208.epil
                                        #   in Loop: Header=BB69_12 Depth=1
	movb	47(%rsp), %al           # 1-byte Reload
	movb	%al, 63(%rsp)           # 1-byte Spill
.LBB69_50:                              # %for.end217
                                        #   in Loop: Header=BB69_12 Depth=1
	movb	63(%rsp), %al           # 1-byte Reload
	cmpb	$0, %al
	je	.LBB69_60
# %bb.51:                               # %if.end219
                                        #   in Loop: Header=BB69_12 Depth=1
	movb	619(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB69_59
	jmp	.LBB69_52
.LBB69_52:                              # %for.body223.lr.ph
                                        #   in Loop: Header=BB69_12 Depth=1
	movl	$1, %eax
	movl	%eax, %ecx
	movb	533(%rsp), %dl          # 1-byte Reload
	testb	$1, %dl
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	jne	.LBB69_56
	jmp	.LBB69_53
.LBB69_53:                              # %vector.ph428
                                        #   in Loop: Header=BB69_12 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	jmp	.LBB69_54
.LBB69_54:                              # %vector.body424
                                        #   Parent Loop BB69_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, %rcx
	orq	$1, %rcx
	movq	%rcx, %rdx
	movups	2848(%rsp,%rcx,4), %xmm0
	movl	$22610, 5964(%rsp)      # imm = 0x5852
	movups	2864(%rsp,%rcx,4), %xmm1
	movl	$22611, 5964(%rsp)      # imm = 0x5853
	movaps	%xmm0, %xmm2
	psrad	$8, %xmm2
	movaps	%xmm1, %xmm3
	psrad	$8, %xmm3
	psrld	$31, %xmm0
	paddd	%xmm0, %xmm2
	movaps	.LCPI69_1(%rip), %xmm0  # xmm0 = [0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255]
	pslld	$7, %xmm2
	pand	%xmm0, %xmm2
	psrld	$31, %xmm1
	paddd	%xmm1, %xmm3
	pslld	$7, %xmm3
	pand	%xmm0, %xmm3
	movaps	.LCPI69_0(%rip), %xmm0  # xmm0 = [256,256,256,256]
	paddd	%xmm0, %xmm2
	paddd	%xmm0, %xmm3
	movdqu	%xmm2, 2848(%rsp,%rdx,4)
	movl	$22622, 5964(%rsp)      # imm = 0x585E
	movdqu	%xmm3, 2864(%rsp,%rdx,4)
	movl	$22631, 5964(%rsp)      # imm = 0x5867
	addq	$8, %rax
	movq	536(%rsp), %rcx         # 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	jne	.LBB69_54
# %bb.55:                               # %middle.block425
                                        #   in Loop: Header=BB69_12 Depth=1
	movb	567(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	jne	.LBB69_58
	jmp	.LBB69_56
.LBB69_56:                              # %for.body223.preheader
                                        #   in Loop: Header=BB69_12 Depth=1
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	%rax, 16(%rsp)          # 8-byte Spill
.LBB69_57:                              # %for.body223
                                        #   Parent Loop BB69_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	16(%rsp), %rax          # 8-byte Reload
	movl	$2, %ecx
	movl	2848(%rsp,%rax,4), %edx
	movl	$22636, 5964(%rsp)      # imm = 0x586C
	sarl	$8, %edx
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movl	%edx, %eax
	cltd
	idivl	%ecx
	shll	$8, %eax
	addl	$256, %eax              # imm = 0x100
	movq	8(%rsp), %rsi           # 8-byte Reload
	movl	%eax, 2848(%rsp,%rsi,4)
	movl	$22639, 5964(%rsp)      # imm = 0x586F
	addq	$1, %rsi
	movq	568(%rsp), %rdi         # 8-byte Reload
	cmpq	%rdi, %rsi
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	jne	.LBB69_57
.LBB69_58:                              # %for.end233
                                        #   in Loop: Header=BB69_12 Depth=1
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	640(%rsp), %rsi         # 8-byte Reload
	movl	$0, (%rsi)
	movl	$22640, 5964(%rsp)      # imm = 0x5870
	movq	624(%rsp), %rdi         # 8-byte Reload
	movl	$0, (%rdi)
	movl	$22641, 5964(%rsp)      # imm = 0x5871
	movq	632(%rsp), %r8          # 8-byte Reload
	movl	$-2, (%r8)
	movl	$22643, 5964(%rsp)      # imm = 0x5873
	movb	619(%rsp), %r9b         # 1-byte Reload
	testb	$1, %r9b
	movq	%rcx, 424(%rsp)         # 8-byte Spill
	movq	%rdx, 432(%rsp)         # 8-byte Spill
	jne	.LBB69_60
	jmp	.LBB69_16
.LBB69_59:                              # %while.cond.while.end234_crit_edge.critedge
	movq	640(%rsp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$22644, 5964(%rsp)      # imm = 0x5874
	movq	624(%rsp), %rcx         # 8-byte Reload
	movl	$0, (%rcx)
	movl	$22645, 5964(%rsp)      # imm = 0x5875
	movq	632(%rsp), %rdx         # 8-byte Reload
	movl	$-2, (%rdx)
	movl	$22652, 5964(%rsp)      # imm = 0x587C
.LBB69_60:                              # %while.end234
	addq	$5968, %rsp             # imm = 0x1750
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB69_61:                              # %while.cond200.1
                                        #   Parent Loop BB69_12 Depth=1
                                        #     Parent Loop BB69_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	80(%rsp), %eax          # 4-byte Reload
	movl	88(%rsp), %ecx          # 4-byte Reload
	movslq	%ecx, %rdx
	movl	784(%rsp,%rdx,4), %ecx
	movl	$22661, 5964(%rsp)      # imm = 0x5885
	movl	%eax, %esi
	addl	$1, %esi
	cmpl	$-1, %ecx
	movl	%eax, 4(%rsp)           # 4-byte Spill
	movl	%ecx, 88(%rsp)          # 4-byte Spill
	movl	%esi, 80(%rsp)          # 4-byte Spill
	jg	.LBB69_61
# %bb.62:                               # %while.end208.1
                                        #   in Loop: Header=BB69_43 Depth=2
	movb	$1, %al
	movl	4(%rsp), %ecx           # 4-byte Reload
	movb	%cl, %dl
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	104(%rsp), %rdi         # 8-byte Reload
	movb	%dl, (%rsi,%rdi)
	movl	$22695, 5964(%rsp)      # imm = 0x58A7
	movl	756(%rsp), %r8d         # 4-byte Reload
	cmpl	%r8d, %ecx
	setg	%dl
	movb	87(%rsp), %r9b          # 1-byte Reload
	orb	%r9b, %dl
	testb	$1, %dl
	movb	%al, 3(%rsp)            # 1-byte Spill
	jne	.LBB69_66
# %bb.65:                               # %while.end208.1
                                        #   in Loop: Header=BB69_43 Depth=2
	movb	119(%rsp), %al          # 1-byte Reload
	movb	%al, 3(%rsp)            # 1-byte Spill
.LBB69_66:                              # %while.end208.1
                                        #   in Loop: Header=BB69_43 Depth=2
	movb	3(%rsp), %al            # 1-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	addq	$2, %rcx
	movq	120(%rsp), %rdx         # 8-byte Reload
	addq	$-2, %rdx
	cmpq	$0, %rdx
	movq	%rcx, %rsi
	movb	%al, %dil
	movb	%al, %r8b
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	movb	%r8b, 175(%rsp)         # 1-byte Spill
	movb	%dil, 143(%rsp)         # 1-byte Spill
	movq	%rsi, 144(%rsp)         # 8-byte Spill
	movq	%rdx, 128(%rsp)         # 8-byte Spill
	movb	%al, 159(%rsp)          # 1-byte Spill
	je	.LBB69_46
	jmp	.LBB69_43
.Lfunc_end69:
	.size	BZ2_hbMakeCodeLengths, .Lfunc_end69-BZ2_hbMakeCodeLengths
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_hbAssignCodes       # -- Begin function BZ2_hbAssignCodes
	.p2align	4, 0x90
	.type	BZ2_hbAssignCodes,@function
BZ2_hbAssignCodes:                      # @BZ2_hbAssignCodes
	.cfi_startproc
# %bb.0:                                # %entry
	subq	$48, %rsp
	.cfi_def_cfa_offset 56
	movl	$9999, 44(%rsp)         # imm = 0x270F
	cmpl	%ecx, %edx
	setle	%al
	cmpl	$0, %r8d
	setg	%r9b
	andb	%r9b, %al
	testb	$1, %al
	movl	%ecx, 40(%rsp)          # 4-byte Spill
	movl	%edx, 36(%rsp)          # 4-byte Spill
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movl	%r8d, 12(%rsp)          # 4-byte Spill
	jne	.LBB70_1
	jmp	.LBB70_11
.LBB70_1:                               # %for.body.lr.ph.split.us
	xorl	%eax, %eax
	movl	12(%rsp), %ecx          # 4-byte Reload
	movl	%ecx, %edx
	movl	%edx, %esi
	movq	%rsi, %rdi
	andq	$1, %rdi
	cmpl	$1, %ecx
	sete	%r8b
	subq	%rdi, %rsi
	cmpq	$0, %rdi
	sete	%r9b
	movl	36(%rsp), %edx          # 4-byte Reload
	movb	%r9b, 11(%rsp)          # 1-byte Spill
	movb	%r8b, 10(%rsp)          # 1-byte Spill
	movq	%rsi, (%rsp)            # 8-byte Spill
	movl	%eax, -4(%rsp)          # 4-byte Spill
	movl	%edx, -8(%rsp)          # 4-byte Spill
.LBB70_2:                               # %for.body.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_4 Depth 2
	movl	-8(%rsp), %eax          # 4-byte Reload
	movl	-4(%rsp), %ecx          # 4-byte Reload
	xorl	%edx, %edx
	movl	%edx, %esi
	movb	10(%rsp), %dil          # 1-byte Reload
	testb	$1, %dil
                                        # implicit-def: %edx
	movl	%ecx, %r8d
	movl	%eax, -12(%rsp)         # 4-byte Spill
	movl	%ecx, -16(%rsp)         # 4-byte Spill
	movl	%edx, -20(%rsp)         # 4-byte Spill
	movq	%rsi, -32(%rsp)         # 8-byte Spill
	movl	%r8d, -36(%rsp)         # 4-byte Spill
	jne	.LBB70_7
# %bb.3:                                # %for.body.us.new
                                        #   in Loop: Header=BB70_2 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	-16(%rsp), %eax         # 4-byte Reload
	movq	(%rsp), %rdx            # 8-byte Reload
	movq	%rcx, -48(%rsp)         # 8-byte Spill
	movl	%eax, -52(%rsp)         # 4-byte Spill
	movq	%rdx, -64(%rsp)         # 8-byte Spill
	jmp	.LBB70_4
.LBB70_4:                               # %for.body3.us
                                        #   Parent Loop BB70_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-64(%rsp), %rax         # 8-byte Reload
	movl	-52(%rsp), %ecx         # 4-byte Reload
	movq	-48(%rsp), %rdx         # 8-byte Reload
	movq	24(%rsp), %rsi          # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$22700, 44(%rsp)        # imm = 0x58AC
	movzbl	%dil, %r8d
	movl	-12(%rsp), %r9d         # 4-byte Reload
	cmpl	%r8d, %r9d
	movl	%ecx, %r8d
	movq	%rax, -72(%rsp)         # 8-byte Spill
	movl	%ecx, -76(%rsp)         # 4-byte Spill
	movq	%rdx, -88(%rsp)         # 8-byte Spill
	movl	%r8d, -92(%rsp)         # 4-byte Spill
	jne	.LBB70_6
# %bb.5:                                # %if.then.us
                                        #   in Loop: Header=BB70_4 Depth=2
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	-88(%rsp), %rcx         # 8-byte Reload
	movl	-76(%rsp), %edx         # 4-byte Reload
	movl	%edx, (%rax,%rcx,4)
	movl	$22706, 44(%rsp)        # imm = 0x58B2
	addl	$1, %edx
	movl	%edx, -92(%rsp)         # 4-byte Spill
.LBB70_6:                               # %for.inc.us
                                        #   in Loop: Header=BB70_4 Depth=2
	movl	-92(%rsp), %eax         # 4-byte Reload
	movq	-88(%rsp), %rcx         # 8-byte Reload
	orq	$1, %rcx
	movq	24(%rsp), %rdx          # 8-byte Reload
	movb	(%rdx,%rcx), %sil
	movl	$22715, 44(%rsp)        # imm = 0x58BB
	movzbl	%sil, %edi
	movl	-12(%rsp), %r8d         # 4-byte Reload
	cmpl	%edi, %r8d
	movl	%eax, %edi
	movl	%eax, -96(%rsp)         # 4-byte Spill
	movq	%rcx, -104(%rsp)        # 8-byte Spill
	movl	%edi, -108(%rsp)        # 4-byte Spill
	je	.LBB70_12
	jmp	.LBB70_13
.LBB70_7:                               # %for.cond1.for.end_crit_edge.us.unr-lcssa
                                        #   in Loop: Header=BB70_2 Depth=1
	movl	-36(%rsp), %eax         # 4-byte Reload
	movq	-32(%rsp), %rcx         # 8-byte Reload
	movl	-20(%rsp), %edx         # 4-byte Reload
	movb	11(%rsp), %sil          # 1-byte Reload
	testb	$1, %sil
	movl	%eax, -112(%rsp)        # 4-byte Spill
	movq	%rcx, -120(%rsp)        # 8-byte Spill
	movl	%edx, -124(%rsp)        # 4-byte Spill
	jne	.LBB70_10
# %bb.8:                                # %for.body3.us.epil
                                        #   in Loop: Header=BB70_2 Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	-120(%rsp), %rcx        # 8-byte Reload
	movb	(%rax,%rcx), %dl
	movl	$22720, 44(%rsp)        # imm = 0x58C0
	movzbl	%dl, %esi
	movl	-12(%rsp), %edi         # 4-byte Reload
	cmpl	%esi, %edi
	movl	-112(%rsp), %esi        # 4-byte Reload
	movl	%esi, -124(%rsp)        # 4-byte Spill
	jne	.LBB70_10
# %bb.9:                                # %if.then.us.epil
                                        #   in Loop: Header=BB70_2 Depth=1
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	-120(%rsp), %rcx        # 8-byte Reload
	movl	-112(%rsp), %edx        # 4-byte Reload
	movl	%edx, (%rax,%rcx,4)
	movl	$22728, 44(%rsp)        # imm = 0x58C8
	addl	$1, %edx
	movl	%edx, -124(%rsp)        # 4-byte Spill
.LBB70_10:                              # %for.cond1.for.end_crit_edge.us
                                        #   in Loop: Header=BB70_2 Depth=1
	movl	-124(%rsp), %eax        # 4-byte Reload
	shll	$1, %eax
	movl	-12(%rsp), %ecx         # 4-byte Reload
	addl	$1, %ecx
	movl	-12(%rsp), %edx         # 4-byte Reload
	movl	40(%rsp), %esi          # 4-byte Reload
	cmpl	%esi, %edx
	movl	%eax, -4(%rsp)          # 4-byte Spill
	movl	%ecx, -8(%rsp)          # 4-byte Spill
	jl	.LBB70_2
.LBB70_11:                              # %for.end11
	addq	$48, %rsp
	retq
.LBB70_12:                              # %if.then.us.1
                                        #   in Loop: Header=BB70_4 Depth=2
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	-104(%rsp), %rcx        # 8-byte Reload
	movl	-96(%rsp), %edx         # 4-byte Reload
	movl	%edx, (%rax,%rcx,4)
	movl	$22769, 44(%rsp)        # imm = 0x58F1
	addl	$1, %edx
	movl	%edx, -108(%rsp)        # 4-byte Spill
.LBB70_13:                              # %for.inc.us.1
                                        #   in Loop: Header=BB70_4 Depth=2
	movl	-108(%rsp), %eax        # 4-byte Reload
	movq	-88(%rsp), %rcx         # 8-byte Reload
	addq	$2, %rcx
	movq	-72(%rsp), %rdx         # 8-byte Reload
	addq	$-2, %rdx
	cmpq	$0, %rdx
	movq	%rcx, %rsi
	movl	%eax, %edi
	movl	%eax, %r8d
	movq	%rcx, -32(%rsp)         # 8-byte Spill
	movl	%r8d, -20(%rsp)         # 4-byte Spill
	movl	%edi, -52(%rsp)         # 4-byte Spill
	movq	%rsi, -48(%rsp)         # 8-byte Spill
	movq	%rdx, -64(%rsp)         # 8-byte Spill
	movl	%eax, -36(%rsp)         # 4-byte Spill
	je	.LBB70_7
	jmp	.LBB70_4
.Lfunc_end70:
	.size	BZ2_hbAssignCodes, .Lfunc_end70-BZ2_hbAssignCodes
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4               # -- Begin function BZ2_hbCreateDecodeTables
.LCPI71_0:
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.text
	.globl	BZ2_hbCreateDecodeTables
	.p2align	4, 0x90
	.type	BZ2_hbCreateDecodeTables,@function
BZ2_hbCreateDecodeTables:               # @BZ2_hbCreateDecodeTables
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$1192, %rsp             # imm = 0x4A8
	.cfi_def_cfa_offset 1248
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	1248(%rsp), %eax
	movl	$9999, 1188(%rsp)       # imm = 0x270F
	movq	%rdi, %r10
	movq	%rsi, %r11
	cmpl	%r9d, %r8d
	setg	%bl
	testb	$1, %bl
	movl	%eax, 1184(%rsp)        # 4-byte Spill
	movl	%r9d, 1180(%rsp)        # 4-byte Spill
	movl	%r8d, 1176(%rsp)        # 4-byte Spill
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	movq	%rdx, 1160(%rsp)        # 8-byte Spill
	movq	%rsi, 1152(%rsp)        # 8-byte Spill
	movq	%rdi, 1144(%rsp)        # 8-byte Spill
	movq	%r10, 1136(%rsp)        # 8-byte Spill
	movq	%r11, 1128(%rsp)        # 8-byte Spill
	movb	%bl, 1127(%rsp)         # 1-byte Spill
	jne	.LBB71_13
# %bb.1:                                # %for.body.lr.ph
	movl	1184(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jg	.LBB71_3
# %bb.2:                                # %for.end11.thread
	xorl	%esi, %esi
	movl	$92, %eax
	movl	%eax, %edx
	movq	1128(%rsp), %rdi        # 8-byte Reload
	callq	memset
	jmp	.LBB71_14
.LBB71_3:                               # %for.body.lr.ph.split.us
	xorl	%eax, %eax
	movl	1184(%rsp), %ecx        # 4-byte Reload
	movl	%ecx, %edx
	movl	%edx, %esi
	movq	%rsi, %rdi
	andq	$1, %rdi
	cmpl	$1, %ecx
	sete	%r8b
	subq	%rdi, %rsi
	cmpq	$0, %rdi
	sete	%r9b
	movl	1176(%rsp), %edx        # 4-byte Reload
	movl	%edx, 1120(%rsp)        # 4-byte Spill
	movb	%r8b, 1119(%rsp)        # 1-byte Spill
	movq	%rsi, 1104(%rsp)        # 8-byte Spill
	movb	%r9b, 1103(%rsp)        # 1-byte Spill
	movl	%eax, 1096(%rsp)        # 4-byte Spill
.LBB71_4:                               # %for.body.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_6 Depth 2
	movl	1096(%rsp), %eax        # 4-byte Reload
	movl	1120(%rsp), %ecx        # 4-byte Reload
	xorl	%edx, %edx
	movl	%edx, %esi
	movb	1119(%rsp), %dil        # 1-byte Reload
	testb	$1, %dil
                                        # implicit-def: %edx
	movl	%eax, %r8d
	movl	%eax, 1092(%rsp)        # 4-byte Spill
	movl	%ecx, 1088(%rsp)        # 4-byte Spill
	movl	%edx, 1084(%rsp)        # 4-byte Spill
	movq	%rsi, 1072(%rsp)        # 8-byte Spill
	movl	%r8d, 1068(%rsp)        # 4-byte Spill
	jne	.LBB71_9
# %bb.5:                                # %for.body.us.new
                                        #   in Loop: Header=BB71_4 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	1092(%rsp), %eax        # 4-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 1056(%rsp)        # 8-byte Spill
	movl	%eax, 1052(%rsp)        # 4-byte Spill
	movq	%rdx, 1040(%rsp)        # 8-byte Spill
	jmp	.LBB71_6
.LBB71_6:                               # %for.body3.us
                                        #   Parent Loop BB71_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	1040(%rsp), %rax        # 8-byte Reload
	movl	1052(%rsp), %ecx        # 4-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movb	(%rsi,%rdx), %dil
	movl	$22776, 1188(%rsp)      # imm = 0x58F8
	movzbl	%dil, %r8d
	movl	1088(%rsp), %r9d        # 4-byte Reload
	cmpl	%r8d, %r9d
	movl	%ecx, %r8d
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	movl	%ecx, 1028(%rsp)        # 4-byte Spill
	movq	%rdx, 1016(%rsp)        # 8-byte Spill
	movl	%r8d, 1012(%rsp)        # 4-byte Spill
	jne	.LBB71_8
# %bb.7:                                # %if.then.us
                                        #   in Loop: Header=BB71_6 Depth=2
	movl	1028(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movl	%edx, %esi
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi,%rcx,4)
	movl	$22782, 1188(%rsp)      # imm = 0x58FE
	addl	$1, %eax
	movl	%eax, 1012(%rsp)        # 4-byte Spill
.LBB71_8:                               # %for.inc.us
                                        #   in Loop: Header=BB71_6 Depth=2
	movl	1012(%rsp), %eax        # 4-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	orq	$1, %rcx
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movb	(%rdx,%rcx), %sil
	movl	$22791, 1188(%rsp)      # imm = 0x5907
	movzbl	%sil, %edi
	movl	1088(%rsp), %r8d        # 4-byte Reload
	cmpl	%edi, %r8d
	movl	%eax, %edi
	movl	%eax, 1008(%rsp)        # 4-byte Spill
	movq	%rcx, 1000(%rsp)        # 8-byte Spill
	movl	%edi, 996(%rsp)         # 4-byte Spill
	je	.LBB71_36
	jmp	.LBB71_37
.LBB71_9:                               # %for.cond1.for.inc9_crit_edge.us.unr-lcssa
                                        #   in Loop: Header=BB71_4 Depth=1
	movl	1068(%rsp), %eax        # 4-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movl	1084(%rsp), %edx        # 4-byte Reload
	movb	1103(%rsp), %sil        # 1-byte Reload
	testb	$1, %sil
	movl	%eax, 992(%rsp)         # 4-byte Spill
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	movl	%edx, 980(%rsp)         # 4-byte Spill
	jne	.LBB71_12
# %bb.10:                               # %for.body3.us.epil
                                        #   in Loop: Header=BB71_4 Depth=1
	movq	1168(%rsp), %rax        # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movb	(%rax,%rcx), %dl
	movl	$22798, 1188(%rsp)      # imm = 0x590E
	movzbl	%dl, %esi
	movl	1088(%rsp), %edi        # 4-byte Reload
	cmpl	%esi, %edi
	movl	992(%rsp), %esi         # 4-byte Reload
	movl	%esi, 980(%rsp)         # 4-byte Spill
	jne	.LBB71_12
# %bb.11:                               # %if.then.us.epil
                                        #   in Loop: Header=BB71_4 Depth=1
	movl	992(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	984(%rsp), %rdx         # 8-byte Reload
	movl	%edx, %esi
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi,%rcx,4)
	movl	$22840, 1188(%rsp)      # imm = 0x5938
	addl	$1, %eax
	movl	%eax, 980(%rsp)         # 4-byte Spill
.LBB71_12:                              # %for.cond1.for.inc9_crit_edge.us
                                        #   in Loop: Header=BB71_4 Depth=1
	movl	980(%rsp), %eax         # 4-byte Reload
	movl	1088(%rsp), %ecx        # 4-byte Reload
	addl	$1, %ecx
	movl	1088(%rsp), %edx        # 4-byte Reload
	movl	1180(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %edx
	movl	%ecx, 1120(%rsp)        # 4-byte Spill
	movl	%eax, 1096(%rsp)        # 4-byte Spill
	jl	.LBB71_4
.LBB71_13:                              # %for.end11
	xorl	%esi, %esi
	movl	$92, %eax
	movl	%eax, %edx
	movq	1128(%rsp), %rdi        # 8-byte Reload
	callq	memset
	movl	1184(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jg	.LBB71_15
.LBB71_14:                              # %for.end11.for.end33_crit_edge
	xorl	%eax, %eax
	movq	1152(%rsp), %rcx        # 8-byte Reload
	addq	$4, %rcx
	movq	1152(%rsp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	1152(%rsp), %rsi        # 8-byte Reload
	addq	$12, %rsi
	movq	1152(%rsp), %rdi        # 8-byte Reload
	addq	$16, %rdi
	movq	1152(%rsp), %r8         # 8-byte Reload
	addq	$20, %r8
	movq	1152(%rsp), %r9         # 8-byte Reload
	addq	$24, %r9
	movq	1152(%rsp), %r10        # 8-byte Reload
	addq	$28, %r10
	movq	1152(%rsp), %r11        # 8-byte Reload
	addq	$32, %r11
	movq	1152(%rsp), %rbx        # 8-byte Reload
	addq	$36, %rbx
	movq	1152(%rsp), %r14        # 8-byte Reload
	addq	$40, %r14
	movq	1152(%rsp), %r15        # 8-byte Reload
	addq	$44, %r15
	movq	1152(%rsp), %r12        # 8-byte Reload
	addq	$48, %r12
	movq	1152(%rsp), %r13        # 8-byte Reload
	addq	$52, %r13
	movq	1152(%rsp), %rbp        # 8-byte Reload
	addq	$56, %rbp
	movq	%rcx, 968(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rcx        # 8-byte Reload
	addq	$60, %rcx
	movq	%rcx, 960(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rcx        # 8-byte Reload
	addq	$64, %rcx
	movq	%rcx, 952(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rcx        # 8-byte Reload
	addq	$68, %rcx
	movq	%rcx, 944(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rcx        # 8-byte Reload
	addq	$72, %rcx
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rcx        # 8-byte Reload
	addq	$76, %rcx
	movq	%rcx, 928(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rcx        # 8-byte Reload
	addq	$80, %rcx
	movq	%rcx, 920(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rcx        # 8-byte Reload
	addq	$84, %rcx
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rcx        # 8-byte Reload
	addq	$88, %rcx
	movq	%rcx, 904(%rsp)         # 8-byte Spill
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 896(%rsp)         # 8-byte Spill
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 888(%rsp)         # 8-byte Spill
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 880(%rsp)         # 8-byte Spill
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 872(%rsp)         # 8-byte Spill
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 864(%rsp)         # 8-byte Spill
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 856(%rsp)         # 8-byte Spill
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 848(%rsp)         # 8-byte Spill
	movq	968(%rsp), %rcx         # 8-byte Reload
	movl	%eax, 844(%rsp)         # 4-byte Spill
	movl	%eax, 840(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 836(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 832(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 828(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 824(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 820(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 816(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 812(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 808(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 804(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 800(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 796(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 792(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 788(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 784(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 780(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 776(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 772(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 768(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 764(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 760(%rsp)         # 4-byte Spill
	movl	844(%rsp), %eax         # 4-byte Reload
	movl	%eax, 756(%rsp)         # 4-byte Spill
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	movq	%rsi, 736(%rsp)         # 8-byte Spill
	movq	%rdi, 728(%rsp)         # 8-byte Spill
	movq	%r8, 720(%rsp)          # 8-byte Spill
	movq	%r9, 712(%rsp)          # 8-byte Spill
	movq	%r10, 704(%rsp)         # 8-byte Spill
	movq	%r11, 696(%rsp)         # 8-byte Spill
	movq	%rbx, 688(%rsp)         # 8-byte Spill
	movq	%r14, 680(%rsp)         # 8-byte Spill
	movq	%r15, 672(%rsp)         # 8-byte Spill
	movq	%r12, 664(%rsp)         # 8-byte Spill
	movq	%r13, 656(%rsp)         # 8-byte Spill
	movq	%rbp, 648(%rsp)         # 8-byte Spill
	movq	%rdx, 640(%rsp)         # 8-byte Spill
	jmp	.LBB71_21
.LBB71_15:                              # %for.body24.lr.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	1184(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edx
	movl	%edx, %esi
	movq	%rsi, %rdi
	andq	$1, %rdi
	cmpl	$1, %eax
	movq	%rdi, 632(%rsp)         # 8-byte Spill
	movq	%rsi, 624(%rsp)         # 8-byte Spill
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	je	.LBB71_18
# %bb.16:                               # %for.body24.lr.ph.new
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	624(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rsi         # 8-byte Reload
	subq	%rsi, %rdx
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	movq	%rdx, 600(%rsp)         # 8-byte Spill
.LBB71_17:                              # %for.body24
                                        # =>This Inner Loop Header: Depth=1
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movb	(%rdx,%rcx), %sil
	movl	$22844, 1188(%rsp)      # imm = 0x593C
	movzbl	%sil, %edi
	movl	%edi, %r8d
	movq	1152(%rsp), %r9         # 8-byte Reload
	movl	4(%r9,%r8,4), %edi
	movl	$22846, 1188(%rsp)      # imm = 0x593E
	addl	$1, %edi
	movl	%edi, 4(%r9,%r8,4)
	movl	$22849, 1188(%rsp)      # imm = 0x5941
	movq	%rcx, %r8
	orq	$1, %r8
	movb	(%rdx,%r8), %sil
	movl	$22853, 1188(%rsp)      # imm = 0x5945
	movzbl	%sil, %edi
	movl	%edi, %r8d
	movl	4(%r9,%r8,4), %edi
	movl	$22855, 1188(%rsp)      # imm = 0x5947
	addl	$1, %edi
	movl	%edi, 4(%r9,%r8,4)
	movl	$22862, 1188(%rsp)      # imm = 0x594E
	addq	$2, %rcx
	addq	$-2, %rax
	cmpq	$0, %rax
	movq	%rcx, %r8
	movq	%rax, 600(%rsp)         # 8-byte Spill
	movq	%r8, 608(%rsp)          # 8-byte Spill
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	jne	.LBB71_17
.LBB71_18:                              # %for.end33.loopexit.unr-lcssa
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	cmpq	$0, %rcx
	movq	%rax, 592(%rsp)         # 8-byte Spill
	je	.LBB71_20
# %bb.19:                               # %for.body24.epil
	movq	1168(%rsp), %rax        # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movb	(%rax,%rcx), %dl
	movl	$22866, 1188(%rsp)      # imm = 0x5952
	movzbl	%dl, %esi
	movl	%esi, %edi
	movq	1152(%rsp), %r8         # 8-byte Reload
	movl	4(%r8,%rdi,4), %esi
	movl	$22868, 1188(%rsp)      # imm = 0x5954
	addl	$1, %esi
	movl	%esi, 4(%r8,%rdi,4)
	movl	$22871, 1188(%rsp)      # imm = 0x5957
.LBB71_20:                              # %for.end33.loopexit
	movq	1152(%rsp), %rax        # 8-byte Reload
	addq	$4, %rax
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movl	4(%rcx), %edx
	movl	$22873, 1188(%rsp)      # imm = 0x5959
	addq	$8, %rcx
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	8(%rsi), %edi
	movl	$22875, 1188(%rsp)      # imm = 0x595B
	addq	$12, %rsi
	movq	1152(%rsp), %r8         # 8-byte Reload
	movl	12(%r8), %r9d
	movl	$22877, 1188(%rsp)      # imm = 0x595D
	addq	$16, %r8
	movq	1152(%rsp), %r10        # 8-byte Reload
	movl	16(%r10), %r11d
	movl	$22879, 1188(%rsp)      # imm = 0x595F
	addq	$20, %r10
	movq	1152(%rsp), %rbx        # 8-byte Reload
	movl	20(%rbx), %ebp
	movl	$22881, 1188(%rsp)      # imm = 0x5961
	addq	$24, %rbx
	movq	1152(%rsp), %r14        # 8-byte Reload
	movl	24(%r14), %r15d
	movl	$22883, 1188(%rsp)      # imm = 0x5963
	addq	$28, %r14
	movq	1152(%rsp), %r12        # 8-byte Reload
	movl	28(%r12), %r13d
	movl	$22885, 1188(%rsp)      # imm = 0x5965
	addq	$32, %r12
	movq	%rax, 584(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rax        # 8-byte Reload
	movl	32(%rax), %eax
	movl	$22887, 1188(%rsp)      # imm = 0x5967
	movq	%rcx, 576(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rcx        # 8-byte Reload
	addq	$36, %rcx
	movq	%rcx, 568(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movl	36(%rcx), %ecx
	movl	$22889, 1188(%rsp)      # imm = 0x5969
	movq	%rsi, 560(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	addq	$40, %rsi
	movq	%rsi, 552(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	40(%rsi), %esi
	movl	$22891, 1188(%rsp)      # imm = 0x596B
	movl	%esi, 548(%rsp)         # 4-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	addq	$44, %rsi
	movq	%rsi, 536(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	44(%rsi), %esi
	movl	$22893, 1188(%rsp)      # imm = 0x596D
	movl	%esi, 532(%rsp)         # 4-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	addq	$48, %rsi
	movq	%rsi, 520(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	48(%rsi), %esi
	movl	$22895, 1188(%rsp)      # imm = 0x596F
	movl	%esi, 516(%rsp)         # 4-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	addq	$52, %rsi
	movq	%rsi, 504(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	52(%rsi), %esi
	movl	$22897, 1188(%rsp)      # imm = 0x5971
	movl	%esi, 500(%rsp)         # 4-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	addq	$56, %rsi
	movq	%rsi, 488(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	56(%rsi), %esi
	movl	$22899, 1188(%rsp)      # imm = 0x5973
	movl	%esi, 484(%rsp)         # 4-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	addq	$60, %rsi
	movq	%rsi, 472(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	60(%rsi), %esi
	movl	$22901, 1188(%rsp)      # imm = 0x5975
	movl	%esi, 468(%rsp)         # 4-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	addq	$64, %rsi
	movq	%rsi, 456(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	64(%rsi), %esi
	movl	$22903, 1188(%rsp)      # imm = 0x5977
	movl	%esi, 452(%rsp)         # 4-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	addq	$68, %rsi
	movq	%rsi, 440(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	68(%rsi), %esi
	movl	$22905, 1188(%rsp)      # imm = 0x5979
	movl	%esi, 436(%rsp)         # 4-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	addq	$72, %rsi
	movq	%rsi, 424(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	72(%rsi), %esi
	movl	$22907, 1188(%rsp)      # imm = 0x597B
	movl	%esi, 420(%rsp)         # 4-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	addq	$76, %rsi
	movq	%rsi, 408(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	76(%rsi), %esi
	movl	$22909, 1188(%rsp)      # imm = 0x597D
	movl	%esi, 404(%rsp)         # 4-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	addq	$80, %rsi
	movq	%rsi, 392(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	80(%rsi), %esi
	movl	$22911, 1188(%rsp)      # imm = 0x597F
	movl	%esi, 388(%rsp)         # 4-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	addq	$84, %rsi
	movq	%rsi, 376(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	84(%rsi), %esi
	movl	$22913, 1188(%rsp)      # imm = 0x5981
	movl	%esi, 372(%rsp)         # 4-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	addq	$88, %rsi
	movq	%rsi, 360(%rsp)         # 8-byte Spill
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	88(%rsi), %esi
	movl	$22959, 1188(%rsp)      # imm = 0x59AF
	movl	%esi, 356(%rsp)         # 4-byte Spill
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 904(%rsp)         # 8-byte Spill
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 896(%rsp)         # 8-byte Spill
	movq	392(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 888(%rsp)         # 8-byte Spill
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 880(%rsp)         # 8-byte Spill
	movq	424(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 872(%rsp)         # 8-byte Spill
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 864(%rsp)         # 8-byte Spill
	movq	456(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 856(%rsp)         # 8-byte Spill
	movq	472(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 848(%rsp)         # 8-byte Spill
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 648(%rsp)         # 8-byte Spill
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 656(%rsp)         # 8-byte Spill
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 664(%rsp)         # 8-byte Spill
	movq	536(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 672(%rsp)         # 8-byte Spill
	movq	552(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 680(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 688(%rsp)         # 8-byte Spill
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 736(%rsp)         # 8-byte Spill
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 640(%rsp)         # 8-byte Spill
	movq	584(%rsp), %rsi         # 8-byte Reload
	movl	%eax, 352(%rsp)         # 4-byte Spill
	movl	356(%rsp), %eax         # 4-byte Reload
	movl	%eax, 840(%rsp)         # 4-byte Spill
	movl	372(%rsp), %eax         # 4-byte Reload
	movl	%eax, 836(%rsp)         # 4-byte Spill
	movl	388(%rsp), %eax         # 4-byte Reload
	movl	%eax, 832(%rsp)         # 4-byte Spill
	movl	404(%rsp), %eax         # 4-byte Reload
	movl	%eax, 828(%rsp)         # 4-byte Spill
	movl	420(%rsp), %eax         # 4-byte Reload
	movl	%eax, 824(%rsp)         # 4-byte Spill
	movl	436(%rsp), %eax         # 4-byte Reload
	movl	%eax, 820(%rsp)         # 4-byte Spill
	movl	452(%rsp), %eax         # 4-byte Reload
	movl	%eax, 816(%rsp)         # 4-byte Spill
	movl	468(%rsp), %eax         # 4-byte Reload
	movl	%eax, 812(%rsp)         # 4-byte Spill
	movl	484(%rsp), %eax         # 4-byte Reload
	movl	%eax, 808(%rsp)         # 4-byte Spill
	movl	500(%rsp), %eax         # 4-byte Reload
	movl	%eax, 804(%rsp)         # 4-byte Spill
	movl	516(%rsp), %eax         # 4-byte Reload
	movl	%eax, 800(%rsp)         # 4-byte Spill
	movl	532(%rsp), %eax         # 4-byte Reload
	movl	%eax, 796(%rsp)         # 4-byte Spill
	movl	548(%rsp), %eax         # 4-byte Reload
	movl	%eax, 792(%rsp)         # 4-byte Spill
	movl	352(%rsp), %eax         # 4-byte Reload
	movl	%eax, 784(%rsp)         # 4-byte Spill
	movq	%r8, 728(%rsp)          # 8-byte Spill
	movl	%edi, 760(%rsp)         # 4-byte Spill
	movq	%rsi, 744(%rsp)         # 8-byte Spill
	movl	%r9d, 764(%rsp)         # 4-byte Spill
	movq	%r10, 720(%rsp)         # 8-byte Spill
	movl	%r11d, 768(%rsp)        # 4-byte Spill
	movq	%rbx, 712(%rsp)         # 8-byte Spill
	movl	%ebp, 772(%rsp)         # 4-byte Spill
	movq	%r14, 704(%rsp)         # 8-byte Spill
	movl	%r15d, 776(%rsp)        # 4-byte Spill
	movq	%r12, 696(%rsp)         # 8-byte Spill
	movl	%r13d, 780(%rsp)        # 4-byte Spill
	movl	%ecx, 788(%rsp)         # 4-byte Spill
	movl	%edx, 756(%rsp)         # 4-byte Spill
.LBB71_21:                              # %for.end33
	movl	756(%rsp), %eax         # 4-byte Reload
	movl	760(%rsp), %ecx         # 4-byte Reload
	movl	764(%rsp), %edx         # 4-byte Reload
	movl	768(%rsp), %esi         # 4-byte Reload
	movl	772(%rsp), %edi         # 4-byte Reload
	movl	776(%rsp), %r8d         # 4-byte Reload
	movl	780(%rsp), %r9d         # 4-byte Reload
	movl	784(%rsp), %r10d        # 4-byte Reload
	movl	788(%rsp), %r11d        # 4-byte Reload
	movl	792(%rsp), %ebx         # 4-byte Reload
	movl	796(%rsp), %ebp         # 4-byte Reload
	movl	800(%rsp), %r14d        # 4-byte Reload
	movl	804(%rsp), %r15d        # 4-byte Reload
	movl	808(%rsp), %r12d        # 4-byte Reload
	movl	812(%rsp), %r13d        # 4-byte Reload
	movl	%eax, 348(%rsp)         # 4-byte Spill
	movl	816(%rsp), %eax         # 4-byte Reload
	movl	%eax, 344(%rsp)         # 4-byte Spill
	movl	820(%rsp), %eax         # 4-byte Reload
	movl	%eax, 340(%rsp)         # 4-byte Spill
	movl	824(%rsp), %eax         # 4-byte Reload
	movl	%eax, 336(%rsp)         # 4-byte Spill
	movl	828(%rsp), %eax         # 4-byte Reload
	movl	%eax, 332(%rsp)         # 4-byte Spill
	movl	832(%rsp), %eax         # 4-byte Reload
	movl	%eax, 328(%rsp)         # 4-byte Spill
	movl	836(%rsp), %eax         # 4-byte Reload
	movl	%eax, 324(%rsp)         # 4-byte Spill
	movl	840(%rsp), %eax         # 4-byte Reload
	movl	%esi, 320(%rsp)         # 4-byte Spill
	movq	744(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 312(%rsp)         # 8-byte Spill
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 304(%rsp)         # 8-byte Spill
	movq	736(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 296(%rsp)         # 8-byte Spill
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 288(%rsp)         # 8-byte Spill
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 280(%rsp)         # 8-byte Spill
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 272(%rsp)         # 8-byte Spill
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 264(%rsp)         # 8-byte Spill
	movq	696(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 256(%rsp)         # 8-byte Spill
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 248(%rsp)         # 8-byte Spill
	movq	680(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 240(%rsp)         # 8-byte Spill
	movq	672(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 232(%rsp)         # 8-byte Spill
	movq	664(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movq	648(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	movq	848(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 200(%rsp)         # 8-byte Spill
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 192(%rsp)         # 8-byte Spill
	movq	864(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 184(%rsp)         # 8-byte Spill
	movq	872(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 176(%rsp)         # 8-byte Spill
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 168(%rsp)         # 8-byte Spill
	movq	888(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 160(%rsp)         # 8-byte Spill
	movq	896(%rsp), %rsi         # 8-byte Reload
	movq	%rsi, 152(%rsp)         # 8-byte Spill
	movq	904(%rsp), %rsi         # 8-byte Reload
	movl	%eax, 148(%rsp)         # 4-byte Spill
	xorl	%eax, %eax
	movl	%eax, 144(%rsp)         # 4-byte Spill
	movl	$92, %eax
                                        # kill: def %rax killed %eax
	movq	%rax, 136(%rsp)         # 8-byte Spill
	movq	312(%rsp), %rax         # 8-byte Reload
	movl	%ecx, 132(%rsp)         # 4-byte Spill
	movl	348(%rsp), %ecx         # 4-byte Reload
	movl	%ecx, (%rax)
	movl	$22961, 1188(%rsp)      # imm = 0x59B1
	movl	132(%rsp), %ecx         # 4-byte Reload
	movl	348(%rsp), %eax         # 4-byte Reload
	addl	%eax, %ecx
	movq	304(%rsp), %rax         # 8-byte Reload
	movl	%ecx, (%rax)
	movl	$22963, 1188(%rsp)      # imm = 0x59B3
	addl	%ecx, %edx
	movq	296(%rsp), %rax         # 8-byte Reload
	movl	%edx, (%rax)
	movl	$22965, 1188(%rsp)      # imm = 0x59B5
	movl	320(%rsp), %ecx         # 4-byte Reload
	addl	%edx, %ecx
	movq	288(%rsp), %rax         # 8-byte Reload
	movl	%ecx, (%rax)
	movl	$22967, 1188(%rsp)      # imm = 0x59B7
	addl	%ecx, %edi
	movq	280(%rsp), %rax         # 8-byte Reload
	movl	%edi, (%rax)
	movl	$22969, 1188(%rsp)      # imm = 0x59B9
	addl	%edi, %r8d
	movq	272(%rsp), %rax         # 8-byte Reload
	movl	%r8d, (%rax)
	movl	$22971, 1188(%rsp)      # imm = 0x59BB
	addl	%r8d, %r9d
	movq	264(%rsp), %rax         # 8-byte Reload
	movl	%r9d, (%rax)
	movl	$22973, 1188(%rsp)      # imm = 0x59BD
	addl	%r9d, %r10d
	movq	256(%rsp), %rax         # 8-byte Reload
	movl	%r10d, (%rax)
	movl	$22975, 1188(%rsp)      # imm = 0x59BF
	addl	%r10d, %r11d
	movq	248(%rsp), %rax         # 8-byte Reload
	movl	%r11d, (%rax)
	movl	$22977, 1188(%rsp)      # imm = 0x59C1
	addl	%r11d, %ebx
	movq	240(%rsp), %rax         # 8-byte Reload
	movl	%ebx, (%rax)
	movl	$22979, 1188(%rsp)      # imm = 0x59C3
	addl	%ebx, %ebp
	movq	232(%rsp), %rax         # 8-byte Reload
	movl	%ebp, (%rax)
	movl	$22981, 1188(%rsp)      # imm = 0x59C5
	addl	%ebp, %r14d
	movq	224(%rsp), %rax         # 8-byte Reload
	movl	%r14d, (%rax)
	movl	$22983, 1188(%rsp)      # imm = 0x59C7
	addl	%r14d, %r15d
	movq	216(%rsp), %rax         # 8-byte Reload
	movl	%r15d, (%rax)
	movl	$22985, 1188(%rsp)      # imm = 0x59C9
	addl	%r15d, %r12d
	movq	208(%rsp), %rax         # 8-byte Reload
	movl	%r12d, (%rax)
	movl	$22987, 1188(%rsp)      # imm = 0x59CB
	addl	%r12d, %r13d
	movq	200(%rsp), %rax         # 8-byte Reload
	movl	%r13d, (%rax)
	movl	$22989, 1188(%rsp)      # imm = 0x59CD
	movl	344(%rsp), %ecx         # 4-byte Reload
	addl	%r13d, %ecx
	movq	192(%rsp), %rax         # 8-byte Reload
	movl	%ecx, (%rax)
	movl	$22991, 1188(%rsp)      # imm = 0x59CF
	movl	340(%rsp), %edx         # 4-byte Reload
	addl	%ecx, %edx
	movq	184(%rsp), %rax         # 8-byte Reload
	movl	%edx, (%rax)
	movl	$22993, 1188(%rsp)      # imm = 0x59D1
	movl	336(%rsp), %ecx         # 4-byte Reload
	addl	%edx, %ecx
	movq	176(%rsp), %rax         # 8-byte Reload
	movl	%ecx, (%rax)
	movl	$22995, 1188(%rsp)      # imm = 0x59D3
	movl	332(%rsp), %edx         # 4-byte Reload
	addl	%ecx, %edx
	movq	168(%rsp), %rax         # 8-byte Reload
	movl	%edx, (%rax)
	movl	$22997, 1188(%rsp)      # imm = 0x59D5
	movl	328(%rsp), %ecx         # 4-byte Reload
	addl	%edx, %ecx
	movq	160(%rsp), %rax         # 8-byte Reload
	movl	%ecx, (%rax)
	movl	$22999, 1188(%rsp)      # imm = 0x59D7
	movl	324(%rsp), %edx         # 4-byte Reload
	addl	%ecx, %edx
	movq	152(%rsp), %rax         # 8-byte Reload
	movl	%edx, (%rax)
	movl	$23001, 1188(%rsp)      # imm = 0x59D9
	movl	148(%rsp), %ecx         # 4-byte Reload
	addl	%edx, %ecx
	movl	%ecx, (%rsi)
	movl	$23012, 1188(%rsp)      # imm = 0x59E4
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movl	144(%rsp), %esi         # 4-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	callq	memset
	movb	1127(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB71_24
# %bb.22:                               # %for.body58.lr.ph
	xorl	%eax, %eax
	movl	1176(%rsp), %ecx        # 4-byte Reload
	movslq	%ecx, %rdx
	movl	1180(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rdi
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%rdi, 112(%rsp)         # 8-byte Spill
	movl	%eax, 108(%rsp)         # 4-byte Spill
.LBB71_23:                              # %for.body58
                                        # =>This Inner Loop Header: Depth=1
	movl	108(%rsp), %eax         # 4-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	4(%rsi,%rcx,4), %edi
	movl	$23014, 1188(%rsp)      # imm = 0x59E6
	movl	(%rsi,%rcx,4), %r8d
	movl	$23019, 1188(%rsp)      # imm = 0x59EB
	subl	%r8d, %edi
	addl	%eax, %edi
	movl	%edi, %eax
	addl	$-1, %eax
	movq	1144(%rsp), %r9         # 8-byte Reload
	movl	%eax, (%r9,%rcx,4)
	movl	$23048, 1188(%rsp)      # imm = 0x5A08
	shll	$1, %edi
	movq	112(%rsp), %r10         # 8-byte Reload
	cmpq	%r10, %rcx
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movl	%edi, 108(%rsp)         # 4-byte Spill
	jl	.LBB71_23
.LBB71_24:                              # %for.end71
	movl	1176(%rsp), %eax        # 4-byte Reload
	movl	1180(%rsp), %ecx        # 4-byte Reload
	cmpl	%ecx, %eax
	jge	.LBB71_35
# %bb.25:                               # %for.body76.lr.ph
	movl	1176(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movl	1180(%rsp), %edx        # 4-byte Reload
	movslq	%edx, %rsi
	movq	%rsi, %rdi
	subq	%rcx, %rdi
	cmpq	$8, %rdi
	movq	%rcx, %r8
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	movq	%rsi, 88(%rsp)          # 8-byte Spill
	movq	%rdi, 80(%rsp)          # 8-byte Spill
	movq	%r8, 72(%rsp)           # 8-byte Spill
	jb	.LBB71_30
# %bb.26:                               # %vector.memcheck
	movq	96(%rsp), %rax          # 8-byte Reload
	addq	$1, %rax
	shlq	$2, %rax
	movq	1152(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	88(%rsp), %rax          # 8-byte Reload
	addq	$1, %rax
	shlq	$2, %rax
	movq	1152(%rsp), %rdx        # 8-byte Reload
	addq	%rax, %rdx
	movq	96(%rsp), %rax          # 8-byte Reload
	shlq	$2, %rax
	movq	1144(%rsp), %rsi        # 8-byte Reload
	addq	%rax, %rsi
	movq	88(%rsp), %rax          # 8-byte Reload
	shlq	$2, %rax
	movq	1144(%rsp), %rdi        # 8-byte Reload
	addq	%rax, %rdi
	cmpq	%rdi, %rcx
	setb	%r8b
	cmpq	%rdx, %rsi
	setb	%r9b
	andb	%r9b, %r8b
	testb	$1, %r8b
	movq	96(%rsp), %rax          # 8-byte Reload
	movq	%rax, 72(%rsp)          # 8-byte Spill
	jne	.LBB71_30
# %bb.27:                               # %vector.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	80(%rsp), %rdx          # 8-byte Reload
	andq	$-8, %rdx
	movq	%rdx, %rsi
	movq	96(%rsp), %rdi          # 8-byte Reload
	addq	%rdi, %rsi
	movq	%rdx, 64(%rsp)          # 8-byte Spill
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movq	%rcx, 48(%rsp)          # 8-byte Spill
.LBB71_28:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	%rax, %rcx
	movq	96(%rsp), %rdx          # 8-byte Reload
	addq	%rdx, %rcx
	movq	%rcx, %rsi
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movups	(%rdi,%rcx,4), %xmm0
	movl	$23051, 1188(%rsp)      # imm = 0x5A0B
	movups	16(%rdi,%rcx,4), %xmm1
	movl	$23052, 1188(%rsp)      # imm = 0x5A0C
	paddd	%xmm0, %xmm0
	paddd	%xmm1, %xmm1
	movaps	.LCPI71_0(%rip), %xmm2  # xmm2 = [2,2,2,2]
	paddd	%xmm2, %xmm0
	paddd	%xmm2, %xmm1
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movdqu	4(%rcx,%rsi,4), %xmm2
	movl	$23061, 1188(%rsp)      # imm = 0x5A15
	movdqu	20(%rcx,%rsi,4), %xmm3
	movl	$23062, 1188(%rsp)      # imm = 0x5A16
	psubd	%xmm2, %xmm0
	psubd	%xmm3, %xmm1
	movdqu	%xmm0, 4(%rcx,%rsi,4)
	movl	$23067, 1188(%rsp)      # imm = 0x5A1B
	movdqu	%xmm1, 20(%rcx,%rsi,4)
	movl	$23080, 1188(%rsp)      # imm = 0x5A28
	addq	$8, %rax
	movq	64(%rsp), %rsi          # 8-byte Reload
	cmpq	%rsi, %rax
	movq	%rax, 48(%rsp)          # 8-byte Spill
	jne	.LBB71_28
# %bb.29:                               # %middle.block
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	64(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rax
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	%rdx, 72(%rsp)          # 8-byte Spill
	je	.LBB71_35
.LBB71_30:                              # %for.body76.preheader
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	88(%rsp), %rcx          # 8-byte Reload
	subq	%rax, %rcx
	movq	88(%rsp), %rdx          # 8-byte Reload
	addq	$-1, %rdx
	andq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, %rcx
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	je	.LBB71_32
# %bb.31:                               # %for.body76.prol
	movq	40(%rsp), %rax          # 8-byte Reload
	addq	$1, %rax
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movl	(%rcx,%rdx,4), %esi
	movl	$23084, 1188(%rsp)      # imm = 0x5A2C
	shll	$1, %esi
	addl	$2, %esi
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movl	4(%rdi,%rdx,4), %r8d
	movl	$23086, 1188(%rsp)      # imm = 0x5A2E
	subl	%r8d, %esi
	movl	%esi, 4(%rdi,%rdx,4)
	movl	$23096, 1188(%rsp)      # imm = 0x5A38
	movq	%rax, 24(%rsp)          # 8-byte Spill
.LBB71_32:                              # %for.body76.prol.loopexit
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	cmpq	%rdx, %rcx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	je	.LBB71_35
# %bb.33:                               # %for.body76.preheader.new
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	%rax, 8(%rsp)           # 8-byte Spill
	jmp	.LBB71_34
.LBB71_34:                              # %for.body76
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx,%rax,4), %edx
	movl	$23100, 1188(%rsp)      # imm = 0x5A3C
	shll	$1, %edx
	addl	$2, %edx
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movl	4(%rsi,%rax,4), %edi
	movl	$23102, 1188(%rsp)      # imm = 0x5A3E
	subl	%edi, %edx
	movl	%edx, 4(%rsi,%rax,4)
	movl	$23104, 1188(%rsp)      # imm = 0x5A40
	movq	%rax, %r8
	addq	$2, %r8
	movl	4(%rcx,%rax,4), %edx
	movl	$23108, 1188(%rsp)      # imm = 0x5A44
	shll	$1, %edx
	addl	$2, %edx
	movl	8(%rsi,%rax,4), %edi
	movl	$23110, 1188(%rsp)      # imm = 0x5A46
	subl	%edi, %edx
	movl	%edx, 8(%rsi,%rax,4)
	movl	$23117, 1188(%rsp)      # imm = 0x5A4D
	movq	88(%rsp), %rax          # 8-byte Reload
	cmpq	%rax, %r8
	movq	%r8, 8(%rsp)            # 8-byte Spill
	jne	.LBB71_34
.LBB71_35:                              # %for.end89
	addq	$1192, %rsp             # imm = 0x4A8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB71_36:                              # %if.then.us.1
                                        #   in Loop: Header=BB71_6 Depth=2
	movl	1008(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	1000(%rsp), %rdx        # 8-byte Reload
	movl	%edx, %esi
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movl	%esi, (%rdi,%rcx,4)
	addl	$1, %eax
	movl	%eax, 996(%rsp)         # 4-byte Spill
.LBB71_37:                              # %for.inc.us.1
                                        #   in Loop: Header=BB71_6 Depth=2
	movl	996(%rsp), %eax         # 4-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	addq	$2, %rcx
	movq	1032(%rsp), %rdx        # 8-byte Reload
	addq	$-2, %rdx
	cmpq	$0, %rdx
	movq	%rcx, %rsi
	movl	%eax, %edi
	movl	%eax, %r8d
	movq	%rcx, 1072(%rsp)        # 8-byte Spill
	movl	%r8d, 1084(%rsp)        # 4-byte Spill
	movl	%edi, 1052(%rsp)        # 4-byte Spill
	movq	%rsi, 1056(%rsp)        # 8-byte Spill
	movq	%rdx, 1040(%rsp)        # 8-byte Spill
	movl	%eax, 1068(%rsp)        # 4-byte Spill
	je	.LBB71_9
	jmp	.LBB71_6
.Lfunc_end71:
	.size	BZ2_hbCreateDecodeTables, .Lfunc_end71-BZ2_hbCreateDecodeTables
	.cfi_endproc
                                        # -- End function
	.type	dbglvl,@object          # @dbglvl
	.data
	.globl	dbglvl
	.p2align	2
dbglvl:
	.long	4                       # 0x4
	.size	dbglvl, 4

	.type	seedi,@object           # @seedi
	.comm	seedi,8,8
	.type	spec_fd,@object         # @spec_fd
	.comm	spec_fd,72,16
	.type	.Lstr.34,@object        # @str.34
	.section	.rodata.str1.1,"aMS",@progbits,1
.Lstr.34:
	.asciz	"spec_init"
	.size	.Lstr.34, 10

	.type	.Lstr,@object           # @str
	.section	.rodata.str1.16,"aMS",@progbits,1
	.p2align	4
.Lstr:
	.asciz	"spec_init: Error mallocing memory!"
	.size	.Lstr, 35

	.type	.Lstr.36,@object        # @str.36
	.section	.rodata.str1.1,"aMS",@progbits,1
.Lstr.36:
	.asciz	"Creating Chunks"
	.size	.Lstr.36, 16

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"Creating Chunk %d\n"
	.size	.L.str.3, 19

	.type	.Lstr.35,@object        # @str.35
	.section	.rodata.str1.16,"aMS",@progbits,1
	.p2align	4
.Lstr.35:
	.asciz	"Filling input file"
	.size	.Lstr.35, 19

	.type	.L.str.5,@object        # @.str.5
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.5:
	.asciz	"Can't open file %s: %s\n"
	.size	.L.str.5, 24

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"Error reading from %s: %s\n"
	.size	.L.str.6, 27

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"Duplicating %d bytes\n"
	.size	.L.str.7, 22

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"spec_read: %d, %p, %d = "
	.size	.L.str.8, 25

	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"spec_read: fd=%d, > MAX_SPEC_FD!\n"
	.size	.L.str.9, 34

	.type	.Lstr.39,@object        # @str.39
.Lstr.39:
	.asciz	"EOF"
	.size	.Lstr.39, 4

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"%d\n"
	.size	.L.str.11, 4

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"spec_fread: %p, (%d x %d) fd %d ="
	.size	.L.str.12, 34

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"spec_fread: fd=%d, > MAX_SPEC_FD!\n"
	.size	.L.str.13, 35

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"spec_getc: %d = "
	.size	.L.str.14, 17

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"spec_ungetc: %d = "
	.size	.L.str.15, 19

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"spec_ungetc: pos %d <= 0\n"
	.size	.L.str.16, 26

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"spec_ungetc: can't unget something that wasn't what was in the buffer!\n"
	.size	.L.str.17, 72

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"spec_write: %d, %p, %d = "
	.size	.L.str.18, 26

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"spec_write: fd=%d, > MAX_SPEC_FD!\n"
	.size	.L.str.19, 35

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"spec_fwrite: %p, %d, %d, %d = "
	.size	.L.str.20, 31

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"spec_fwrite: fd=%d, > MAX_SPEC_FD!\n"
	.size	.L.str.21, 36

	.type	.L.str.22,@object       # @.str.22
.L.str.22:
	.asciz	"spec_putc: %d, %d = "
	.size	.L.str.22, 21

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"input.combined"
	.size	.L.str.23, 15

	.type	.Lstr.43,@object        # @str.43
	.section	.rodata.str1.16,"aMS",@progbits,1
	.p2align	4
.Lstr.43:
	.asciz	"Loading Input Data"
	.size	.Lstr.43, 19

	.type	.L.str.25,@object       # @.str.25
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.25:
	.asciz	"Input data %d bytes in length\n"
	.size	.L.str.25, 31

	.type	.Lstr.42,@object        # @str.42
	.section	.rodata.str1.16,"aMS",@progbits,1
	.p2align	4
.Lstr.42:
	.asciz	"main: Error mallocing memory!"
	.size	.Lstr.42, 30

	.type	.L.str.27,@object       # @.str.27
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.27:
	.asciz	"Compressing Input Data, level %d\n"
	.size	.L.str.27, 34

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"Compressed data %d bytes in length\n"
	.size	.L.str.28, 36

	.type	.Lstr.41,@object        # @str.41
	.section	.rodata.str1.16,"aMS",@progbits,1
	.p2align	4
.Lstr.41:
	.asciz	"Uncompressing Data"
	.size	.Lstr.41, 19

	.type	.L.str.30,@object       # @.str.30
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.30:
	.asciz	"Uncompressed data %d bytes in length\n"
	.size	.L.str.30, 38

	.type	.Lstr.40,@object        # @str.40
	.section	.rodata.str1.16,"aMS",@progbits,1
	.p2align	4
.Lstr.40:
	.asciz	"Uncompressed data compared correctly"
	.size	.Lstr.40, 37

	.type	.L.str.31,@object       # @.str.31
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.31:
	.asciz	"Tested %dMB buffer: Miscompared!!\n"
	.size	.L.str.31, 35

	.type	.L.str.33,@object       # @.str.33
.L.str.33:
	.asciz	"Tested %dMB buffer: OK!\n"
	.size	.L.str.33, 25

	.type	.L.str.6.1,@object      # @.str.6.1
.L.str.6.1:
	.asciz	"        main sort initialise ...\n"
	.size	.L.str.6.1, 34

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"        bucket sorting ...\n"
	.size	.L.str.2, 28

	.type	.L.str.7.2,@object      # @.str.7.2
.L.str.7.2:
	.asciz	"        qsort [0x%x, 0x%x]   done %d   this %d\n"
	.size	.L.str.7.2, 48

	.type	incs,@object            # @incs
	.section	.rodata,"a",@progbits
	.p2align	4
incs:
	.long	1                       # 0x1
	.long	4                       # 0x4
	.long	13                      # 0xd
	.long	40                      # 0x28
	.long	121                     # 0x79
	.long	364                     # 0x16c
	.long	1093                    # 0x445
	.long	3280                    # 0xcd0
	.long	9841                    # 0x2671
	.long	29524                   # 0x7354
	.long	88573                   # 0x159fd
	.long	265720                  # 0x40df8
	.long	797161                  # 0xc29e9
	.long	2391484                 # 0x247dbc
	.size	incs, 56

	.type	.L.str.8.3,@object      # @.str.8.3
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.8.3:
	.asciz	"        %d pointers, %d sorted, %d scanned\n"
	.size	.L.str.8.3, 44

	.type	.L.str,@object          # @.str
.L.str:
	.asciz	"      %d work, %d block, ratio %5.2f\n"
	.size	.L.str, 38

	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"    too repetitive; using fallback sorting algorithm\n"
	.size	.L.str.1, 54

	.type	.L.str.3.4,@object      # @.str.3.4
.L.str.3.4:
	.asciz	"        depth %6d has "
	.size	.L.str.3.4, 23

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"%6d unresolved strings\n"
	.size	.L.str.4, 24

	.type	.L.str.5.5,@object      # @.str.5.5
.L.str.5.5:
	.asciz	"        reconstructing block ...\n"
	.size	.L.str.5.5, 34

	.type	blockSize100k,@object   # @blockSize100k
	.comm	blockSize100k,4,4
	.type	verbosity,@object       # @verbosity
	.comm	verbosity,4,4
	.type	workFactor,@object      # @workFactor
	.comm	workFactor,4,4
	.type	outputHandleJustInCase,@object # @outputHandleJustInCase
	.comm	outputHandleJustInCase,4,4
	.type	smallMode,@object       # @smallMode
	.comm	smallMode,1,1
	.type	forceOverwrite,@object  # @forceOverwrite
	.comm	forceOverwrite,1,1
	.type	noisy,@object           # @noisy
	.comm	noisy,1,1
	.type	progName,@object        # @progName
	.comm	progName,8,8
	.type	inName,@object          # @inName
	.comm	inName,1034,16
	.type	keepInputFiles,@object  # @keepInputFiles
	.comm	keepInputFiles,1,1
	.type	deleteOutputOnInterrupt,@object # @deleteOutputOnInterrupt
	.comm	deleteOutputOnInterrupt,1,1
	.type	testFailsExist,@object  # @testFailsExist
	.comm	testFailsExist,1,1
	.type	unzFailsExist,@object   # @unzFailsExist
	.comm	unzFailsExist,1,1
	.type	numFileNames,@object    # @numFileNames
	.comm	numFileNames,4,4
	.type	numFilesProcessed,@object # @numFilesProcessed
	.comm	numFilesProcessed,4,4
	.type	exitValue,@object       # @exitValue
	.comm	exitValue,4,4
	.type	opMode,@object          # @opMode
	.comm	opMode,4,4
	.type	srcMode,@object         # @srcMode
	.comm	srcMode,4,4
	.type	longestFileName,@object # @longestFileName
	.comm	longestFileName,4,4
	.type	outName,@object         # @outName
	.comm	outName,1034,16
	.type	tmpName,@object         # @tmpName
	.comm	tmpName,1034,16
	.type	progNameReally,@object  # @progNameReally
	.comm	progNameReally,1034,16
	.type	.L.str.1.16,@object     # @.str.1.16
.L.str.1.16:
	.asciz	" no data compressed.\n"
	.size	.L.str.1.16, 22

	.type	.L.str.2.17,@object     # @.str.2.17
.L.str.2.17:
	.asciz	"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\n"
	.size	.L.str.2.17, 57

	.type	.L.str.3.18,@object     # @.str.3.18
.L.str.3.18:
	.asciz	"compress:unexpected error"
	.size	.L.str.3.18, 26

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"\n%s: PANIC -- internal consistency error:\n\t%s\n\tThis is probably a BUG, but it may be in your COMPILER.  Please do not bother\n\tthe original author.\n"
	.size	.L.str.10, 148

	.type	.L.str.11.19,@object    # @.str.11.19
.L.str.11.19:
	.asciz	"\tInput file = %s, output file = %s\n"
	.size	.L.str.11.19, 36

	.type	.L.str.15.20,@object    # @.str.15.20
.L.str.15.20:
	.asciz	"\n%s: I/O or other error, bailing out.  Possible reason follows.\n"
	.size	.L.str.15.20, 65

	.type	.L.str.16.21,@object    # @.str.16.21
.L.str.16.21:
	.asciz	"\n%s: couldn't allocate enough memory\n"
	.size	.L.str.16.21, 38

	.type	.L.str.17.22,@object    # @.str.17.22
.L.str.17.22:
	.asciz	"bzip2: I'm not configured correctly for this platform!\n\tI require Int32, Int16 and Char to have sizes\n\tof 4, 2 and 1 bytes to run properly, and they don't.\n\tProbably you can fix this by defining them correctly,\n\tand recompiling.  Bye!\n"
	.size	.L.str.17.22, 236

	.type	.L.str.5.25,@object     # @.str.5.25
.L.str.5.25:
	.asciz	"decompress:bzReadGetUnused"
	.size	.L.str.5.25, 27

	.type	.L.str.6.26,@object     # @.str.6.26
.L.str.6.26:
	.asciz	"\n    "
	.size	.L.str.6.26, 6

	.type	.L.str.7.27,@object     # @.str.7.27
.L.str.7.27:
	.asciz	"\n%s: %s: trailing garbage after EOF ignored\n"
	.size	.L.str.7.27, 45

	.type	.L.str.8.28,@object     # @.str.8.28
.L.str.8.28:
	.asciz	"decompress:unexpected error"
	.size	.L.str.8.28, 28

	.type	.L.str.14.29,@object    # @.str.14.29
.L.str.14.29:
	.asciz	"\n%s: Compressed file ends unexpectedly;\n\tperhaps it is corrupted?  *Possible* reason follows.\n"
	.size	.L.str.14.29, 95

	.type	.L.str.13.30,@object    # @.str.13.30
.L.str.13.30:
	.asciz	"\nIt is possible that the compressed file(s) have become corrupted.\nYou can use the -tvv option to test integrity of such files.\n\nYou can use the `bzip2recover' program to attempt to recover\ndata from undamaged sections of corrupted files.\n\n"
	.size	.L.str.13.30, 241

	.type	.L.str.12.31,@object    # @.str.12.31
.L.str.12.31:
	.asciz	"\n%s: Data integrity error when decompressing.\n"
	.size	.L.str.12.31, 47

	.type	.L.str.34,@object       # @.str.34
.L.str.34:
	.asciz	"\n\nbzip2/libbzip2: internal error number %d.\nThis may be a bug in bzip2/libbzip2, %s.\nIt may also be a bug in your compiler.  Please do not bother the\noriginal author of bzip2 with a bug report for this.  He\ndoesn't know anything about bzip2 as it appears in CPU2006.\n\n"
	.size	.L.str.34, 269

	.type	.L.str.5.35,@object     # @.str.5.35
.L.str.5.35:
	.asciz	"1.0.3, 15-Feb-2005"
	.size	.L.str.5.35, 19

	.type	.L.str.1.36,@object     # @.str.1.36
.L.str.1.36:
	.asciz	"\n*** A special note about internal error number 1007 ***\n\nExperience suggests that a common cause of i.e. 1007\nis unreliable memory or other hardware.  The 1007 assertion\njust happens to cross-check the results of huge numbers of\nmemory reads/writes, and so acts (unintendedly) as a stress\ntest of your memory system.\n\nI suggest the following: try compressing the file again,\npossibly monitoring progress in detail with the -vv flag.\n\n* If the error cannot be reproduced, and/or happens at different\n  points in compression, you may have a flaky memory system.\n  Try a memory-test program.  I have used Memtest86\n  (www.memtest86.com).  At the time of writing it is free (GPLd).\n  Memtest86 tests memory much more thorougly than your BIOSs\n  power-on test, and may find failures that the BIOS doesn't.\n\n* If the error can be repeatably reproduced, this is a bug in\n  bzip2, and I would very much like to hear about it.  Please\n  let me know, and, ideally, save a copy of the file causing the\n  problem -- without which I will be unable to investigate it.\n\n"
	.size	.L.str.1.36, 1057

	.type	.L.str.2.37,@object     # @.str.2.37
.L.str.2.37:
	.asciz	" {0x%08x, 0x%08x}"
	.size	.L.str.2.37, 18

	.type	.L.str.4.38,@object     # @.str.4.38
.L.str.4.38:
	.asciz	"\n    combined CRCs: stored = 0x%08x, computed = 0x%08x"
	.size	.L.str.4.38, 55

	.type	bzerrorstrings,@object  # @bzerrorstrings
	.section	.rodata,"a",@progbits
	.p2align	4
bzerrorstrings:
	.quad	.L.str.10.53
	.quad	.L.str.11.54
	.quad	.L.str.12.55
	.quad	.L.str.13.56
	.quad	.L.str.14.57
	.quad	.L.str.15.58
	.quad	.L.str.16.59
	.quad	.L.str.17.60
	.quad	.L.str.18.61
	.quad	.L.str.19.62
	.quad	.L.str.20.63
	.quad	.L.str.20.63
	.quad	.L.str.20.63
	.quad	.L.str.20.63
	.quad	.L.str.20.63
	.quad	.L.str.20.63
	.size	bzerrorstrings, 128

	.type	.L.str.10.53,@object    # @.str.10.53
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.10.53:
	.asciz	"OK"
	.size	.L.str.10.53, 3

	.type	.L.str.11.54,@object    # @.str.11.54
.L.str.11.54:
	.asciz	"SEQUENCE_ERROR"
	.size	.L.str.11.54, 15

	.type	.L.str.12.55,@object    # @.str.12.55
.L.str.12.55:
	.asciz	"PARAM_ERROR"
	.size	.L.str.12.55, 12

	.type	.L.str.13.56,@object    # @.str.13.56
.L.str.13.56:
	.asciz	"MEM_ERROR"
	.size	.L.str.13.56, 10

	.type	.L.str.14.57,@object    # @.str.14.57
.L.str.14.57:
	.asciz	"DATA_ERROR"
	.size	.L.str.14.57, 11

	.type	.L.str.15.58,@object    # @.str.15.58
.L.str.15.58:
	.asciz	"DATA_ERROR_MAGIC"
	.size	.L.str.15.58, 17

	.type	.L.str.16.59,@object    # @.str.16.59
.L.str.16.59:
	.asciz	"IO_ERROR"
	.size	.L.str.16.59, 9

	.type	.L.str.17.60,@object    # @.str.17.60
.L.str.17.60:
	.asciz	"UNEXPECTED_EOF"
	.size	.L.str.17.60, 15

	.type	.L.str.18.61,@object    # @.str.18.61
.L.str.18.61:
	.asciz	"OUTBUFF_FULL"
	.size	.L.str.18.61, 13

	.type	.L.str.19.62,@object    # @.str.19.62
.L.str.19.62:
	.asciz	"CONFIG_ERROR"
	.size	.L.str.19.62, 13

	.type	.L.str.20.63,@object    # @.str.20.63
.L.str.20.63:
	.asciz	"???"
	.size	.L.str.20.63, 4

	.type	.L.str.66,@object       # @.str.66
.L.str.66:
	.asciz	"    block %d: crc = 0x%08x, combined CRC = 0x%08x, size = %d\n"
	.size	.L.str.66, 62

	.type	.L.str.1.67,@object     # @.str.1.67
.L.str.1.67:
	.asciz	"    final combined CRC = 0x%08x\n   "
	.size	.L.str.1.67, 36

	.type	.L.str.2.68,@object     # @.str.2.68
.L.str.2.68:
	.asciz	"      %d in block, %d after MTF & 1-2 coding, %d+2 syms in use\n"
	.size	.L.str.2.68, 64

	.type	.L.str.3.69,@object     # @.str.3.69
.L.str.3.69:
	.asciz	"      initial group %d, [%d .. %d], has %d syms (%4.1f%%)\n"
	.size	.L.str.3.69, 59

	.type	.L.str.4.70,@object     # @.str.4.70
.L.str.4.70:
	.asciz	"      pass %d: size is %d, grp uses are "
	.size	.L.str.4.70, 41

	.type	.L.str.5.71,@object     # @.str.5.71
.L.str.5.71:
	.asciz	"%d "
	.size	.L.str.5.71, 4

	.type	.L.str.7.72,@object     # @.str.7.72
.L.str.7.72:
	.asciz	"      bytes: mapping %d, "
	.size	.L.str.7.72, 26

	.type	.L.str.8.73,@object     # @.str.8.73
.L.str.8.73:
	.asciz	"selectors %d, "
	.size	.L.str.8.73, 15

	.type	.L.str.9.74,@object     # @.str.9.74
.L.str.9.74:
	.asciz	"code lengths %d, "
	.size	.L.str.9.74, 18

	.type	.L.str.10.75,@object    # @.str.10.75
.L.str.10.75:
	.asciz	"codes %d\n"
	.size	.L.str.10.75, 10

	.type	BZ2_crc32Table,@object  # @BZ2_crc32Table
	.data
	.globl	BZ2_crc32Table
	.p2align	4
BZ2_crc32Table:
	.long	0                       # 0x0
	.long	79764919                # 0x4c11db7
	.long	159529838               # 0x9823b6e
	.long	222504665               # 0xd4326d9
	.long	319059676               # 0x130476dc
	.long	398814059               # 0x17c56b6b
	.long	445009330               # 0x1a864db2
	.long	507990021               # 0x1e475005
	.long	638119352               # 0x2608edb8
	.long	583659535               # 0x22c9f00f
	.long	797628118               # 0x2f8ad6d6
	.long	726387553               # 0x2b4bcb61
	.long	890018660               # 0x350c9b64
	.long	835552979               # 0x31cd86d3
	.long	1015980042              # 0x3c8ea00a
	.long	944750013               # 0x384fbdbd
	.long	1276238704              # 0x4c11db70
	.long	1221641927              # 0x48d0c6c7
	.long	1167319070              # 0x4593e01e
	.long	1095957929              # 0x4152fda9
	.long	1595256236              # 0x5f15adac
	.long	1540665371              # 0x5bd4b01b
	.long	1452775106              # 0x569796c2
	.long	1381403509              # 0x52568b75
	.long	1780037320              # 0x6a1936c8
	.long	1859660671              # 0x6ed82b7f
	.long	1671105958              # 0x639b0da6
	.long	1733955601              # 0x675a1011
	.long	2031960084              # 0x791d4014
	.long	2111593891              # 0x7ddc5da3
	.long	1889500026              # 0x709f7b7a
	.long	1952343757              # 0x745e66cd
	.long	2552477408              # 0x9823b6e0
	.long	2632100695              # 0x9ce2ab57
	.long	2443283854              # 0x91a18d8e
	.long	2506133561              # 0x95609039
	.long	2334638140              # 0x8b27c03c
	.long	2414271883              # 0x8fe6dd8b
	.long	2191915858              # 0x82a5fb52
	.long	2254759653              # 0x8664e6e5
	.long	3190512472              # 0xbe2b5b58
	.long	3135915759              # 0xbaea46ef
	.long	3081330742              # 0xb7a96036
	.long	3009969537              # 0xb3687d81
	.long	2905550212              # 0xad2f2d84
	.long	2850959411              # 0xa9ee3033
	.long	2762807018              # 0xa4ad16ea
	.long	2691435357              # 0xa06c0b5d
	.long	3560074640              # 0xd4326d90
	.long	3505614887              # 0xd0f37027
	.long	3719321342              # 0xddb056fe
	.long	3648080713              # 0xd9714b49
	.long	3342211916              # 0xc7361b4c
	.long	3287746299              # 0xc3f706fb
	.long	3467911202              # 0xceb42022
	.long	3396681109              # 0xca753d95
	.long	4063920168              # 0xf23a8028
	.long	4143685023              # 0xf6fb9d9f
	.long	4223187782              # 0xfbb8bb46
	.long	4286162673              # 0xff79a6f1
	.long	3779000052              # 0xe13ef6f4
	.long	3858754371              # 0xe5ffeb43
	.long	3904687514              # 0xe8bccd9a
	.long	3967668269              # 0xec7dd02d
	.long	881225847               # 0x34867077
	.long	809987520               # 0x30476dc0
	.long	1023691545              # 0x3d044b19
	.long	969234094               # 0x39c556ae
	.long	662832811               # 0x278206ab
	.long	591600412               # 0x23431b1c
	.long	771767749               # 0x2e003dc5
	.long	717299826               # 0x2ac12072
	.long	311336399               # 0x128e9dcf
	.long	374308984               # 0x164f8078
	.long	453813921               # 0x1b0ca6a1
	.long	533576470               # 0x1fcdbb16
	.long	25881363                # 0x18aeb13
	.long	88864420                # 0x54bf6a4
	.long	134795389               # 0x808d07d
	.long	214552010               # 0xcc9cdca
	.long	2023205639              # 0x7897ab07
	.long	2086057648              # 0x7c56b6b0
	.long	1897238633              # 0x71159069
	.long	1976864222              # 0x75d48dde
	.long	1804852699              # 0x6b93dddb
	.long	1867694188              # 0x6f52c06c
	.long	1645340341              # 0x6211e6b5
	.long	1724971778              # 0x66d0fb02
	.long	1587496639              # 0x5e9f46bf
	.long	1516133128              # 0x5a5e5b08
	.long	1461550545              # 0x571d7dd1
	.long	1406951526              # 0x53dc6066
	.long	1302016099              # 0x4d9b3063
	.long	1230646740              # 0x495a2dd4
	.long	1142491917              # 0x44190b0d
	.long	1087903418              # 0x40d816ba
	.long	2896545431              # 0xaca5c697
	.long	2825181984              # 0xa864db20
	.long	2770861561              # 0xa527fdf9
	.long	2716262478              # 0xa1e6e04e
	.long	3215044683              # 0xbfa1b04b
	.long	3143675388              # 0xbb60adfc
	.long	3055782693              # 0xb6238b25
	.long	3001194130              # 0xb2e29692
	.long	2326604591              # 0x8aad2b2f
	.long	2389456536              # 0x8e6c3698
	.long	2200899649              # 0x832f1041
	.long	2280525302              # 0x87ee0df6
	.long	2578013683              # 0x99a95df3
	.long	2640855108              # 0x9d684044
	.long	2418763421              # 0x902b669d
	.long	2498394922              # 0x94ea7b2a
	.long	3769900519              # 0xe0b41de7
	.long	3832873040              # 0xe4750050
	.long	3912640137              # 0xe9362689
	.long	3992402750              # 0xedf73b3e
	.long	4088425275              # 0xf3b06b3b
	.long	4151408268              # 0xf771768c
	.long	4197601365              # 0xfa325055
	.long	4277358050              # 0xfef34de2
	.long	3334271071              # 0xc6bcf05f
	.long	3263032808              # 0xc27dede8
	.long	3476998961              # 0xcf3ecb31
	.long	3422541446              # 0xcbffd686
	.long	3585640067              # 0xd5b88683
	.long	3514407732              # 0xd1799b34
	.long	3694837229              # 0xdc3abded
	.long	3640369242              # 0xd8fba05a
	.long	1762451694              # 0x690ce0ee
	.long	1842216281              # 0x6dcdfd59
	.long	1619975040              # 0x608edb80
	.long	1682949687              # 0x644fc637
	.long	2047383090              # 0x7a089632
	.long	2127137669              # 0x7ec98b85
	.long	1938468188              # 0x738aad5c
	.long	2001449195              # 0x774bb0eb
	.long	1325665622              # 0x4f040d56
	.long	1271206113              # 0x4bc510e1
	.long	1183200824              # 0x46863638
	.long	1111960463              # 0x42472b8f
	.long	1543535498              # 0x5c007b8a
	.long	1489069629              # 0x58c1663d
	.long	1434599652              # 0x558240e4
	.long	1363369299              # 0x51435d53
	.long	622672798               # 0x251d3b9e
	.long	568075817               # 0x21dc2629
	.long	748617968               # 0x2c9f00f0
	.long	677256519               # 0x285e1d47
	.long	907627842               # 0x36194d42
	.long	853037301               # 0x32d850f5
	.long	1067152940              # 0x3f9b762c
	.long	995781531               # 0x3b5a6b9b
	.long	51762726                # 0x315d626
	.long	131386257               # 0x7d4cb91
	.long	177728840               # 0xa97ed48
	.long	240578815               # 0xe56f0ff
	.long	269590778               # 0x1011a0fa
	.long	349224269               # 0x14d0bd4d
	.long	429104020               # 0x19939b94
	.long	491947555               # 0x1d528623
	.long	4046411278              # 0xf12f560e
	.long	4126034873              # 0xf5ee4bb9
	.long	4172115296              # 0xf8ad6d60
	.long	4234965207              # 0xfc6c70d7
	.long	3794477266              # 0xe22b20d2
	.long	3874110821              # 0xe6ea3d65
	.long	3953728444              # 0xeba91bbc
	.long	4016571915              # 0xef68060b
	.long	3609705398              # 0xd727bbb6
	.long	3555108353              # 0xd3e6a601
	.long	3735388376              # 0xdea580d8
	.long	3664026991              # 0xda649d6f
	.long	3290680682              # 0xc423cd6a
	.long	3236090077              # 0xc0e2d0dd
	.long	3449943556              # 0xcda1f604
	.long	3378572211              # 0xc960ebb3
	.long	3174993278              # 0xbd3e8d7e
	.long	3120533705              # 0xb9ff90c9
	.long	3032266256              # 0xb4bcb610
	.long	2961025959              # 0xb07daba7
	.long	2923101090              # 0xae3afba2
	.long	2868635157              # 0xaafbe615
	.long	2813903052              # 0xa7b8c0cc
	.long	2742672763              # 0xa379dd7b
	.long	2604032198              # 0x9b3660c6
	.long	2683796849              # 0x9ff77d71
	.long	2461293480              # 0x92b45ba8
	.long	2524268063              # 0x9675461f
	.long	2284983834              # 0x8832161a
	.long	2364738477              # 0x8cf30bad
	.long	2175806836              # 0x81b02d74
	.long	2238787779              # 0x857130c3
	.long	1569362073              # 0x5d8a9099
	.long	1498123566              # 0x594b8d2e
	.long	1409854455              # 0x5408abf7
	.long	1355396672              # 0x50c9b640
	.long	1317987909              # 0x4e8ee645
	.long	1246755826              # 0x4a4ffbf2
	.long	1192025387              # 0x470cdd2b
	.long	1137557660              # 0x43cdc09c
	.long	2072149281              # 0x7b827d21
	.long	2135122070              # 0x7f436096
	.long	1912620623              # 0x7200464f
	.long	1992383480              # 0x76c15bf8
	.long	1753615357              # 0x68860bfd
	.long	1816598090              # 0x6c47164a
	.long	1627664531              # 0x61043093
	.long	1707420964              # 0x65c52d24
	.long	295390185               # 0x119b4be9
	.long	358241886               # 0x155a565e
	.long	404320391               # 0x18197087
	.long	483945776               # 0x1cd86d30
	.long	43990325                # 0x29f3d35
	.long	106832002               # 0x65e2082
	.long	186451547               # 0xb1d065b
	.long	266083308               # 0xfdc1bec
	.long	932423249               # 0x3793a651
	.long	861060070               # 0x3352bbe6
	.long	1041341759              # 0x3e119d3f
	.long	986742920               # 0x3ad08088
	.long	613929101               # 0x2497d08d
	.long	542559546               # 0x2056cd3a
	.long	756411363               # 0x2d15ebe3
	.long	701822548               # 0x29d4f654
	.long	3316196985              # 0xc5a92679
	.long	3244833742              # 0xc1683bce
	.long	3425377559              # 0xcc2b1d17
	.long	3370778784              # 0xc8ea00a0
	.long	3601682597              # 0xd6ad50a5
	.long	3530312978              # 0xd26c4d12
	.long	3744426955              # 0xdf2f6bcb
	.long	3689838204              # 0xdbee767c
	.long	3819031489              # 0xe3a1cbc1
	.long	3881883254              # 0xe760d676
	.long	3928223919              # 0xea23f0af
	.long	4007849240              # 0xeee2ed18
	.long	4037393693              # 0xf0a5bd1d
	.long	4100235434              # 0xf464a0aa
	.long	4180117107              # 0xf9278673
	.long	4259748804              # 0xfde69bc4
	.long	2310601993              # 0x89b8fd09
	.long	2373574846              # 0x8d79e0be
	.long	2151335527              # 0x803ac667
	.long	2231098320              # 0x84fbdbd0
	.long	2596047829              # 0x9abc8bd5
	.long	2659030626              # 0x9e7d9662
	.long	2470359227              # 0x933eb0bb
	.long	2550115596              # 0x97ffad0c
	.long	2947551409              # 0xafb010b1
	.long	2876312838              # 0xab710d06
	.long	2788305887              # 0xa6322bdf
	.long	2733848168              # 0xa2f33668
	.long	3165939309              # 0xbcb4666d
	.long	3094707162              # 0xb8757bda
	.long	3040238851              # 0xb5365d03
	.long	2985771188              # 0xb1f740b4
	.size	BZ2_crc32Table, 1024

	.type	.L.str.80,@object       # @.str.80
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.80:
	.asciz	"\n    [%d: huff+mtf "
	.size	.L.str.80, 20

	.type	.L.str.1.81,@object     # @.str.1.81
.L.str.1.81:
	.asciz	"rt+rld"
	.size	.L.str.1.81, 7

	.type	BZ2_rNums,@object       # @BZ2_rNums
	.data
	.globl	BZ2_rNums
	.p2align	4
BZ2_rNums:
	.long	619                     # 0x26b
	.long	720                     # 0x2d0
	.long	127                     # 0x7f
	.long	481                     # 0x1e1
	.long	931                     # 0x3a3
	.long	816                     # 0x330
	.long	813                     # 0x32d
	.long	233                     # 0xe9
	.long	566                     # 0x236
	.long	247                     # 0xf7
	.long	985                     # 0x3d9
	.long	724                     # 0x2d4
	.long	205                     # 0xcd
	.long	454                     # 0x1c6
	.long	863                     # 0x35f
	.long	491                     # 0x1eb
	.long	741                     # 0x2e5
	.long	242                     # 0xf2
	.long	949                     # 0x3b5
	.long	214                     # 0xd6
	.long	733                     # 0x2dd
	.long	859                     # 0x35b
	.long	335                     # 0x14f
	.long	708                     # 0x2c4
	.long	621                     # 0x26d
	.long	574                     # 0x23e
	.long	73                      # 0x49
	.long	654                     # 0x28e
	.long	730                     # 0x2da
	.long	472                     # 0x1d8
	.long	419                     # 0x1a3
	.long	436                     # 0x1b4
	.long	278                     # 0x116
	.long	496                     # 0x1f0
	.long	867                     # 0x363
	.long	210                     # 0xd2
	.long	399                     # 0x18f
	.long	680                     # 0x2a8
	.long	480                     # 0x1e0
	.long	51                      # 0x33
	.long	878                     # 0x36e
	.long	465                     # 0x1d1
	.long	811                     # 0x32b
	.long	169                     # 0xa9
	.long	869                     # 0x365
	.long	675                     # 0x2a3
	.long	611                     # 0x263
	.long	697                     # 0x2b9
	.long	867                     # 0x363
	.long	561                     # 0x231
	.long	862                     # 0x35e
	.long	687                     # 0x2af
	.long	507                     # 0x1fb
	.long	283                     # 0x11b
	.long	482                     # 0x1e2
	.long	129                     # 0x81
	.long	807                     # 0x327
	.long	591                     # 0x24f
	.long	733                     # 0x2dd
	.long	623                     # 0x26f
	.long	150                     # 0x96
	.long	238                     # 0xee
	.long	59                      # 0x3b
	.long	379                     # 0x17b
	.long	684                     # 0x2ac
	.long	877                     # 0x36d
	.long	625                     # 0x271
	.long	169                     # 0xa9
	.long	643                     # 0x283
	.long	105                     # 0x69
	.long	170                     # 0xaa
	.long	607                     # 0x25f
	.long	520                     # 0x208
	.long	932                     # 0x3a4
	.long	727                     # 0x2d7
	.long	476                     # 0x1dc
	.long	693                     # 0x2b5
	.long	425                     # 0x1a9
	.long	174                     # 0xae
	.long	647                     # 0x287
	.long	73                      # 0x49
	.long	122                     # 0x7a
	.long	335                     # 0x14f
	.long	530                     # 0x212
	.long	442                     # 0x1ba
	.long	853                     # 0x355
	.long	695                     # 0x2b7
	.long	249                     # 0xf9
	.long	445                     # 0x1bd
	.long	515                     # 0x203
	.long	909                     # 0x38d
	.long	545                     # 0x221
	.long	703                     # 0x2bf
	.long	919                     # 0x397
	.long	874                     # 0x36a
	.long	474                     # 0x1da
	.long	882                     # 0x372
	.long	500                     # 0x1f4
	.long	594                     # 0x252
	.long	612                     # 0x264
	.long	641                     # 0x281
	.long	801                     # 0x321
	.long	220                     # 0xdc
	.long	162                     # 0xa2
	.long	819                     # 0x333
	.long	984                     # 0x3d8
	.long	589                     # 0x24d
	.long	513                     # 0x201
	.long	495                     # 0x1ef
	.long	799                     # 0x31f
	.long	161                     # 0xa1
	.long	604                     # 0x25c
	.long	958                     # 0x3be
	.long	533                     # 0x215
	.long	221                     # 0xdd
	.long	400                     # 0x190
	.long	386                     # 0x182
	.long	867                     # 0x363
	.long	600                     # 0x258
	.long	782                     # 0x30e
	.long	382                     # 0x17e
	.long	596                     # 0x254
	.long	414                     # 0x19e
	.long	171                     # 0xab
	.long	516                     # 0x204
	.long	375                     # 0x177
	.long	682                     # 0x2aa
	.long	485                     # 0x1e5
	.long	911                     # 0x38f
	.long	276                     # 0x114
	.long	98                      # 0x62
	.long	553                     # 0x229
	.long	163                     # 0xa3
	.long	354                     # 0x162
	.long	666                     # 0x29a
	.long	933                     # 0x3a5
	.long	424                     # 0x1a8
	.long	341                     # 0x155
	.long	533                     # 0x215
	.long	870                     # 0x366
	.long	227                     # 0xe3
	.long	730                     # 0x2da
	.long	475                     # 0x1db
	.long	186                     # 0xba
	.long	263                     # 0x107
	.long	647                     # 0x287
	.long	537                     # 0x219
	.long	686                     # 0x2ae
	.long	600                     # 0x258
	.long	224                     # 0xe0
	.long	469                     # 0x1d5
	.long	68                      # 0x44
	.long	770                     # 0x302
	.long	919                     # 0x397
	.long	190                     # 0xbe
	.long	373                     # 0x175
	.long	294                     # 0x126
	.long	822                     # 0x336
	.long	808                     # 0x328
	.long	206                     # 0xce
	.long	184                     # 0xb8
	.long	943                     # 0x3af
	.long	795                     # 0x31b
	.long	384                     # 0x180
	.long	383                     # 0x17f
	.long	461                     # 0x1cd
	.long	404                     # 0x194
	.long	758                     # 0x2f6
	.long	839                     # 0x347
	.long	887                     # 0x377
	.long	715                     # 0x2cb
	.long	67                      # 0x43
	.long	618                     # 0x26a
	.long	276                     # 0x114
	.long	204                     # 0xcc
	.long	918                     # 0x396
	.long	873                     # 0x369
	.long	777                     # 0x309
	.long	604                     # 0x25c
	.long	560                     # 0x230
	.long	951                     # 0x3b7
	.long	160                     # 0xa0
	.long	578                     # 0x242
	.long	722                     # 0x2d2
	.long	79                      # 0x4f
	.long	804                     # 0x324
	.long	96                      # 0x60
	.long	409                     # 0x199
	.long	713                     # 0x2c9
	.long	940                     # 0x3ac
	.long	652                     # 0x28c
	.long	934                     # 0x3a6
	.long	970                     # 0x3ca
	.long	447                     # 0x1bf
	.long	318                     # 0x13e
	.long	353                     # 0x161
	.long	859                     # 0x35b
	.long	672                     # 0x2a0
	.long	112                     # 0x70
	.long	785                     # 0x311
	.long	645                     # 0x285
	.long	863                     # 0x35f
	.long	803                     # 0x323
	.long	350                     # 0x15e
	.long	139                     # 0x8b
	.long	93                      # 0x5d
	.long	354                     # 0x162
	.long	99                      # 0x63
	.long	820                     # 0x334
	.long	908                     # 0x38c
	.long	609                     # 0x261
	.long	772                     # 0x304
	.long	154                     # 0x9a
	.long	274                     # 0x112
	.long	580                     # 0x244
	.long	184                     # 0xb8
	.long	79                      # 0x4f
	.long	626                     # 0x272
	.long	630                     # 0x276
	.long	742                     # 0x2e6
	.long	653                     # 0x28d
	.long	282                     # 0x11a
	.long	762                     # 0x2fa
	.long	623                     # 0x26f
	.long	680                     # 0x2a8
	.long	81                      # 0x51
	.long	927                     # 0x39f
	.long	626                     # 0x272
	.long	789                     # 0x315
	.long	125                     # 0x7d
	.long	411                     # 0x19b
	.long	521                     # 0x209
	.long	938                     # 0x3aa
	.long	300                     # 0x12c
	.long	821                     # 0x335
	.long	78                      # 0x4e
	.long	343                     # 0x157
	.long	175                     # 0xaf
	.long	128                     # 0x80
	.long	250                     # 0xfa
	.long	170                     # 0xaa
	.long	774                     # 0x306
	.long	972                     # 0x3cc
	.long	275                     # 0x113
	.long	999                     # 0x3e7
	.long	639                     # 0x27f
	.long	495                     # 0x1ef
	.long	78                      # 0x4e
	.long	352                     # 0x160
	.long	126                     # 0x7e
	.long	857                     # 0x359
	.long	956                     # 0x3bc
	.long	358                     # 0x166
	.long	619                     # 0x26b
	.long	580                     # 0x244
	.long	124                     # 0x7c
	.long	737                     # 0x2e1
	.long	594                     # 0x252
	.long	701                     # 0x2bd
	.long	612                     # 0x264
	.long	669                     # 0x29d
	.long	112                     # 0x70
	.long	134                     # 0x86
	.long	694                     # 0x2b6
	.long	363                     # 0x16b
	.long	992                     # 0x3e0
	.long	809                     # 0x329
	.long	743                     # 0x2e7
	.long	168                     # 0xa8
	.long	974                     # 0x3ce
	.long	944                     # 0x3b0
	.long	375                     # 0x177
	.long	748                     # 0x2ec
	.long	52                      # 0x34
	.long	600                     # 0x258
	.long	747                     # 0x2eb
	.long	642                     # 0x282
	.long	182                     # 0xb6
	.long	862                     # 0x35e
	.long	81                      # 0x51
	.long	344                     # 0x158
	.long	805                     # 0x325
	.long	988                     # 0x3dc
	.long	739                     # 0x2e3
	.long	511                     # 0x1ff
	.long	655                     # 0x28f
	.long	814                     # 0x32e
	.long	334                     # 0x14e
	.long	249                     # 0xf9
	.long	515                     # 0x203
	.long	897                     # 0x381
	.long	955                     # 0x3bb
	.long	664                     # 0x298
	.long	981                     # 0x3d5
	.long	649                     # 0x289
	.long	113                     # 0x71
	.long	974                     # 0x3ce
	.long	459                     # 0x1cb
	.long	893                     # 0x37d
	.long	228                     # 0xe4
	.long	433                     # 0x1b1
	.long	837                     # 0x345
	.long	553                     # 0x229
	.long	268                     # 0x10c
	.long	926                     # 0x39e
	.long	240                     # 0xf0
	.long	102                     # 0x66
	.long	654                     # 0x28e
	.long	459                     # 0x1cb
	.long	51                      # 0x33
	.long	686                     # 0x2ae
	.long	754                     # 0x2f2
	.long	806                     # 0x326
	.long	760                     # 0x2f8
	.long	493                     # 0x1ed
	.long	403                     # 0x193
	.long	415                     # 0x19f
	.long	394                     # 0x18a
	.long	687                     # 0x2af
	.long	700                     # 0x2bc
	.long	946                     # 0x3b2
	.long	670                     # 0x29e
	.long	656                     # 0x290
	.long	610                     # 0x262
	.long	738                     # 0x2e2
	.long	392                     # 0x188
	.long	760                     # 0x2f8
	.long	799                     # 0x31f
	.long	887                     # 0x377
	.long	653                     # 0x28d
	.long	978                     # 0x3d2
	.long	321                     # 0x141
	.long	576                     # 0x240
	.long	617                     # 0x269
	.long	626                     # 0x272
	.long	502                     # 0x1f6
	.long	894                     # 0x37e
	.long	679                     # 0x2a7
	.long	243                     # 0xf3
	.long	440                     # 0x1b8
	.long	680                     # 0x2a8
	.long	879                     # 0x36f
	.long	194                     # 0xc2
	.long	572                     # 0x23c
	.long	640                     # 0x280
	.long	724                     # 0x2d4
	.long	926                     # 0x39e
	.long	56                      # 0x38
	.long	204                     # 0xcc
	.long	700                     # 0x2bc
	.long	707                     # 0x2c3
	.long	151                     # 0x97
	.long	457                     # 0x1c9
	.long	449                     # 0x1c1
	.long	797                     # 0x31d
	.long	195                     # 0xc3
	.long	791                     # 0x317
	.long	558                     # 0x22e
	.long	945                     # 0x3b1
	.long	679                     # 0x2a7
	.long	297                     # 0x129
	.long	59                      # 0x3b
	.long	87                      # 0x57
	.long	824                     # 0x338
	.long	713                     # 0x2c9
	.long	663                     # 0x297
	.long	412                     # 0x19c
	.long	693                     # 0x2b5
	.long	342                     # 0x156
	.long	606                     # 0x25e
	.long	134                     # 0x86
	.long	108                     # 0x6c
	.long	571                     # 0x23b
	.long	364                     # 0x16c
	.long	631                     # 0x277
	.long	212                     # 0xd4
	.long	174                     # 0xae
	.long	643                     # 0x283
	.long	304                     # 0x130
	.long	329                     # 0x149
	.long	343                     # 0x157
	.long	97                      # 0x61
	.long	430                     # 0x1ae
	.long	751                     # 0x2ef
	.long	497                     # 0x1f1
	.long	314                     # 0x13a
	.long	983                     # 0x3d7
	.long	374                     # 0x176
	.long	822                     # 0x336
	.long	928                     # 0x3a0
	.long	140                     # 0x8c
	.long	206                     # 0xce
	.long	73                      # 0x49
	.long	263                     # 0x107
	.long	980                     # 0x3d4
	.long	736                     # 0x2e0
	.long	876                     # 0x36c
	.long	478                     # 0x1de
	.long	430                     # 0x1ae
	.long	305                     # 0x131
	.long	170                     # 0xaa
	.long	514                     # 0x202
	.long	364                     # 0x16c
	.long	692                     # 0x2b4
	.long	829                     # 0x33d
	.long	82                      # 0x52
	.long	855                     # 0x357
	.long	953                     # 0x3b9
	.long	676                     # 0x2a4
	.long	246                     # 0xf6
	.long	369                     # 0x171
	.long	970                     # 0x3ca
	.long	294                     # 0x126
	.long	750                     # 0x2ee
	.long	807                     # 0x327
	.long	827                     # 0x33b
	.long	150                     # 0x96
	.long	790                     # 0x316
	.long	288                     # 0x120
	.long	923                     # 0x39b
	.long	804                     # 0x324
	.long	378                     # 0x17a
	.long	215                     # 0xd7
	.long	828                     # 0x33c
	.long	592                     # 0x250
	.long	281                     # 0x119
	.long	565                     # 0x235
	.long	555                     # 0x22b
	.long	710                     # 0x2c6
	.long	82                      # 0x52
	.long	896                     # 0x380
	.long	831                     # 0x33f
	.long	547                     # 0x223
	.long	261                     # 0x105
	.long	524                     # 0x20c
	.long	462                     # 0x1ce
	.long	293                     # 0x125
	.long	465                     # 0x1d1
	.long	502                     # 0x1f6
	.long	56                      # 0x38
	.long	661                     # 0x295
	.long	821                     # 0x335
	.long	976                     # 0x3d0
	.long	991                     # 0x3df
	.long	658                     # 0x292
	.long	869                     # 0x365
	.long	905                     # 0x389
	.long	758                     # 0x2f6
	.long	745                     # 0x2e9
	.long	193                     # 0xc1
	.long	768                     # 0x300
	.long	550                     # 0x226
	.long	608                     # 0x260
	.long	933                     # 0x3a5
	.long	378                     # 0x17a
	.long	286                     # 0x11e
	.long	215                     # 0xd7
	.long	979                     # 0x3d3
	.long	792                     # 0x318
	.long	961                     # 0x3c1
	.long	61                      # 0x3d
	.long	688                     # 0x2b0
	.long	793                     # 0x319
	.long	644                     # 0x284
	.long	986                     # 0x3da
	.long	403                     # 0x193
	.long	106                     # 0x6a
	.long	366                     # 0x16e
	.long	905                     # 0x389
	.long	644                     # 0x284
	.long	372                     # 0x174
	.long	567                     # 0x237
	.long	466                     # 0x1d2
	.long	434                     # 0x1b2
	.long	645                     # 0x285
	.long	210                     # 0xd2
	.long	389                     # 0x185
	.long	550                     # 0x226
	.long	919                     # 0x397
	.long	135                     # 0x87
	.long	780                     # 0x30c
	.long	773                     # 0x305
	.long	635                     # 0x27b
	.long	389                     # 0x185
	.long	707                     # 0x2c3
	.long	100                     # 0x64
	.long	626                     # 0x272
	.long	958                     # 0x3be
	.long	165                     # 0xa5
	.long	504                     # 0x1f8
	.long	920                     # 0x398
	.long	176                     # 0xb0
	.long	193                     # 0xc1
	.long	713                     # 0x2c9
	.long	857                     # 0x359
	.long	265                     # 0x109
	.long	203                     # 0xcb
	.long	50                      # 0x32
	.long	668                     # 0x29c
	.long	108                     # 0x6c
	.long	645                     # 0x285
	.long	990                     # 0x3de
	.long	626                     # 0x272
	.long	197                     # 0xc5
	.long	510                     # 0x1fe
	.long	357                     # 0x165
	.long	358                     # 0x166
	.long	850                     # 0x352
	.long	858                     # 0x35a
	.long	364                     # 0x16c
	.long	936                     # 0x3a8
	.long	638                     # 0x27e
	.size	BZ2_rNums, 2048


	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.section	".note.GNU-stack","",@progbits
